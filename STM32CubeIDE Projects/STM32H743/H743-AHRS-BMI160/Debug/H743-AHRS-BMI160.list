
H743-AHRS-BMI160.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011428  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  080116c8  080116c8  000216c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080120e0  080120e0  000220e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080120e8  080120e8  000220e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080120ec  080120ec  000220ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  24000000  080120f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000598  24000208  080122f4  00030208  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  240007a0  080122f4  000307a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d51f  00000000  00000000  00030232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003772  00000000  00000000  0004d751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001448  00000000  00000000  00050ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012b0  00000000  00000000  00052310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a00f  00000000  00000000  000535c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001be51  00000000  00000000  0008d5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160170  00000000  00000000  000a9420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00209590  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006894  00000000  00000000  002095e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080116b0 	.word	0x080116b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	080116b0 	.word	0x080116b0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b974 	b.w	8000c24 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f806 	bl	8000954 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__udivmoddi4>:
 8000954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000958:	9d08      	ldr	r5, [sp, #32]
 800095a:	4604      	mov	r4, r0
 800095c:	468e      	mov	lr, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	d14d      	bne.n	80009fe <__udivmoddi4+0xaa>
 8000962:	428a      	cmp	r2, r1
 8000964:	4694      	mov	ip, r2
 8000966:	d969      	bls.n	8000a3c <__udivmoddi4+0xe8>
 8000968:	fab2 f282 	clz	r2, r2
 800096c:	b152      	cbz	r2, 8000984 <__udivmoddi4+0x30>
 800096e:	fa01 f302 	lsl.w	r3, r1, r2
 8000972:	f1c2 0120 	rsb	r1, r2, #32
 8000976:	fa20 f101 	lsr.w	r1, r0, r1
 800097a:	fa0c fc02 	lsl.w	ip, ip, r2
 800097e:	ea41 0e03 	orr.w	lr, r1, r3
 8000982:	4094      	lsls	r4, r2
 8000984:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000988:	0c21      	lsrs	r1, r4, #16
 800098a:	fbbe f6f8 	udiv	r6, lr, r8
 800098e:	fa1f f78c 	uxth.w	r7, ip
 8000992:	fb08 e316 	mls	r3, r8, r6, lr
 8000996:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800099a:	fb06 f107 	mul.w	r1, r6, r7
 800099e:	4299      	cmp	r1, r3
 80009a0:	d90a      	bls.n	80009b8 <__udivmoddi4+0x64>
 80009a2:	eb1c 0303 	adds.w	r3, ip, r3
 80009a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009aa:	f080 811f 	bcs.w	8000bec <__udivmoddi4+0x298>
 80009ae:	4299      	cmp	r1, r3
 80009b0:	f240 811c 	bls.w	8000bec <__udivmoddi4+0x298>
 80009b4:	3e02      	subs	r6, #2
 80009b6:	4463      	add	r3, ip
 80009b8:	1a5b      	subs	r3, r3, r1
 80009ba:	b2a4      	uxth	r4, r4
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c8:	fb00 f707 	mul.w	r7, r0, r7
 80009cc:	42a7      	cmp	r7, r4
 80009ce:	d90a      	bls.n	80009e6 <__udivmoddi4+0x92>
 80009d0:	eb1c 0404 	adds.w	r4, ip, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	f080 810a 	bcs.w	8000bf0 <__udivmoddi4+0x29c>
 80009dc:	42a7      	cmp	r7, r4
 80009de:	f240 8107 	bls.w	8000bf0 <__udivmoddi4+0x29c>
 80009e2:	4464      	add	r4, ip
 80009e4:	3802      	subs	r0, #2
 80009e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ea:	1be4      	subs	r4, r4, r7
 80009ec:	2600      	movs	r6, #0
 80009ee:	b11d      	cbz	r5, 80009f8 <__udivmoddi4+0xa4>
 80009f0:	40d4      	lsrs	r4, r2
 80009f2:	2300      	movs	r3, #0
 80009f4:	e9c5 4300 	strd	r4, r3, [r5]
 80009f8:	4631      	mov	r1, r6
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fe:	428b      	cmp	r3, r1
 8000a00:	d909      	bls.n	8000a16 <__udivmoddi4+0xc2>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	f000 80ef 	beq.w	8000be6 <__udivmoddi4+0x292>
 8000a08:	2600      	movs	r6, #0
 8000a0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a0e:	4630      	mov	r0, r6
 8000a10:	4631      	mov	r1, r6
 8000a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a16:	fab3 f683 	clz	r6, r3
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d14a      	bne.n	8000ab4 <__udivmoddi4+0x160>
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d302      	bcc.n	8000a28 <__udivmoddi4+0xd4>
 8000a22:	4282      	cmp	r2, r0
 8000a24:	f200 80f9 	bhi.w	8000c1a <__udivmoddi4+0x2c6>
 8000a28:	1a84      	subs	r4, r0, r2
 8000a2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a2e:	2001      	movs	r0, #1
 8000a30:	469e      	mov	lr, r3
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d0e0      	beq.n	80009f8 <__udivmoddi4+0xa4>
 8000a36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a3a:	e7dd      	b.n	80009f8 <__udivmoddi4+0xa4>
 8000a3c:	b902      	cbnz	r2, 8000a40 <__udivmoddi4+0xec>
 8000a3e:	deff      	udf	#255	; 0xff
 8000a40:	fab2 f282 	clz	r2, r2
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	f040 8092 	bne.w	8000b6e <__udivmoddi4+0x21a>
 8000a4a:	eba1 010c 	sub.w	r1, r1, ip
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f fe8c 	uxth.w	lr, ip
 8000a56:	2601      	movs	r6, #1
 8000a58:	0c20      	lsrs	r0, r4, #16
 8000a5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a66:	fb0e f003 	mul.w	r0, lr, r3
 8000a6a:	4288      	cmp	r0, r1
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x12c>
 8000a6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a76:	d202      	bcs.n	8000a7e <__udivmoddi4+0x12a>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f200 80cb 	bhi.w	8000c14 <__udivmoddi4+0x2c0>
 8000a7e:	4643      	mov	r3, r8
 8000a80:	1a09      	subs	r1, r1, r0
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a88:	fb07 1110 	mls	r1, r7, r0, r1
 8000a8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a90:	fb0e fe00 	mul.w	lr, lr, r0
 8000a94:	45a6      	cmp	lr, r4
 8000a96:	d908      	bls.n	8000aaa <__udivmoddi4+0x156>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa0:	d202      	bcs.n	8000aa8 <__udivmoddi4+0x154>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f200 80bb 	bhi.w	8000c1e <__udivmoddi4+0x2ca>
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	eba4 040e 	sub.w	r4, r4, lr
 8000aae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ab2:	e79c      	b.n	80009ee <__udivmoddi4+0x9a>
 8000ab4:	f1c6 0720 	rsb	r7, r6, #32
 8000ab8:	40b3      	lsls	r3, r6
 8000aba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000abe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ac2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ac6:	fa01 f306 	lsl.w	r3, r1, r6
 8000aca:	431c      	orrs	r4, r3
 8000acc:	40f9      	lsrs	r1, r7
 8000ace:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ad2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ada:	0c20      	lsrs	r0, r4, #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ae4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae8:	fb08 f00e 	mul.w	r0, r8, lr
 8000aec:	4288      	cmp	r0, r1
 8000aee:	fa02 f206 	lsl.w	r2, r2, r6
 8000af2:	d90b      	bls.n	8000b0c <__udivmoddi4+0x1b8>
 8000af4:	eb1c 0101 	adds.w	r1, ip, r1
 8000af8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000afc:	f080 8088 	bcs.w	8000c10 <__udivmoddi4+0x2bc>
 8000b00:	4288      	cmp	r0, r1
 8000b02:	f240 8085 	bls.w	8000c10 <__udivmoddi4+0x2bc>
 8000b06:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0a:	4461      	add	r1, ip
 8000b0c:	1a09      	subs	r1, r1, r0
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b14:	fb09 1110 	mls	r1, r9, r0, r1
 8000b18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	458e      	cmp	lr, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x1e2>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2c:	d26c      	bcs.n	8000c08 <__udivmoddi4+0x2b4>
 8000b2e:	458e      	cmp	lr, r1
 8000b30:	d96a      	bls.n	8000c08 <__udivmoddi4+0x2b4>
 8000b32:	3802      	subs	r0, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b3e:	eba1 010e 	sub.w	r1, r1, lr
 8000b42:	42a1      	cmp	r1, r4
 8000b44:	46c8      	mov	r8, r9
 8000b46:	46a6      	mov	lr, r4
 8000b48:	d356      	bcc.n	8000bf8 <__udivmoddi4+0x2a4>
 8000b4a:	d053      	beq.n	8000bf4 <__udivmoddi4+0x2a0>
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x212>
 8000b4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b52:	eb61 010e 	sbc.w	r1, r1, lr
 8000b56:	fa01 f707 	lsl.w	r7, r1, r7
 8000b5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b5e:	40f1      	lsrs	r1, r6
 8000b60:	431f      	orrs	r7, r3
 8000b62:	e9c5 7100 	strd	r7, r1, [r5]
 8000b66:	2600      	movs	r6, #0
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	f1c2 0320 	rsb	r3, r2, #32
 8000b72:	40d8      	lsrs	r0, r3
 8000b74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b78:	fa21 f303 	lsr.w	r3, r1, r3
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	4301      	orrs	r1, r0
 8000b80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b90:	0c0b      	lsrs	r3, r1, #16
 8000b92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b96:	fb00 f60e 	mul.w	r6, r0, lr
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x260>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000baa:	d22f      	bcs.n	8000c0c <__udivmoddi4+0x2b8>
 8000bac:	429e      	cmp	r6, r3
 8000bae:	d92d      	bls.n	8000c0c <__udivmoddi4+0x2b8>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	b289      	uxth	r1, r1
 8000bb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x28a>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bd4:	d216      	bcs.n	8000c04 <__udivmoddi4+0x2b0>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d914      	bls.n	8000c04 <__udivmoddi4+0x2b0>
 8000bda:	3e02      	subs	r6, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	1ac9      	subs	r1, r1, r3
 8000be0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000be4:	e738      	b.n	8000a58 <__udivmoddi4+0x104>
 8000be6:	462e      	mov	r6, r5
 8000be8:	4628      	mov	r0, r5
 8000bea:	e705      	b.n	80009f8 <__udivmoddi4+0xa4>
 8000bec:	4606      	mov	r6, r0
 8000bee:	e6e3      	b.n	80009b8 <__udivmoddi4+0x64>
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	e6f8      	b.n	80009e6 <__udivmoddi4+0x92>
 8000bf4:	454b      	cmp	r3, r9
 8000bf6:	d2a9      	bcs.n	8000b4c <__udivmoddi4+0x1f8>
 8000bf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c00:	3801      	subs	r0, #1
 8000c02:	e7a3      	b.n	8000b4c <__udivmoddi4+0x1f8>
 8000c04:	4646      	mov	r6, r8
 8000c06:	e7ea      	b.n	8000bde <__udivmoddi4+0x28a>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	e794      	b.n	8000b36 <__udivmoddi4+0x1e2>
 8000c0c:	4640      	mov	r0, r8
 8000c0e:	e7d1      	b.n	8000bb4 <__udivmoddi4+0x260>
 8000c10:	46d0      	mov	r8, sl
 8000c12:	e77b      	b.n	8000b0c <__udivmoddi4+0x1b8>
 8000c14:	3b02      	subs	r3, #2
 8000c16:	4461      	add	r1, ip
 8000c18:	e732      	b.n	8000a80 <__udivmoddi4+0x12c>
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	e709      	b.n	8000a32 <__udivmoddi4+0xde>
 8000c1e:	4464      	add	r4, ip
 8000c20:	3802      	subs	r0, #2
 8000c22:	e742      	b.n	8000aaa <__udivmoddi4+0x156>

08000c24 <__aeabi_idiv0>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <FusionAhrsInitialise+0x74>)
 8000c46:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <FusionAhrsInitialise+0x78>)
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000c8e:	bf00      	nop
 8000c90:	372c      	adds	r7, #44	; 0x2c
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	7f7fffff 	.word	0x7f7fffff
 8000ca0:	41200000 	.word	0x41200000

08000ca4 <FusionAhrsSetMagneticField>:
 * @brief Sets the minimum and maximum valid magnetic field magnitudes in uT.
 * @param fusionAhrs AHRS algorithm structure.
 * @param minimumMagneticField Minimum valid magnetic field magnitude.
 * @param maximumMagneticField Maximum valid magnetic field magnitude.
 */
void FusionAhrsSetMagneticField(FusionAhrs * const fusionAhrs, const float minimumMagneticField, const float maximumMagneticField) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cb0:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionAhrs->minimumMagneticFieldSquared = minimumMagneticField * minimumMagneticField;
 8000cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	edc3 7a01 	vstr	s15, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = maximumMagneticField * maximumMagneticField;
 8000cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000cdc:	b490      	push	{r4, r7}
 8000cde:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ce8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000cec:	6018      	str	r0, [r3, #0]
 8000cee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000cf2:	f5a3 6181 	sub.w	r1, r3, #1032	; 0x408
 8000cf6:	eeb0 5a61 	vmov.f32	s10, s3
 8000cfa:	eef0 5a42 	vmov.f32	s11, s4
 8000cfe:	eeb0 6a62 	vmov.f32	s12, s5
 8000d02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d06:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8000d0a:	eef0 6a43 	vmov.f32	s13, s6
 8000d0e:	eeb0 7a63 	vmov.f32	s14, s7
 8000d12:	eef0 7a44 	vmov.f32	s15, s8
 8000d16:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d1a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000d1e:	f507 6085 	add.w	r0, r7, #1064	; 0x428
 8000d22:	f2a0 4024 	subw	r0, r0, #1060	; 0x424
 8000d26:	edc0 4a00 	vstr	s9, [r0]
 8000d2a:	ed81 0a00 	vstr	s0, [r1]
 8000d2e:	edc1 0a01 	vstr	s1, [r1, #4]
 8000d32:	ed81 1a02 	vstr	s2, [r1, #8]
 8000d36:	ed82 5a00 	vstr	s10, [r2]
 8000d3a:	edc2 5a01 	vstr	s11, [r2, #4]
 8000d3e:	ed82 6a02 	vstr	s12, [r2, #8]
 8000d42:	edc3 6a00 	vstr	s13, [r3]
 8000d46:	ed83 7a01 	vstr	s14, [r3, #4]
 8000d4a:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000d4e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d60:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000d78:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d7c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8c:	d116      	bne.n	8000dbc <FusionAhrsUpdate+0xe0>
 8000d8e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d92:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d96:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d10b      	bne.n	8000dbc <FusionAhrsUpdate+0xe0>
 8000da4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000da8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000dac:	edd3 7a02 	vldr	s15, [r3, #8]
 8000db0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db8:	f000 85b4 	beq.w	8001924 <FusionAhrsUpdate+0xc48>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000dbc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dc0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000dca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dce:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ddc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000de0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	edd3 6a03 	vldr	s13, [r3, #12]
 8000dea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dee:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000e00:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e04:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000e08:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000e0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e10:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e1a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e1e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e30:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e3a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e3e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000e50:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e54:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000e58:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8000e5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e60:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e6e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e84:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e88:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	edd3 6a06 	vldr	s13, [r3, #24]
 8000e92:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e96:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000ea8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000eac:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000eb0:	edc3 7a02 	vstr	s15, [r3, #8]
 8000eb4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000eb8:	f5a3 7167 	sub.w	r1, r3, #924	; 0x39c
 8000ebc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ec0:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ec8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ecc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ed0:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 8000ed4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ed8:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8000edc:	460b      	mov	r3, r1
 8000ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8000ee4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ee8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000eec:	ed93 7a00 	vldr	s14, [r3]
 8000ef0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ef4:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f00:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f04:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f08:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f10:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f20:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f24:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f28:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f2c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f30:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f34:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f40:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000f44:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8000f48:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f58:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8000f60:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f64:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000f68:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8000f70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f7a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8000f7e:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8000f80:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f84:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	105a      	asrs	r2, r3, #1
 8000f8c:	4bd1      	ldr	r3, [pc, #836]	; (80012d4 <FusionAhrsUpdate+0x5f8>)
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8000f94:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8000f98:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8000f9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fa4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fa8:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8000faa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fae:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fb2:	ed93 7a00 	vldr	s14, [r3]
 8000fb6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fc6:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fde:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fee:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8000ff6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ffa:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000ffe:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001000:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800100a:	f5a3 716f 	sub.w	r1, r3, #956	; 0x3bc
 800100e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001012:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8001016:	460b      	mov	r3, r1
 8001018:	ca07      	ldmia	r2, {r0, r1, r2}
 800101a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800101e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001028:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 800102a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800102e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001046:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800104a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800104e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001052:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001056:	ed93 7a01 	vldr	s14, [r3, #4]
 800105a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800106a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800106e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001072:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001076:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800107a:	ed93 7a02 	vldr	s14, [r3, #8]
 800107e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800108e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001092:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001096:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800109a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 800109e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010a2:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 80010a6:	460b      	mov	r3, r1
 80010a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80010aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010b2:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80010b6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80010ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80010bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80010c0:	bf00      	nop
 80010c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010c6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80010ca:	461c      	mov	r4, r3
 80010cc:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80010d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010dc:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80010e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010e4:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80010e8:	460b      	mov	r3, r1
 80010ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010f4:	f5a3 7175 	sub.w	r1, r3, #980	; 0x3d4
 80010f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010fc:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8001100:	460b      	mov	r3, r1
 8001102:	ca07      	ldmia	r2, {r0, r1, r2}
 8001104:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001108:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800110c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001110:	ed93 7a01 	vldr	s14, [r3, #4]
 8001114:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001118:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800111c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001128:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800112c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001130:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001134:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001138:	edd3 7a01 	vldr	s15, [r3, #4]
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001148:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800114c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001150:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001154:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001158:	ed93 7a02 	vldr	s14, [r3, #8]
 800115c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001160:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001170:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001174:	edd3 6a00 	vldr	s13, [r3]
 8001178:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800117c:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001180:	edd3 7a02 	vldr	s15, [r3, #8]
 8001184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001190:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001194:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001198:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800119c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011a8:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80011ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011b8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80011bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80011c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011c4:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011d8:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80011dc:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80011e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011e4:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 80011e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011ec:	f5a3 727b 	sub.w	r2, r3, #1004	; 0x3ec
 80011f0:	460b      	mov	r3, r1
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011fc:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 8001200:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001204:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001208:	460b      	mov	r3, r1
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001210:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001214:	f5a3 717e 	sub.w	r1, r3, #1016	; 0x3f8
 8001218:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800121c:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 8001220:	460b      	mov	r3, r1
 8001222:	ca07      	ldmia	r2, {r0, r1, r2}
 8001224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001228:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800122c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001238:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001248:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800124c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001250:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001254:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001258:	edd3 7a01 	vldr	s15, [r3, #4]
 800125c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001268:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800126c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001270:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001274:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001278:	edd3 7a02 	vldr	s15, [r3, #8]
 800127c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8001284:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001288:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 800128c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001290:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	edd3 7a01 	vldr	s15, [r3, #4]
 800129a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800129e:	ed93 7a00 	vldr	s14, [r3]
 80012a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	f100 833c 	bmi.w	8001926 <FusionAhrsUpdate+0xc4a>
 80012ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012b2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012bc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	f300 832b 	bgt.w	8001926 <FusionAhrsUpdate+0xc4a>
 80012d0:	e002      	b.n	80012d8 <FusionAhrsUpdate+0x5fc>
 80012d2:	bf00      	nop
 80012d4:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 80012d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012dc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80012e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012ea:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012fc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	edd3 6a03 	vldr	s13, [r3, #12]
 8001306:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800130a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	edd3 7a06 	vldr	s15, [r3, #24]
 8001314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 800131c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001320:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001324:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001328:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800132c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	ed93 7a03 	vldr	s14, [r3, #12]
 8001336:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800133a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	edd3 7a03 	vldr	s15, [r3, #12]
 8001344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001348:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800134c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001350:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001354:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	edd3 6a05 	vldr	s13, [r3, #20]
 800135e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001362:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	edd3 7a05 	vldr	s15, [r3, #20]
 800136c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001374:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001378:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800137c:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001380:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001384:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	ed93 7a05 	vldr	s14, [r3, #20]
 800138e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001392:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	edd3 7a06 	vldr	s15, [r3, #24]
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013a4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80013ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013b2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80013bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80013c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013c8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80013cc:	edc3 7a02 	vstr	s15, [r3, #8]
 80013d0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013d4:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80013d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013dc:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 80013e0:	460b      	mov	r3, r1
 80013e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013ec:	f5a3 713e 	sub.w	r1, r3, #760	; 0x2f8
 80013f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013f4:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 80013f8:	460b      	mov	r3, r1
 80013fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001400:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001404:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001408:	ed93 7a01 	vldr	s14, [r3, #4]
 800140c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001410:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001414:	edd3 7a02 	vldr	s15, [r3, #8]
 8001418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001420:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001424:	edd3 6a02 	vldr	s13, [r3, #8]
 8001428:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800142c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001430:	edd3 7a01 	vldr	s15, [r3, #4]
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001440:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001444:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001448:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800144c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001450:	ed93 7a02 	vldr	s14, [r3, #8]
 8001454:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001458:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001464:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001468:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800146c:	edd3 6a00 	vldr	s13, [r3]
 8001470:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001474:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001478:	edd3 7a02 	vldr	s15, [r3, #8]
 800147c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001488:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800148c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001490:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001494:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014a0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80014a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014b0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80014b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80014b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014bc:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014d0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80014d4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80014d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014dc:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80014e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80014e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014ee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80014f2:	461c      	mov	r4, r3
 80014f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001500:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001504:	f5a3 7147 	sub.w	r1, r3, #796	; 0x31c
 8001508:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800150c:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8001510:	460b      	mov	r3, r1
 8001512:	ca07      	ldmia	r2, {r0, r1, r2}
 8001514:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001518:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800151c:	f5a3 714a 	sub.w	r1, r3, #808	; 0x328
 8001520:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001524:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001528:	460b      	mov	r3, r1
 800152a:	ca07      	ldmia	r2, {r0, r1, r2}
 800152c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001530:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001534:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001540:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001550:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001554:	edd3 6a01 	vldr	s13, [r3, #4]
 8001558:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800155c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001560:	edd3 7a01 	vldr	s15, [r3, #4]
 8001564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001570:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001574:	edd3 6a02 	vldr	s13, [r3, #8]
 8001578:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800157c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001580:	edd3 7a02 	vldr	s15, [r3, #8]
 8001584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001590:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001594:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80015a8:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 80015ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015b0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015b4:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80015bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015c6:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80015ca:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80015cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015d0:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	105a      	asrs	r2, r3, #1
 80015d8:	4bd0      	ldr	r3, [pc, #832]	; (800191c <FusionAhrsUpdate+0xc40>)
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80015e0:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 80015e4:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80015e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015f0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015f4:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80015f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015fa:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001612:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001626:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800162a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001636:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800163a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800163e:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001642:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001646:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800164a:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800164c:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001656:	f5a3 714f 	sub.w	r1, r3, #828	; 0x33c
 800165a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800165e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001662:	460b      	mov	r3, r1
 8001664:	ca07      	ldmia	r2, {r0, r1, r2}
 8001666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800166a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8001674:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001676:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800167a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001692:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001696:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800169a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800169e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80016a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016b6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80016ba:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80016be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016c2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80016c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ca:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016da:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80016de:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016e6:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 80016ea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016f4:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80016f8:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80016fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001702:	bf00      	nop
 8001704:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001708:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800170c:	461c      	mov	r4, r3
 800170e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800171a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800171e:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8001722:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001726:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800172a:	460b      	mov	r3, r1
 800172c:	ca07      	ldmia	r2, {r0, r1, r2}
 800172e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001732:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001736:	f5a3 7155 	sub.w	r1, r3, #852	; 0x354
 800173a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800173e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8001742:	460b      	mov	r3, r1
 8001744:	ca07      	ldmia	r2, {r0, r1, r2}
 8001746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 800174a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800174e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001752:	ed93 7a01 	vldr	s14, [r3, #4]
 8001756:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800175a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800175e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001766:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800176a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800176e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001772:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001776:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800177a:	edd3 7a01 	vldr	s15, [r3, #4]
 800177e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001786:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800178a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800178e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001792:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001796:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800179a:	ed93 7a02 	vldr	s14, [r3, #8]
 800179e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017a2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017b2:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017b6:	edd3 6a00 	vldr	s13, [r3]
 80017ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017be:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017d2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80017d6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80017da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017de:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017ea:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017fa:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8001802:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001806:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800181a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800181e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001822:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001826:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 800182a:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001834:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001838:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800183c:	461c      	mov	r4, r3
 800183e:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800184a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800184e:	f5a3 7161 	sub.w	r1, r3, #900	; 0x384
 8001852:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001856:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800185a:	460b      	mov	r3, r1
 800185c:	ca07      	ldmia	r2, {r0, r1, r2}
 800185e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001862:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001866:	f5a3 715e 	sub.w	r1, r3, #888	; 0x378
 800186a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800186e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8001872:	460b      	mov	r3, r1
 8001874:	ca07      	ldmia	r2, {r0, r1, r2}
 8001876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 800187a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800187e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800188a:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800189a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800189e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80018a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018a6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80018aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018b2:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80018b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018c2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80018c6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80018ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018ce:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80018d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80018d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018da:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80018de:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018ea:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80018ee:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80018f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018f6:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80018fa:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001904:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001908:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800190c:	461c      	mov	r4, r3
 800190e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800191a:	e004      	b.n	8001926 <FusionAhrsUpdate+0xc4a>
 800191c:	5f3759df 	.word	0x5f3759df
 8001920:	3c8efa35 	.word	0x3c8efa35
            break;
 8001924:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001926:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800192a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d107      	bne.n	800194e <FusionAhrsUpdate+0xc72>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 800193e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001942:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 800194e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001952:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800195e:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001960:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001964:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800196e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001972:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	dd2f      	ble.n	80019e6 <FusionAhrsUpdate+0xd0a>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001986:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800198a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001994:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001998:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019aa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ae:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ba:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80019be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 80019d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019d8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80019e4:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 80019e6:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8001920 <FusionAhrsUpdate+0xc44>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 80019ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019f6:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80019fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019fe:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 8001a02:	460b      	mov	r3, r1
 8001a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a0a:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 8001a0e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a12:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001a2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a32:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a36:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a4a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001a4e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a52:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a56:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a5a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a6a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a6e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a72:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8001a76:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8001a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a80:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a88:	461c      	mov	r4, r3
 8001a8a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8001a8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a9a:	f5a3 71dc 	sub.w	r1, r3, #440	; 0x1b8
 8001a9e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001aa2:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001aae:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 8001ab8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001abc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001acc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ad0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001ad8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001adc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ae0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae4:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001af0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001af4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001af8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001afc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b00:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b04:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b10:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b14:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001b18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b1c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8001b20:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001b24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b2a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b32:	461c      	mov	r4, r3
 8001b34:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001b38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b44:	f5a3 71ee 	sub.w	r1, r3, #476	; 0x1dc
 8001b48:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b4c:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8001b50:	460b      	mov	r3, r1
 8001b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b58:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b5c:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8001b60:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b64:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001b68:	460b      	mov	r3, r1
 8001b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001b70:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b90:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b94:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001b98:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ba0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ba8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bac:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bb8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bbc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001bc0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bc4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bcc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001be0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001be4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001be8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bec:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8001bf0:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001bf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bfa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bfe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c02:	461c      	mov	r4, r3
 8001c04:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001c08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c10:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c14:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8001c18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c1c:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8001c20:	460b      	mov	r3, r1
 8001c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c28:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c2c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8001c36:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c3a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c4e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c52:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001c56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c5a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c62:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c6e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c72:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001c76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c7a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c82:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c8e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c92:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001c96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c9a:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001c9e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ca8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cbe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cc2:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8001cc6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	330c      	adds	r3, #12
 8001cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cde:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 8001ce2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ce6:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8001cea:	460b      	mov	r3, r1
 8001cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001cf2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cf6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001cfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cfe:	eeb1 7a67 	vneg.f32	s14, s15
 8001d02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d06:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d12:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d16:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d1a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d1e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d22:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d36:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d3a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d3e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d42:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d52:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d56:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8001d5e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d62:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d7e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d82:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d86:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d8a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d9e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001da2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001da6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001daa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001dae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dbe:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001dc2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001dc6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dca:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dd6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001dda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001de6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001dea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001df2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001df6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e06:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e0a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e0e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e12:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e26:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e2a:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001e2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e32:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e3e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e4e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e52:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e5a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e6e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e72:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e7a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e8e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e92:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001e96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e9a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e9e:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ea8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eb0:	461c      	mov	r4, r3
 8001eb2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ebc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ec0:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8001ec4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ec8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4614      	mov	r4, r2
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ed8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001edc:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8001ee0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ee4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ee8:	4614      	mov	r4, r2
 8001eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001ef0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ef4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001ef8:	ed93 7a00 	vldr	s14, [r3]
 8001efc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f00:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f10:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f14:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001f18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f24:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f28:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f34:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f38:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f3c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001f40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f48:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f4c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f50:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f54:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f60:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f64:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001f68:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f70:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f74:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f78:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f84:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f88:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f8c:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001f90:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f94:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f98:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fa2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fa6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001faa:	461c      	mov	r4, r3
 8001fac:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001fb6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fba:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8001fc4:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8001fc8:	f103 040c 	add.w	r4, r3, #12
 8001fcc:	4613      	mov	r3, r2
 8001fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fd4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fd8:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8001fdc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fe0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4614      	mov	r4, r2
 8001fe8:	330c      	adds	r3, #12
 8001fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001ff0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ff4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002000:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002010:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002014:	edd3 6a01 	vldr	s13, [r3, #4]
 8002018:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800201c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002020:	edd3 7a01 	vldr	s15, [r3, #4]
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002030:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002034:	edd3 6a02 	vldr	s13, [r3, #8]
 8002038:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800203c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002040:	edd3 7a02 	vldr	s15, [r3, #8]
 8002044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800204c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002050:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002054:	edd3 6a03 	vldr	s13, [r3, #12]
 8002058:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800205c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002060:	edd3 7a03 	vldr	s15, [r3, #12]
 8002064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206c:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8002070:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8002074:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207c:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8002080:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002084:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002088:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 800208c:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 800208e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002098:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800209c:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 800209e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020a2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	105a      	asrs	r2, r3, #1
 80020aa:	4bcc      	ldr	r3, [pc, #816]	; (80023dc <FusionAhrsUpdate+0x1700>)
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80020b2:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80020b6:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80020b8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020c6:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80020c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020cc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 80020d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020e0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80020f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020f8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002108:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800210c:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8002110:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002114:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002118:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800211a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 800211e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002122:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002136:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800213a:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 800213e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002142:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002146:	ed93 7a01 	vldr	s14, [r3, #4]
 800214a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002156:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800215a:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 800215e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002162:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002166:	ed93 7a02 	vldr	s14, [r3, #8]
 800216a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002176:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800217a:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 800217e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002182:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002186:	ed93 7a03 	vldr	s14, [r3, #12]
 800218a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002196:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800219a:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 800219e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021a2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80021a6:	f507 7462 	add.w	r4, r7, #904	; 0x388
 80021aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021b4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021b8:	461c      	mov	r4, r3
 80021ba:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80021be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 80021c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021c8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80021d2:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 80021d6:	f103 040c 	add.w	r4, r3, #12
 80021da:	4613      	mov	r3, r2
 80021dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 80021e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021e6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80021f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021f4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80021fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002202:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002206:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002210:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002214:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	edd3 7a05 	vldr	s15, [r3, #20]
 800221e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002226:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 800222a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800222e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002232:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8002236:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800223a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	ed93 7a03 	vldr	s14, [r3, #12]
 8002244:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002248:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002256:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800225a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	edd3 6a05 	vldr	s13, [r3, #20]
 8002264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002268:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 800227e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002282:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002286:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 800228a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800228e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	ed93 7a03 	vldr	s14, [r3, #12]
 8002298:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800229c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022b6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	edd3 6a06 	vldr	s13, [r3, #24]
 80022c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022c4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80022ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 80022da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80022e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022ea:	f5a3 712f 	sub.w	r1, r3, #700	; 0x2bc
 80022ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022f2:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 80022f6:	460b      	mov	r3, r1
 80022f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002302:	f5a3 712c 	sub.w	r1, r3, #688	; 0x2b0
 8002306:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800230a:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800230e:	460b      	mov	r3, r1
 8002310:	ca07      	ldmia	r2, {r0, r1, r2}
 8002312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002316:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800231a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002326:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002332:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002336:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800233a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800233e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002342:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002346:	ed93 7a01 	vldr	s14, [r3, #4]
 800234a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800234e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8002352:	edd3 7a01 	vldr	s15, [r3, #4]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800235e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002362:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002366:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800236a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800236e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002372:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002376:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800237a:	edd3 7a02 	vldr	s15, [r3, #8]
 800237e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002382:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002386:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800238a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800238e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002392:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8002396:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800239a:	ca07      	ldmia	r2, {r0, r1, r2}
 800239c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80023a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023a4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80023a8:	461c      	mov	r4, r3
 80023aa:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80023ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 80023b6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023ba:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80023c4:	f5a2 7232 	sub.w	r2, r2, #712	; 0x2c8
 80023c8:	331c      	adds	r3, #28
 80023ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80023cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 80023d0:	bf00      	nop
 80023d2:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc90      	pop	{r4, r7}
 80023da:	4770      	bx	lr
 80023dc:	5f3759df 	.word	0x5f3759df

080023e0 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	61f8      	str	r0, [r7, #28]
 80023e8:	eeb0 5a40 	vmov.f32	s10, s0
 80023ec:	eef0 5a60 	vmov.f32	s11, s1
 80023f0:	eeb0 6a41 	vmov.f32	s12, s2
 80023f4:	eef0 6a61 	vmov.f32	s13, s3
 80023f8:	eeb0 7a42 	vmov.f32	s14, s4
 80023fc:	eef0 7a62 	vmov.f32	s15, s5
 8002400:	ed87 3a00 	vstr	s6, [r7]
 8002404:	ed87 5a04 	vstr	s10, [r7, #16]
 8002408:	edc7 5a05 	vstr	s11, [r7, #20]
 800240c:	ed87 6a06 	vstr	s12, [r7, #24]
 8002410:	edc7 6a01 	vstr	s13, [r7, #4]
 8002414:	ed87 7a02 	vstr	s14, [r7, #8]
 8002418:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242e:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002432:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002436:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800243a:	ed97 5a01 	vldr	s10, [r7, #4]
 800243e:	edd7 5a02 	vldr	s11, [r7, #8]
 8002442:	ed97 6a03 	vldr	s12, [r7, #12]
 8002446:	edd7 6a04 	vldr	s13, [r7, #16]
 800244a:	ed97 7a05 	vldr	s14, [r7, #20]
 800244e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002452:	edd7 4a00 	vldr	s9, [r7]
 8002456:	eef0 1a45 	vmov.f32	s3, s10
 800245a:	eeb0 2a65 	vmov.f32	s4, s11
 800245e:	eef0 2a46 	vmov.f32	s5, s12
 8002462:	eeb0 0a66 	vmov.f32	s0, s13
 8002466:	eef0 0a47 	vmov.f32	s1, s14
 800246a:	eeb0 1a67 	vmov.f32	s2, s15
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f7fe fc34 	bl	8000cdc <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 8002474:	69f8      	ldr	r0, [r7, #28]
 8002476:	f000 f862 	bl	800253e <FusionAhrsIsInitialising>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 8002488:	e00d      	b.n	80024a6 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002494:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80024b0 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 8002498:	69f8      	ldr	r0, [r7, #28]
 800249a:	f000 f869 	bl	8002570 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80024a6:	bf00      	nop
 80024a8:	3730      	adds	r7, #48	; 0x30
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00000000 	.word	0x00000000

080024b4 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 80024b4:	b490      	push	{r4, r7}
 80024b6:	b096      	sub	sp, #88	; 0x58
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6178      	str	r0, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80024c2:	330c      	adds	r3, #12
 80024c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 80024ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024d2:	eef1 7a67 	vneg.f32	s15, s15
 80024d6:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 80024da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024de:	eef1 7a67 	vneg.f32	s15, s15
 80024e2:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 80024e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024ea:	eef1 7a67 	vneg.f32	s15, s15
 80024ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 80024f2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002500:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 800250e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002516:	ee06 0a10 	vmov	s12, r0
 800251a:	ee06 1a90 	vmov	s13, r1
 800251e:	ee07 2a10 	vmov	s14, r2
 8002522:	ee07 3a90 	vmov	s15, r3
}
 8002526:	eeb0 0a46 	vmov.f32	s0, s12
 800252a:	eef0 0a66 	vmov.f32	s1, s13
 800252e:	eeb0 1a47 	vmov.f32	s2, s14
 8002532:	eef0 1a67 	vmov.f32	s3, s15
 8002536:	3758      	adds	r7, #88	; 0x58
 8002538:	46bd      	mov	sp, r7
 800253a:	bc90      	pop	{r4, r7}
 800253c:	4770      	bx	lr

0800253e <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	bfcc      	ite	gt
 800255c:	2301      	movgt	r3, #1
 800255e:	2300      	movle	r3, #0
 8002560:	b2db      	uxtb	r3, r3
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b0af      	sub	sp, #188	; 0xbc
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	ed87 0a00 	vstr	s0, [r7]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002582:	330c      	adds	r3, #12
 8002584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800258a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800258e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002596:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800259a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800259e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a6:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80025aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025b6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80025ba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ca:	f00d fdc3 	bl	8010154 <sqrtf>
 80025ce:	eeb0 7a40 	vmov.f32	s14, s0
 80025d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025da:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 80025de:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80025e2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 80025ee:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80025f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 80025fe:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002602:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 800260e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002612:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 800261e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800262c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002630:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f103 040c 	add.w	r4, r3, #12
 8002640:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	edd3 7a05 	vldr	s15, [r3, #20]
 8002656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 7a06 	vldr	s15, [r3, #24]
 8002666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	ed93 7a03 	vldr	s14, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	edd3 7a03 	vldr	s15, [r3, #12]
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002682:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edd3 6a04 	vldr	s13, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269a:	eef0 0a67 	vmov.f32	s1, s15
 800269e:	eeb0 0a46 	vmov.f32	s0, s12
 80026a2:	f00d fd55 	bl	8010150 <atan2f>
 80026a6:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 80026b0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80026b4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002854 <FusionAhrsSetYaw+0x2e4>
 80026b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 80026bc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80026c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 80026d0:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80026d4:	f00d fb14 	bl	800fd00 <cosf>
 80026d8:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 80026dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 80026ee:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80026f2:	f00d fc19 	bl	800ff28 <sinf>
 80026f6:	eef0 7a40 	vmov.f32	s15, s0
 80026fa:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 80026fe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8002702:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002706:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800270a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800270c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002716:	330c      	adds	r3, #12
 8002718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800271a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 800271e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002722:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800272e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002736:	ee37 7a67 	vsub.f32	s14, s14, s15
 800273a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800273e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800274e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 800275e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002762:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800276e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800277a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800277e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800278a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800278e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279a:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 800279e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80027a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027aa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80027ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ba:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80027be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80027c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ca:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80027ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80027d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027da:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 80027de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ea:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80027ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80027f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80027fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800280a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800280e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 800281e:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800282c:	f107 0418 	add.w	r4, r7, #24
 8002830:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f103 040c 	add.w	r4, r3, #12
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 800284a:	bf00      	nop
 800284c:	37bc      	adds	r7, #188	; 0xbc
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	bf00      	nop
 8002854:	3c8efa35 	.word	0x3c8efa35

08002858 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	ed87 0a02 	vstr	s0, [r7, #8]
 8002864:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	edd3 7a01 	vldr	s15, [r3, #4]
 800287a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800287e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80028c0 <FusionBiasInitialise+0x68>
 8002882:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edc3 7a02 	vstr	s15, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	3724      	adds	r7, #36	; 0x24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	f3af 8000 	nop.w
 80028c0:	8c0eff43 	.word	0x8c0eff43
 80028c4:	3fc015bf 	.word	0x3fc015bf

080028c8 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 80028c8:	b490      	push	{r4, r7}
 80028ca:	b0b4      	sub	sp, #208	; 0xd0
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	61f8      	str	r0, [r7, #28]
 80028d0:	eef0 6a40 	vmov.f32	s13, s0
 80028d4:	eeb0 7a60 	vmov.f32	s14, s1
 80028d8:	eef0 7a41 	vmov.f32	s15, s2
 80028dc:	edc7 6a04 	vstr	s13, [r7, #16]
 80028e0:	ed87 7a05 	vstr	s14, [r7, #20]
 80028e4:	edc7 7a06 	vstr	s15, [r7, #24]
 80028e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ec:	f107 0210 	add.w	r2, r7, #16
 80028f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028fc:	3210      	adds	r2, #16
 80028fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002904:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002908:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002914:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002918:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800291c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002920:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002924:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002928:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800292c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002930:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8002934:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002938:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800293c:	ca07      	ldmia	r2, {r0, r1, r2}
 800293e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800294a:	ca07      	ldmia	r2, {r0, r1, r2}
 800294c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002950:	edd7 7a04 	vldr	s15, [r7, #16]
 8002954:	eeb0 7ae7 	vabs.f32	s14, s15
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	dc17      	bgt.n	8002998 <FusionBiasUpdate+0xd0>
 8002968:	edd7 7a05 	vldr	s15, [r7, #20]
 800296c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	dc0b      	bgt.n	8002998 <FusionBiasUpdate+0xd0>
 8002980:	edd7 7a06 	vldr	s15, [r7, #24]
 8002984:	eeb0 7ae7 	vabs.f32	s14, s15
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dd0b      	ble.n	80029b0 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
        return gyroscope;
 80029a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029a4:	f107 0210 	add.w	r2, r7, #16
 80029a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029ae:	e08f      	b.n	8002ad0 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029b6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80029ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d512      	bpl.n	80029ea <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 80029da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029de:	f107 0210 	add.w	r2, r7, #16
 80029e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80029e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029e8:	e072      	b.n	8002ad0 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	689c      	ldr	r4, [r3, #8]
 80029ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029f2:	f107 0210 	add.w	r2, r7, #16
 80029f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80029f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029fc:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8002a00:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002a04:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8002a10:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002a14:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8002a20:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002a24:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8002a30:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002a34:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a42:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a52:	3210      	adds	r2, #16
 8002a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a5e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002a68:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002a6c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002a78:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002a7c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002a88:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002a8c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a94:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8002a98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002aa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aaa:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8002ac2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ac6:	f107 0210 	add.w	r2, r7, #16
 8002aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8002ad0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ad4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002adc:	ee06 1a90 	vmov	s13, r1
 8002ae0:	ee07 2a10 	vmov	s14, r2
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eeb0 0a66 	vmov.f32	s0, s13
 8002aec:	eef0 0a47 	vmov.f32	s1, s14
 8002af0:	eeb0 1a67 	vmov.f32	s2, s15
 8002af4:	37d0      	adds	r7, #208	; 0xd0
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc90      	pop	{r4, r7}
 8002afa:	4770      	bx	lr

08002afc <initFusionAHRS>:
};

//


void initFusionAHRS(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float sample_S){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	ed87 0a00 	vstr	s0, [r7]

	DataStruct->samplePeriod = sample_S;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	60da      	str	r2, [r3, #12]
	
	// Initialise gyroscope bias correction algorithm
    FusionBiasInitialise(fusionBias, 0.5f, DataStruct->samplePeriod); // stationary threshold = 0.5 degrees per second
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b18:	eef0 0a67 	vmov.f32	s1, s15
 8002b1c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fe99 	bl	8002858 <FusionBiasInitialise>

    // Initialise AHRS algorithm
    FusionAhrsInitialise(fusionAhrs, 0.5f); // gain = 0.5
 8002b26:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b2a:	68b8      	ldr	r0, [r7, #8]
 8002b2c:	f7fe f87c 	bl	8000c28 <FusionAhrsInitialise>

    // Set optional magnetic field limits
    FusionAhrsSetMagneticField(fusionAhrs, 20.0f, 70.0f); // valid magnetic field range = 20 uT to 70 uT
 8002b30:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002b48 <initFusionAHRS+0x4c>
 8002b34:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002b38:	68b8      	ldr	r0, [r7, #8]
 8002b3a:	f7fe f8b3 	bl	8000ca4 <FusionAhrsSetMagneticField>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	428c0000 	.word	0x428c0000

08002b4c <getFusionAHRS_6DoF>:
	DataStruct->YAW = eulerAngles.angle.yaw;
	DataStruct->PITCH = eulerAngles.angle.pitch;
	DataStruct->ROLL = eulerAngles.angle.roll;
}

void getFusionAHRS_6DoF(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float accX, float accY, float accZ, float gyrX, float gyrY, float gyrZ) {
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b58:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002b5c:	6018      	str	r0, [r3, #0]
 8002b5e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b62:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002b66:	6019      	str	r1, [r3, #0]
 8002b68:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b6c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b76:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8002b7a:	ed83 0a00 	vstr	s0, [r3]
 8002b7e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b82:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8002b86:	edc3 0a00 	vstr	s1, [r3]
 8002b8a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b8e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002b92:	ed83 1a00 	vstr	s2, [r3]
 8002b96:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b9a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002b9e:	edc3 1a00 	vstr	s3, [r3]
 8002ba2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ba6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002baa:	ed83 2a00 	vstr	s4, [r3]
 8002bae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bb2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002bb6:	edc3 2a00 	vstr	s5, [r3]
	
	// Calibrate gyroscope
	FusionVector3 uncalibratedGyroscope = {
 8002bba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bbe:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002bc8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bcc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002bd6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bda:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
		.axis.x = gyrX, /* replace this value with actual gyroscope x axis measurement in lsb */
		.axis.y = gyrY, /* replace this value with actual gyroscope y axis measurement in lsb */
		.axis.z = gyrZ, /* replace this value with actual gyroscope z axis measurement in lsb */
	};
	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8002be4:	4bed      	ldr	r3, [pc, #948]	; (8002f9c <getFusionAHRS_6DoF+0x450>)
 8002be6:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8002bea:	461d      	mov	r5, r3
 8002bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c26:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c38:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c3c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002c40:	461d      	mov	r5, r3
 8002c42:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8002c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c5a:	4ad1      	ldr	r2, [pc, #836]	; (8002fa0 <getFusionAHRS_6DoF+0x454>)
 8002c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c62:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c66:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 8002c6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c6e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8002c72:	460b      	mov	r3, r1
 8002c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c7a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c7e:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 8002c82:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c86:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c92:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c96:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8002c9a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c9e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002caa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cb2:	ed93 7a00 	vldr	s14, [r3]
 8002cb6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cca:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cce:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002cd2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cd6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cda:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cde:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ce2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cf2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cf6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002cfa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d02:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d16:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d1a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d1e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002d22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d26:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8002d2a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d34:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d38:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d42:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d58:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d5c:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8002d60:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d64:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8002d68:	460b      	mov	r3, r1
 8002d6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8002d70:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d78:	ed93 7a00 	vldr	s14, [r3]
 8002d7c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d90:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d94:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8002d98:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002da0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002da4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dac:	edd3 7a01 	vldr	s15, [r3, #4]
 8002db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002db8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dbc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8002dc0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dcc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002de0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002de4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002de8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dec:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8002df0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dfa:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8002dfe:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002e02:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e08:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e0c:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8002e10:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e14:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	6023      	str	r3, [r4, #0]
 8002e28:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e2c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e30:	461c      	mov	r4, r3
 8002e32:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8002e36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8002e3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e42:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e46:	ed93 7a00 	vldr	s14, [r3]
 8002e4a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e5e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e62:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e66:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e6a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e7a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e7e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e82:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e86:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e8a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e9e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ea2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8002ea6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002eaa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eae:	ed93 7a03 	vldr	s14, [r3, #12]
 8002eb2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002eb6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ec6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eca:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ece:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ed2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ed6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ee6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eea:	edd3 6a05 	vldr	s13, [r3, #20]
 8002eee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ef2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f02:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f0a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8002f0e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f12:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f16:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f1a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f1e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f2a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f2e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f32:	edd3 6a07 	vldr	s13, [r3, #28]
 8002f36:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f3a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f4a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f4e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f52:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f56:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f72:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002f76:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f7a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8002f7e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f88:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002f8c:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002f90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 8002f96:	bf00      	nop
 8002f98:	e004      	b.n	8002fa4 <getFusionAHRS_6DoF+0x458>
 8002f9a:	bf00      	nop
 8002f9c:	080116c8 	.word	0x080116c8
 8002fa0:	24000000 	.word	0x24000000
 8002fa4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8002fa8:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Calibrate accelerometer
	FusionVector3 uncalibratedAccelerometer = {
 8002fb2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fba:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fbe:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fce:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fd2:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fe2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fe6:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	609a      	str	r2, [r3, #8]
		.axis.x = accX, /* replace this value with actual accelerometer x axis measurement in lsb */
		.axis.y = accY, /* replace this value with actual accelerometer y axis measurement in lsb */
		.axis.z = accZ, /* replace this value with actual accelerometer z axis measurement in lsb */
	};
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 8002fee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ff2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ff6:	4aed      	ldr	r2, [pc, #948]	; (80033ac <getFusionAHRS_6DoF+0x860>)
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	4615      	mov	r5, r2
 8002ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800300c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800301a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003028:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003036:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 800303a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800303e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8003042:	460b      	mov	r3, r1
 8003044:	ca07      	ldmia	r2, {r0, r1, r2}
 8003046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800304a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800304e:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8003052:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003056:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800305a:	4614      	mov	r4, r2
 800305c:	461d      	mov	r5, r3
 800305e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800306e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8003072:	4acf      	ldr	r2, [pc, #828]	; (80033b0 <getFusionAHRS_6DoF+0x864>)
 8003074:	ca07      	ldmia	r2, {r0, r1, r2}
 8003076:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800307a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800307e:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 8003082:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003086:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800308a:	460b      	mov	r3, r1
 800308c:	ca07      	ldmia	r2, {r0, r1, r2}
 800308e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003092:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003096:	f5a3 7106 	sub.w	r1, r3, #536	; 0x218
 800309a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800309e:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80030a2:	460b      	mov	r3, r1
 80030a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80030a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030ae:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 80030b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030b6:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80030ba:	460b      	mov	r3, r1
 80030bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80030c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030c6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80030ca:	ed93 7a00 	vldr	s14, [r3]
 80030ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80030d6:	edd3 7a00 	vldr	s15, [r3]
 80030da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030e2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80030e6:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80030ea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030ee:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80030f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030fa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80030fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003106:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800310a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800310e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003112:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003116:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800311a:	ed93 7a02 	vldr	s14, [r3, #8]
 800311e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003122:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003126:	edd3 7a02 	vldr	s15, [r3, #8]
 800312a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003132:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003136:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800313a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800313e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8003142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003146:	ca07      	ldmia	r2, {r0, r1, r2}
 8003148:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800314c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003150:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8003154:	ca07      	ldmia	r2, {r0, r1, r2}
 8003156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800315a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800315e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003162:	461c      	mov	r4, r3
 8003164:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800316c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003170:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003174:	f5a3 710c 	sub.w	r1, r3, #560	; 0x230
 8003178:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800317c:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8003180:	460b      	mov	r3, r1
 8003182:	ca07      	ldmia	r2, {r0, r1, r2}
 8003184:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003188:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800318c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003190:	ed93 7a00 	vldr	s14, [r3]
 8003194:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003198:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031a8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031ac:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80031b0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031b4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80031b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80031bc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031c0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80031c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80031c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031cc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031d0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031d4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80031d8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031dc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80031e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80031e4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031e8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80031ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031f8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031fc:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003200:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003204:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8003208:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800320c:	ca07      	ldmia	r2, {r0, r1, r2}
 800320e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003212:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003216:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800321a:	ca07      	ldmia	r2, {r0, r1, r2}
 800321c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003220:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003224:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8003228:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800322c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003230:	4614      	mov	r4, r2
 8003232:	461d      	mov	r5, r3
 8003234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003244:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003248:	461c      	mov	r4, r3
 800324a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800324e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003256:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800325a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800325e:	ed93 7a00 	vldr	s14, [r3]
 8003262:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003266:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003272:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003276:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800327a:	edd3 6a01 	vldr	s13, [r3, #4]
 800327e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003282:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003286:	edd3 7a01 	vldr	s15, [r3, #4]
 800328a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003292:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003296:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800329a:	edd3 6a02 	vldr	s13, [r3, #8]
 800329e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032b6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80032ba:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80032be:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80032c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80032ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ce:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032de:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80032e2:	edd3 6a04 	vldr	s13, [r3, #16]
 80032e6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80032f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032fe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003302:	edd3 6a05 	vldr	s13, [r3, #20]
 8003306:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800330a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800330e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800331e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003322:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003326:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800332a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800332e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003332:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003336:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003342:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003346:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800334a:	edd3 6a07 	vldr	s13, [r3, #28]
 800334e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003352:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003356:	edd3 7a01 	vldr	s15, [r3, #4]
 800335a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003362:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003366:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800336a:	edd3 6a08 	vldr	s13, [r3, #32]
 800336e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003372:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003376:	edd3 7a02 	vldr	s15, [r3, #8]
 800337a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003382:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003386:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800338a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800338e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003392:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003396:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800339a:	ca07      	ldmia	r2, {r0, r1, r2}
 800339c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033a0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80033a4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80033a8:	e006      	b.n	80033b8 <getFusionAHRS_6DoF+0x86c>
 80033aa:	bf00      	nop
 80033ac:	080116c8 	.word	0x080116c8
 80033b0:	2400000c 	.word	0x2400000c
 80033b4:	42652ee0 	.word	0x42652ee0
 80033b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80033ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033be:	bf00      	nop
 80033c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033c8:	461c      	mov	r4, r3
 80033ca:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80033ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Update gyroscope bias correction algorithm
	calibratedGyroscope = FusionBiasUpdate(fusionBias, calibratedGyroscope);
 80033d6:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 80033da:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 80033de:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80033e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033e6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80033ea:	eeb0 0a66 	vmov.f32	s0, s13
 80033ee:	eef0 0a47 	vmov.f32	s1, s14
 80033f2:	eeb0 1a67 	vmov.f32	s2, s15
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	f7ff fa66 	bl	80028c8 <FusionBiasUpdate>
 80033fc:	eef0 6a40 	vmov.f32	s13, s0
 8003400:	eeb0 7a60 	vmov.f32	s14, s1
 8003404:	eef0 7a41 	vmov.f32	s15, s2
 8003408:	edc7 6a87 	vstr	s13, [r7, #540]	; 0x21c
 800340c:	ed87 7a88 	vstr	s14, [r7, #544]	; 0x220
 8003410:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224

	// Update AHRS algorithm
	FusionAhrsUpdateWithoutMagnetometer(fusionAhrs, calibratedGyroscope, calibratedAccelerometer, DataStruct->samplePeriod);
 8003414:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003418:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	edd3 4a03 	vldr	s9, [r3, #12]
 8003422:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800342a:	ed93 5a00 	vldr	s10, [r3]
 800342e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003432:	ed93 6a02 	vldr	s12, [r3, #8]
 8003436:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 800343a:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 800343e:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8003442:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003446:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800344a:	eeb0 3a64 	vmov.f32	s6, s9
 800344e:	eef0 1a45 	vmov.f32	s3, s10
 8003452:	eeb0 2a65 	vmov.f32	s4, s11
 8003456:	eef0 2a46 	vmov.f32	s5, s12
 800345a:	eeb0 0a66 	vmov.f32	s0, s13
 800345e:	eef0 0a47 	vmov.f32	s1, s14
 8003462:	eeb0 1a67 	vmov.f32	s2, s15
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f7fe ffba 	bl	80023e0 <FusionAhrsUpdateWithoutMagnetometer>

	// Get Euler angles
	FusionEulerAngles eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(fusionAhrs));
 800346c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003470:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	f7ff f81d 	bl	80024b4 <FusionAhrsGetQuaternion>
 800347a:	eeb0 6a40 	vmov.f32	s12, s0
 800347e:	eef0 6a60 	vmov.f32	s13, s1
 8003482:	eeb0 7a41 	vmov.f32	s14, s2
 8003486:	eef0 7a61 	vmov.f32	s15, s3
 800348a:	ed87 6a8d 	vstr	s12, [r7, #564]	; 0x234
 800348e:	edc7 6a8e 	vstr	s13, [r7, #568]	; 0x238
 8003492:	ed87 7a8f 	vstr	s14, [r7, #572]	; 0x23c
 8003496:	edc7 7a90 	vstr	s15, [r7, #576]	; 0x240
 800349a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800349e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034a2:	461c      	mov	r4, r3
 80034a4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80034a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 80034ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034b2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034be:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034d2:	edc7 7abb 	vstr	s15, [r7, #748]	; 0x2ec
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 80034d6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034da:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034de:	ed93 7a02 	vldr	s14, [r3, #8]
 80034e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034e6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034f2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034f6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034fa:	edd3 6a00 	vldr	s13, [r3]
 80034fe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003502:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003506:	edd3 7a01 	vldr	s15, [r3, #4]
 800350a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003512:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003516:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800351a:	ed93 7a03 	vldr	s14, [r3, #12]
 800351e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003522:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003526:	edd3 7a03 	vldr	s15, [r3, #12]
 800352a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800352e:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 8003532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003536:	eef0 0a67 	vmov.f32	s1, s15
 800353a:	eeb0 0a66 	vmov.f32	s0, s13
 800353e:	f00c fe07 	bl	8010150 <atan2f>
 8003542:	eef0 7a40 	vmov.f32	s15, s0
 8003546:	edc7 7aba 	vstr	s15, [r7, #744]	; 0x2e8
    return radians * (180.0f / (float) M_PI);
 800354a:	edd7 7aba 	vldr	s15, [r7, #744]	; 0x2e8
 800354e:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 8003552:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003556:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800355a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800355e:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003562:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003566:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800356a:	ed93 7a01 	vldr	s14, [r3, #4]
 800356e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003572:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003576:	edd3 7a03 	vldr	s15, [r3, #12]
 800357a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800357e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003582:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003586:	edd3 6a00 	vldr	s13, [r3]
 800358a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800358e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003592:	edd3 7a02 	vldr	s15, [r3, #8]
 8003596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035a2:	eeb0 0a67 	vmov.f32	s0, s15
 80035a6:	f00c fda7 	bl	80100f8 <asinf>
 80035aa:	eef0 7a40 	vmov.f32	s15, s0
 80035ae:	eef1 7a67 	vneg.f32	s15, s15
 80035b2:	edc7 7ab9 	vstr	s15, [r7, #740]	; 0x2e4
    return radians * (180.0f / (float) M_PI);
 80035b6:	edd7 7ab9 	vldr	s15, [r7, #740]	; 0x2e4
 80035ba:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 80035be:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80035c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035c6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80035ca:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80035ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035d2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80035da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035de:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035ee:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035f2:	edd3 6a00 	vldr	s13, [r3]
 80035f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035fa:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003606:	ee77 6a67 	vsub.f32	s13, s14, s15
 800360a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800360e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003612:	ed93 7a01 	vldr	s14, [r3, #4]
 8003616:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800361a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800361e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003626:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362e:	eef0 0a67 	vmov.f32	s1, s15
 8003632:	eeb0 0a66 	vmov.f32	s0, s13
 8003636:	f00c fd8b 	bl	8010150 <atan2f>
 800363a:	eef0 7a40 	vmov.f32	s15, s0
 800363e:	edc7 7ab8 	vstr	s15, [r7, #736]	; 0x2e0
    return radians * (180.0f / (float) M_PI);
 8003642:	edd7 7ab8 	vldr	s15, [r7, #736]	; 0x2e0
 8003646:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 800364a:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 800364e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003652:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003656:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 800365a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800365e:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8003662:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003666:	ca07      	ldmia	r2, {r0, r1, r2}
 8003668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800366c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003670:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003674:	461c      	mov	r4, r3
 8003676:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800367a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800367e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	// Write Euler Angles into data structs
	DataStruct->YAW = eulerAngles.angle.yaw;
 8003682:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003686:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003690:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	601a      	str	r2, [r3, #0]
	DataStruct->PITCH = eulerAngles.angle.pitch;
 8003698:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800369c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036a6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
	DataStruct->ROLL = eulerAngles.angle.roll;
 80036ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036b2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036bc:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bdb0      	pop	{r4, r5, r7, pc}
 80036ce:	bf00      	nop

080036d0 <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole_t *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	460b      	mov	r3, r1
 80036da:	ed87 0a01 	vstr	s0, [r7, #4]
 80036de:	edc7 0a00 	vstr	s1, [r7]
 80036e2:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 80036e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80037a4 <LPFTwoPole_Init+0xd4>
 80036ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f0:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 80036f4:	7afb      	ldrb	r3, [r7, #11]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d141      	bne.n	800377e <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 80036fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80036fe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80037a8 <LPFTwoPole_Init+0xd8>
 8003702:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003706:	edd7 7a05 	vldr	s15, [r7, #20]
 800370a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800370e:	edd7 7a00 	vldr	s15, [r7]
 8003712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003716:	edd7 7a00 	vldr	s15, [r7]
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 8003724:	edd7 7a05 	vldr	s15, [r7, #20]
 8003728:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80037ac <LPFTwoPole_Init+0xdc>
 800372c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003730:	edd7 7a00 	vldr	s15, [r7]
 8003734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	edd3 7a03 	vldr	s15, [r3, #12]
 8003746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800374a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 8003758:	edd7 7a05 	vldr	s15, [r7, #20]
 800375c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80037ac <LPFTwoPole_Init+0xdc>
 8003760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003764:	edd7 7a00 	vldr	s15, [r7]
 8003768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003774:	eef1 7a67 	vneg.f32	s15, s15
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40c90fdb 	.word	0x40c90fdb
 80037a8:	3fcfa0f9 	.word	0x3fcfa0f9
 80037ac:	400d2f1b 	.word	0x400d2f1b

080037b0 <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole_t *lpf, float val) {
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80037d8:	edd7 7a00 	vldr	s15, [r7]
 80037dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	ed93 6a05 	vldr	s12, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80037ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80037f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80037fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	ee07 3a90 	vmov	s15, r3
}
 8003810:	eeb0 0a67 	vmov.f32	s0, s15
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <NotchFilterInit>:
#include "NotchFilter.h"

void NotchFilterInit(NotchFilter_t *filt, float centerFreHz, float notchWidth_Hz, float sampleTime_s)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	ed2d 8b02 	vpush	{d8}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003830:	edc7 0a01 	vstr	s1, [r7, #4]
 8003834:	ed87 1a00 	vstr	s2, [r7]
	float w0_rps = 2.0f * M_PI * centerFreHz;
 8003838:	edd7 7a02 	vldr	s15, [r7, #8]
 800383c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003840:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003920 <NotchFilterInit+0x100>
 8003844:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800384c:	edc7 7a06 	vstr	s15, [r7, #24]
	float ww_rps = 2.0f * M_PI * notchWidth_Hz;
 8003850:	edd7 7a01 	vldr	s15, [r7, #4]
 8003854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003858:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003920 <NotchFilterInit+0x100>
 800385c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003860:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003864:	edc7 7a05 	vstr	s15, [r7, #20]
	
	float w0_pw_rps = (2.0f / sampleTime_s) * tanf(0.5f * w0_rps * sampleTime_s);
 8003868:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800386c:	edd7 7a00 	vldr	s15, [r7]
 8003870:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003874:	edd7 7a06 	vldr	s15, [r7, #24]
 8003878:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800387c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003880:	edd7 7a00 	vldr	s15, [r7]
 8003884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	f00c faf6 	bl	800fe7c <tanf>
 8003890:	eef0 7a40 	vmov.f32	s15, s0
 8003894:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003898:	edc7 7a04 	vstr	s15, [r7, #16]
	
	filt->alpha = 4.0f + ((w0_pw_rps * w0_pw_rps) * (sampleTime_s * sampleTime_s));
 800389c:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038a4:	edd7 7a00 	vldr	s15, [r7]
 80038a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80038b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	edc3 7a00 	vstr	s15, [r3]
	filt->beta = 2.0f + (ww_rps  * sampleTime_s);
 80038be:	ed97 7a05 	vldr	s14, [r7, #20]
 80038c2:	edd7 7a00 	vldr	s15, [r7]
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	edc3 7a01 	vstr	s15, [r3, #4]
	
	for (int n = 0; n<3; n++)
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	e013      	b.n	8003906 <NotchFilterInit+0xe6>
	{
		filt->x[n] = 0.0f;
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	3302      	adds	r3, #2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3304      	adds	r3, #4
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	3304      	adds	r3, #4
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
	for (int n = 0; n<3; n++)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b02      	cmp	r3, #2
 800390a:	dde8      	ble.n	80038de <NotchFilterInit+0xbe>
	}
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	ecbd 8b02 	vpop	{d8}
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	f3af 8000 	nop.w
 8003920:	54442d18 	.word	0x54442d18
 8003924:	401921fb 	.word	0x401921fb

08003928 <NotchFilter_Update>:

float NotchFilter_Update(NotchFilter_t *filt, float data)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	ed87 0a00 	vstr	s0, [r7]
	filt->x[2] = filt->x[1];
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	611a      	str	r2, [r3, #16]
	filt->x[1] = filt->x[0];
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
	
	filt->y[2] = filt->y[1];
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	61da      	str	r2, [r3, #28]
	filt->y[1] = filt->y[0];
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
	
	filt->x[0] = data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	609a      	str	r2, [r3, #8]
	
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	edd3 7a02 	vldr	s15, [r3, #8]
 8003966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003974:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003978:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	edd3 6a00 	vldr	s13, [r3]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	edd3 7a04 	vldr	s15, [r3, #16]
 8003996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800399a:	ee37 7a27 	vadd.f32	s14, s14, s15
			   - (2.0f * ((filt->alpha - 8.0f)) * filt->y[1] + (filt->alpha - filt->beta) *filt->y[2]))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80039a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80039b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	ed93 6a00 	vldr	s12, [r3]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80039c6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80039d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d8:	ee77 6a67 	vsub.f32	s13, s14, s15
			   / (filt->alpha + filt->beta);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	ed93 7a00 	vldr	s14, [r3]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80039e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	edc3 7a05 	vstr	s15, [r3, #20]
			   
	return filt->y[0];
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	ee07 3a90 	vmov	s15, r3
}
 80039fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <bmi160_get_regs+0x24>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8003a30:	23ff      	movs	r3, #255	; 0xff
 8003a32:	75fb      	strb	r3, [r7, #23]
 8003a34:	e017      	b.n	8003a66 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8003a36:	89bb      	ldrh	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8003a3c:	23f4      	movs	r3, #244	; 0xf4
 8003a3e:	75fb      	strb	r3, [r7, #23]
 8003a40:	e011      	b.n	8003a66 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	789b      	ldrb	r3, [r3, #2]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d103      	bne.n	8003a52 <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a50:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69dc      	ldr	r4, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7858      	ldrb	r0, [r3, #1]
 8003a5a:	89bb      	ldrh	r3, [r7, #12]
 8003a5c:	7bf9      	ldrb	r1, [r7, #15]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	47a0      	blx	r4
 8003a62:	4603      	mov	r3, r0
 8003a64:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd90      	pop	{r4, r7, pc}

08003a72 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8003a72:	b590      	push	{r4, r7, lr}
 8003a74:	b087      	sub	sp, #28
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	73fb      	strb	r3, [r7, #15]
 8003a80:	4613      	mov	r3, r2
 8003a82:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <bmi160_set_regs+0x28>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8003a9a:	23ff      	movs	r3, #255	; 0xff
 8003a9c:	75fb      	strb	r3, [r7, #23]
 8003a9e:	e045      	b.n	8003b2c <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8003aa0:	89bb      	ldrh	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8003aa6:	23f4      	movs	r3, #244	; 0xf4
 8003aa8:	75fb      	strb	r3, [r7, #23]
 8003aaa:	e03f      	b.n	8003b2c <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	789b      	ldrb	r3, [r3, #2]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d103      	bne.n	8003abc <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aba:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7a1b      	ldrb	r3, [r3, #8]
 8003ac0:	2b11      	cmp	r3, #17
 8003ac2:	d003      	beq.n	8003acc <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8003ac8:	2b15      	cmp	r3, #21
 8003aca:	d124      	bne.n	8003b16 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1c      	ldr	r4, [r3, #32]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	7858      	ldrb	r0, [r3, #1]
 8003ad4:	89bb      	ldrh	r3, [r7, #12]
 8003ad6:	7bf9      	ldrb	r1, [r7, #15]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	47a0      	blx	r4
 8003adc:	4603      	mov	r3, r0
 8003ade:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	4798      	blx	r3
 8003ae8:	e01a      	b.n	8003b20 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1c      	ldr	r4, [r3, #32]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7858      	ldrb	r0, [r3, #1]
 8003af2:	7dbb      	ldrb	r3, [r7, #22]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	441a      	add	r2, r3
 8003af8:	7bf9      	ldrb	r1, [r7, #15]
 8003afa:	2301      	movs	r3, #1
 8003afc:	47a0      	blx	r4
 8003afe:	4603      	mov	r3, r0
 8003b00:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	3301      	adds	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	4798      	blx	r3
            for (; count < len; count++)
 8003b10:	7dbb      	ldrb	r3, [r7, #22]
 8003b12:	3301      	adds	r3, #1
 8003b14:	75bb      	strb	r3, [r7, #22]
 8003b16:	7dbb      	ldrb	r3, [r7, #22]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	89ba      	ldrh	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d8e4      	bhi.n	8003aea <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8003b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8003b28:	23fe      	movs	r3, #254	; 0xfe
 8003b2a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8003b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd90      	pop	{r4, r7, pc}

08003b38 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8003b40:	2303      	movs	r3, #3
 8003b42:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fd33 	bl	80045b0 <null_ptr_check>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8003b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <bmi160_init+0x38>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	789b      	ldrb	r3, [r3, #2]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8003b5e:	f107 010d 	add.w	r1, r7, #13
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	207f      	movs	r0, #127	; 0x7f
 8003b68:	f7ff ff50 	bl	8003a0c <bmi160_get_regs>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8003b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d127      	bne.n	8003bc8 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8003b7e:	e007      	b.n	8003b90 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	2000      	movs	r0, #0
 8003b88:	f7ff ff40 	bl	8003a0c <bmi160_get_regs>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8003b90:	7bbb      	ldrb	r3, [r7, #14]
 8003b92:	1e5a      	subs	r2, r3, #1
 8003b94:	73ba      	strb	r2, [r7, #14]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <bmi160_init+0x6a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2bd1      	cmp	r3, #209	; 0xd1
 8003ba0:	d1ee      	bne.n	8003b80 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8003ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <bmi160_init+0x8c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2bd1      	cmp	r3, #209	; 0xd1
 8003bb0:	d108      	bne.n	8003bc4 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	22ff      	movs	r2, #255	; 0xff
 8003bb6:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f80b 	bl	8003bd4 <bmi160_soft_reset>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	e001      	b.n	8003bc8 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8003bc4:	23fd      	movs	r3, #253	; 0xfd
 8003bc6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8003bdc:	23b6      	movs	r3, #182	; 0xb6
 8003bde:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <bmi160_soft_reset+0x1a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003bee:	23ff      	movs	r3, #255	; 0xff
 8003bf0:	73fb      	strb	r3, [r7, #15]
 8003bf2:	e024      	b.n	8003c3e <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8003bf4:	f107 010e 	add.w	r1, r7, #14
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	207e      	movs	r0, #126	; 0x7e
 8003bfe:	f7ff ff38 	bl	8003a72 <bmi160_set_regs>
 8003c02:	4603      	mov	r3, r0
 8003c04:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8003c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10c      	bne.n	8003c30 <bmi160_soft_reset+0x5c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	789b      	ldrb	r3, [r3, #2]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8003c1e:	f107 010e 	add.w	r1, r7, #14
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	207f      	movs	r0, #127	; 0x7f
 8003c28:	f7ff fef0 	bl	8003a0c <bmi160_get_regs>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8003c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fcd9 	bl	80045f0 <default_param_settg>
        }
    }

    return rslt;
 8003c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <bmi160_set_sens_conf+0x1a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003c64:	23ff      	movs	r3, #255	; 0xff
 8003c66:	73fb      	strb	r3, [r7, #15]
 8003c68:	e01f      	b.n	8003caa <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fcea 	bl	8004644 <set_accel_conf>
 8003c70:	4603      	mov	r3, r0
 8003c72:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d116      	bne.n	8003caa <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fe25 	bl	80048cc <set_gyro_conf>
 8003c82:	4603      	mov	r3, r0
 8003c84:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f811 	bl	8003cb6 <bmi160_set_power_mode>
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8003c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fdde 	bl	8004862 <check_invalid_settg>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <bmi160_set_power_mode+0x1a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003cd0:	23ff      	movs	r3, #255	; 0xff
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	e00d      	b.n	8003cf2 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 ff01 	bl	8004ade <set_accel_pwr>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 ff8f 	bl	8004c0c <set_gyro_pwr>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8003d1e:	7d7b      	ldrb	r3, [r7, #21]
 8003d20:	109b      	asrs	r3, r3, #2
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8003d2a:	7d7b      	ldrb	r3, [r7, #21]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8003d32:	7d3b      	ldrb	r3, [r7, #20]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03c      	beq.n	8003dbc <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8003d42:	7d7b      	ldrb	r3, [r7, #21]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d024      	beq.n	8003d92 <bmi160_get_sensor_data+0x94>
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	dc34      	bgt.n	8003db6 <bmi160_get_sensor_data+0xb8>
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d002      	beq.n	8003d56 <bmi160_get_sensor_data+0x58>
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d00f      	beq.n	8003d74 <bmi160_get_sensor_data+0x76>
 8003d54:	e02f      	b.n	8003db6 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8003d5c:	23ff      	movs	r3, #255	; 0xff
 8003d5e:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8003d60:	e02e      	b.n	8003dc0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8003d62:	7dbb      	ldrb	r3, [r7, #22]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 ff93 	bl	8004c94 <get_accel_data>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	75fb      	strb	r3, [r7, #23]
                break;
 8003d72:	e025      	b.n	8003dc0 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d102      	bne.n	8003d80 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8003d7a:	23ff      	movs	r3, #255	; 0xff
 8003d7c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8003d7e:	e01f      	b.n	8003dc0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8003d80:	7dbb      	ldrb	r3, [r7, #22]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f84f 	bl	8004e2a <get_gyro_data>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	75fb      	strb	r3, [r7, #23]
                break;
 8003d90:	e016      	b.n	8003dc0 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <bmi160_get_sensor_data+0xa0>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8003d9e:	23ff      	movs	r3, #255	; 0xff
 8003da0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8003da2:	e00d      	b.n	8003dc0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8003da4:	7db8      	ldrb	r0, [r7, #22]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	f001 f987 	bl	80050be <get_accel_gyro_data>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]
                break;
 8003db4:	e004      	b.n	8003dc0 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8003db6:	23fb      	movs	r3, #251	; 0xfb
 8003db8:	75fb      	strb	r3, [r7, #23]
                break;
 8003dba:	e001      	b.n	8003dc0 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8003dbc:	23ff      	movs	r3, #255	; 0xff
 8003dbe:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	785b      	ldrb	r3, [r3, #1]
 8003dde:	2b0d      	cmp	r3, #13
 8003de0:	d879      	bhi.n	8003ed6 <bmi160_set_int_config+0x10a>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <bmi160_set_int_config+0x1c>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e2f 	.word	0x08003e2f
 8003df0:	08003e59 	.word	0x08003e59
 8003df4:	08003e4b 	.word	0x08003e4b
 8003df8:	08003e4b 	.word	0x08003e4b
 8003dfc:	08003e67 	.word	0x08003e67
 8003e00:	08003e75 	.word	0x08003e75
 8003e04:	08003e91 	.word	0x08003e91
 8003e08:	08003e83 	.word	0x08003e83
 8003e0c:	08003e3d 	.word	0x08003e3d
 8003e10:	08003e9f 	.word	0x08003e9f
 8003e14:	08003ead 	.word	0x08003ead
 8003e18:	08003ebb 	.word	0x08003ebb
 8003e1c:	08003ec9 	.word	0x08003ec9
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f95a 	bl	80040dc <set_accel_any_motion_int>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	73fb      	strb	r3, [r7, #15]
            break;
 8003e2c:	e054      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 8003e2e:	6839      	ldr	r1, [r7, #0]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f9ed 	bl	8004210 <set_accel_sig_motion_int>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
            break;
 8003e3a:	e04d      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa14 	bl	800426c <set_accel_no_motion_int>
 8003e44:	4603      	mov	r3, r0
 8003e46:	73fb      	strb	r3, [r7, #15]
            break;
 8003e48:	e046      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f973 	bl	8004138 <set_accel_tap_int>
 8003e52:	4603      	mov	r3, r0
 8003e54:	73fb      	strb	r3, [r7, #15]
            break;
 8003e56:	e03f      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa34 	bl	80042c8 <set_accel_step_detect_int>
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]
            break;
 8003e64:	e038      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fa6e 	bl	800434a <set_accel_orientation_int>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	73fb      	strb	r3, [r7, #15]
            break;
 8003e72:	e031      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 8003e74:	6839      	ldr	r1, [r7, #0]
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 faa8 	bl	80043cc <set_accel_flat_detect_int>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	73fb      	strb	r3, [r7, #15]
            break;
 8003e80:	e02a      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 8003e82:	6839      	ldr	r1, [r7, #0]
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fae2 	bl	800444e <set_accel_low_g_int>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
            break;
 8003e8e:	e023      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fb26 	bl	80044e4 <set_accel_high_g_int>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	73fb      	strb	r3, [r7, #15]
            break;
 8003e9c:	e01c      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 8003e9e:	6839      	ldr	r1, [r7, #0]
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f982 	bl	80041aa <set_accel_gyro_data_ready_int>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
            break;
 8003eaa:	e015      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f002 fd88 	bl	80069c4 <set_fifo_full_int>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	73fb      	strb	r3, [r7, #15]
            break;
 8003eb8:	e00e      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 8003eba:	6839      	ldr	r1, [r7, #0]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f002 fde8 	bl	8006a92 <set_fifo_watermark_int>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	73fb      	strb	r3, [r7, #15]
            break;
 8003ec6:	e007      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fb55 	bl	800457a <set_intr_pin_config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	73fb      	strb	r3, [r7, #15]
            break;
 8003ed4:	e000      	b.n	8003ed8 <bmi160_set_int_config+0x10c>
        default:
            break;
 8003ed6:	bf00      	nop
    }

    return rslt;
 8003ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fb5d 	bl	80045b0 <null_ptr_check>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 8003efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8003f02:	23ff      	movs	r3, #255	; 0xff
 8003f04:	75fb      	strb	r3, [r7, #23]
 8003f06:	e068      	b.n	8003fda <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f002 fe48 	bl	8006ba0 <configure_offset_enable>
 8003f10:	4603      	mov	r3, r0
 8003f12:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8003f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d15e      	bne.n	8003fda <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8003f1c:	f107 0116 	add.w	r1, r7, #22
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	2069      	movs	r0, #105	; 0x69
 8003f26:	f7ff fd71 	bl	8003a0c <bmi160_get_regs>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 8003f2e:	7dbb      	ldrb	r3, [r7, #22]
 8003f30:	b25b      	sxtb	r3, r3
 8003f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f36:	b25a      	sxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	019b      	lsls	r3, r3, #6
 8003f3e:	b25b      	sxtb	r3, r3
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	b25b      	sxtb	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 8003f4e:	7dbb      	ldrb	r3, [r7, #22]
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f56:	b25a      	sxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	b25b      	sxtb	r3, r3
 8003f60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 8003f6e:	7dbb      	ldrb	r3, [r7, #22]
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	f023 030c 	bic.w	r3, r3, #12
 8003f76:	b25a      	sxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	789b      	ldrb	r3, [r3, #2]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	b25b      	sxtb	r3, r3
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b25b      	sxtb	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 8003f8e:	7dbb      	ldrb	r3, [r7, #22]
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	b25a      	sxtb	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	78db      	ldrb	r3, [r3, #3]
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 8003fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d112      	bne.n	8003fda <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8003fb4:	f107 0116 	add.w	r1, r7, #22
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	2069      	movs	r0, #105	; 0x69
 8003fbe:	f7ff fd58 	bl	8003a72 <bmi160_set_regs>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8003fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	68b8      	ldr	r0, [r7, #8]
 8003fd2:	f002 fe2f 	bl	8006c34 <trigger_foc>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8003fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b088      	sub	sp, #32
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003ff0:	6838      	ldr	r0, [r7, #0]
 8003ff2:	f000 fadd 	bl	80045b0 <null_ptr_check>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8003ffa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8004002:	23ff      	movs	r3, #255	; 0xff
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e063      	b.n	80040d0 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004008:	f107 010c 	add.w	r1, r7, #12
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2207      	movs	r2, #7
 8004010:	2071      	movs	r0, #113	; 0x71
 8004012:	f7ff fcfb 	bl	8003a0c <bmi160_get_regs>
 8004016:	4603      	mov	r3, r0
 8004018:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 800401a:	7b3b      	ldrb	r3, [r7, #12]
 800401c:	b25a      	sxtb	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8004022:	7b7b      	ldrb	r3, [r7, #13]
 8004024:	b25a      	sxtb	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 800402a:	7bbb      	ldrb	r3, [r7, #14]
 800402c:	b25a      	sxtb	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8004036:	7cbb      	ldrb	r3, [r7, #18]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800403e:	7f7b      	ldrb	r3, [r7, #29]
 8004040:	039b      	lsls	r3, r3, #14
 8004042:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004044:	7fbb      	ldrb	r3, [r7, #30]
 8004046:	019b      	lsls	r3, r3, #6
 8004048:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800404a:	8b7a      	ldrh	r2, [r7, #26]
 800404c:	8b3b      	ldrh	r3, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 8004052:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da00      	bge.n	800405c <bmi160_get_offsets+0x76>
 800405a:	333f      	adds	r3, #63	; 0x3f
 800405c:	119b      	asrs	r3, r3, #6
 800405e:	b21a      	sxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8004064:	7c3b      	ldrb	r3, [r7, #16]
 8004066:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8004068:	7cbb      	ldrb	r3, [r7, #18]
 800406a:	109b      	asrs	r3, r3, #2
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004074:	7f7b      	ldrb	r3, [r7, #29]
 8004076:	039b      	lsls	r3, r3, #14
 8004078:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 800407a:	7fbb      	ldrb	r3, [r7, #30]
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004080:	8b7a      	ldrh	r2, [r7, #26]
 8004082:	8b3b      	ldrh	r3, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8004088:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800408c:	2b00      	cmp	r3, #0
 800408e:	da00      	bge.n	8004092 <bmi160_get_offsets+0xac>
 8004090:	333f      	adds	r3, #63	; 0x3f
 8004092:	119b      	asrs	r3, r3, #6
 8004094:	b21a      	sxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 800409a:	7c7b      	ldrb	r3, [r7, #17]
 800409c:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 800409e:	7cbb      	ldrb	r3, [r7, #18]
 80040a0:	111b      	asrs	r3, r3, #4
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80040aa:	7f7b      	ldrb	r3, [r7, #29]
 80040ac:	039b      	lsls	r3, r3, #14
 80040ae:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80040b0:	7fbb      	ldrb	r3, [r7, #30]
 80040b2:	019b      	lsls	r3, r3, #6
 80040b4:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80040b6:	8b7a      	ldrh	r2, [r7, #26]
 80040b8:	8b3b      	ldrh	r3, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 80040be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	da00      	bge.n	80040c8 <bmi160_get_offsets+0xe2>
 80040c6:	333f      	adds	r3, #63	; 0x3f
 80040c8:	119b      	asrs	r3, r3, #6
 80040ca:	b21a      	sxth	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 80040d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3720      	adds	r7, #32
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f000 fa62 	bl	80045b0 <null_ptr_check>
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80040f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <set_accel_any_motion_int+0x22>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80040fe:	23ff      	movs	r3, #255	; 0xff
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	e013      	b.n	800412c <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	68b8      	ldr	r0, [r7, #8]
 800410e:	f001 f915 	bl	800533c <enable_accel_any_motion_int>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f001 fb47 	bl	80057b6 <config_any_motion_int_settg>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800412c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004142:	6838      	ldr	r0, [r7, #0]
 8004144:	f000 fa34 	bl	80045b0 <null_ptr_check>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800414c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <set_accel_tap_int+0x22>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800415a:	23ff      	movs	r3, #255	; 0xff
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e01e      	b.n	800419e <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f001 fe8b 	bl	8005e86 <enable_tap_int>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d110      	bne.n	800419e <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9fb 	bl	800457a <set_intr_pin_config>
 8004184:	4603      	mov	r3, r0
 8004186:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f001 fec9 	bl	8005f2c <config_tap_int_settg>
 800419a:	4603      	mov	r3, r0
 800419c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800419e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80041b4:	6838      	ldr	r0, [r7, #0]
 80041b6:	f000 f9fb 	bl	80045b0 <null_ptr_check>
 80041ba:	4603      	mov	r3, r0
 80041bc:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80041be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <set_accel_gyro_data_ready_int+0x22>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80041cc:	23ff      	movs	r3, #255	; 0xff
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e018      	b.n	8004204 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 80041d2:	6838      	ldr	r0, [r7, #0]
 80041d4:	f001 fb28 	bl	8005828 <enable_data_ready_int>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9c7 	bl	800457a <set_intr_pin_config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80041f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f001 f9dc 	bl	80055b8 <map_hardware_interrupt>
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004204:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800421a:	6838      	ldr	r0, [r7, #0]
 800421c:	f000 f9c8 	bl	80045b0 <null_ptr_check>
 8004220:	4603      	mov	r3, r0
 8004222:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <set_accel_sig_motion_int+0x22>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004232:	23ff      	movs	r3, #255	; 0xff
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	e013      	b.n	8004260 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 800423e:	6839      	ldr	r1, [r7, #0]
 8004240:	68b8      	ldr	r0, [r7, #8]
 8004242:	f001 fc47 	bl	8005ad4 <enable_sig_motion_int>
 8004246:	4603      	mov	r3, r0
 8004248:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800424a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 fc7d 	bl	8005b56 <config_sig_motion_int_settg>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004276:	6838      	ldr	r0, [r7, #0]
 8004278:	f000 f99a 	bl	80045b0 <null_ptr_check>
 800427c:	4603      	mov	r3, r0
 800427e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <set_accel_no_motion_int+0x22>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800428e:	23ff      	movs	r3, #255	; 0xff
 8004290:	73fb      	strb	r3, [r7, #15]
 8004292:	e013      	b.n	80042bc <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 800429a:	6839      	ldr	r1, [r7, #0]
 800429c:	68b8      	ldr	r0, [r7, #8]
 800429e:	f001 faf0 	bl	8005882 <enable_no_motion_int>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f001 fb3a 	bl	800592c <config_no_motion_int_settg>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80042bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80042d2:	6838      	ldr	r0, [r7, #0]
 80042d4:	f000 f96c 	bl	80045b0 <null_ptr_check>
 80042d8:	4603      	mov	r3, r0
 80042da:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80042dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <set_accel_step_detect_int+0x22>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80042ea:	23ff      	movs	r3, #255	; 0xff
 80042ec:	73fb      	strb	r3, [r7, #15]
 80042ee:	e026      	b.n	800433e <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	68b8      	ldr	r0, [r7, #8]
 80042fa:	f001 fd01 	bl	8005d00 <enable_step_detect_int>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d119      	bne.n	800433e <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f934 	bl	800457a <set_intr_pin_config>
 8004312:	4603      	mov	r3, r0
 8004314:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 800431e:	6839      	ldr	r1, [r7, #0]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f001 f8af 	bl	8005484 <map_feature_interrupt>
 8004326:	4603      	mov	r3, r0
 8004328:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800432a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	68b8      	ldr	r0, [r7, #8]
 8004336:	f001 fd1c 	bl	8005d72 <config_step_detect>
 800433a:	4603      	mov	r3, r0
 800433c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800433e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004354:	6838      	ldr	r0, [r7, #0]
 8004356:	f000 f92b 	bl	80045b0 <null_ptr_check>
 800435a:	4603      	mov	r3, r0
 800435c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800435e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <set_accel_orientation_int+0x22>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800436c:	23ff      	movs	r3, #255	; 0xff
 800436e:	73fb      	strb	r3, [r7, #15]
 8004370:	e026      	b.n	80043c0 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 8004378:	6839      	ldr	r1, [r7, #0]
 800437a:	68b8      	ldr	r0, [r7, #8]
 800437c:	f001 feda 	bl	8006134 <enable_orient_int>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d119      	bne.n	80043c0 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8f3 	bl	800457a <set_intr_pin_config>
 8004394:	4603      	mov	r3, r0
 8004396:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10f      	bne.n	80043c0 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80043a0:	6839      	ldr	r1, [r7, #0]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 f86e 	bl	8005484 <map_feature_interrupt>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80043ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 80043b4:	6839      	ldr	r1, [r7, #0]
 80043b6:	68b8      	ldr	r0, [r7, #8]
 80043b8:	f001 fef5 	bl	80061a6 <config_orient_int_settg>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80043c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80043d6:	6838      	ldr	r0, [r7, #0]
 80043d8:	f000 f8ea 	bl	80045b0 <null_ptr_check>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80043e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d102      	bne.n	80043ee <set_accel_flat_detect_int+0x22>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d102      	bne.n	80043f4 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80043ee:	23ff      	movs	r3, #255	; 0xff
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	e026      	b.n	8004442 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 80043fa:	6839      	ldr	r1, [r7, #0]
 80043fc:	68b8      	ldr	r0, [r7, #8]
 80043fe:	f001 ff6b 	bl	80062d8 <enable_flat_int>
 8004402:	4603      	mov	r3, r0
 8004404:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d119      	bne.n	8004442 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f8b2 	bl	800457a <set_intr_pin_config>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800441a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10f      	bne.n	8004442 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004422:	6839      	ldr	r1, [r7, #0]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 f82d 	bl	8005484 <map_feature_interrupt>
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800442e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d105      	bne.n	8004442 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	68b8      	ldr	r0, [r7, #8]
 800443a:	f001 ff83 	bl	8006344 <config_flat_int_settg>
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004458:	6838      	ldr	r0, [r7, #0]
 800445a:	f000 f8a9 	bl	80045b0 <null_ptr_check>
 800445e:	4603      	mov	r3, r0
 8004460:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <set_accel_low_g_int+0x22>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004470:	23ff      	movs	r3, #255	; 0xff
 8004472:	73fb      	strb	r3, [r7, #15]
 8004474:	e030      	b.n	80044d8 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 800447c:	6839      	ldr	r1, [r7, #0]
 800447e:	68b8      	ldr	r0, [r7, #8]
 8004480:	f001 ffc6 	bl	8006410 <enable_low_g_int>
 8004484:	4603      	mov	r3, r0
 8004486:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d123      	bne.n	80044d8 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f871 	bl	800457a <set_intr_pin_config>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800449c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d119      	bne.n	80044d8 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 ffec 	bl	8005484 <map_feature_interrupt>
 80044ac:	4603      	mov	r3, r0
 80044ae:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80044b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10f      	bne.n	80044d8 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	68b8      	ldr	r0, [r7, #8]
 80044bc:	f001 ffe1 	bl	8006482 <config_low_g_data_src>
 80044c0:	4603      	mov	r3, r0
 80044c2:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80044c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	68b8      	ldr	r0, [r7, #8]
 80044d0:	f002 f80e 	bl	80064f0 <config_low_g_int_settg>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80044d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80044ee:	6838      	ldr	r0, [r7, #0]
 80044f0:	f000 f85e 	bl	80045b0 <null_ptr_check>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80044f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <set_accel_high_g_int+0x22>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004506:	23ff      	movs	r3, #255	; 0xff
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	e030      	b.n	800456e <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	68b8      	ldr	r0, [r7, #8]
 8004516:	f002 f847 	bl	80065a8 <enable_high_g_int>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800451e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d123      	bne.n	800456e <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004526:	6839      	ldr	r1, [r7, #0]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f826 	bl	800457a <set_intr_pin_config>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d119      	bne.n	800456e <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 800453a:	6839      	ldr	r1, [r7, #0]
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 ffa1 	bl	8005484 <map_feature_interrupt>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10f      	bne.n	800456e <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	68b8      	ldr	r0, [r7, #8]
 8004552:	f002 f889 	bl	8006668 <config_high_g_data_src>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 800455a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d105      	bne.n	800456e <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 8004562:	6839      	ldr	r1, [r7, #0]
 8004564:	68b8      	ldr	r0, [r7, #8]
 8004566:	f002 f8b5 	bl	80066d4 <config_high_g_int_settg>
 800456a:	4603      	mov	r3, r0
 800456c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800456e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f002 f8ea 	bl	8006760 <config_int_out_ctrl>
 800458c:	4603      	mov	r3, r0
 800458e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f002 f9aa 	bl	80068f4 <config_int_latch>
 80045a0:	4603      	mov	r3, r0
 80045a2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80045a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <null_ptr_check+0x26>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <null_ptr_check+0x26>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <null_ptr_check+0x26>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 80045d6:	23ff      	movs	r3, #255	; 0xff
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	e001      	b.n	80045e0 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80045e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2208      	movs	r2, #8
 8004602:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2210      	movs	r2, #16
 8004608:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2203      	movs	r2, #3
 800460e:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2208      	movs	r2, #8
 800461a:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2214      	movs	r2, #20
 8004620:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6852      	ldr	r2, [r2, #4]
 800462e:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68d2      	ldr	r2, [r2, #12]
 8004636:	611a      	str	r2, [r3, #16]
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800464c:	2300      	movs	r3, #0
 800464e:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8004650:	f107 030c 	add.w	r3, r7, #12
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f833 	bl	80046c2 <check_accel_config>
 800465c:	4603      	mov	r3, r0
 800465e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d126      	bne.n	80046b6 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8004668:	f107 010c 	add.w	r1, r7, #12
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	2040      	movs	r0, #64	; 0x40
 8004672:	f7ff f9fe 	bl	8003a72 <bmi160_set_regs>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800467a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d119      	bne.n	80046b6 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	795a      	ldrb	r2, [r3, #5]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	79da      	ldrb	r2, [r3, #7]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	1c59      	adds	r1, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	2041      	movs	r0, #65	; 0x41
 800469e:	f7ff f9e8 	bl	8003a72 <bmi160_set_regs>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	799a      	ldrb	r2, [r3, #6]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 80046b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2202      	movs	r2, #2
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	2040      	movs	r0, #64	; 0x40
 80046d4:	f7ff f99a 	bl	8003a0c <bmi160_get_regs>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80046dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d11b      	bne.n	800471c <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f81e 	bl	8004728 <process_accel_odr>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80046f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d111      	bne.n	800471c <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f848 	bl	8004790 <process_accel_bw>
 8004700:	4603      	mov	r3, r0
 8004702:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f871 	bl	80047fa <process_accel_range>
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800471c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	795b      	ldrb	r3, [r3, #5]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d81a      	bhi.n	800477c <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	795a      	ldrb	r2, [r3, #5]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	7a5b      	ldrb	r3, [r3, #9]
 800474e:	429a      	cmp	r2, r3
 8004750:	d016      	beq.n	8004780 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	795b      	ldrb	r3, [r3, #5]
 8004756:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f023 030f 	bic.w	r3, r3, #15
 8004760:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8004762:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	b25a      	sxtb	r2, r3
 800476c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004770:	4313      	orrs	r3, r2
 8004772:	b25b      	sxtb	r3, r3
 8004774:	b2da      	uxtb	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e001      	b.n	8004780 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800477c:	23fc      	movs	r3, #252	; 0xfc
 800477e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004780:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	79db      	ldrb	r3, [r3, #7]
 80047aa:	2b07      	cmp	r3, #7
 80047ac:	d81b      	bhi.n	80047e6 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	79da      	ldrb	r2, [r3, #7]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	7adb      	ldrb	r3, [r3, #11]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d017      	beq.n	80047ea <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	79db      	ldrb	r3, [r3, #7]
 80047be:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c8:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 80047ca:	7b7b      	ldrb	r3, [r7, #13]
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	b25b      	sxtb	r3, r3
 80047d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d4:	b25a      	sxtb	r2, r3
 80047d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047da:	4313      	orrs	r3, r2
 80047dc:	b25b      	sxtb	r3, r3
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e001      	b.n	80047ea <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80047e6:	23fc      	movs	r3, #252	; 0xfc
 80047e8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	799b      	ldrb	r3, [r3, #6]
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d81a      	bhi.n	800484e <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	799a      	ldrb	r2, [r3, #6]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	7a9b      	ldrb	r3, [r3, #10]
 8004820:	429a      	cmp	r2, r3
 8004822:	d016      	beq.n	8004852 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	799b      	ldrb	r3, [r3, #6]
 8004828:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	f023 030f 	bic.w	r3, r3, #15
 8004832:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8004834:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	b25a      	sxtb	r2, r3
 800483e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004842:	4313      	orrs	r3, r2
 8004844:	b25b      	sxtb	r3, r3
 8004846:	b2da      	uxtb	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e001      	b.n	8004852 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800484e:	23fc      	movs	r3, #252	; 0xfc
 8004850:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004852:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 800486e:	f107 010e 	add.w	r1, r7, #14
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	2002      	movs	r0, #2
 8004878:	f7ff f8c8 	bl	8003a0c <bmi160_get_regs>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8004880:	7bbb      	ldrb	r3, [r7, #14]
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8004888:	7bbb      	ldrb	r3, [r7, #14]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	b2db      	uxtb	r3, r3
 8004890:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8004892:	7bbb      	ldrb	r3, [r7, #14]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d102      	bne.n	800489e <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8004898:	23fa      	movs	r3, #250	; 0xfa
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e010      	b.n	80048c0 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 800489e:	7bbb      	ldrb	r3, [r7, #14]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d102      	bne.n	80048aa <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 80048a4:	23f9      	movs	r3, #249	; 0xf9
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	e00a      	b.n	80048c0 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 80048aa:	7bbb      	ldrb	r3, [r7, #14]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d102      	bne.n	80048b6 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 80048b0:	23f8      	movs	r3, #248	; 0xf8
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e004      	b.n	80048c0 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	2b07      	cmp	r3, #7
 80048ba:	d101      	bne.n	80048c0 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 80048bc:	23f7      	movs	r3, #247	; 0xf7
 80048be:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80048c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80048d4:	2300      	movs	r3, #0
 80048d6:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 80048d8:	f107 030c 	add.w	r3, r7, #12
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f833 	bl	800494a <check_gyro_config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80048e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d126      	bne.n	800493e <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 80048f0:	f107 010c 	add.w	r1, r7, #12
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	2042      	movs	r0, #66	; 0x42
 80048fa:	f7ff f8ba 	bl	8003a72 <bmi160_set_regs>
 80048fe:	4603      	mov	r3, r0
 8004900:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d119      	bne.n	800493e <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7b5a      	ldrb	r2, [r3, #13]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	7bda      	ldrb	r2, [r3, #15]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 800491a:	f107 030c 	add.w	r3, r7, #12
 800491e:	1c59      	adds	r1, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	2043      	movs	r0, #67	; 0x43
 8004926:	f7ff f8a4 	bl	8003a72 <bmi160_set_regs>
 800492a:	4603      	mov	r3, r0
 800492c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800492e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	7b9a      	ldrb	r2, [r3, #14]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 800493e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2202      	movs	r2, #2
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	2042      	movs	r0, #66	; 0x42
 800495c:	f7ff f856 	bl	8003a0c <bmi160_get_regs>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d11b      	bne.n	80049a4 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f81e 	bl	80049b0 <process_gyro_odr>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d111      	bne.n	80049a4 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f848 	bl	8004a18 <process_gyro_bw>
 8004988:	4603      	mov	r3, r0
 800498a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800498c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d107      	bne.n	80049a4 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3301      	adds	r3, #1
 8004998:	6839      	ldr	r1, [r7, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f86b 	bl	8004a76 <process_gyro_range>
 80049a0:	4603      	mov	r3, r0
 80049a2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80049a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	7b5b      	ldrb	r3, [r3, #13]
 80049ca:	2b0d      	cmp	r3, #13
 80049cc:	d81a      	bhi.n	8004a04 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	7b5a      	ldrb	r2, [r3, #13]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	7c5b      	ldrb	r3, [r3, #17]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d016      	beq.n	8004a08 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	7b5b      	ldrb	r3, [r3, #13]
 80049de:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f023 030f 	bic.w	r3, r3, #15
 80049e8:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 80049ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	b25a      	sxtb	r2, r3
 80049f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e001      	b.n	8004a08 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004a04:	23fc      	movs	r3, #252	; 0xfc
 8004a06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	7bdb      	ldrb	r3, [r3, #15]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d815      	bhi.n	8004a62 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	7bdb      	ldrb	r3, [r3, #15]
 8004a3a:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a44:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8004a46:	7b7b      	ldrb	r3, [r7, #13]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a50:	b25a      	sxtb	r2, r3
 8004a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b25b      	sxtb	r3, r3
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	e001      	b.n	8004a66 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004a62:	23fc      	movs	r3, #252	; 0xfc
 8004a64:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	7b9b      	ldrb	r3, [r3, #14]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d81a      	bhi.n	8004aca <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	7b9a      	ldrb	r2, [r3, #14]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	7c9b      	ldrb	r3, [r3, #18]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d016      	beq.n	8004ace <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	7b9b      	ldrb	r3, [r3, #14]
 8004aa4:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8004ab0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	b25a      	sxtb	r2, r3
 8004aba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	b25b      	sxtb	r3, r3
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	e001      	b.n	8004ace <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004aca:	23fc      	movs	r3, #252	; 0xfc
 8004acc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	791b      	ldrb	r3, [r3, #4]
 8004af2:	2b0f      	cmp	r3, #15
 8004af4:	d92b      	bls.n	8004b4e <set_accel_pwr+0x70>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	791b      	ldrb	r3, [r3, #4]
 8004afa:	2b12      	cmp	r3, #18
 8004afc:	d827      	bhi.n	8004b4e <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	791a      	ldrb	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	7a1b      	ldrb	r3, [r3, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d024      	beq.n	8004b54 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8004b0a:	f107 030e 	add.w	r3, r7, #14
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f826 	bl	8004b62 <process_under_sampling>
 8004b16:	4603      	mov	r3, r0
 8004b18:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d118      	bne.n	8004b54 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	1d19      	adds	r1, r3, #4
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	207e      	movs	r0, #126	; 0x7e
 8004b2c:	f7fe ffa1 	bl	8003a72 <bmi160_set_regs>
 8004b30:	4603      	mov	r3, r0
 8004b32:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	7a1b      	ldrb	r3, [r3, #8]
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d103      	bne.n	8004b44 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2005      	movs	r0, #5
 8004b42:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	791a      	ldrb	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004b4c:	e002      	b.n	8004b54 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8004b4e:	23f3      	movs	r3, #243	; 0xf3
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	e000      	b.n	8004b56 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004b54:	bf00      	nop
    }

    return rslt;
 8004b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8004b70:	2300      	movs	r3, #0
 8004b72:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	2040      	movs	r0, #64	; 0x40
 8004b7c:	f7fe ff46 	bl	8003a0c <bmi160_get_regs>
 8004b80:	4603      	mov	r3, r0
 8004b82:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d139      	bne.n	8004c00 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	791b      	ldrb	r3, [r3, #4]
 8004b90:	2b12      	cmp	r3, #18
 8004b92:	d120      	bne.n	8004bd6 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9c:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8004b9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2201      	movs	r2, #1
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	2040      	movs	r0, #64	; 0x40
 8004bb2:	f7fe ff5e 	bl	8003a72 <bmi160_set_regs>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8004bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d11e      	bne.n	8004c00 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8004bc2:	f107 010c 	add.w	r1, r7, #12
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	2058      	movs	r0, #88	; 0x58
 8004bcc:	f7fe ff51 	bl	8003a72 <bmi160_set_regs>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e014      	b.n	8004c00 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b25b      	sxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	da0f      	bge.n	8004c00 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be8:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	7bba      	ldrb	r2, [r7, #14]
 8004bee:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	2040      	movs	r0, #64	; 0x40
 8004bf8:	f7fe ff3b 	bl	8003a72 <bmi160_set_regs>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7b1b      	ldrb	r3, [r3, #12]
 8004c1c:	2b14      	cmp	r3, #20
 8004c1e:	d007      	beq.n	8004c30 <set_gyro_pwr+0x24>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7b1b      	ldrb	r3, [r3, #12]
 8004c24:	2b15      	cmp	r3, #21
 8004c26:	d003      	beq.n	8004c30 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8004c2c:	2b17      	cmp	r3, #23
 8004c2e:	d129      	bne.n	8004c84 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	7b1a      	ldrb	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7c1b      	ldrb	r3, [r3, #16]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d025      	beq.n	8004c88 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f103 010c 	add.w	r1, r3, #12
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	207e      	movs	r0, #126	; 0x7e
 8004c48:	f7fe ff13 	bl	8003a72 <bmi160_set_regs>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7c1b      	ldrb	r3, [r3, #16]
 8004c54:	2b14      	cmp	r3, #20
 8004c56:	d104      	bne.n	8004c62 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	2050      	movs	r0, #80	; 0x50
 8004c5e:	4798      	blx	r3
 8004c60:	e00b      	b.n	8004c7a <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	7c1b      	ldrb	r3, [r3, #16]
 8004c66:	2b17      	cmp	r3, #23
 8004c68:	d107      	bne.n	8004c7a <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8004c6e:	2b15      	cmp	r3, #21
 8004c70:	d103      	bne.n	8004c7a <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	200a      	movs	r0, #10
 8004c78:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7b1a      	ldrb	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8004c82:	e001      	b.n	8004c88 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8004c84:	23f3      	movs	r3, #243	; 0xf3
 8004c86:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[9] = { 0 };
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	f107 0318 	add.w	r3, r7, #24
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3306      	adds	r3, #6
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f107 0114 	add.w	r1, r7, #20
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2012      	movs	r0, #18
 8004cd4:	f7fe fe9a 	bl	8003a0c <bmi160_get_regs>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8004cde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 8098 	bne.w	8004e18 <get_accel_data+0x184>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8004ce8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004cf2:	3330      	adds	r3, #48	; 0x30
 8004cf4:	443b      	add	r3, r7
 8004cf6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8004cfe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004d08:	3330      	adds	r3, #48	; 0x30
 8004d0a:	443b      	add	r3, r7
 8004d0c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8004d14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	b21a      	sxth	r2, r3
 8004d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d20:	b21b      	sxth	r3, r3
 8004d22:	4313      	orrs	r3, r2
 8004d24:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	8c3a      	ldrh	r2, [r7, #32]
 8004d2a:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8004d2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004d36:	3330      	adds	r3, #48	; 0x30
 8004d38:	443b      	add	r3, r7
 8004d3a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8004d42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004d4c:	3330      	adds	r3, #48	; 0x30
 8004d4e:	443b      	add	r3, r7
 8004d50:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8004d58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	b21a      	sxth	r2, r3
 8004d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d64:	b21b      	sxth	r3, r3
 8004d66:	4313      	orrs	r3, r2
 8004d68:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	8c3a      	ldrh	r2, [r7, #32]
 8004d6e:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8004d70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004d7a:	3330      	adds	r3, #48	; 0x30
 8004d7c:	443b      	add	r3, r7
 8004d7e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8004d86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004d90:	3330      	adds	r3, #48	; 0x30
 8004d92:	443b      	add	r3, r7
 8004d94:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8004d9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	b21a      	sxth	r2, r3
 8004da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	4313      	orrs	r3, r2
 8004dac:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	8c3a      	ldrh	r2, [r7, #32]
 8004db2:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d12a      	bne.n	8004e10 <get_accel_data+0x17c>
        {
            time_0 = data_array[idx++];
 8004dba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004dc4:	3330      	adds	r3, #48	; 0x30
 8004dc6:	443b      	add	r3, r7
 8004dc8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004dcc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8004dd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004dda:	3330      	adds	r3, #48	; 0x30
 8004ddc:	443b      	add	r3, r7
 8004dde:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8004de8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004df2:	3330      	adds	r3, #48	; 0x30
 8004df4:	443b      	add	r3, r7
 8004df6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8004dfe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	609a      	str	r2, [r3, #8]
 8004e0e:	e006      	b.n	8004e1e <get_accel_data+0x18a>
        }
        else
        {
            accel->sensortime = 0;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
 8004e16:	e002      	b.n	8004e1e <get_accel_data+0x18a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8004e18:	23fe      	movs	r3, #254	; 0xfe
 8004e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8004e1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3730      	adds	r7, #48	; 0x30
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b08c      	sub	sp, #48	; 0x30
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	4603      	mov	r3, r0
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
 8004e4c:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d17b      	bne.n	8004f5c <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8004e64:	f107 0110 	add.w	r1, r7, #16
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2206      	movs	r2, #6
 8004e6c:	200c      	movs	r0, #12
 8004e6e:	f7fe fdcd 	bl	8003a0c <bmi160_get_regs>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8004e78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d169      	bne.n	8004f54 <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8004e80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004e8a:	3330      	adds	r3, #48	; 0x30
 8004e8c:	443b      	add	r3, r7
 8004e8e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8004e96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004ea0:	3330      	adds	r3, #48	; 0x30
 8004ea2:	443b      	add	r3, r7
 8004ea4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8004eac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	b21a      	sxth	r2, r3
 8004eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb8:	b21b      	sxth	r3, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	8c3a      	ldrh	r2, [r7, #32]
 8004ec2:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8004ec4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004ece:	3330      	adds	r3, #48	; 0x30
 8004ed0:	443b      	add	r3, r7
 8004ed2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8004eda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004ee4:	3330      	adds	r3, #48	; 0x30
 8004ee6:	443b      	add	r3, r7
 8004ee8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8004ef0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	b21a      	sxth	r2, r3
 8004ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004efc:	b21b      	sxth	r3, r3
 8004efe:	4313      	orrs	r3, r2
 8004f00:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	8c3a      	ldrh	r2, [r7, #32]
 8004f06:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8004f08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004f12:	3330      	adds	r3, #48	; 0x30
 8004f14:	443b      	add	r3, r7
 8004f16:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8004f1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004f28:	3330      	adds	r3, #48	; 0x30
 8004f2a:	443b      	add	r3, r7
 8004f2c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8004f34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	b21a      	sxth	r2, r3
 8004f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f40:	b21b      	sxth	r3, r3
 8004f42:	4313      	orrs	r3, r2
 8004f44:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	8c3a      	ldrh	r2, [r7, #32]
 8004f4a:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	609a      	str	r2, [r3, #8]
 8004f52:	e0ae      	b.n	80050b2 <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8004f54:	23fe      	movs	r3, #254	; 0xfe
 8004f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004f5a:	e0aa      	b.n	80050b2 <get_gyro_data+0x288>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	330c      	adds	r3, #12
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	f107 0110 	add.w	r1, r7, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	200c      	movs	r0, #12
 8004f6c:	f7fe fd4e 	bl	8003a0c <bmi160_get_regs>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8004f76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8096 	bne.w	80050ac <get_gyro_data+0x282>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8004f80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004f8a:	3330      	adds	r3, #48	; 0x30
 8004f8c:	443b      	add	r3, r7
 8004f8e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8004f96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004fa0:	3330      	adds	r3, #48	; 0x30
 8004fa2:	443b      	add	r3, r7
 8004fa4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8004fac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	b21a      	sxth	r2, r3
 8004fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb8:	b21b      	sxth	r3, r3
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	8c3a      	ldrh	r2, [r7, #32]
 8004fc2:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8004fc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004fce:	3330      	adds	r3, #48	; 0x30
 8004fd0:	443b      	add	r3, r7
 8004fd2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8004fda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004fe4:	3330      	adds	r3, #48	; 0x30
 8004fe6:	443b      	add	r3, r7
 8004fe8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8004ff0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	b21a      	sxth	r2, r3
 8004ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ffc:	b21b      	sxth	r3, r3
 8004ffe:	4313      	orrs	r3, r2
 8005000:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	8c3a      	ldrh	r2, [r7, #32]
 8005006:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005008:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005012:	3330      	adds	r3, #48	; 0x30
 8005014:	443b      	add	r3, r7
 8005016:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 800501e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005028:	3330      	adds	r3, #48	; 0x30
 800502a:	443b      	add	r3, r7
 800502c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005034:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	b21a      	sxth	r2, r3
 800503c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005040:	b21b      	sxth	r3, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	8c3a      	ldrh	r2, [r7, #32]
 800504a:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 800504c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005050:	3306      	adds	r3, #6
 8005052:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            time_0 = data_array[idx++];
 8005056:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005060:	3330      	adds	r3, #48	; 0x30
 8005062:	443b      	add	r3, r7
 8005064:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005068:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800506c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005076:	3330      	adds	r3, #48	; 0x30
 8005078:	443b      	add	r3, r7
 800507a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800507e:	b29b      	uxth	r3, r3
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005084:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800508e:	3330      	adds	r3, #48	; 0x30
 8005090:	443b      	add	r3, r7
 8005092:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800509a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	431a      	orrs	r2, r3
 80050a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	609a      	str	r2, [r3, #8]
 80050aa:	e002      	b.n	80050b2 <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80050ac:	23fe      	movs	r3, #254	; 0xfe
 80050ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 80050b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3730      	adds	r7, #48	; 0x30
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b08c      	sub	sp, #48	; 0x30
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	330c      	adds	r3, #12
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	f107 0110 	add.w	r1, r7, #16
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	200c      	movs	r0, #12
 8005104:	f7fe fc82 	bl	8003a0c <bmi160_get_regs>
 8005108:	4603      	mov	r3, r0
 800510a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 800510e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005112:	2b00      	cmp	r3, #0
 8005114:	f040 8109 	bne.w	800532a <get_accel_gyro_data+0x26c>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8005118:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005122:	3330      	adds	r3, #48	; 0x30
 8005124:	443b      	add	r3, r7
 8005126:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800512e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005138:	3330      	adds	r3, #48	; 0x30
 800513a:	443b      	add	r3, r7
 800513c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005144:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	b21a      	sxth	r2, r3
 800514c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005150:	b21b      	sxth	r3, r3
 8005152:	4313      	orrs	r3, r2
 8005154:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8c3a      	ldrh	r2, [r7, #32]
 800515a:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800515c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005166:	3330      	adds	r3, #48	; 0x30
 8005168:	443b      	add	r3, r7
 800516a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8005172:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800517c:	3330      	adds	r3, #48	; 0x30
 800517e:	443b      	add	r3, r7
 8005180:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005188:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	b21a      	sxth	r2, r3
 8005190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005194:	b21b      	sxth	r3, r3
 8005196:	4313      	orrs	r3, r2
 8005198:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8c3a      	ldrh	r2, [r7, #32]
 800519e:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80051a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80051aa:	3330      	adds	r3, #48	; 0x30
 80051ac:	443b      	add	r3, r7
 80051ae:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80051b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80051c0:	3330      	adds	r3, #48	; 0x30
 80051c2:	443b      	add	r3, r7
 80051c4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80051cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d8:	b21b      	sxth	r3, r3
 80051da:	4313      	orrs	r3, r2
 80051dc:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8c3a      	ldrh	r2, [r7, #32]
 80051e2:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 80051e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80051ee:	3330      	adds	r3, #48	; 0x30
 80051f0:	443b      	add	r3, r7
 80051f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80051fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005204:	3330      	adds	r3, #48	; 0x30
 8005206:	443b      	add	r3, r7
 8005208:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800520c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005210:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	b21a      	sxth	r2, r3
 8005218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800521c:	b21b      	sxth	r3, r3
 800521e:	4313      	orrs	r3, r2
 8005220:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	8c3a      	ldrh	r2, [r7, #32]
 8005226:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005228:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005232:	3330      	adds	r3, #48	; 0x30
 8005234:	443b      	add	r3, r7
 8005236:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800523a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800523e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005248:	3330      	adds	r3, #48	; 0x30
 800524a:	443b      	add	r3, r7
 800524c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005254:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	b21a      	sxth	r2, r3
 800525c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005260:	b21b      	sxth	r3, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	8c3a      	ldrh	r2, [r7, #32]
 800526a:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800526c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005276:	3330      	adds	r3, #48	; 0x30
 8005278:	443b      	add	r3, r7
 800527a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8005282:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800528c:	3330      	adds	r3, #48	; 0x30
 800528e:	443b      	add	r3, r7
 8005290:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005298:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	b21a      	sxth	r2, r3
 80052a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a4:	b21b      	sxth	r3, r3
 80052a6:	4313      	orrs	r3, r2
 80052a8:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	8c3a      	ldrh	r2, [r7, #32]
 80052ae:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d132      	bne.n	800531c <get_accel_gyro_data+0x25e>
        {
            time_0 = data_array[idx++];
 80052b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80052c0:	3330      	adds	r3, #48	; 0x30
 80052c2:	443b      	add	r3, r7
 80052c4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80052cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80052d6:	3330      	adds	r3, #48	; 0x30
 80052d8:	443b      	add	r3, r7
 80052da:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80052e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80052ee:	3330      	adds	r3, #48	; 0x30
 80052f0:	443b      	add	r3, r7
 80052f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80052fa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	431a      	orrs	r2, r3
 8005300:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005304:	431a      	orrs	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800530a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	431a      	orrs	r2, r3
 8005310:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	e009      	b.n	8005330 <get_accel_gyro_data+0x272>
        }
        else
        {
            accel->sensortime = 0;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	e002      	b.n	8005330 <get_accel_gyro_data+0x272>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800532a:	23fe      	movs	r3, #254	; 0xfe
 800532c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8005330:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005334:	4618      	mov	r0, r3
 8005336:	3730      	adds	r7, #48	; 0x30
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800534e:	f107 010d 	add.w	r1, r7, #13
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2201      	movs	r2, #1
 8005356:	2050      	movs	r0, #80	; 0x50
 8005358:	f7fe fb58 	bl	8003a0c <bmi160_get_regs>
 800535c:	4603      	mov	r3, r0
 800535e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d156      	bne.n	8005416 <enable_accel_any_motion_int+0xda>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d03e      	beq.n	80053f4 <enable_accel_any_motion_int+0xb8>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 8005376:	7b7b      	ldrb	r3, [r7, #13]
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	b25b      	sxtb	r3, r3
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	b25a      	sxtb	r2, r3
 8005390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005394:	4313      	orrs	r3, r2
 8005396:	b25b      	sxtb	r3, r3
 8005398:	b2db      	uxtb	r3, r3
 800539a:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 800539c:	7b7b      	ldrb	r3, [r7, #13]
 800539e:	f023 0302 	bic.w	r3, r3, #2
 80053a2:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	b25b      	sxtb	r3, r3
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	b25a      	sxtb	r2, r3
 80053b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053bc:	4313      	orrs	r3, r2
 80053be:	b25b      	sxtb	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 80053c4:	7b7b      	ldrb	r3, [r7, #13]
 80053c6:	f023 0304 	bic.w	r3, r3, #4
 80053ca:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	b25a      	sxtb	r2, r3
 80053e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b25b      	sxtb	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2200      	movs	r2, #0
 80053f0:	70da      	strb	r2, [r3, #3]
 80053f2:	e007      	b.n	8005404 <enable_accel_any_motion_int+0xc8>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 80053f4:	7b7b      	ldrb	r3, [r7, #13]
 80053f6:	f023 0307 	bic.w	r3, r3, #7
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	22ff      	movs	r2, #255	; 0xff
 8005402:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005404:	f107 010d 	add.w	r1, r7, #13
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	2050      	movs	r0, #80	; 0x50
 800540e:	f7fe fb30 	bl	8003a72 <bmi160_set_regs>
 8005412:	4603      	mov	r3, r0
 8005414:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005416:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005432:	f107 010d 	add.w	r1, r7, #13
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	2062      	movs	r0, #98	; 0x62
 800543c:	f7fe fae6 	bl	8003a0c <bmi160_get_regs>
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d115      	bne.n	8005478 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 800544c:	7b7b      	ldrb	r3, [r7, #13]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00e      	beq.n	8005478 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 800545a:	7b7b      	ldrb	r3, [r7, #13]
 800545c:	f023 0302 	bic.w	r3, r3, #2
 8005460:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005466:	f107 010d 	add.w	r1, r7, #13
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	2062      	movs	r0, #98	; 0x62
 8005470:	f7fe faff 	bl	8003a72 <bmi160_set_regs>
 8005474:	4603      	mov	r3, r0
 8005476:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005478:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 800548e:	4a48      	ldr	r2, [pc, #288]	; (80055b0 <map_feature_interrupt+0x12c>)
 8005490:	f107 030c 	add.w	r3, r7, #12
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	4611      	mov	r1, r2
 8005498:	8019      	strh	r1, [r3, #0]
 800549a:	3302      	adds	r3, #2
 800549c:	0c12      	lsrs	r2, r2, #16
 800549e:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 80054a0:	4a43      	ldr	r2, [pc, #268]	; (80055b0 <map_feature_interrupt+0x12c>)
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	4611      	mov	r1, r2
 80054aa:	8019      	strh	r1, [r3, #0]
 80054ac:	3302      	adds	r3, #2
 80054ae:	0c12      	lsrs	r2, r2, #16
 80054b0:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 80054b2:	f107 010c 	add.w	r1, r7, #12
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2203      	movs	r2, #3
 80054ba:	2055      	movs	r0, #85	; 0x55
 80054bc:	f7fe faa6 	bl	8003a0c <bmi160_get_regs>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80054c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d16a      	bne.n	80055a2 <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 80054cc:	7b3b      	ldrb	r3, [r7, #12]
 80054ce:	b25a      	sxtb	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	4619      	mov	r1, r3
 80054d6:	4b37      	ldr	r3, [pc, #220]	; (80055b4 <map_feature_interrupt+0x130>)
 80054d8:	5c5b      	ldrb	r3, [r3, r1]
 80054da:	b25b      	sxtb	r3, r3
 80054dc:	43db      	mvns	r3, r3
 80054de:	b25b      	sxtb	r3, r3
 80054e0:	4013      	ands	r3, r2
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	b25a      	sxtb	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	4619      	mov	r1, r3
 80054f2:	4b30      	ldr	r3, [pc, #192]	; (80055b4 <map_feature_interrupt+0x130>)
 80054f4:	5c5b      	ldrb	r3, [r3, r1]
 80054f6:	b25b      	sxtb	r3, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	4013      	ands	r3, r2
 80054fe:	b25b      	sxtb	r3, r3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d83b      	bhi.n	8005584 <map_feature_interrupt+0x100>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <map_feature_interrupt+0x90>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005525 	.word	0x08005525
 8005518:	0800552f 	.word	0x0800552f
 800551c:	08005547 	.word	0x08005547
 8005520:	0800555f 	.word	0x0800555f
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 8005524:	7a3b      	ldrb	r3, [r7, #8]
 8005526:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8005528:	7abb      	ldrb	r3, [r7, #10]
 800552a:	73bb      	strb	r3, [r7, #14]
                break;
 800552c:	e02c      	b.n	8005588 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800552e:	7a3a      	ldrb	r2, [r7, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	4619      	mov	r1, r3
 8005536:	4b1f      	ldr	r3, [pc, #124]	; (80055b4 <map_feature_interrupt+0x130>)
 8005538:	5c5b      	ldrb	r3, [r3, r1]
 800553a:	4313      	orrs	r3, r2
 800553c:	b2db      	uxtb	r3, r3
 800553e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8005540:	7abb      	ldrb	r3, [r7, #10]
 8005542:	73bb      	strb	r3, [r7, #14]
                break;
 8005544:	e020      	b.n	8005588 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8005546:	7aba      	ldrb	r2, [r7, #10]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	4619      	mov	r1, r3
 800554e:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <map_feature_interrupt+0x130>)
 8005550:	5c5b      	ldrb	r3, [r3, r1]
 8005552:	4313      	orrs	r3, r2
 8005554:	b2db      	uxtb	r3, r3
 8005556:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8005558:	7a3b      	ldrb	r3, [r7, #8]
 800555a:	733b      	strb	r3, [r7, #12]
                break;
 800555c:	e014      	b.n	8005588 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800555e:	7a3a      	ldrb	r2, [r7, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	4619      	mov	r1, r3
 8005566:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <map_feature_interrupt+0x130>)
 8005568:	5c5b      	ldrb	r3, [r3, r1]
 800556a:	4313      	orrs	r3, r2
 800556c:	b2db      	uxtb	r3, r3
 800556e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8005570:	7aba      	ldrb	r2, [r7, #10]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	4619      	mov	r1, r3
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <map_feature_interrupt+0x130>)
 800557a:	5c5b      	ldrb	r3, [r3, r1]
 800557c:	4313      	orrs	r3, r2
 800557e:	b2db      	uxtb	r3, r3
 8005580:	73bb      	strb	r3, [r7, #14]
                break;
 8005582:	e001      	b.n	8005588 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005584:	23fc      	movs	r3, #252	; 0xfc
 8005586:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8005588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8005590:	f107 010c 	add.w	r1, r7, #12
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2203      	movs	r2, #3
 8005598:	2055      	movs	r0, #85	; 0x55
 800559a:	f7fe fa6a 	bl	8003a72 <bmi160_set_regs>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80055a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	080116ec 	.word	0x080116ec
 80055b4:	08011700 	.word	0x08011700

080055b8 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 80055ca:	f107 010d 	add.w	r1, r7, #13
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	2056      	movs	r0, #86	; 0x56
 80055d4:	f7fe fa1a 	bl	8003a0c <bmi160_get_regs>
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80055dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d168      	bne.n	80056b6 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <map_hardware_interrupt+0x10c>)
 80055ec:	5c9b      	ldrb	r3, [r3, r2]
 80055ee:	b25b      	sxtb	r3, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	b25a      	sxtb	r2, r3
 80055f4:	7b7b      	ldrb	r3, [r7, #13]
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	4013      	ands	r3, r2
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	461a      	mov	r2, r3
 8005604:	4b2f      	ldr	r3, [pc, #188]	; (80056c4 <map_hardware_interrupt+0x10c>)
 8005606:	5c9b      	ldrb	r3, [r3, r2]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	b2db      	uxtb	r3, r3
 800560c:	b25b      	sxtb	r3, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	b25a      	sxtb	r2, r3
 8005612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005616:	4013      	ands	r3, r2
 8005618:	b25b      	sxtb	r3, r3
 800561a:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d839      	bhi.n	8005698 <map_hardware_interrupt+0xe0>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <map_hardware_interrupt+0x74>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	0800563d 	.word	0x0800563d
 8005630:	08005643 	.word	0x08005643
 8005634:	0800565b 	.word	0x0800565b
 8005638:	0800566f 	.word	0x0800566f
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	737b      	strb	r3, [r7, #13]
                break;
 8005640:	e02c      	b.n	800569c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	461a      	mov	r2, r3
 8005648:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <map_hardware_interrupt+0x10c>)
 800564a:	5c9b      	ldrb	r3, [r3, r2]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	b2da      	uxtb	r2, r3
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	4313      	orrs	r3, r2
 8005654:	b2db      	uxtb	r3, r3
 8005656:	737b      	strb	r3, [r7, #13]
                break;
 8005658:	e020      	b.n	800569c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	461a      	mov	r2, r3
 8005660:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <map_hardware_interrupt+0x10c>)
 8005662:	5c9a      	ldrb	r2, [r3, r2]
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	4313      	orrs	r3, r2
 8005668:	b2db      	uxtb	r3, r3
 800566a:	737b      	strb	r3, [r7, #13]
                break;
 800566c:	e016      	b.n	800569c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	461a      	mov	r2, r3
 8005674:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <map_hardware_interrupt+0x10c>)
 8005676:	5c9a      	ldrb	r2, [r3, r2]
 8005678:	7bbb      	ldrb	r3, [r7, #14]
 800567a:	4313      	orrs	r3, r2
 800567c:	b2db      	uxtb	r3, r3
 800567e:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	461a      	mov	r2, r3
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <map_hardware_interrupt+0x10c>)
 8005688:	5c9b      	ldrb	r3, [r3, r2]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	b2da      	uxtb	r2, r3
 800568e:	7b7b      	ldrb	r3, [r7, #13]
 8005690:	4313      	orrs	r3, r2
 8005692:	b2db      	uxtb	r3, r3
 8005694:	737b      	strb	r3, [r7, #13]
                break;
 8005696:	e001      	b.n	800569c <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005698:	23fc      	movs	r3, #252	; 0xfc
 800569a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 800569c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d108      	bne.n	80056b6 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 80056a4:	f107 010d 	add.w	r1, r7, #13
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	2056      	movs	r0, #86	; 0x56
 80056ae:	f7fe f9e0 	bl	8003a72 <bmi160_set_regs>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80056b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	08011700 	.word	0x08011700

080056c8 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80056da:	f107 010d 	add.w	r1, r7, #13
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2201      	movs	r2, #1
 80056e2:	2059      	movs	r0, #89	; 0x59
 80056e4:	f7fe f992 	bl	8003a0c <bmi160_get_regs>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80056ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d119      	bne.n	8005728 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80056f4:	7b7b      	ldrb	r3, [r7, #13]
 80056f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056fa:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	01db      	lsls	r3, r3, #7
 8005708:	b25a      	sxtb	r2, r3
 800570a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800570e:	4313      	orrs	r3, r2
 8005710:	b25b      	sxtb	r3, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005716:	f107 010d 	add.w	r1, r7, #13
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2201      	movs	r2, #1
 800571e:	2059      	movs	r0, #89	; 0x59
 8005720:	f7fe f9a7 	bl	8003a72 <bmi160_set_regs>
 8005724:	4603      	mov	r3, r0
 8005726:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8005746:	2300      	movs	r3, #0
 8005748:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 800574a:	f107 010c 	add.w	r1, r7, #12
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	205f      	movs	r0, #95	; 0x5f
 8005754:	f7fe f95a 	bl	8003a0c <bmi160_get_regs>
 8005758:	4603      	mov	r3, r0
 800575a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800575c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d122      	bne.n	80057aa <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800576c:	b2db      	uxtb	r3, r3
 800576e:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8005770:	7b3b      	ldrb	r3, [r7, #12]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8005778:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800577c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005780:	b25a      	sxtb	r2, r3
 8005782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005786:	4313      	orrs	r3, r2
 8005788:	b25b      	sxtb	r3, r3
 800578a:	b2db      	uxtb	r3, r3
 800578c:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 800578e:	7b3b      	ldrb	r3, [r7, #12]
 8005790:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8005798:	f107 0108 	add.w	r1, r7, #8
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2202      	movs	r2, #2
 80057a0:	205f      	movs	r0, #95	; 0x5f
 80057a2:	f7fe f966 	bl	8003a72 <bmi160_set_regs>
 80057a6:	4603      	mov	r3, r0
 80057a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80057aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7fe fed8 	bl	800457a <set_intr_pin_config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80057ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d122      	bne.n	800581c <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff fe23 	bl	8005422 <disable_sig_motion_int>
 80057dc:	4603      	mov	r3, r0
 80057de:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80057e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d119      	bne.n	800581c <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fe4a 	bl	8005484 <map_feature_interrupt>
 80057f0:	4603      	mov	r3, r0
 80057f2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80057f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	68b8      	ldr	r0, [r7, #8]
 8005800:	f7ff ff62 	bl	80056c8 <config_any_motion_src>
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8005808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	68b8      	ldr	r0, [r7, #8]
 8005814:	f7ff ff8e 	bl	8005734 <config_any_dur_threshold>
 8005818:	4603      	mov	r3, r0
 800581a:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800581c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8005838:	f107 010d 	add.w	r1, r7, #13
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	2051      	movs	r0, #81	; 0x51
 8005842:	f7fe f8e3 	bl	8003a0c <bmi160_get_regs>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800584a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d111      	bne.n	8005876 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8005852:	7b7b      	ldrb	r3, [r7, #13]
 8005854:	f023 0310 	bic.w	r3, r3, #16
 8005858:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 800585a:	7bbb      	ldrb	r3, [r7, #14]
 800585c:	f043 0310 	orr.w	r3, r3, #16
 8005860:	b2db      	uxtb	r3, r3
 8005862:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8005864:	f107 010d 	add.w	r1, r7, #13
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	2051      	movs	r0, #81	; 0x51
 800586e:	f7fe f900 	bl	8003a72 <bmi160_set_regs>
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005894:	f107 010d 	add.w	r1, r7, #13
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2201      	movs	r2, #1
 800589c:	2052      	movs	r0, #82	; 0x52
 800589e:	f7fe f8b5 	bl	8003a0c <bmi160_get_regs>
 80058a2:	4603      	mov	r3, r0
 80058a4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80058a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d138      	bne.n	8005920 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 80058bc:	7b7b      	ldrb	r3, [r7, #13]
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 80058dc:	7b7b      	ldrb	r3, [r7, #13]
 80058de:	f023 0302 	bic.w	r3, r3, #2
 80058e2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	f043 0302 	orr.w	r3, r3, #2
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d008      	beq.n	800590e <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 80058fc:	7b7b      	ldrb	r3, [r7, #13]
 80058fe:	f023 0304 	bic.w	r3, r3, #4
 8005902:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8005904:	7bbb      	ldrb	r3, [r7, #14]
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	b2db      	uxtb	r3, r3
 800590c:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 800590e:	f107 010d 	add.w	r1, r7, #13
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2201      	movs	r2, #1
 8005916:	2052      	movs	r0, #82	; 0x52
 8005918:	f7fe f8ab 	bl	8003a72 <bmi160_set_regs>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005920:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7fe fe1d 	bl	800457a <set_intr_pin_config>
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005944:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d119      	bne.n	8005980 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff fd98 	bl	8005484 <map_feature_interrupt>
 8005954:	4603      	mov	r3, r0
 8005956:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10f      	bne.n	8005980 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	68b8      	ldr	r0, [r7, #8]
 8005964:	f000 f812 	bl	800598c <config_no_motion_data_src>
 8005968:	4603      	mov	r3, r0
 800596a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 800596c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	68b8      	ldr	r0, [r7, #8]
 8005978:	f000 f83e 	bl	80059f8 <config_no_motion_dur_thr>
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005980:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800599e:	f107 010d 	add.w	r1, r7, #13
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	2059      	movs	r0, #89	; 0x59
 80059a8:	f7fe f830 	bl	8003a0c <bmi160_get_regs>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80059b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d119      	bne.n	80059ec <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80059b8:	7b7b      	ldrb	r3, [r7, #13]
 80059ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059be:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	01db      	lsls	r3, r3, #7
 80059cc:	b25a      	sxtb	r2, r3
 80059ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	b25b      	sxtb	r3, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80059da:	f107 010d 	add.w	r1, r7, #13
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2201      	movs	r2, #1
 80059e2:	2059      	movs	r0, #89	; 0x59
 80059e4:	f7fe f845 	bl	8003a72 <bmi160_set_regs>
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80059ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8005a0e:	2300      	movs	r3, #0
 8005a10:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8005a12:	235f      	movs	r3, #95	; 0x5f
 8005a14:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8005a16:	f107 010b 	add.w	r1, r7, #11
 8005a1a:	7b38      	ldrb	r0, [r7, #12]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f7fd fff4 	bl	8003a0c <bmi160_get_regs>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d14b      	bne.n	8005ac8 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8005a30:	7afb      	ldrb	r3, [r7, #11]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	b25a      	sxtb	r2, r3
 8005a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	b25b      	sxtb	r3, r3
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8005a52:	f107 010b 	add.w	r1, r7, #11
 8005a56:	7b38      	ldrb	r0, [r7, #12]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f7fe f809 	bl	8003a72 <bmi160_set_regs>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d12d      	bne.n	8005ac8 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 8005a6c:	2362      	movs	r3, #98	; 0x62
 8005a6e:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8005a70:	f107 010b 	add.w	r1, r7, #11
 8005a74:	7b38      	ldrb	r0, [r7, #12]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f7fd ffc7 	bl	8003a0c <bmi160_get_regs>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11e      	bne.n	8005ac8 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 8005a9e:	7bba      	ldrb	r2, [r7, #14]
 8005aa0:	7b7b      	ldrb	r3, [r7, #13]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
 8005aaa:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	789b      	ldrb	r3, [r3, #2]
 8005ab0:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8005ab2:	2361      	movs	r3, #97	; 0x61
 8005ab4:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8005ab6:	f107 0108 	add.w	r1, r7, #8
 8005aba:	7b38      	ldrb	r0, [r7, #12]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f7fd ffd7 	bl	8003a72 <bmi160_set_regs>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8005ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005ae6:	f107 010d 	add.w	r1, r7, #13
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	2050      	movs	r0, #80	; 0x50
 8005af0:	f7fd ff8c 	bl	8003a0c <bmi160_get_regs>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d124      	bne.n	8005b4a <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8005b0e:	7b7b      	ldrb	r3, [r7, #13]
 8005b10:	f023 0307 	bic.w	r3, r3, #7
 8005b14:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	f043 0307 	orr.w	r3, r3, #7
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2201      	movs	r2, #1
 8005b24:	70da      	strb	r2, [r3, #3]
 8005b26:	e007      	b.n	8005b38 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8005b28:	7b7b      	ldrb	r3, [r7, #13]
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	22ff      	movs	r2, #255	; 0xff
 8005b36:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005b38:	f107 010d 	add.w	r1, r7, #13
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	2050      	movs	r0, #80	; 0x50
 8005b42:	f7fd ff96 	bl	8003a72 <bmi160_set_regs>
 8005b46:	4603      	mov	r3, r0
 8005b48:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7fe fd08 	bl	800457a <set_intr_pin_config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d119      	bne.n	8005baa <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fc83 	bl	8005484 <map_feature_interrupt>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	68b8      	ldr	r0, [r7, #8]
 8005b8e:	f000 f812 	bl	8005bb6 <config_sig_motion_data_src>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	68b8      	ldr	r0, [r7, #8]
 8005ba2:	f000 f83e 	bl	8005c22 <config_sig_dur_threshold>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005bc8:	f107 010d 	add.w	r1, r7, #13
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	2059      	movs	r0, #89	; 0x59
 8005bd2:	f7fd ff1b 	bl	8003a0c <bmi160_get_regs>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d119      	bne.n	8005c16 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005be2:	7b7b      	ldrb	r3, [r7, #13]
 8005be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	01db      	lsls	r3, r3, #7
 8005bf6:	b25a      	sxtb	r2, r3
 8005bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	b25b      	sxtb	r3, r3
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005c04:	f107 010d 	add.w	r1, r7, #13
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	2059      	movs	r0, #89	; 0x59
 8005c0e:	f7fd ff30 	bl	8003a72 <bmi160_set_regs>
 8005c12:	4603      	mov	r3, r0
 8005c14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 8005c36:	f107 010d 	add.w	r1, r7, #13
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	2060      	movs	r0, #96	; 0x60
 8005c40:	f7fd ff17 	bl	8003a72 <bmi160_set_regs>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d151      	bne.n	8005cf4 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005c50:	f107 010d 	add.w	r1, r7, #13
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2201      	movs	r2, #1
 8005c58:	2062      	movs	r0, #98	; 0x62
 8005c5a:	f7fd fed7 	bl	8003a0c <bmi160_get_regs>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d144      	bne.n	8005cf4 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 8005c6a:	7b7b      	ldrb	r3, [r7, #13]
 8005c6c:	f023 030c 	bic.w	r3, r3, #12
 8005c70:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	f003 030c 	and.w	r3, r3, #12
 8005c84:	b25a      	sxtb	r2, r3
 8005c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	b25b      	sxtb	r3, r3
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8005c92:	7b7b      	ldrb	r3, [r7, #13]
 8005c94:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005c98:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	b25b      	sxtb	r3, r3
 8005ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cac:	b25a      	sxtb	r2, r3
 8005cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	b25b      	sxtb	r3, r3
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8005cba:	7b7b      	ldrb	r3, [r7, #13]
 8005cbc:	f023 0302 	bic.w	r3, r3, #2
 8005cc0:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	b25b      	sxtb	r3, r3
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	b25a      	sxtb	r2, r3
 8005cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	b25b      	sxtb	r3, r3
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005ce2:	f107 010d 	add.w	r1, r7, #13
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2062      	movs	r0, #98	; 0x62
 8005cec:	f7fd fec1 	bl	8003a72 <bmi160_set_regs>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005d12:	f107 010d 	add.w	r1, r7, #13
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	2052      	movs	r0, #82	; 0x52
 8005d1c:	f7fd fe76 	bl	8003a0c <bmi160_get_regs>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d11c      	bne.n	8005d66 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 8005d2c:	7b7b      	ldrb	r3, [r7, #13]
 8005d2e:	f023 0308 	bic.w	r3, r3, #8
 8005d32:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	b25b      	sxtb	r3, r3
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	b25a      	sxtb	r2, r3
 8005d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005d54:	f107 010d 	add.w	r1, r7, #13
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	2052      	movs	r0, #82	; 0x52
 8005d5e:	f7fd fe88 	bl	8003a72 <bmi160_set_regs>
 8005d62:	4603      	mov	r3, r0
 8005d64:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 8005d80:	2300      	movs	r3, #0
 8005d82:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8005d92:	2315      	movs	r3, #21
 8005d94:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8005d96:	2303      	movs	r3, #3
 8005d98:	737b      	strb	r3, [r7, #13]
 8005d9a:	e065      	b.n	8005e68 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d104      	bne.n	8005db4 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8005daa:	232d      	movs	r3, #45	; 0x2d
 8005dac:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 8005dae:	2300      	movs	r3, #0
 8005db0:	737b      	strb	r3, [r7, #13]
 8005db2:	e059      	b.n	8005e68 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d104      	bne.n	8005dcc <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8005dc2:	231d      	movs	r3, #29
 8005dc4:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8005dc6:	2307      	movs	r3, #7
 8005dc8:	737b      	strb	r3, [r7, #13]
 8005dca:	e04d      	b.n	8005e68 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd8:	d146      	bne.n	8005e68 <config_step_detect+0xf6>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8005dda:	f107 010c 	add.w	r1, r7, #12
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2202      	movs	r2, #2
 8005de2:	207a      	movs	r0, #122	; 0x7a
 8005de4:	f7fd fe12 	bl	8003a0c <bmi160_get_regs>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8005dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d139      	bne.n	8005e68 <config_step_detect+0xf6>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8005df4:	7b3b      	ldrb	r3, [r7, #12]
 8005df6:	f023 0318 	bic.w	r3, r3, #24
 8005dfa:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	b25b      	sxtb	r3, r3
 8005e0a:	f003 0318 	and.w	r3, r3, #24
 8005e0e:	b25a      	sxtb	r2, r3
 8005e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8005e1c:	7b3b      	ldrb	r3, [r7, #12]
 8005e1e:	f023 0307 	bic.w	r3, r3, #7
 8005e22:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	b25b      	sxtb	r3, r3
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	b25a      	sxtb	r2, r3
 8005e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	b25b      	sxtb	r3, r3
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8005e42:	7b7b      	ldrb	r3, [r7, #13]
 8005e44:	f023 0307 	bic.w	r3, r3, #7
 8005e48:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	b25b      	sxtb	r3, r3
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	b25a      	sxtb	r2, r3
 8005e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	b25b      	sxtb	r3, r3
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8005e68:	f107 010c 	add.w	r1, r7, #12
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	207a      	movs	r0, #122	; 0x7a
 8005e72:	f7fd fdfe 	bl	8003a72 <bmi160_set_regs>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8005e7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005e9a:	f107 0115 	add.w	r1, r7, #21
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	2050      	movs	r0, #80	; 0x50
 8005ea4:	f7fd fdb2 	bl	8003a0c <bmi160_get_regs>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d135      	bne.n	8005f20 <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d114      	bne.n	8005ee6 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8005ebc:	7d7b      	ldrb	r3, [r7, #21]
 8005ebe:	f023 0320 	bic.w	r3, r3, #32
 8005ec2:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	015b      	lsls	r3, r3, #5
 8005ed0:	b25b      	sxtb	r3, r3
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	b25a      	sxtb	r2, r3
 8005ed8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	757b      	strb	r3, [r7, #21]
 8005ee4:	e013      	b.n	8005f0e <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8005ee6:	7d7b      	ldrb	r3, [r7, #21]
 8005ee8:	f023 0310 	bic.w	r3, r3, #16
 8005eec:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	b25b      	sxtb	r3, r3
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	b25a      	sxtb	r2, r3
 8005f02:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b25b      	sxtb	r3, r3
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005f0e:	f107 0115 	add.w	r1, r7, #21
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	2050      	movs	r0, #80	; 0x50
 8005f18:	f7fd fdab 	bl	8003a72 <bmi160_set_regs>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7fe fb1d 	bl	800457a <set_intr_pin_config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d11a      	bne.n	8005f82 <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff fa98 	bl	8005484 <map_feature_interrupt>
 8005f54:	4603      	mov	r3, r0
 8005f56:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d110      	bne.n	8005f82 <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68b8      	ldr	r0, [r7, #8]
 8005f64:	f000 f813 	bl	8005f8e <config_tap_data_src>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f841 	bl	8006000 <config_tap_param>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8005fa0:	f107 010d 	add.w	r1, r7, #13
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	2058      	movs	r0, #88	; 0x58
 8005faa:	f7fd fd2f 	bl	8003a0c <bmi160_get_regs>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d11c      	bne.n	8005ff4 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8005fba:	7b7b      	ldrb	r3, [r7, #13]
 8005fbc:	f023 0308 	bic.w	r3, r3, #8
 8005fc0:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	b25a      	sxtb	r2, r3
 8005fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	b25b      	sxtb	r3, r3
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8005fe2:	f107 010d 	add.w	r1, r7, #13
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	2058      	movs	r0, #88	; 0x58
 8005fec:	f7fd fd41 	bl	8003a72 <bmi160_set_regs>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8006014:	2300      	movs	r3, #0
 8006016:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 800601c:	f107 0114 	add.w	r1, r7, #20
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	2063      	movs	r0, #99	; 0x63
 8006026:	f7fd fcf1 	bl	8003a0c <bmi160_get_regs>
 800602a:	4603      	mov	r3, r0
 800602c:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 800602e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d178      	bne.n	8006128 <config_tap_param+0x128>
    {
        data = data_array[count];
 8006036:	7f3b      	ldrb	r3, [r7, #28]
 8006038:	3320      	adds	r3, #32
 800603a:	443b      	add	r3, r7
 800603c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006040:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d113      	bne.n	8006072 <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8006052:	b2db      	uxtb	r3, r3
 8006054:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 8006056:	7fbb      	ldrb	r3, [r7, #30]
 8006058:	f023 0307 	bic.w	r3, r3, #7
 800605c:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 800605e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	b25a      	sxtb	r2, r3
 8006068:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800606c:	4313      	orrs	r3, r2
 800606e:	b25b      	sxtb	r3, r3
 8006070:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 800607e:	7fbb      	ldrb	r3, [r7, #30]
 8006080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006084:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8006086:	7ebb      	ldrb	r3, [r7, #26]
 8006088:	019b      	lsls	r3, r3, #6
 800608a:	b25b      	sxtb	r3, r3
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	b25a      	sxtb	r2, r3
 8006092:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006096:	4313      	orrs	r3, r2
 8006098:	b25b      	sxtb	r3, r3
 800609a:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 80060a8:	7fbb      	ldrb	r3, [r7, #30]
 80060aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ae:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 80060b0:	7e7b      	ldrb	r3, [r7, #25]
 80060b2:	01db      	lsls	r3, r3, #7
 80060b4:	b25a      	sxtb	r2, r3
 80060b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 80060c0:	7f3b      	ldrb	r3, [r7, #28]
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	773a      	strb	r2, [r7, #28]
 80060c6:	3320      	adds	r3, #32
 80060c8:	443b      	add	r3, r7
 80060ca:	7fba      	ldrb	r2, [r7, #30]
 80060cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 80060d0:	7f3b      	ldrb	r3, [r7, #28]
 80060d2:	3320      	adds	r3, #32
 80060d4:	443b      	add	r3, r7
 80060d6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80060da:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 80060e8:	7fbb      	ldrb	r3, [r7, #30]
 80060ea:	f023 031f 	bic.w	r3, r3, #31
 80060ee:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 80060f0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	b25a      	sxtb	r2, r3
 80060fa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80060fe:	4313      	orrs	r3, r2
 8006100:	b25b      	sxtb	r3, r3
 8006102:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006104:	7f3b      	ldrb	r3, [r7, #28]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	773a      	strb	r2, [r7, #28]
 800610a:	3320      	adds	r3, #32
 800610c:	443b      	add	r3, r7
 800610e:	7fba      	ldrb	r2, [r7, #30]
 8006110:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8006114:	7f3b      	ldrb	r3, [r7, #28]
 8006116:	b29a      	uxth	r2, r3
 8006118:	f107 0114 	add.w	r1, r7, #20
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2063      	movs	r0, #99	; 0x63
 8006120:	f7fd fca7 	bl	8003a72 <bmi160_set_regs>
 8006124:	4603      	mov	r3, r0
 8006126:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006128:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006146:	f107 010d 	add.w	r1, r7, #13
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2201      	movs	r2, #1
 800614e:	2050      	movs	r0, #80	; 0x50
 8006150:	f7fd fc5c 	bl	8003a0c <bmi160_get_regs>
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11c      	bne.n	800619a <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8006160:	7b7b      	ldrb	r3, [r7, #13]
 8006162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006166:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	789b      	ldrb	r3, [r3, #2]
 800616c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006170:	b2db      	uxtb	r3, r3
 8006172:	019b      	lsls	r3, r3, #6
 8006174:	b25b      	sxtb	r3, r3
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	b25a      	sxtb	r2, r3
 800617c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006180:	4313      	orrs	r3, r2
 8006182:	b25b      	sxtb	r3, r3
 8006184:	b2db      	uxtb	r3, r3
 8006186:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006188:	f107 010d 	add.w	r1, r7, #13
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2201      	movs	r2, #1
 8006190:	2050      	movs	r0, #80	; 0x50
 8006192:	f7fd fc6e 	bl	8003a72 <bmi160_set_regs>
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800619a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 80061b8:	2300      	movs	r3, #0
 80061ba:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 80061bc:	f107 0108 	add.w	r1, r7, #8
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2202      	movs	r2, #2
 80061c4:	2065      	movs	r0, #101	; 0x65
 80061c6:	f7fd fc21 	bl	8003a0c <bmi160_get_regs>
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80061ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d17a      	bne.n	80062cc <config_orient_int_settg+0x126>
    {
        data = data_array[0];
 80061d6:	7a3b      	ldrb	r3, [r7, #8]
 80061d8:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	f023 0303 	bic.w	r3, r3, #3
 80061e0:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	b25b      	sxtb	r3, r3
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	b25a      	sxtb	r2, r3
 80061f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	f023 030c 	bic.w	r3, r3, #12
 8006204:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800620e:	b2db      	uxtb	r3, r3
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	b25b      	sxtb	r3, r3
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	b25a      	sxtb	r2, r3
 800621a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800621e:	4313      	orrs	r3, r2
 8006220:	b25b      	sxtb	r3, r3
 8006222:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006234:	b2db      	uxtb	r3, r3
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	b25a      	sxtb	r2, r3
 800623a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800623e:	4313      	orrs	r3, r2
 8006240:	b25b      	sxtb	r3, r3
 8006242:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006248:	7a7b      	ldrb	r3, [r7, #9]
 800624a:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006252:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800625c:	b2db      	uxtb	r3, r3
 800625e:	b25b      	sxtb	r3, r3
 8006260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006264:	b25a      	sxtb	r2, r3
 8006266:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800626a:	4313      	orrs	r3, r2
 800626c:	b25b      	sxtb	r3, r3
 800626e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006276:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	019b      	lsls	r3, r3, #6
 8006284:	b25b      	sxtb	r3, r3
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	b25a      	sxtb	r2, r3
 800628c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006290:	4313      	orrs	r3, r2
 8006292:	b25b      	sxtb	r3, r3
 8006294:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800629c:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	01db      	lsls	r3, r3, #7
 80062aa:	b25a      	sxtb	r2, r3
 80062ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 80062ba:	f107 0108 	add.w	r1, r7, #8
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2202      	movs	r2, #2
 80062c2:	2065      	movs	r0, #101	; 0x65
 80062c4:	f7fd fbd5 	bl	8003a72 <bmi160_set_regs>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80062cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80062ea:	f107 010d 	add.w	r1, r7, #13
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2201      	movs	r2, #1
 80062f2:	2050      	movs	r0, #80	; 0x50
 80062f4:	f7fd fb8a 	bl	8003a0c <bmi160_get_regs>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80062fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d119      	bne.n	8006338 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8006304:	7b7b      	ldrb	r3, [r7, #13]
 8006306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006314:	b2db      	uxtb	r3, r3
 8006316:	01db      	lsls	r3, r3, #7
 8006318:	b25a      	sxtb	r2, r3
 800631a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800631e:	4313      	orrs	r3, r2
 8006320:	b25b      	sxtb	r3, r3
 8006322:	b2db      	uxtb	r3, r3
 8006324:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006326:	f107 010d 	add.w	r1, r7, #13
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	2050      	movs	r0, #80	; 0x50
 8006330:	f7fd fb9f 	bl	8003a72 <bmi160_set_regs>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006356:	2300      	movs	r3, #0
 8006358:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 800635a:	f107 0108 	add.w	r1, r7, #8
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2202      	movs	r2, #2
 8006362:	2067      	movs	r0, #103	; 0x67
 8006364:	f7fd fb52 	bl	8003a0c <bmi160_get_regs>
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800636c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d147      	bne.n	8006404 <config_flat_int_settg+0xc0>
    {
        data = data_array[0];
 8006374:	7a3b      	ldrb	r3, [r7, #8]
 8006376:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800637e:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006388:	b2db      	uxtb	r3, r3
 800638a:	b25b      	sxtb	r3, r3
 800638c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006390:	b25a      	sxtb	r2, r3
 8006392:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006396:	4313      	orrs	r3, r2
 8006398:	b25b      	sxtb	r3, r3
 800639a:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80063a0:	7a7b      	ldrb	r3, [r7, #9]
 80063a2:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80063aa:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	b25b      	sxtb	r3, r3
 80063ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063be:	b25a      	sxtb	r2, r3
 80063c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	b25b      	sxtb	r3, r3
 80063c8:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	f023 0307 	bic.w	r3, r3, #7
 80063d0:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	b25b      	sxtb	r3, r3
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	b25a      	sxtb	r2, r3
 80063e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 80063f2:	f107 0108 	add.w	r1, r7, #8
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2202      	movs	r2, #2
 80063fa:	2067      	movs	r0, #103	; 0x67
 80063fc:	f7fd fb39 	bl	8003a72 <bmi160_set_regs>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006422:	f107 010d 	add.w	r1, r7, #13
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2201      	movs	r2, #1
 800642a:	2051      	movs	r0, #81	; 0x51
 800642c:	f7fd faee 	bl	8003a0c <bmi160_get_regs>
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d11c      	bne.n	8006476 <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 800643c:	7b7b      	ldrb	r3, [r7, #13]
 800643e:	f023 0308 	bic.w	r3, r3, #8
 8006442:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	789b      	ldrb	r3, [r3, #2]
 8006448:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800644c:	b2db      	uxtb	r3, r3
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f003 0308 	and.w	r3, r3, #8
 8006456:	b25a      	sxtb	r2, r3
 8006458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800645c:	4313      	orrs	r3, r2
 800645e:	b25b      	sxtb	r3, r3
 8006460:	b2db      	uxtb	r3, r3
 8006462:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006464:	f107 010d 	add.w	r1, r7, #13
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	2051      	movs	r0, #81	; 0x51
 800646e:	f7fd fb00 	bl	8003a72 <bmi160_set_regs>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006494:	f107 010d 	add.w	r1, r7, #13
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2201      	movs	r2, #1
 800649c:	2058      	movs	r0, #88	; 0x58
 800649e:	f7fd fab5 	bl	8003a0c <bmi160_get_regs>
 80064a2:	4603      	mov	r3, r0
 80064a4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80064a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d119      	bne.n	80064e2 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80064ae:	7b7b      	ldrb	r3, [r7, #13]
 80064b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b4:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	789b      	ldrb	r3, [r3, #2]
 80064ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	01db      	lsls	r3, r3, #7
 80064c2:	b25a      	sxtb	r2, r3
 80064c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80064d0:	f107 010d 	add.w	r1, r7, #13
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2201      	movs	r2, #1
 80064d8:	2058      	movs	r0, #88	; 0x58
 80064da:	f7fd faca 	bl	8003a72 <bmi160_set_regs>
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80064e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 80064fe:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <config_low_g_int_settg+0xb4>)
 8006500:	f107 0308 	add.w	r3, r7, #8
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	4611      	mov	r1, r2
 8006508:	8019      	strh	r1, [r3, #0]
 800650a:	3302      	adds	r3, #2
 800650c:	0c12      	lsrs	r2, r2, #16
 800650e:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8006510:	f107 0308 	add.w	r3, r7, #8
 8006514:	1c99      	adds	r1, r3, #2
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2201      	movs	r2, #1
 800651a:	205c      	movs	r0, #92	; 0x5c
 800651c:	f7fd fa76 	bl	8003a0c <bmi160_get_regs>
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d135      	bne.n	8006598 <config_low_g_int_settg+0xa8>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 800652c:	7abb      	ldrb	r3, [r7, #10]
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	789b      	ldrb	r3, [r3, #2]
 8006538:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800653c:	b2db      	uxtb	r3, r3
 800653e:	b25b      	sxtb	r3, r3
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	b25a      	sxtb	r2, r3
 8006546:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800654a:	4313      	orrs	r3, r2
 800654c:	b25b      	sxtb	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 8006552:	7abb      	ldrb	r3, [r7, #10]
 8006554:	f023 0304 	bic.w	r3, r3, #4
 8006558:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	789b      	ldrb	r3, [r3, #2]
 800655e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006562:	b2db      	uxtb	r3, r3
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	b25b      	sxtb	r3, r3
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	b25a      	sxtb	r2, r3
 800656e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006572:	4313      	orrs	r3, r2
 8006574:	b25b      	sxtb	r3, r3
 8006576:	b2db      	uxtb	r3, r3
 8006578:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8006586:	f107 0108 	add.w	r1, r7, #8
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2203      	movs	r2, #3
 800658e:	205a      	movs	r0, #90	; 0x5a
 8006590:	f7fd fa6f 	bl	8003a72 <bmi160_set_regs>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	080116ec 	.word	0x080116ec

080065a8 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80065ba:	f107 010d 	add.w	r1, r7, #13
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2201      	movs	r2, #1
 80065c2:	2051      	movs	r0, #81	; 0x51
 80065c4:	f7fd fa22 	bl	8003a0c <bmi160_get_regs>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80065cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d143      	bne.n	800665c <enable_high_g_int+0xb4>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 80065d4:	7b7b      	ldrb	r3, [r7, #13]
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	b25a      	sxtb	r2, r3
 80065ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 80065fa:	7b7b      	ldrb	r3, [r7, #13]
 80065fc:	f023 0302 	bic.w	r3, r3, #2
 8006600:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	b25b      	sxtb	r3, r3
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	b25a      	sxtb	r2, r3
 8006616:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800661a:	4313      	orrs	r3, r2
 800661c:	b25b      	sxtb	r3, r3
 800661e:	b2db      	uxtb	r3, r3
 8006620:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8006622:	7b7b      	ldrb	r3, [r7, #13]
 8006624:	f023 0304 	bic.w	r3, r3, #4
 8006628:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006632:	b2db      	uxtb	r3, r3
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	b25b      	sxtb	r3, r3
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	b25a      	sxtb	r2, r3
 800663e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006642:	4313      	orrs	r3, r2
 8006644:	b25b      	sxtb	r3, r3
 8006646:	b2db      	uxtb	r3, r3
 8006648:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800664a:	f107 010d 	add.w	r1, r7, #13
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2201      	movs	r2, #1
 8006652:	2051      	movs	r0, #81	; 0x51
 8006654:	f7fd fa0d 	bl	8003a72 <bmi160_set_regs>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800665c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800667a:	f107 010d 	add.w	r1, r7, #13
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2201      	movs	r2, #1
 8006682:	2058      	movs	r0, #88	; 0x58
 8006684:	f7fd f9c2 	bl	8003a0c <bmi160_get_regs>
 8006688:	4603      	mov	r3, r0
 800668a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800668c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d119      	bne.n	80066c8 <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8006694:	7b7b      	ldrb	r3, [r7, #13]
 8006696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800669a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	01db      	lsls	r3, r3, #7
 80066a8:	b25a      	sxtb	r2, r3
 80066aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	b25b      	sxtb	r3, r3
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80066b6:	f107 010d 	add.w	r1, r7, #13
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	2058      	movs	r0, #88	; 0x58
 80066c0:	f7fd f9d7 	bl	8003a72 <bmi160_set_regs>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80066c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 80066e2:	4a1e      	ldr	r2, [pc, #120]	; (800675c <config_high_g_int_settg+0x88>)
 80066e4:	f107 0308 	add.w	r3, r7, #8
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	4611      	mov	r1, r2
 80066ec:	8019      	strh	r1, [r3, #0]
 80066ee:	3302      	adds	r3, #2
 80066f0:	0c12      	lsrs	r2, r2, #16
 80066f2:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2201      	movs	r2, #1
 80066fc:	205c      	movs	r0, #92	; 0x5c
 80066fe:	f7fd f985 	bl	8003a0c <bmi160_get_regs>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d11f      	bne.n	800674e <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 800670e:	7a3b      	ldrb	r3, [r7, #8]
 8006710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006714:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800671e:	b2db      	uxtb	r3, r3
 8006720:	019b      	lsls	r3, r3, #6
 8006722:	b25a      	sxtb	r2, r3
 8006724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006728:	4313      	orrs	r3, r2
 800672a:	b25b      	sxtb	r3, r3
 800672c:	b2db      	uxtb	r3, r3
 800672e:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	789b      	ldrb	r3, [r3, #2]
 8006734:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 800673c:	f107 0108 	add.w	r1, r7, #8
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2203      	movs	r2, #3
 8006744:	205c      	movs	r0, #92	; 0x5c
 8006746:	f7fd f994 	bl	8003a72 <bmi160_set_regs>
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800674e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	080116ec 	.word	0x080116ec

08006760 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8006772:	f107 010f 	add.w	r1, r7, #15
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2201      	movs	r2, #1
 800677a:	2053      	movs	r0, #83	; 0x53
 800677c:	f7fd f946 	bl	8003a0c <bmi160_get_regs>
 8006780:	4603      	mov	r3, r0
 8006782:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f040 80ad 	bne.w	80068e8 <config_int_out_ctrl+0x188>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3302      	adds	r3, #2
 8006792:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d14f      	bne.n	800683c <config_int_out_ctrl+0xdc>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	f023 0308 	bic.w	r3, r3, #8
 80067a2:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	b25a      	sxtb	r2, r3
 80067b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80067bc:	4313      	orrs	r3, r2
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	f023 0304 	bic.w	r3, r3, #4
 80067ca:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	b25b      	sxtb	r3, r3
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	b25a      	sxtb	r2, r3
 80067e0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	b25b      	sxtb	r3, r3
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	f023 0302 	bic.w	r3, r3, #2
 80067f2:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	b25b      	sxtb	r3, r3
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	b25a      	sxtb	r2, r3
 8006808:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800680c:	4313      	orrs	r3, r2
 800680e:	b25b      	sxtb	r3, r3
 8006810:	b2db      	uxtb	r3, r3
 8006812:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	b25b      	sxtb	r3, r3
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	b25a      	sxtb	r2, r3
 800682e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006832:	4313      	orrs	r3, r2
 8006834:	b25b      	sxtb	r3, r3
 8006836:	b2db      	uxtb	r3, r3
 8006838:	73fb      	strb	r3, [r7, #15]
 800683a:	e04c      	b.n	80068d6 <config_int_out_ctrl+0x176>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006842:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	01db      	lsls	r3, r3, #7
 8006850:	b25a      	sxtb	r2, r3
 8006852:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006856:	4313      	orrs	r3, r2
 8006858:	b25b      	sxtb	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006864:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800686e:	b2db      	uxtb	r3, r3
 8006870:	019b      	lsls	r3, r3, #6
 8006872:	b25b      	sxtb	r3, r3
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	b25a      	sxtb	r2, r3
 800687a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800687e:	4313      	orrs	r3, r2
 8006880:	b25b      	sxtb	r3, r3
 8006882:	b2db      	uxtb	r3, r3
 8006884:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	f023 0320 	bic.w	r3, r3, #32
 800688c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006896:	b2db      	uxtb	r3, r3
 8006898:	015b      	lsls	r3, r3, #5
 800689a:	b25b      	sxtb	r3, r3
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	b25a      	sxtb	r2, r3
 80068a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	f023 0310 	bic.w	r3, r3, #16
 80068b4:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	b25b      	sxtb	r3, r3
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	b25a      	sxtb	r2, r3
 80068ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	b25b      	sxtb	r3, r3
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80068d6:	f107 010f 	add.w	r1, r7, #15
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2201      	movs	r2, #1
 80068de:	2053      	movs	r0, #83	; 0x53
 80068e0:	f7fd f8c7 	bl	8003a72 <bmi160_set_regs>
 80068e4:	4603      	mov	r3, r0
 80068e6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80068e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8006906:	f107 010f 	add.w	r1, r7, #15
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2201      	movs	r2, #1
 800690e:	2054      	movs	r0, #84	; 0x54
 8006910:	f7fd f87c 	bl	8003a0c <bmi160_get_regs>
 8006914:	4603      	mov	r3, r0
 8006916:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d14b      	bne.n	80069b8 <config_int_latch+0xc4>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3302      	adds	r3, #2
 8006924:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d114      	bne.n	8006958 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	f023 0310 	bic.w	r3, r3, #16
 8006934:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	b25b      	sxtb	r3, r3
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	b25a      	sxtb	r2, r3
 800694a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800694e:	4313      	orrs	r3, r2
 8006950:	b25b      	sxtb	r3, r3
 8006952:	b2db      	uxtb	r3, r3
 8006954:	73fb      	strb	r3, [r7, #15]
 8006956:	e013      	b.n	8006980 <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	f023 0320 	bic.w	r3, r3, #32
 800695e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	015b      	lsls	r3, r3, #5
 800696c:	b25b      	sxtb	r3, r3
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	b25a      	sxtb	r2, r3
 8006974:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006978:	4313      	orrs	r3, r2
 800697a:	b25b      	sxtb	r3, r3
 800697c:	b2db      	uxtb	r3, r3
 800697e:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	f023 030f 	bic.w	r3, r3, #15
 8006986:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8006990:	b2db      	uxtb	r3, r3
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	b25a      	sxtb	r2, r3
 800699a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800699e:	4313      	orrs	r3, r2
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 80069a6:	f107 010f 	add.w	r1, r7, #15
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2201      	movs	r2, #1
 80069ae:	2054      	movs	r0, #84	; 0x54
 80069b0:	f7fd f85f 	bl	8003a72 <bmi160_set_regs>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80069b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <set_fifo_full_int+0x1c>
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 80069e0:	23ff      	movs	r3, #255	; 0xff
 80069e2:	73fb      	strb	r3, [r7, #15]
 80069e4:	e019      	b.n	8006a1a <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f81c 	bl	8006a26 <enable_fifo_full_int>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80069f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10f      	bne.n	8006a1a <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fd fdbc 	bl	800457a <set_intr_pin_config>
 8006a02:	4603      	mov	r3, r0
 8006a04:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fe fdd1 	bl	80055b8 <map_hardware_interrupt>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8006a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006a34:	f107 010e 	add.w	r1, r7, #14
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	2051      	movs	r0, #81	; 0x51
 8006a3e:	f7fc ffe5 	bl	8003a0c <bmi160_get_regs>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d11b      	bne.n	8006a86 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	b25b      	sxtb	r3, r3
 8006a52:	f023 0320 	bic.w	r3, r3, #32
 8006a56:	b25a      	sxtb	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	7a1b      	ldrb	r3, [r3, #8]
 8006a5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	015b      	lsls	r3, r3, #5
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b25b      	sxtb	r3, r3
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006a74:	f107 010e 	add.w	r1, r7, #14
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	2051      	movs	r0, #81	; 0x51
 8006a7e:	f7fc fff8 	bl	8003a72 <bmi160_set_regs>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <set_fifo_watermark_int+0x1c>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d102      	bne.n	8006ab4 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8006aae:	23ff      	movs	r3, #255	; 0xff
 8006ab0:	73fb      	strb	r3, [r7, #15]
 8006ab2:	e019      	b.n	8006ae8 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f81c 	bl	8006af4 <enable_fifo_wtm_int>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10f      	bne.n	8006ae8 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fd fd55 	bl	800457a <set_intr_pin_config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fe fd6a 	bl	80055b8 <map_hardware_interrupt>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8006ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006b02:	f107 010e 	add.w	r1, r7, #14
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	2051      	movs	r0, #81	; 0x51
 8006b0c:	f7fc ff7e 	bl	8003a0c <bmi160_get_regs>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11b      	bne.n	8006b54 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b24:	b25a      	sxtb	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	7a1b      	ldrb	r3, [r3, #8]
 8006b2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	019b      	lsls	r3, r3, #6
 8006b32:	b25b      	sxtb	r3, r3
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b25b      	sxtb	r3, r3
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006b42:	f107 010e 	add.w	r1, r7, #14
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	2051      	movs	r0, #81	; 0x51
 8006b4c:	f7fc ff91 	bl	8003a72 <bmi160_set_regs>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 8006b6a:	f107 010e 	add.w	r1, r7, #14
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2201      	movs	r2, #1
 8006b72:	201b      	movs	r0, #27
 8006b74:	f7fc ff4a 	bl	8003a0c <bmi160_get_regs>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d107      	bne.n	8006b94 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	10db      	asrs	r3, r3, #3
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8006baa:	6838      	ldr	r0, [r7, #0]
 8006bac:	f7fd fd00 	bl	80045b0 <null_ptr_check>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8006bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8006bbc:	23ff      	movs	r3, #255	; 0xff
 8006bbe:	73fb      	strb	r3, [r7, #15]
 8006bc0:	e032      	b.n	8006c28 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8006bc2:	f107 010e 	add.w	r1, r7, #14
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	2077      	movs	r0, #119	; 0x77
 8006bcc:	f7fc ff1e 	bl	8003a0c <bmi160_get_regs>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d125      	bne.n	8006c28 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	b25b      	sxtb	r3, r3
 8006be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be4:	b25a      	sxtb	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	795b      	ldrb	r3, [r3, #5]
 8006bea:	01db      	lsls	r3, r3, #7
 8006bec:	b25b      	sxtb	r3, r3
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	b25b      	sxtb	r3, r3
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	b25b      	sxtb	r3, r3
 8006bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bfe:	b25a      	sxtb	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	791b      	ldrb	r3, [r3, #4]
 8006c04:	019b      	lsls	r3, r3, #6
 8006c06:	b25b      	sxtb	r3, r3
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8006c16:	f107 010e 	add.w	r1, r7, #14
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	2077      	movs	r0, #119	; 0x77
 8006c20:	f7fc ff27 	bl	8003a72 <bmi160_set_regs>
 8006c24:	4603      	mov	r3, r0
 8006c26:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 8006c42:	2303      	movs	r3, #3
 8006c44:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 8006c4a:	f107 011c 	add.w	r1, r7, #28
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2201      	movs	r2, #1
 8006c52:	207e      	movs	r0, #126	; 0x7e
 8006c54:	f7fc ff0d 	bl	8003a72 <bmi160_set_regs>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8006c5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d141      	bne.n	8006ce8 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 8006c64:	f107 031d 	add.w	r3, r7, #29
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff ff78 	bl	8006b60 <get_foc_status>
 8006c70:	4603      	mov	r3, r0
 8006c72:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 8006c74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d112      	bne.n	8006ca2 <trigger_foc+0x6e>
 8006c7c:	7f7b      	ldrb	r3, [r7, #29]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d025      	beq.n	8006cce <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8006c82:	e00e      	b.n	8006ca2 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	2019      	movs	r0, #25
 8006c8a:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 8006c8c:	f107 031d 	add.w	r3, r7, #29
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ff64 	bl	8006b60 <get_foc_status>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	77fb      	strb	r3, [r7, #31]
                timeout++;
 8006c9c:	7fbb      	ldrb	r3, [r7, #30]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8006ca2:	7f7b      	ldrb	r3, [r7, #29]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d002      	beq.n	8006cae <trigger_foc+0x7a>
 8006ca8:	7fbb      	ldrb	r3, [r7, #30]
 8006caa:	2b1f      	cmp	r3, #31
 8006cac:	d9ea      	bls.n	8006c84 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 8006cae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <trigger_foc+0x96>
 8006cb6:	7f7b      	ldrb	r3, [r7, #29]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d106      	bne.n	8006cca <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fd f991 	bl	8003fe6 <bmi160_get_offsets>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e001      	b.n	8006cce <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 8006cca:	23f5      	movs	r3, #245	; 0xf5
 8006ccc:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 8006cce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d108      	bne.n	8006ce8 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8006cd6:	f107 0108 	add.w	r1, r7, #8
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2214      	movs	r2, #20
 8006cde:	200c      	movs	r0, #12
 8006ce0:	f7fc fe94 	bl	8003a0c <bmi160_get_regs>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8006ce8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3720      	adds	r7, #32
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8006cfc:	f000 f970 	bl	8006fe0 <set_bmi160_Ares>
	set_bmi160_Gres();
 8006d00:	f000 f99a 	bl	8007038 <set_bmi160_Gres>
	get_bmi160_Ares();
 8006d04:	f000 f9ca 	bl	800709c <get_bmi160_Ares>
	get_bmi160_Gres();
 8006d08:	f000 f9fe 	bl	8007108 <get_bmi160_Gres>

    sensor.id = 0;
 8006d0c:	4b52      	ldr	r3, [pc, #328]	; (8006e58 <BMI160_init+0x164>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8006d12:	4b51      	ldr	r3, [pc, #324]	; (8006e58 <BMI160_init+0x164>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8006d18:	4b4f      	ldr	r3, [pc, #316]	; (8006e58 <BMI160_init+0x164>)
 8006d1a:	4a50      	ldr	r2, [pc, #320]	; (8006e5c <BMI160_init+0x168>)
 8006d1c:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 8006d1e:	4b4e      	ldr	r3, [pc, #312]	; (8006e58 <BMI160_init+0x164>)
 8006d20:	4a4f      	ldr	r2, [pc, #316]	; (8006e60 <BMI160_init+0x16c>)
 8006d22:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8006d24:	4b4c      	ldr	r3, [pc, #304]	; (8006e58 <BMI160_init+0x164>)
 8006d26:	4a4f      	ldr	r2, [pc, #316]	; (8006e64 <BMI160_init+0x170>)
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24
    sensor.read_write_len = 32;
 8006d2a:	4b4b      	ldr	r3, [pc, #300]	; (8006e58 <BMI160_init+0x164>)
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	851a      	strh	r2, [r3, #40]	; 0x28

    rslt = bmi160_soft_reset(&sensor);
 8006d30:	4849      	ldr	r0, [pc, #292]	; (8006e58 <BMI160_init+0x164>)
 8006d32:	f7fc ff4f 	bl	8003bd4 <bmi160_soft_reset>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 8006d3a:	4b47      	ldr	r3, [pc, #284]	; (8006e58 <BMI160_init+0x164>)
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	20c8      	movs	r0, #200	; 0xc8
 8006d40:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 8006d42:	4845      	ldr	r0, [pc, #276]	; (8006e58 <BMI160_init+0x164>)
 8006d44:	f7fc fef8 	bl	8003b38 <bmi160_init>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 8006d54:	2301      	movs	r3, #1
 8006d56:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 8006d58:	89ba      	ldrh	r2, [r7, #12]
 8006d5a:	f107 010b 	add.w	r1, r7, #11
 8006d5e:	7bb8      	ldrb	r0, [r7, #14]
 8006d60:	4b3d      	ldr	r3, [pc, #244]	; (8006e58 <BMI160_init+0x164>)
 8006d62:	f7fc fe53 	bl	8003a0c <bmi160_get_regs>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ; //BMI160_ACCEL_ODR_400HZ
 8006d6a:	4b3b      	ldr	r3, [pc, #236]	; (8006e58 <BMI160_init+0x164>)
 8006d6c:	220c      	movs	r2, #12
 8006d6e:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 8006d70:	4b39      	ldr	r3, [pc, #228]	; (8006e58 <BMI160_init+0x164>)
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2064      	movs	r0, #100	; 0x64
 8006d76:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 8006d78:	4b3b      	ldr	r3, [pc, #236]	; (8006e68 <BMI160_init+0x174>)
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	4b36      	ldr	r3, [pc, #216]	; (8006e58 <BMI160_init+0x164>)
 8006d7e:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 8006d80:	4b35      	ldr	r3, [pc, #212]	; (8006e58 <BMI160_init+0x164>)
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2064      	movs	r0, #100	; 0x64
 8006d86:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8006d88:	4b33      	ldr	r3, [pc, #204]	; (8006e58 <BMI160_init+0x164>)
 8006d8a:	2211      	movs	r2, #17
 8006d8c:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 8006d8e:	4b32      	ldr	r3, [pc, #200]	; (8006e58 <BMI160_init+0x164>)
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	2064      	movs	r0, #100	; 0x64
 8006d94:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <BMI160_init+0x164>)
 8006d98:	2202      	movs	r2, #2
 8006d9a:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 8006d9c:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <BMI160_init+0x164>)
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	2064      	movs	r0, #100	; 0x64
 8006da2:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_1600HZ; //BMI160_GYRO_ODR_400HZ
 8006da4:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <BMI160_init+0x164>)
 8006da6:	220c      	movs	r2, #12
 8006da8:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8006daa:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <BMI160_init+0x164>)
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	2064      	movs	r0, #100	; 0x64
 8006db0:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 8006db2:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <BMI160_init+0x178>)
 8006db4:	781a      	ldrb	r2, [r3, #0]
 8006db6:	4b28      	ldr	r3, [pc, #160]	; (8006e58 <BMI160_init+0x164>)
 8006db8:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8006dba:	4b27      	ldr	r3, [pc, #156]	; (8006e58 <BMI160_init+0x164>)
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2064      	movs	r0, #100	; 0x64
 8006dc0:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8006dc2:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <BMI160_init+0x164>)
 8006dc4:	2215      	movs	r2, #21
 8006dc6:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8006dc8:	4b23      	ldr	r3, [pc, #140]	; (8006e58 <BMI160_init+0x164>)
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2064      	movs	r0, #100	; 0x64
 8006dce:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8006dd0:	4b21      	ldr	r3, [pc, #132]	; (8006e58 <BMI160_init+0x164>)
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <BMI160_init+0x164>)
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2064      	movs	r0, #100	; 0x64
 8006ddc:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8006dde:	481e      	ldr	r0, [pc, #120]	; (8006e58 <BMI160_init+0x164>)
 8006de0:	f7fc ff33 	bl	8003c4a <bmi160_set_sens_conf>
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8006de8:	f000 f844 	bl	8006e74 <start_foc>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8006df0:	4b1f      	ldr	r3, [pc, #124]	; (8006e70 <BMI160_init+0x17c>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8006df6:	4b1e      	ldr	r3, [pc, #120]	; (8006e70 <BMI160_init+0x17c>)
 8006df8:	220a      	movs	r2, #10
 8006dfa:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <BMI160_init+0x17c>)
 8006dfe:	7893      	ldrb	r3, [r2, #2]
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8006e06:	4a1a      	ldr	r2, [pc, #104]	; (8006e70 <BMI160_init+0x17c>)
 8006e08:	7893      	ldrb	r3, [r2, #2]
 8006e0a:	f36f 0341 	bfc	r3, #1, #1
 8006e0e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8006e10:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <BMI160_init+0x17c>)
 8006e12:	7893      	ldrb	r3, [r2, #2]
 8006e14:	f36f 0382 	bfc	r3, #2, #1
 8006e18:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8006e1a:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <BMI160_init+0x17c>)
 8006e1c:	7893      	ldrb	r3, [r2, #2]
 8006e1e:	f043 0308 	orr.w	r3, r3, #8
 8006e22:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8006e24:	4a12      	ldr	r2, [pc, #72]	; (8006e70 <BMI160_init+0x17c>)
 8006e26:	7893      	ldrb	r3, [r2, #2]
 8006e28:	f36f 1304 	bfc	r3, #4, #1
 8006e2c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <BMI160_init+0x17c>)
 8006e30:	8853      	ldrh	r3, [r2, #2]
 8006e32:	f36f 1348 	bfc	r3, #5, #4
 8006e36:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8006e38:	4907      	ldr	r1, [pc, #28]	; (8006e58 <BMI160_init+0x164>)
 8006e3a:	480d      	ldr	r0, [pc, #52]	; (8006e70 <BMI160_init+0x17c>)
 8006e3c:	f7fc ffc6 	bl	8003dcc <bmi160_set_int_config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7bfa      	ldrb	r2, [r7, #15]
 8006e48:	761a      	strb	r2, [r3, #24]
    return rslt;
 8006e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	24000224 	.word	0x24000224
 8006e5c:	08007191 	.word	0x08007191
 8006e60:	080071d5 	.word	0x080071d5
 8006e64:	08008959 	.word	0x08008959
 8006e68:	24000286 	.word	0x24000286
 8006e6c:	24000287 	.word	0x24000287
 8006e70:	2400027c 	.word	0x2400027c

08006e74 <start_foc>:

int8_t start_foc()
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 8006e7e:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <start_foc+0x58>)
 8006e80:	2201      	movs	r2, #1
 8006e82:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8006e84:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <start_foc+0x58>)
 8006e86:	2203      	movs	r2, #3
 8006e88:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <start_foc+0x58>)
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 8006e90:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <start_foc+0x58>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8006e96:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <start_foc+0x5c>)
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	2064      	movs	r0, #100	; 0x64
 8006e9c:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <start_foc+0x58>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8006ea4:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <start_foc+0x58>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8006eaa:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <start_foc+0x5c>)
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2064      	movs	r0, #100	; 0x64
 8006eb0:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8006eb2:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <start_foc+0x5c>)
 8006eb4:	4907      	ldr	r1, [pc, #28]	; (8006ed4 <start_foc+0x60>)
 8006eb6:	4805      	ldr	r0, [pc, #20]	; (8006ecc <start_foc+0x58>)
 8006eb8:	f7fd f814 	bl	8003ee4 <bmi160_start_foc>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8006ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	24000268 	.word	0x24000268
 8006ed0:	24000224 	.word	0x24000224
 8006ed4:	24000270 	.word	0x24000270

08006ed8 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08a      	sub	sp, #40	; 0x28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 8006ee0:	4b3a      	ldr	r3, [pc, #232]	; (8006fcc <bmi160ReadAccelGyro+0xf4>)
 8006ee2:	4a3b      	ldr	r2, [pc, #236]	; (8006fd0 <bmi160ReadAccelGyro+0xf8>)
 8006ee4:	493b      	ldr	r1, [pc, #236]	; (8006fd4 <bmi160ReadAccelGyro+0xfc>)
 8006ee6:	2003      	movs	r0, #3
 8006ee8:	f7fc ff09 	bl	8003cfe <bmi160_get_sensor_data>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	ax = (float)accel.x / bmi160_aRes;
 8006ef2:	4b38      	ldr	r3, [pc, #224]	; (8006fd4 <bmi160ReadAccelGyro+0xfc>)
 8006ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ef8:	ee07 3a90 	vmov	s15, r3
 8006efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f00:	4b35      	ldr	r3, [pc, #212]	; (8006fd8 <bmi160ReadAccelGyro+0x100>)
 8006f02:	ed93 7a00 	vldr	s14, [r3]
 8006f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0a:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 8006f0e:	4b31      	ldr	r3, [pc, #196]	; (8006fd4 <bmi160ReadAccelGyro+0xfc>)
 8006f10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f1c:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <bmi160ReadAccelGyro+0x100>)
 8006f1e:	ed93 7a00 	vldr	s14, [r3]
 8006f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 8006f2a:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <bmi160ReadAccelGyro+0xfc>)
 8006f2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f38:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <bmi160ReadAccelGyro+0x100>)
 8006f3a:	ed93 7a00 	vldr	s14, [r3]
 8006f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f42:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 8006f46:	4b22      	ldr	r3, [pc, #136]	; (8006fd0 <bmi160ReadAccelGyro+0xf8>)
 8006f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f54:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <bmi160ReadAccelGyro+0x104>)
 8006f56:	ed93 7a00 	vldr	s14, [r3]
 8006f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f5e:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 8006f62:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <bmi160ReadAccelGyro+0xf8>)
 8006f64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f68:	ee07 3a90 	vmov	s15, r3
 8006f6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f70:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <bmi160ReadAccelGyro+0x104>)
 8006f72:	ed93 7a00 	vldr	s14, [r3]
 8006f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7a:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 8006f7e:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <bmi160ReadAccelGyro+0xf8>)
 8006f80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f8c:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <bmi160ReadAccelGyro+0x104>)
 8006f8e:	ed93 7a00 	vldr	s14, [r3]
 8006f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f96:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Accel_f32[0] = ax;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a3a      	ldr	r2, [r7, #32]
 8006f9e:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Accel_f32[1] = ay;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Accel_f32[2] = az;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gyro_f32[0] = gx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gyro_f32[1] = gy;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gyro_f32[2] = gz;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	615a      	str	r2, [r3, #20]

	return rslt;
 8006fbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3728      	adds	r7, #40	; 0x28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	24000224 	.word	0x24000224
 8006fd0:	2400025c 	.word	0x2400025c
 8006fd4:	24000250 	.word	0x24000250
 8006fd8:	24000288 	.word	0x24000288
 8006fdc:	2400028c 	.word	0x2400028c

08006fe0 <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8006fe4:	4b12      	ldr	r3, [pc, #72]	; (8007030 <set_bmi160_Ares+0x50>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d81a      	bhi.n	8007024 <set_bmi160_Ares+0x44>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <set_bmi160_Ares+0x14>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	0800700d 	.word	0x0800700d
 8006ffc:	08007015 	.word	0x08007015
 8007000:	0800701d 	.word	0x0800701d
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8007004:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <set_bmi160_Ares+0x54>)
 8007006:	2203      	movs	r2, #3
 8007008:	701a      	strb	r2, [r3, #0]
			break;
 800700a:	e00b      	b.n	8007024 <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <set_bmi160_Ares+0x54>)
 800700e:	2205      	movs	r2, #5
 8007010:	701a      	strb	r2, [r3, #0]
			break;
 8007012:	e007      	b.n	8007024 <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8007014:	4b07      	ldr	r3, [pc, #28]	; (8007034 <set_bmi160_Ares+0x54>)
 8007016:	2208      	movs	r2, #8
 8007018:	701a      	strb	r2, [r3, #0]
			break;
 800701a:	e003      	b.n	8007024 <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <set_bmi160_Ares+0x54>)
 800701e:	220c      	movs	r2, #12
 8007020:	701a      	strb	r2, [r3, #0]
			break;
 8007022:	bf00      	nop
	}
}
 8007024:	bf00      	nop
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	24000018 	.word	0x24000018
 8007034:	24000286 	.word	0x24000286

08007038 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 800703c:	4b15      	ldr	r3, [pc, #84]	; (8007094 <set_bmi160_Gres+0x5c>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	3b01      	subs	r3, #1
 8007042:	2b04      	cmp	r3, #4
 8007044:	d820      	bhi.n	8007088 <set_bmi160_Gres+0x50>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <set_bmi160_Gres+0x14>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007061 	.word	0x08007061
 8007050:	08007069 	.word	0x08007069
 8007054:	08007071 	.word	0x08007071
 8007058:	08007079 	.word	0x08007079
 800705c:	08007081 	.word	0x08007081
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8007060:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <set_bmi160_Gres+0x60>)
 8007062:	2204      	movs	r2, #4
 8007064:	701a      	strb	r2, [r3, #0]
			break;
 8007066:	e00f      	b.n	8007088 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8007068:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <set_bmi160_Gres+0x60>)
 800706a:	2203      	movs	r2, #3
 800706c:	701a      	strb	r2, [r3, #0]
			break;
 800706e:	e00b      	b.n	8007088 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8007070:	4b09      	ldr	r3, [pc, #36]	; (8007098 <set_bmi160_Gres+0x60>)
 8007072:	2202      	movs	r2, #2
 8007074:	701a      	strb	r2, [r3, #0]
			break;
 8007076:	e007      	b.n	8007088 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <set_bmi160_Gres+0x60>)
 800707a:	2201      	movs	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
			break;
 800707e:	e003      	b.n	8007088 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <set_bmi160_Gres+0x60>)
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
			break;
 8007086:	bf00      	nop
	}
}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	24000019 	.word	0x24000019
 8007098:	24000287 	.word	0x24000287

0800709c <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 80070a0:	4b17      	ldr	r3, [pc, #92]	; (8007100 <get_bmi160_Ares+0x64>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d826      	bhi.n	80070f6 <get_bmi160_Ares+0x5a>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <get_bmi160_Ares+0x14>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070c5 	.word	0x080070c5
 80070b4:	080070cf 	.word	0x080070cf
 80070b8:	080070d9 	.word	0x080070d9
 80070bc:	080070e3 	.word	0x080070e3
 80070c0:	080070ed 	.word	0x080070ed
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 80070c4:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <get_bmi160_Ares+0x68>)
 80070c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80070ca:	601a      	str	r2, [r3, #0]
			break;
 80070cc:	e013      	b.n	80070f6 <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 80070ce:	4b0d      	ldr	r3, [pc, #52]	; (8007104 <get_bmi160_Ares+0x68>)
 80070d0:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80070d4:	601a      	str	r2, [r3, #0]
			break;
 80070d6:	e00e      	b.n	80070f6 <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <get_bmi160_Ares+0x68>)
 80070da:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80070de:	601a      	str	r2, [r3, #0]
			break;
 80070e0:	e009      	b.n	80070f6 <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <get_bmi160_Ares+0x68>)
 80070e4:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80070e8:	601a      	str	r2, [r3, #0]
			break;
 80070ea:	e004      	b.n	80070f6 <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <get_bmi160_Ares+0x68>)
 80070ee:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80070f2:	601a      	str	r2, [r3, #0]
			break;
 80070f4:	bf00      	nop
	}
}
 80070f6:	bf00      	nop
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	2400001a 	.word	0x2400001a
 8007104:	24000288 	.word	0x24000288

08007108 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 800710c:	4b18      	ldr	r3, [pc, #96]	; (8007170 <get_bmi160_Gres+0x68>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b05      	cmp	r3, #5
 8007112:	d828      	bhi.n	8007166 <get_bmi160_Gres+0x5e>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <get_bmi160_Gres+0x14>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007135 	.word	0x08007135
 8007120:	0800713f 	.word	0x0800713f
 8007124:	08007147 	.word	0x08007147
 8007128:	0800714f 	.word	0x0800714f
 800712c:	08007157 	.word	0x08007157
 8007130:	0800715f 	.word	0x0800715f
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8007134:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <get_bmi160_Gres+0x6c>)
 8007136:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800713a:	601a      	str	r2, [r3, #0]
			break;
 800713c:	e013      	b.n	8007166 <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 800713e:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <get_bmi160_Gres+0x70>)
 8007140:	4a0e      	ldr	r2, [pc, #56]	; (800717c <get_bmi160_Gres+0x74>)
 8007142:	601a      	str	r2, [r3, #0]
			break;
 8007144:	e00f      	b.n	8007166 <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8007146:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <get_bmi160_Gres+0x70>)
 8007148:	4a0d      	ldr	r2, [pc, #52]	; (8007180 <get_bmi160_Gres+0x78>)
 800714a:	601a      	str	r2, [r3, #0]
			break;
 800714c:	e00b      	b.n	8007166 <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 800714e:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <get_bmi160_Gres+0x70>)
 8007150:	4a0c      	ldr	r2, [pc, #48]	; (8007184 <get_bmi160_Gres+0x7c>)
 8007152:	601a      	str	r2, [r3, #0]
			break;
 8007154:	e007      	b.n	8007166 <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <get_bmi160_Gres+0x70>)
 8007158:	4a0b      	ldr	r2, [pc, #44]	; (8007188 <get_bmi160_Gres+0x80>)
 800715a:	601a      	str	r2, [r3, #0]
			break;
 800715c:	e003      	b.n	8007166 <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <get_bmi160_Gres+0x70>)
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <get_bmi160_Gres+0x84>)
 8007162:	601a      	str	r2, [r3, #0]
			break;
 8007164:	bf00      	nop
	}
}
 8007166:	bf00      	nop
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	2400001b 	.word	0x2400001b
 8007174:	24000288 	.word	0x24000288
 8007178:	2400028c 	.word	0x2400028c
 800717c:	43833333 	.word	0x43833333
 8007180:	43033333 	.word	0x43033333
 8007184:	42833333 	.word	0x42833333
 8007188:	42033333 	.word	0x42033333
 800718c:	41833333 	.word	0x41833333

08007190 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af02      	add	r7, sp, #8
 8007196:	603a      	str	r2, [r7, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
 800719e:	460b      	mov	r3, r1
 80071a0:	71bb      	strb	r3, [r7, #6]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 80071a6:	1dba      	adds	r2, r7, #6
 80071a8:	2364      	movs	r3, #100	; 0x64
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2301      	movs	r3, #1
 80071ae:	21d2      	movs	r1, #210	; 0xd2
 80071b0:	4807      	ldr	r0, [pc, #28]	; (80071d0 <SensorAPI_I2Cx_Read+0x40>)
 80071b2:	f001 ff3f 	bl	8009034 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 80071b6:	88bb      	ldrh	r3, [r7, #4]
 80071b8:	2264      	movs	r2, #100	; 0x64
 80071ba:	9200      	str	r2, [sp, #0]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	21d2      	movs	r1, #210	; 0xd2
 80071c0:	4803      	ldr	r0, [pc, #12]	; (80071d0 <SensorAPI_I2Cx_Read+0x40>)
 80071c2:	f002 f82b 	bl	800921c <HAL_I2C_Master_Receive>
	return 0;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	24000490 	.word	0x24000490

080071d4 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af02      	add	r7, sp, #8
 80071da:	603a      	str	r2, [r7, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	4603      	mov	r3, r0
 80071e0:	71fb      	strb	r3, [r7, #7]
 80071e2:	460b      	mov	r3, r1
 80071e4:	71bb      	strb	r3, [r7, #6]
 80071e6:	4613      	mov	r3, r2
 80071e8:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 80071ea:	4a0c      	ldr	r2, [pc, #48]	; (800721c <SensorAPI_I2Cx_Write+0x48>)
 80071ec:	79bb      	ldrb	r3, [r7, #6]
 80071ee:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 80071f0:	88bb      	ldrh	r3, [r7, #4]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	480a      	ldr	r0, [pc, #40]	; (8007220 <SensorAPI_I2Cx_Write+0x4c>)
 80071f8:	f006 f8c6 	bl	800d388 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 80071fc:	88bb      	ldrh	r3, [r7, #4]
 80071fe:	3301      	adds	r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	2264      	movs	r2, #100	; 0x64
 8007204:	9200      	str	r2, [sp, #0]
 8007206:	4a05      	ldr	r2, [pc, #20]	; (800721c <SensorAPI_I2Cx_Write+0x48>)
 8007208:	21d2      	movs	r1, #210	; 0xd2
 800720a:	4806      	ldr	r0, [pc, #24]	; (8007224 <SensorAPI_I2Cx_Write+0x50>)
 800720c:	f001 ff12 	bl	8009034 <HAL_I2C_Master_Transmit>
	return 0;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	24000290 	.word	0x24000290
 8007220:	24000291 	.word	0x24000291
 8007224:	24000490 	.word	0x24000490

08007228 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08c      	sub	sp, #48	; 0x30
 800722c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722e:	f107 031c 	add.w	r3, r7, #28
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	605a      	str	r2, [r3, #4]
 8007238:	609a      	str	r2, [r3, #8]
 800723a:	60da      	str	r2, [r3, #12]
 800723c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800723e:	4b55      	ldr	r3, [pc, #340]	; (8007394 <MX_GPIO_Init+0x16c>)
 8007240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007244:	4a53      	ldr	r2, [pc, #332]	; (8007394 <MX_GPIO_Init+0x16c>)
 8007246:	f043 0310 	orr.w	r3, r3, #16
 800724a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800724e:	4b51      	ldr	r3, [pc, #324]	; (8007394 <MX_GPIO_Init+0x16c>)
 8007250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800725c:	4b4d      	ldr	r3, [pc, #308]	; (8007394 <MX_GPIO_Init+0x16c>)
 800725e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007262:	4a4c      	ldr	r2, [pc, #304]	; (8007394 <MX_GPIO_Init+0x16c>)
 8007264:	f043 0304 	orr.w	r3, r3, #4
 8007268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800726c:	4b49      	ldr	r3, [pc, #292]	; (8007394 <MX_GPIO_Init+0x16c>)
 800726e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800727a:	4b46      	ldr	r3, [pc, #280]	; (8007394 <MX_GPIO_Init+0x16c>)
 800727c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007280:	4a44      	ldr	r2, [pc, #272]	; (8007394 <MX_GPIO_Init+0x16c>)
 8007282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800728a:	4b42      	ldr	r3, [pc, #264]	; (8007394 <MX_GPIO_Init+0x16c>)
 800728c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	613b      	str	r3, [r7, #16]
 8007296:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007298:	4b3e      	ldr	r3, [pc, #248]	; (8007394 <MX_GPIO_Init+0x16c>)
 800729a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800729e:	4a3d      	ldr	r2, [pc, #244]	; (8007394 <MX_GPIO_Init+0x16c>)
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80072a8:	4b3a      	ldr	r3, [pc, #232]	; (8007394 <MX_GPIO_Init+0x16c>)
 80072aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072b6:	4b37      	ldr	r3, [pc, #220]	; (8007394 <MX_GPIO_Init+0x16c>)
 80072b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072bc:	4a35      	ldr	r2, [pc, #212]	; (8007394 <MX_GPIO_Init+0x16c>)
 80072be:	f043 0302 	orr.w	r3, r3, #2
 80072c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80072c6:	4b33      	ldr	r3, [pc, #204]	; (8007394 <MX_GPIO_Init+0x16c>)
 80072c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072d4:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <MX_GPIO_Init+0x16c>)
 80072d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072da:	4a2e      	ldr	r2, [pc, #184]	; (8007394 <MX_GPIO_Init+0x16c>)
 80072dc:	f043 0308 	orr.w	r3, r3, #8
 80072e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80072e4:	4b2b      	ldr	r3, [pc, #172]	; (8007394 <MX_GPIO_Init+0x16c>)
 80072e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	607b      	str	r3, [r7, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 80072f2:	2200      	movs	r2, #0
 80072f4:	2102      	movs	r1, #2
 80072f6:	4828      	ldr	r0, [pc, #160]	; (8007398 <MX_GPIO_Init+0x170>)
 80072f8:	f001 fdf2 	bl	8008ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80072fc:	2200      	movs	r2, #0
 80072fe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007302:	4826      	ldr	r0, [pc, #152]	; (800739c <MX_GPIO_Init+0x174>)
 8007304:	f001 fdec 	bl	8008ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_K1_Pin;
 8007308:	2308      	movs	r3, #8
 800730a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800730c:	2300      	movs	r3, #0
 800730e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007310:	2300      	movs	r3, #0
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Switch_K1_GPIO_Port, &GPIO_InitStruct);
 8007314:	f107 031c 	add.w	r3, r7, #28
 8007318:	4619      	mov	r1, r3
 800731a:	4821      	ldr	r0, [pc, #132]	; (80073a0 <MX_GPIO_Init+0x178>)
 800731c:	f001 fc30 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8007320:	2302      	movs	r3, #2
 8007322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007324:	2301      	movs	r3, #1
 8007326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007328:	2300      	movs	r3, #0
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800732c:	2300      	movs	r3, #0
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8007330:	f107 031c 	add.w	r3, r7, #28
 8007334:	4619      	mov	r1, r3
 8007336:	4818      	ldr	r0, [pc, #96]	; (8007398 <MX_GPIO_Init+0x170>)
 8007338:	f001 fc22 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_K2_Pin;
 800733c:	2320      	movs	r3, #32
 800733e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007340:	2300      	movs	r3, #0
 8007342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007344:	2300      	movs	r3, #0
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Switch_K2_GPIO_Port, &GPIO_InitStruct);
 8007348:	f107 031c 	add.w	r3, r7, #28
 800734c:	4619      	mov	r1, r3
 800734e:	4815      	ldr	r0, [pc, #84]	; (80073a4 <MX_GPIO_Init+0x17c>)
 8007350:	f001 fc16 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007354:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800735a:	2301      	movs	r3, #1
 800735c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007362:	2300      	movs	r3, #0
 8007364:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007366:	f107 031c 	add.w	r3, r7, #28
 800736a:	4619      	mov	r1, r3
 800736c:	480b      	ldr	r0, [pc, #44]	; (800739c <MX_GPIO_Init+0x174>)
 800736e:	f001 fc07 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BMI160_INT_Pin|MPU9250_INT_Pin;
 8007372:	2360      	movs	r3, #96	; 0x60
 8007374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007376:	2300      	movs	r3, #0
 8007378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800737e:	f107 031c 	add.w	r3, r7, #28
 8007382:	4619      	mov	r1, r3
 8007384:	4805      	ldr	r0, [pc, #20]	; (800739c <MX_GPIO_Init+0x174>)
 8007386:	f001 fbfb 	bl	8008b80 <HAL_GPIO_Init>

}
 800738a:	bf00      	nop
 800738c:	3730      	adds	r7, #48	; 0x30
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	58024400 	.word	0x58024400
 8007398:	58020000 	.word	0x58020000
 800739c:	58020c00 	.word	0x58020c00
 80073a0:	58021000 	.word	0x58021000
 80073a4:	58020800 	.word	0x58020800

080073a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80073ac:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <MX_I2C1_Init+0x78>)
 80073ae:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <MX_I2C1_Init+0x7c>)
 80073b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 80073b2:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <MX_I2C1_Init+0x78>)
 80073b4:	4a1c      	ldr	r2, [pc, #112]	; (8007428 <MX_I2C1_Init+0x80>)
 80073b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80073b8:	4b19      	ldr	r3, [pc, #100]	; (8007420 <MX_I2C1_Init+0x78>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80073be:	4b18      	ldr	r3, [pc, #96]	; (8007420 <MX_I2C1_Init+0x78>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80073c4:	4b16      	ldr	r3, [pc, #88]	; (8007420 <MX_I2C1_Init+0x78>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80073ca:	4b15      	ldr	r3, [pc, #84]	; (8007420 <MX_I2C1_Init+0x78>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80073d0:	4b13      	ldr	r3, [pc, #76]	; (8007420 <MX_I2C1_Init+0x78>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80073d6:	4b12      	ldr	r3, [pc, #72]	; (8007420 <MX_I2C1_Init+0x78>)
 80073d8:	2200      	movs	r2, #0
 80073da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80073dc:	4b10      	ldr	r3, [pc, #64]	; (8007420 <MX_I2C1_Init+0x78>)
 80073de:	2200      	movs	r2, #0
 80073e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80073e2:	480f      	ldr	r0, [pc, #60]	; (8007420 <MX_I2C1_Init+0x78>)
 80073e4:	f001 fd96 	bl	8008f14 <HAL_I2C_Init>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80073ee:	f000 fbf3 	bl	8007bd8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80073f2:	2100      	movs	r1, #0
 80073f4:	480a      	ldr	r0, [pc, #40]	; (8007420 <MX_I2C1_Init+0x78>)
 80073f6:	f002 fa7f 	bl	80098f8 <HAL_I2CEx_ConfigAnalogFilter>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007400:	f000 fbea 	bl	8007bd8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007404:	2100      	movs	r1, #0
 8007406:	4806      	ldr	r0, [pc, #24]	; (8007420 <MX_I2C1_Init+0x78>)
 8007408:	f002 fac1 	bl	800998e <HAL_I2CEx_ConfigDigitalFilter>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007412:	f000 fbe1 	bl	8007bd8 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8007416:	2001      	movs	r0, #1
 8007418:	f002 fb06 	bl	8009a28 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800741c:	bf00      	nop
 800741e:	bd80      	pop	{r7, pc}
 8007420:	24000490 	.word	0x24000490
 8007424:	40005400 	.word	0x40005400
 8007428:	00401242 	.word	0x00401242

0800742c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007430:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <MX_I2C2_Init+0x78>)
 8007432:	4a1d      	ldr	r2, [pc, #116]	; (80074a8 <MX_I2C2_Init+0x7c>)
 8007434:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401242;
 8007436:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <MX_I2C2_Init+0x78>)
 8007438:	4a1c      	ldr	r2, [pc, #112]	; (80074ac <MX_I2C2_Init+0x80>)
 800743a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800743c:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <MX_I2C2_Init+0x78>)
 800743e:	2200      	movs	r2, #0
 8007440:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007442:	4b18      	ldr	r3, [pc, #96]	; (80074a4 <MX_I2C2_Init+0x78>)
 8007444:	2201      	movs	r2, #1
 8007446:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007448:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <MX_I2C2_Init+0x78>)
 800744a:	2200      	movs	r2, #0
 800744c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <MX_I2C2_Init+0x78>)
 8007450:	2200      	movs	r2, #0
 8007452:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007454:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <MX_I2C2_Init+0x78>)
 8007456:	2200      	movs	r2, #0
 8007458:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <MX_I2C2_Init+0x78>)
 800745c:	2200      	movs	r2, #0
 800745e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007460:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <MX_I2C2_Init+0x78>)
 8007462:	2200      	movs	r2, #0
 8007464:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007466:	480f      	ldr	r0, [pc, #60]	; (80074a4 <MX_I2C2_Init+0x78>)
 8007468:	f001 fd54 	bl	8008f14 <HAL_I2C_Init>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007472:	f000 fbb1 	bl	8007bd8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007476:	2100      	movs	r1, #0
 8007478:	480a      	ldr	r0, [pc, #40]	; (80074a4 <MX_I2C2_Init+0x78>)
 800747a:	f002 fa3d 	bl	80098f8 <HAL_I2CEx_ConfigAnalogFilter>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007484:	f000 fba8 	bl	8007bd8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007488:	2100      	movs	r1, #0
 800748a:	4806      	ldr	r0, [pc, #24]	; (80074a4 <MX_I2C2_Init+0x78>)
 800748c:	f002 fa7f 	bl	800998e <HAL_I2CEx_ConfigDigitalFilter>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007496:	f000 fb9f 	bl	8007bd8 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800749a:	2002      	movs	r0, #2
 800749c:	f002 fac4 	bl	8009a28 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80074a0:	bf00      	nop
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	240004dc 	.word	0x240004dc
 80074a8:	40005800 	.word	0x40005800
 80074ac:	00401242 	.word	0x00401242

080074b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b0ba      	sub	sp, #232	; 0xe8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	605a      	str	r2, [r3, #4]
 80074c2:	609a      	str	r2, [r3, #8]
 80074c4:	60da      	str	r2, [r3, #12]
 80074c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80074c8:	f107 0318 	add.w	r3, r7, #24
 80074cc:	22bc      	movs	r2, #188	; 0xbc
 80074ce:	2100      	movs	r1, #0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f005 ff67 	bl	800d3a4 <memset>
  if(i2cHandle->Instance==I2C1)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a49      	ldr	r2, [pc, #292]	; (8007600 <HAL_I2C_MspInit+0x150>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d142      	bne.n	8007566 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80074e0:	2308      	movs	r3, #8
 80074e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074ea:	f107 0318 	add.w	r3, r7, #24
 80074ee:	4618      	mov	r0, r3
 80074f0:	f003 fab2 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80074fa:	f000 fb6d 	bl	8007bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074fe:	4b41      	ldr	r3, [pc, #260]	; (8007604 <HAL_I2C_MspInit+0x154>)
 8007500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007504:	4a3f      	ldr	r2, [pc, #252]	; (8007604 <HAL_I2C_MspInit+0x154>)
 8007506:	f043 0302 	orr.w	r3, r3, #2
 800750a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800750e:	4b3d      	ldr	r3, [pc, #244]	; (8007604 <HAL_I2C_MspInit+0x154>)
 8007510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800751c:	23c0      	movs	r3, #192	; 0xc0
 800751e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007522:	2312      	movs	r3, #18
 8007524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007528:	2300      	movs	r3, #0
 800752a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800752e:	2300      	movs	r3, #0
 8007530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007534:	2304      	movs	r3, #4
 8007536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800753a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800753e:	4619      	mov	r1, r3
 8007540:	4831      	ldr	r0, [pc, #196]	; (8007608 <HAL_I2C_MspInit+0x158>)
 8007542:	f001 fb1d 	bl	8008b80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007546:	4b2f      	ldr	r3, [pc, #188]	; (8007604 <HAL_I2C_MspInit+0x154>)
 8007548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800754c:	4a2d      	ldr	r2, [pc, #180]	; (8007604 <HAL_I2C_MspInit+0x154>)
 800754e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007552:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007556:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <HAL_I2C_MspInit+0x154>)
 8007558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800755c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007564:	e047      	b.n	80075f6 <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C2)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a28      	ldr	r2, [pc, #160]	; (800760c <HAL_I2C_MspInit+0x15c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d142      	bne.n	80075f6 <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007570:	2308      	movs	r3, #8
 8007572:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8007574:	2300      	movs	r3, #0
 8007576:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800757a:	f107 0318 	add.w	r3, r7, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f003 fa6a 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <HAL_I2C_MspInit+0xde>
      Error_Handler();
 800758a:	f000 fb25 	bl	8007bd8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800758e:	4b1d      	ldr	r3, [pc, #116]	; (8007604 <HAL_I2C_MspInit+0x154>)
 8007590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007594:	4a1b      	ldr	r2, [pc, #108]	; (8007604 <HAL_I2C_MspInit+0x154>)
 8007596:	f043 0302 	orr.w	r3, r3, #2
 800759a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800759e:	4b19      	ldr	r3, [pc, #100]	; (8007604 <HAL_I2C_MspInit+0x154>)
 80075a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80075ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80075b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075b4:	2312      	movs	r3, #18
 80075b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075c0:	2300      	movs	r3, #0
 80075c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80075c6:	2304      	movs	r3, #4
 80075c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80075d0:	4619      	mov	r1, r3
 80075d2:	480d      	ldr	r0, [pc, #52]	; (8007608 <HAL_I2C_MspInit+0x158>)
 80075d4:	f001 fad4 	bl	8008b80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80075d8:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <HAL_I2C_MspInit+0x154>)
 80075da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075de:	4a09      	ldr	r2, [pc, #36]	; (8007604 <HAL_I2C_MspInit+0x154>)
 80075e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80075e8:	4b06      	ldr	r3, [pc, #24]	; (8007604 <HAL_I2C_MspInit+0x154>)
 80075ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f2:	60bb      	str	r3, [r7, #8]
 80075f4:	68bb      	ldr	r3, [r7, #8]
}
 80075f6:	bf00      	nop
 80075f8:	37e8      	adds	r7, #232	; 0xe8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40005400 	.word	0x40005400
 8007604:	58024400 	.word	0x58024400
 8007608:	58020400 	.word	0x58020400
 800760c:	40005800 	.word	0x40005800

08007610 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007614:	4b08      	ldr	r3, [pc, #32]	; (8007638 <DWT_Init+0x28>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4a07      	ldr	r2, [pc, #28]	; (8007638 <DWT_Init+0x28>)
 800761a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800761e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <DWT_Init+0x2c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a05      	ldr	r2, [pc, #20]	; (800763c <DWT_Init+0x2c>)
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	6013      	str	r3, [r2, #0]
}
 800762c:	bf00      	nop
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	e000edf0 	.word	0xe000edf0
 800763c:	e0001000 	.word	0xe0001000

08007640 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint64_t micros(void){
 8007640:	b4b0      	push	{r4, r5, r7}
 8007642:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8007644:	4b09      	ldr	r3, [pc, #36]	; (800766c <micros+0x2c>)
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	4b09      	ldr	r3, [pc, #36]	; (8007670 <micros+0x30>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4909      	ldr	r1, [pc, #36]	; (8007674 <micros+0x34>)
 800764e:	fba1 1303 	umull	r1, r3, r1, r3
 8007652:	0c9b      	lsrs	r3, r3, #18
 8007654:	fbb2 f3f3 	udiv	r3, r2, r3
 8007658:	2200      	movs	r2, #0
 800765a:	461c      	mov	r4, r3
 800765c:	4615      	mov	r5, r2
 800765e:	4622      	mov	r2, r4
 8007660:	462b      	mov	r3, r5
}
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	bcb0      	pop	{r4, r5, r7}
 800766a:	4770      	bx	lr
 800766c:	e0001000 	.word	0xe0001000
 8007670:	24000024 	.word	0x24000024
 8007674:	431bde83 	.word	0x431bde83

08007678 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	b29a      	uxth	r2, r3
 8007688:	f04f 33ff 	mov.w	r3, #4294967295
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	4804      	ldr	r0, [pc, #16]	; (80076a0 <_write+0x28>)
 8007690:	f004 fd9a 	bl	800c1c8 <HAL_UART_Transmit>
	return len;
 8007694:	687b      	ldr	r3, [r7, #4]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	240006fc 	.word	0x240006fc
 80076a4:	00000000 	.word	0x00000000

080076a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80076a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80076ae:	f001 f8c1 	bl	8008834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80076b2:	f000 fa17 	bl	8007ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80076b6:	f7ff fdb7 	bl	8007228 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80076ba:	f000 ffdf 	bl	800867c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80076be:	f7ff fe73 	bl	80073a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80076c2:	f7ff feb3 	bl	800742c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //Init DWT Clock for proper us time tick
  DWT_Init();
 80076c6:	f7ff ffa3 	bl	8007610 <DWT_Init>

  //Init filter with predefined settings
  LPFTwoPole_Init(&LPF_accel_x, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 80076ca:	4bd5      	ldr	r3, [pc, #852]	; (8007a20 <main+0x378>)
 80076cc:	edd3 7a00 	vldr	s15, [r3]
 80076d0:	eef0 0a67 	vmov.f32	s1, s15
 80076d4:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 8007a24 <main+0x37c>
 80076d8:	2101      	movs	r1, #1
 80076da:	48d3      	ldr	r0, [pc, #844]	; (8007a28 <main+0x380>)
 80076dc:	f7fb fff8 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_y, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 80076e0:	4bcf      	ldr	r3, [pc, #828]	; (8007a20 <main+0x378>)
 80076e2:	edd3 7a00 	vldr	s15, [r3]
 80076e6:	eef0 0a67 	vmov.f32	s1, s15
 80076ea:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8007a24 <main+0x37c>
 80076ee:	2101      	movs	r1, #1
 80076f0:	48ce      	ldr	r0, [pc, #824]	; (8007a2c <main+0x384>)
 80076f2:	f7fb ffed 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_z, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 80076f6:	4bca      	ldr	r3, [pc, #808]	; (8007a20 <main+0x378>)
 80076f8:	edd3 7a00 	vldr	s15, [r3]
 80076fc:	eef0 0a67 	vmov.f32	s1, s15
 8007700:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 8007a24 <main+0x37c>
 8007704:	2101      	movs	r1, #1
 8007706:	48ca      	ldr	r0, [pc, #808]	; (8007a30 <main+0x388>)
 8007708:	f7fb ffe2 	bl	80036d0 <LPFTwoPole_Init>

  LPFTwoPole_Init(&LPF_gyro_x, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 800770c:	4bc4      	ldr	r3, [pc, #784]	; (8007a20 <main+0x378>)
 800770e:	edd3 7a00 	vldr	s15, [r3]
 8007712:	eef0 0a67 	vmov.f32	s1, s15
 8007716:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8007a34 <main+0x38c>
 800771a:	2101      	movs	r1, #1
 800771c:	48c6      	ldr	r0, [pc, #792]	; (8007a38 <main+0x390>)
 800771e:	f7fb ffd7 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_y, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8007722:	4bbf      	ldr	r3, [pc, #764]	; (8007a20 <main+0x378>)
 8007724:	edd3 7a00 	vldr	s15, [r3]
 8007728:	eef0 0a67 	vmov.f32	s1, s15
 800772c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8007a34 <main+0x38c>
 8007730:	2101      	movs	r1, #1
 8007732:	48c2      	ldr	r0, [pc, #776]	; (8007a3c <main+0x394>)
 8007734:	f7fb ffcc 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_z, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8007738:	4bb9      	ldr	r3, [pc, #740]	; (8007a20 <main+0x378>)
 800773a:	edd3 7a00 	vldr	s15, [r3]
 800773e:	eef0 0a67 	vmov.f32	s1, s15
 8007742:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8007a34 <main+0x38c>
 8007746:	2101      	movs	r1, #1
 8007748:	48bd      	ldr	r0, [pc, #756]	; (8007a40 <main+0x398>)
 800774a:	f7fb ffc1 	bl	80036d0 <LPFTwoPole_Init>

  NotchFilterInit(&NF_gyro_x, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 800774e:	4bb4      	ldr	r3, [pc, #720]	; (8007a20 <main+0x378>)
 8007750:	edd3 7a00 	vldr	s15, [r3]
 8007754:	eeb0 1a67 	vmov.f32	s2, s15
 8007758:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800775c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8007a44 <main+0x39c>
 8007760:	48b9      	ldr	r0, [pc, #740]	; (8007a48 <main+0x3a0>)
 8007762:	f7fc f85d 	bl	8003820 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_y, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8007766:	4bae      	ldr	r3, [pc, #696]	; (8007a20 <main+0x378>)
 8007768:	edd3 7a00 	vldr	s15, [r3]
 800776c:	eeb0 1a67 	vmov.f32	s2, s15
 8007770:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8007774:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8007a44 <main+0x39c>
 8007778:	48b4      	ldr	r0, [pc, #720]	; (8007a4c <main+0x3a4>)
 800777a:	f7fc f851 	bl	8003820 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_z, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 800777e:	4ba8      	ldr	r3, [pc, #672]	; (8007a20 <main+0x378>)
 8007780:	edd3 7a00 	vldr	s15, [r3]
 8007784:	eeb0 1a67 	vmov.f32	s2, s15
 8007788:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800778c:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8007a44 <main+0x39c>
 8007790:	48af      	ldr	r0, [pc, #700]	; (8007a50 <main+0x3a8>)
 8007792:	f7fc f845 	bl	8003820 <NotchFilterInit>

  //Init state estimators
  quaternionInit(&quaternion_t, sample_time_us_f32);
 8007796:	4baf      	ldr	r3, [pc, #700]	; (8007a54 <main+0x3ac>)
 8007798:	edd3 7a00 	vldr	s15, [r3]
 800779c:	eeb0 0a67 	vmov.f32	s0, s15
 80077a0:	48ad      	ldr	r0, [pc, #692]	; (8007a58 <main+0x3b0>)
 80077a2:	f000 fa21 	bl	8007be8 <quaternionInit>
  initFusionAHRS(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, sample_time_sec_f32);
 80077a6:	4b9e      	ldr	r3, [pc, #632]	; (8007a20 <main+0x378>)
 80077a8:	edd3 7a00 	vldr	s15, [r3]
 80077ac:	eeb0 0a67 	vmov.f32	s0, s15
 80077b0:	4aaa      	ldr	r2, [pc, #680]	; (8007a5c <main+0x3b4>)
 80077b2:	49ab      	ldr	r1, [pc, #684]	; (8007a60 <main+0x3b8>)
 80077b4:	48ab      	ldr	r0, [pc, #684]	; (8007a64 <main+0x3bc>)
 80077b6:	f7fb f9a1 	bl	8002afc <initFusionAHRS>

  //Init sensors
  while (BMI160_init(imu_t) == 1);
 80077ba:	bf00      	nop
 80077bc:	4baa      	ldr	r3, [pc, #680]	; (8007a68 <main+0x3c0>)
 80077be:	466e      	mov	r6, sp
 80077c0:	f103 0210 	add.w	r2, r3, #16
 80077c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80077c6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80077ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077cc:	f7ff fa92 	bl	8006cf4 <BMI160_init>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d0f2      	beq.n	80077bc <main+0x114>

  if (imu_t.INIT_OK_i8 != TRUE)
 80077d6:	4ba4      	ldr	r3, [pc, #656]	; (8007a68 <main+0x3c0>)
 80077d8:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d004      	beq.n	80077ea <main+0x142>
  {
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80077e0:	2201      	movs	r2, #1
 80077e2:	2120      	movs	r1, #32
 80077e4:	48a1      	ldr	r0, [pc, #644]	; (8007a6c <main+0x3c4>)
 80077e6:	f001 fb7b 	bl	8008ee0 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Get system time in us
	timer_u64 = micros();
 80077ea:	f7ff ff29 	bl	8007640 <micros>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	499f      	ldr	r1, [pc, #636]	; (8007a70 <main+0x3c8>)
 80077f4:	e9c1 2300 	strd	r2, r3, [r1]

	if ( ((timer_u64 - lastTime_u64) >= sample_time_us_f32) && (imu_t.INIT_OK_i8 == TRUE) )
 80077f8:	4b9d      	ldr	r3, [pc, #628]	; (8007a70 <main+0x3c8>)
 80077fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077fe:	4b9d      	ldr	r3, [pc, #628]	; (8007a74 <main+0x3cc>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	1a84      	subs	r4, r0, r2
 8007806:	eb61 0503 	sbc.w	r5, r1, r3
 800780a:	4620      	mov	r0, r4
 800780c:	4629      	mov	r1, r5
 800780e:	f7f9 f843 	bl	8000898 <__aeabi_ul2f>
 8007812:	ee07 0a10 	vmov	s14, r0
 8007816:	4b8f      	ldr	r3, [pc, #572]	; (8007a54 <main+0x3ac>)
 8007818:	edd3 7a00 	vldr	s15, [r3]
 800781c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007824:	f2c0 8135 	blt.w	8007a92 <main+0x3ea>
 8007828:	4b8f      	ldr	r3, [pc, #572]	; (8007a68 <main+0x3c0>)
 800782a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800782e:	2b01      	cmp	r3, #1
 8007830:	f040 812f 	bne.w	8007a92 <main+0x3ea>
	{
		lastTime_u64 = micros();
 8007834:	f7ff ff04 	bl	8007640 <micros>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	498d      	ldr	r1, [pc, #564]	; (8007a74 <main+0x3cc>)
 800783e:	e9c1 2300 	strd	r2, r3, [r1]

		//Read BMI160 sensor data
		bmi160ReadAccelGyro(&imu_t);
 8007842:	4889      	ldr	r0, [pc, #548]	; (8007a68 <main+0x3c0>)
 8007844:	f7ff fb48 	bl	8006ed8 <bmi160ReadAccelGyro>

		//Get accelerometer data in "g" and run LPF
		accelLowPassFiltered_f32[0] = (LPFTwoPole_Update(&LPF_accel_x, imu_t.BMI160_Accel_f32[0]));
 8007848:	4b87      	ldr	r3, [pc, #540]	; (8007a68 <main+0x3c0>)
 800784a:	edd3 7a00 	vldr	s15, [r3]
 800784e:	eeb0 0a67 	vmov.f32	s0, s15
 8007852:	4875      	ldr	r0, [pc, #468]	; (8007a28 <main+0x380>)
 8007854:	f7fb ffac 	bl	80037b0 <LPFTwoPole_Update>
 8007858:	eef0 7a40 	vmov.f32	s15, s0
 800785c:	4b86      	ldr	r3, [pc, #536]	; (8007a78 <main+0x3d0>)
 800785e:	edc3 7a00 	vstr	s15, [r3]
		accelLowPassFiltered_f32[1] = (LPFTwoPole_Update(&LPF_accel_y, imu_t.BMI160_Accel_f32[1]));
 8007862:	4b81      	ldr	r3, [pc, #516]	; (8007a68 <main+0x3c0>)
 8007864:	edd3 7a01 	vldr	s15, [r3, #4]
 8007868:	eeb0 0a67 	vmov.f32	s0, s15
 800786c:	486f      	ldr	r0, [pc, #444]	; (8007a2c <main+0x384>)
 800786e:	f7fb ff9f 	bl	80037b0 <LPFTwoPole_Update>
 8007872:	eef0 7a40 	vmov.f32	s15, s0
 8007876:	4b80      	ldr	r3, [pc, #512]	; (8007a78 <main+0x3d0>)
 8007878:	edc3 7a01 	vstr	s15, [r3, #4]
		accelLowPassFiltered_f32[2] = (LPFTwoPole_Update(&LPF_accel_z, imu_t.BMI160_Accel_f32[2]));
 800787c:	4b7a      	ldr	r3, [pc, #488]	; (8007a68 <main+0x3c0>)
 800787e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007882:	eeb0 0a67 	vmov.f32	s0, s15
 8007886:	486a      	ldr	r0, [pc, #424]	; (8007a30 <main+0x388>)
 8007888:	f7fb ff92 	bl	80037b0 <LPFTwoPole_Update>
 800788c:	eef0 7a40 	vmov.f32	s15, s0
 8007890:	4b79      	ldr	r3, [pc, #484]	; (8007a78 <main+0x3d0>)
 8007892:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get gyro data in "deg/s" and run LPF
		gyroLowPassFiltered_f32[0] = NotchFilter_Update(&NF_gyro_x, imu_t.BMI160_Gyro_f32[0]);
 8007896:	4b74      	ldr	r3, [pc, #464]	; (8007a68 <main+0x3c0>)
 8007898:	edd3 7a03 	vldr	s15, [r3, #12]
 800789c:	eeb0 0a67 	vmov.f32	s0, s15
 80078a0:	4869      	ldr	r0, [pc, #420]	; (8007a48 <main+0x3a0>)
 80078a2:	f7fc f841 	bl	8003928 <NotchFilter_Update>
 80078a6:	eef0 7a40 	vmov.f32	s15, s0
 80078aa:	4b74      	ldr	r3, [pc, #464]	; (8007a7c <main+0x3d4>)
 80078ac:	edc3 7a00 	vstr	s15, [r3]
		gyroLowPassFiltered_f32[1] = NotchFilter_Update(&NF_gyro_y, imu_t.BMI160_Gyro_f32[1]);
 80078b0:	4b6d      	ldr	r3, [pc, #436]	; (8007a68 <main+0x3c0>)
 80078b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80078b6:	eeb0 0a67 	vmov.f32	s0, s15
 80078ba:	4864      	ldr	r0, [pc, #400]	; (8007a4c <main+0x3a4>)
 80078bc:	f7fc f834 	bl	8003928 <NotchFilter_Update>
 80078c0:	eef0 7a40 	vmov.f32	s15, s0
 80078c4:	4b6d      	ldr	r3, [pc, #436]	; (8007a7c <main+0x3d4>)
 80078c6:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroLowPassFiltered_f32[2] = NotchFilter_Update(&NF_gyro_z, imu_t.BMI160_Gyro_f32[2]);
 80078ca:	4b67      	ldr	r3, [pc, #412]	; (8007a68 <main+0x3c0>)
 80078cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80078d0:	eeb0 0a67 	vmov.f32	s0, s15
 80078d4:	485e      	ldr	r0, [pc, #376]	; (8007a50 <main+0x3a8>)
 80078d6:	f7fc f827 	bl	8003928 <NotchFilter_Update>
 80078da:	eef0 7a40 	vmov.f32	s15, s0
 80078de:	4b67      	ldr	r3, [pc, #412]	; (8007a7c <main+0x3d4>)
 80078e0:	edc3 7a02 	vstr	s15, [r3, #8]

		//Put gyro data into Notch Filter to flat-out any data in specific frequency band
		gyroNotchFiltered_f32[0] = (LPFTwoPole_Update(&LPF_gyro_x, gyroLowPassFiltered_f32[0]));
 80078e4:	4b65      	ldr	r3, [pc, #404]	; (8007a7c <main+0x3d4>)
 80078e6:	edd3 7a00 	vldr	s15, [r3]
 80078ea:	eeb0 0a67 	vmov.f32	s0, s15
 80078ee:	4852      	ldr	r0, [pc, #328]	; (8007a38 <main+0x390>)
 80078f0:	f7fb ff5e 	bl	80037b0 <LPFTwoPole_Update>
 80078f4:	eef0 7a40 	vmov.f32	s15, s0
 80078f8:	4b61      	ldr	r3, [pc, #388]	; (8007a80 <main+0x3d8>)
 80078fa:	edc3 7a00 	vstr	s15, [r3]
		gyroNotchFiltered_f32[1] = (LPFTwoPole_Update(&LPF_gyro_y, gyroLowPassFiltered_f32[1]));
 80078fe:	4b5f      	ldr	r3, [pc, #380]	; (8007a7c <main+0x3d4>)
 8007900:	edd3 7a01 	vldr	s15, [r3, #4]
 8007904:	eeb0 0a67 	vmov.f32	s0, s15
 8007908:	484c      	ldr	r0, [pc, #304]	; (8007a3c <main+0x394>)
 800790a:	f7fb ff51 	bl	80037b0 <LPFTwoPole_Update>
 800790e:	eef0 7a40 	vmov.f32	s15, s0
 8007912:	4b5b      	ldr	r3, [pc, #364]	; (8007a80 <main+0x3d8>)
 8007914:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroNotchFiltered_f32[2] = (LPFTwoPole_Update(&LPF_gyro_z, gyroLowPassFiltered_f32[2]));
 8007918:	4b58      	ldr	r3, [pc, #352]	; (8007a7c <main+0x3d4>)
 800791a:	edd3 7a02 	vldr	s15, [r3, #8]
 800791e:	eeb0 0a67 	vmov.f32	s0, s15
 8007922:	4847      	ldr	r0, [pc, #284]	; (8007a40 <main+0x398>)
 8007924:	f7fb ff44 	bl	80037b0 <LPFTwoPole_Update>
 8007928:	eef0 7a40 	vmov.f32	s15, s0
 800792c:	4b54      	ldr	r3, [pc, #336]	; (8007a80 <main+0x3d8>)
 800792e:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get state estimations, using quaternion and fusion-quaternion based estimators
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8007932:	4b51      	ldr	r3, [pc, #324]	; (8007a78 <main+0x3d0>)
 8007934:	edd3 5a00 	vldr	s11, [r3]
 8007938:	4b4f      	ldr	r3, [pc, #316]	; (8007a78 <main+0x3d0>)
 800793a:	ed93 5a01 	vldr	s10, [r3, #4]
 800793e:	4b4e      	ldr	r3, [pc, #312]	; (8007a78 <main+0x3d0>)
 8007940:	edd3 4a02 	vldr	s9, [r3, #8]
				gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8007944:	4b4e      	ldr	r3, [pc, #312]	; (8007a80 <main+0x3d8>)
 8007946:	edd3 7a00 	vldr	s15, [r3]
 800794a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800794e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8007a18 <main+0x370>
 8007952:	ee27 7b06 	vmul.f64	d7, d7, d6
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8007956:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
				gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 800795a:	4b49      	ldr	r3, [pc, #292]	; (8007a80 <main+0x3d8>)
 800795c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007960:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007964:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8007a18 <main+0x370>
 8007968:	ee27 7b06 	vmul.f64	d7, d7, d6
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 800796c:	eef7 3bc7 	vcvt.f32.f64	s7, d7
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8007970:	4b43      	ldr	r3, [pc, #268]	; (8007a80 <main+0x3d8>)
 8007972:	edd3 7a02 	vldr	s15, [r3, #8]
 8007976:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800797a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8007a18 <main+0x370>
 800797e:	ee27 7b06 	vmul.f64	d7, d7, d6
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8007982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007986:	eef0 2a67 	vmov.f32	s5, s15
 800798a:	eeb0 2a63 	vmov.f32	s4, s7
 800798e:	eef0 1a44 	vmov.f32	s3, s8
 8007992:	eeb0 1a64 	vmov.f32	s2, s9
 8007996:	eef0 0a45 	vmov.f32	s1, s10
 800799a:	eeb0 0a65 	vmov.f32	s0, s11
 800799e:	482e      	ldr	r0, [pc, #184]	; (8007a58 <main+0x3b0>)
 80079a0:	f000 f974 	bl	8007c8c <quaternionUpdate>

		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 80079a4:	4b34      	ldr	r3, [pc, #208]	; (8007a78 <main+0x3d0>)
 80079a6:	edd3 5a00 	vldr	s11, [r3]
 80079aa:	4b33      	ldr	r3, [pc, #204]	; (8007a78 <main+0x3d0>)
 80079ac:	ed93 5a01 	vldr	s10, [r3, #4]
 80079b0:	4b31      	ldr	r3, [pc, #196]	; (8007a78 <main+0x3d0>)
 80079b2:	edd3 4a02 	vldr	s9, [r3, #8]
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 80079b6:	4b32      	ldr	r3, [pc, #200]	; (8007a80 <main+0x3d8>)
 80079b8:	edd3 7a00 	vldr	s15, [r3]
 80079bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80079c0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8007a18 <main+0x370>
 80079c4:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 80079c8:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 80079cc:	4b2c      	ldr	r3, [pc, #176]	; (8007a80 <main+0x3d8>)
 80079ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80079d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80079d6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8007a18 <main+0x370>
 80079da:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 80079de:	eef7 3bc7 	vcvt.f32.f64	s7, d7
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 80079e2:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <main+0x3d8>)
 80079e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80079e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80079ec:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8007a18 <main+0x370>
 80079f0:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 80079f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80079f8:	eef0 2a67 	vmov.f32	s5, s15
 80079fc:	eeb0 2a63 	vmov.f32	s4, s7
 8007a00:	eef0 1a44 	vmov.f32	s3, s8
 8007a04:	eeb0 1a64 	vmov.f32	s2, s9
 8007a08:	eef0 0a45 	vmov.f32	s1, s10
 8007a0c:	eeb0 0a65 	vmov.f32	s0, s11
 8007a10:	e038      	b.n	8007a84 <main+0x3dc>
 8007a12:	bf00      	nop
 8007a14:	f3af 8000 	nop.w
 8007a18:	a2529d39 	.word	0xa2529d39
 8007a1c:	3f91df46 	.word	0x3f91df46
 8007a20:	2400001c 	.word	0x2400001c
 8007a24:	43820000 	.word	0x43820000
 8007a28:	24000630 	.word	0x24000630
 8007a2c:	24000648 	.word	0x24000648
 8007a30:	24000660 	.word	0x24000660
 8007a34:	43800000 	.word	0x43800000
 8007a38:	24000678 	.word	0x24000678
 8007a3c:	24000690 	.word	0x24000690
 8007a40:	240006a8 	.word	0x240006a8
 8007a44:	42940000 	.word	0x42940000
 8007a48:	240005d0 	.word	0x240005d0
 8007a4c:	240005f0 	.word	0x240005f0
 8007a50:	24000610 	.word	0x24000610
 8007a54:	24000020 	.word	0x24000020
 8007a58:	24000544 	.word	0x24000544
 8007a5c:	240005c0 	.word	0x240005c0
 8007a60:	24000590 	.word	0x24000590
 8007a64:	24000574 	.word	0x24000574
 8007a68:	24000528 	.word	0x24000528
 8007a6c:	58020000 	.word	0x58020000
 8007a70:	240006e8 	.word	0x240006e8
 8007a74:	240006f0 	.word	0x240006f0
 8007a78:	240006c0 	.word	0x240006c0
 8007a7c:	240006cc 	.word	0x240006cc
 8007a80:	240006d8 	.word	0x240006d8
 8007a84:	4a12      	ldr	r2, [pc, #72]	; (8007ad0 <main+0x428>)
 8007a86:	4913      	ldr	r1, [pc, #76]	; (8007ad4 <main+0x42c>)
 8007a88:	4813      	ldr	r0, [pc, #76]	; (8007ad8 <main+0x430>)
 8007a8a:	f7fb f85f 	bl	8002b4c <getFusionAHRS_6DoF>

		newData_u8 = TRUE; //Set newData to high for activate UART printer
 8007a8e:	2301      	movs	r3, #1
 8007a90:	71fb      	strb	r3, [r7, #7]

	}//end of timer if

	if(newData_u8)
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f43f aea8 	beq.w	80077ea <main+0x142>
	{
		printf("%f, %f, %f\r\n", //, %f, %f, %f
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <main+0x434>)
 8007a9c:	edd3 7a06 	vldr	s15, [r3, #24]
		printf("%f, %f, %f\r\n", //, %f, %f, %f
 8007aa0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8007aa4:	4b0d      	ldr	r3, [pc, #52]	; (8007adc <main+0x434>)
 8007aa6:	edd3 7a05 	vldr	s15, [r3, #20]
		printf("%f, %f, %f\r\n", //, %f, %f, %f
 8007aaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8007aae:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <main+0x434>)
 8007ab0:	edd3 6a07 	vldr	s13, [r3, #28]
		printf("%f, %f, %f\r\n", //, %f, %f, %f
 8007ab4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8007ab8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007abc:	ed8d 7b00 	vstr	d7, [sp]
 8007ac0:	ec53 2b15 	vmov	r2, r3, d5
 8007ac4:	4806      	ldr	r0, [pc, #24]	; (8007ae0 <main+0x438>)
 8007ac6:	f006 f8b9 	bl	800dc3c <iprintf>
//				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL);
		newData_u8 = FALSE;
 8007aca:	2300      	movs	r3, #0
 8007acc:	71fb      	strb	r3, [r7, #7]
	timer_u64 = micros();
 8007ace:	e68c      	b.n	80077ea <main+0x142>
 8007ad0:	240005c0 	.word	0x240005c0
 8007ad4:	24000590 	.word	0x24000590
 8007ad8:	24000574 	.word	0x24000574
 8007adc:	24000544 	.word	0x24000544
 8007ae0:	080116f0 	.word	0x080116f0

08007ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b09c      	sub	sp, #112	; 0x70
 8007ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aee:	224c      	movs	r2, #76	; 0x4c
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f005 fc56 	bl	800d3a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	2220      	movs	r2, #32
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f005 fc50 	bl	800d3a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007b04:	2002      	movs	r0, #2
 8007b06:	f001 ffb3 	bl	8009a70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	4b30      	ldr	r3, [pc, #192]	; (8007bd0 <SystemClock_Config+0xec>)
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	4a2f      	ldr	r2, [pc, #188]	; (8007bd0 <SystemClock_Config+0xec>)
 8007b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b18:	6193      	str	r3, [r2, #24]
 8007b1a:	4b2d      	ldr	r3, [pc, #180]	; (8007bd0 <SystemClock_Config+0xec>)
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <SystemClock_Config+0xf0>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <SystemClock_Config+0xf0>)
 8007b2a:	f043 0301 	orr.w	r3, r3, #1
 8007b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <SystemClock_Config+0xf0>)
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007b3c:	bf00      	nop
 8007b3e:	4b24      	ldr	r3, [pc, #144]	; (8007bd0 <SystemClock_Config+0xec>)
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b4a:	d1f8      	bne.n	8007b3e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b56:	2302      	movs	r3, #2
 8007b58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8007b62:	2340      	movs	r3, #64	; 0x40
 8007b64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007b66:	2302      	movs	r3, #2
 8007b68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8007b6e:	2308      	movs	r3, #8
 8007b70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007b72:	230c      	movs	r3, #12
 8007b74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 ffae 	bl	8009ae4 <HAL_RCC_OscConfig>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8007b8e:	f000 f823 	bl	8007bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b92:	233f      	movs	r3, #63	; 0x3f
 8007b94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b96:	2303      	movs	r3, #3
 8007b98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007ba2:	2340      	movs	r3, #64	; 0x40
 8007ba4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007bb0:	2340      	movs	r3, #64	; 0x40
 8007bb2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007bb4:	1d3b      	adds	r3, r7, #4
 8007bb6:	2102      	movs	r1, #2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f002 fbc1 	bl	800a340 <HAL_RCC_ClockConfig>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8007bc4:	f000 f808 	bl	8007bd8 <Error_Handler>
  }
}
 8007bc8:	bf00      	nop
 8007bca:	3770      	adds	r7, #112	; 0x70
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	58024800 	.word	0x58024800
 8007bd4:	58000400 	.word	0x58000400

08007bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007bdc:	b672      	cpsid	i
}
 8007bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007be0:	e7fe      	b.n	8007be0 <Error_Handler+0x8>
 8007be2:	0000      	movs	r0, r0
 8007be4:	0000      	movs	r0, r0
	...

08007be8 <quaternionInit>:
#include "quaternion.h"

float a12, a22, a31, a32, a33;

void quaternionInit(Quaternion_t *DataStruct, float sampleTimeMicros)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	ed87 0a00 	vstr	s0, [r7]
	DataStruct->GyroMeasError = M_PI * (40.0f / 180.0f);		// gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <quaternionInit+0x98>)
 8007bf8:	601a      	str	r2, [r3, #0]
	DataStruct->beta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasError;		// compute beta
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	edd3 7a00 	vldr	s15, [r3]
 8007c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007c04:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8007c78 <quaternionInit+0x90>
 8007c08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	edc3 7a01 	vstr	s15, [r3, #4]
	DataStruct->GyroMeasDrift = M_PI * (2.0f / 180.0f);		// gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <quaternionInit+0x9c>)
 8007c1a:	609a      	str	r2, [r3, #8]
	DataStruct->zeta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasDrift;		// compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007c26:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8007c78 <quaternionInit+0x90>
 8007c2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	edc3 7a03 	vstr	s15, [r3, #12]

	DataStruct->deltat = sampleTimeMicros / 1000000.0f;
 8007c38:	ed97 7a00 	vldr	s14, [r7]
 8007c3c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8007c88 <quaternionInit+0xa0>
 8007c40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	edc3 7a04 	vstr	s15, [r3, #16]

	DataStruct->q[0] = 1.0f;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007c50:	621a      	str	r2, [r3, #32]
	DataStruct->q[1] = 0.0f;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->q[2] = 0.0f;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	629a      	str	r2, [r3, #40]	; 0x28
	DataStruct->q[3] = 0.0f;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	e8584caa 	.word	0xe8584caa
 8007c7c:	3febb67a 	.word	0x3febb67a
 8007c80:	3f32b8c2 	.word	0x3f32b8c2
 8007c84:	3d0efa35 	.word	0x3d0efa35
 8007c88:	49742400 	.word	0x49742400

08007c8c <quaternionUpdate>:

void quaternionUpdate(Quaternion_t *DataStruct, float ax, float ay, float az, float gyrox, float gyroy, float gyroz)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b0a6      	sub	sp, #152	; 0x98
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	61f8      	str	r0, [r7, #28]
 8007c94:	ed87 0a06 	vstr	s0, [r7, #24]
 8007c98:	edc7 0a05 	vstr	s1, [r7, #20]
 8007c9c:	ed87 1a04 	vstr	s2, [r7, #16]
 8007ca0:	edc7 1a03 	vstr	s3, [r7, #12]
 8007ca4:	ed87 2a02 	vstr	s4, [r7, #8]
 8007ca8:	edc7 2a01 	vstr	s5, [r7, #4]
    float q1 = DataStruct->q[0], q2 = DataStruct->q[1], q3 = DataStruct->q[2], q4 = DataStruct->q[3];         // short name local variable for readability
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
    float qDot1, qDot2, qDot3, qDot4;
    float hatDot1, hatDot2, hatDot3, hatDot4;

    // Auxiliary variables to avoid repeated arithmetic
    float _halfq1 = 0.5f * q1;
 8007ccc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007cd0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cd8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float _halfq2 = 0.5f * q2;
 8007cdc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007ce0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ce8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float _halfq3 = 0.5f * q3;
 8007cec:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007cf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cf8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float _halfq4 = 0.5f * q4;
 8007cfc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007d00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d08:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    float _2q1 = 2.0f * q1;
 8007d0c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007d10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007d14:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float _2q2 = 2.0f * q2;
 8007d18:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007d1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007d20:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float _2q3 = 2.0f * q3;
 8007d24:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007d28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007d2c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float _2q4 = 2.0f * q4;
 8007d30:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007d34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007d38:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    // Normalise accelerometer measurement
    norm = sqrt(ax * ax + ay * ay + az * az);
 8007d3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007d44:	edd7 7a05 	vldr	s15, [r7, #20]
 8007d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d50:	edd7 7a04 	vldr	s15, [r7, #16]
 8007d54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007d60:	eeb0 0b47 	vmov.f64	d0, d7
 8007d64:	f008 f9a8 	bl	80100b8 <sqrt>
 8007d68:	eeb0 7b40 	vmov.f64	d7, d0
 8007d6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007d70:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    if (norm == 0.0f) return; // handle NaN
 8007d74:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007d78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d80:	f000 8212 	beq.w	80081a8 <quaternionUpdate+0x51c>
    norm = 1.0f/norm;
 8007d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d88:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d90:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    ax *= norm;
 8007d94:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d98:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da0:	edc7 7a06 	vstr	s15, [r7, #24]
    ay *= norm;
 8007da4:	ed97 7a05 	vldr	s14, [r7, #20]
 8007da8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db0:	edc7 7a05 	vstr	s15, [r7, #20]
    az *= norm;
 8007db4:	ed97 7a04 	vldr	s14, [r7, #16]
 8007db8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc0:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute the objective function and Jacobian
    f1 = _2q2 * q4 - _2q1 * q3 - ax;
 8007dc4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8007dc8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dd0:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8007dd4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ddc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007de0:	edd7 7a06 	vldr	s15, [r7, #24]
 8007de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007de8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    f2 = _2q1 * q2 + _2q3 * q4 - ay;
 8007dec:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8007df0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007df8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8007dfc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e08:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e10:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 8007e14:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8007e18:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007e28:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8007e2c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007e38:	edd7 7a04 	vldr	s15, [r7, #16]
 8007e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e40:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    J_11or24 = _2q3;
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	657b      	str	r3, [r7, #84]	; 0x54
    J_12or23 = _2q4;
 8007e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e4a:	653b      	str	r3, [r7, #80]	; 0x50
    J_13or22 = _2q1;
 8007e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_14or21 = _2q2;
 8007e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e52:	64bb      	str	r3, [r7, #72]	; 0x48
    J_32 = 2.0f * J_14or21;
 8007e54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007e58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007e5c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    J_33 = 2.0f * J_11or24;
 8007e60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007e64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007e68:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    // Compute the gradient (matrix multiplication)
    hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 8007e6c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007e70:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e78:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8007e7c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 8007e8c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007e90:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e98:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8007e9c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ea8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8007eac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eb8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 8007ebc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007ec0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ec8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8007ecc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007ed8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8007edc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ee8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 8007eec:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007ef0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ef8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8007efc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f08:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Normalize the gradient
    norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 8007f0c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007f10:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007f14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007f18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f20:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007f24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f2c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007f30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007f3c:	eeb0 0b47 	vmov.f64	d0, d7
 8007f40:	f008 f8ba 	bl	80100b8 <sqrt>
 8007f44:	eeb0 7b40 	vmov.f64	d7, d0
 8007f48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007f4c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    hatDot1 /= norm;
 8007f50:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8007f54:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hatDot2 /= norm;
 8007f60:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8007f64:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f6c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    hatDot3 /= norm;
 8007f70:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8007f74:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f7c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    hatDot4 /= norm;
 8007f80:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007f84:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Compute the quaternion derivative
    qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 8007f90:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8007f94:	eeb1 7a67 	vneg.f32	s14, s15
 8007f98:	edd7 7a03 	vldr	s15, [r7, #12]
 8007f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fa0:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8007fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8007fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007fb0:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8007fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8007fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 8007fc4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8007fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fd0:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8007fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8007fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fe0:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8007fe4:	edd7 7a02 	vldr	s15, [r7, #8]
 8007fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ff0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 8007ff4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8007ff8:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008000:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8008004:	edd7 7a01 	vldr	s15, [r7, #4]
 8008008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800800c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008010:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8008014:	edd7 7a03 	vldr	s15, [r7, #12]
 8008018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800801c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008020:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 8008024:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8008028:	edd7 7a01 	vldr	s15, [r7, #4]
 800802c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008030:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8008034:	edd7 7a02 	vldr	s15, [r7, #8]
 8008038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800803c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008040:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8008044:	edd7 7a03 	vldr	s15, [r7, #12]
 8008048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800804c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008050:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute then integrate estimated quaternion derivative
    q1 += (qDot1 -(DataStruct->beta * hatDot1)) * DataStruct->deltat;
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	ed93 7a01 	vldr	s14, [r3, #4]
 800805a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800805e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008062:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008066:	ee37 7a67 	vsub.f32	s14, s14, s15
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008074:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800807c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    q2 += (qDot2 -(DataStruct->beta * hatDot2)) * DataStruct->deltat;
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	ed93 7a01 	vldr	s14, [r3, #4]
 8008086:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800808a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008092:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	edd3 7a04 	vldr	s15, [r3, #16]
 800809c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80080a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080a8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    q3 += (qDot3 -(DataStruct->beta * hatDot3)) * DataStruct->deltat;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80080b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80080b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80080be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80080c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080cc:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80080d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080d4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    q4 += (qDot4 -(DataStruct->beta * hatDot4)) * DataStruct->deltat;
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	ed93 7a01 	vldr	s14, [r3, #4]
 80080de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80080ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80080f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80080fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008100:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    // Normalize the quaternion
    norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8008104:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008108:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800810c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008110:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008118:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800811c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008124:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008128:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800812c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008130:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008134:	eeb0 0b47 	vmov.f64	d0, d7
 8008138:	f007 ffbe 	bl	80100b8 <sqrt>
 800813c:	eeb0 7b40 	vmov.f64	d7, d0
 8008140:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008144:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    norm = 1.0f/norm;
 8008148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800814c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008154:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    DataStruct->q[0] = q1 * norm;
 8008158:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800815c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	edc3 7a08 	vstr	s15, [r3, #32]
    DataStruct->q[1] = q2 * norm;
 800816a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800816e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    DataStruct->q[2] = q3 * norm;
 800817c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8008180:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    DataStruct->q[3] = q4 * norm;
 800818e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008192:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    quaternionEulerUpdate(DataStruct);
 80081a0:	69f8      	ldr	r0, [r7, #28]
 80081a2:	f000 f805 	bl	80081b0 <quaternionEulerUpdate>
 80081a6:	e000      	b.n	80081aa <quaternionUpdate+0x51e>
    if (norm == 0.0f) return; // handle NaN
 80081a8:	bf00      	nop
}
 80081aa:	3798      	adds	r7, #152	; 0x98
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <quaternionEulerUpdate>:

void quaternionEulerUpdate(Quaternion_t *DataStruct)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80081c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	edd3 6a08 	vldr	s13, [r3, #32]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80081d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80081d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80081e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			DataStruct->q[0] * DataStruct->q[0] + DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] - DataStruct->q[3] * DataStruct->q[3]);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	ed93 6a08 	vldr	s12, [r3, #32]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	edd3 6a08 	vldr	s13, [r3, #32]
 80081f0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8008200:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8008204:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8008214:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8008218:	ee36 6a66 	vsub.f32	s12, s12, s13
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8008228:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800822c:	ee76 6a66 	vsub.f32	s13, s12, s13
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8008230:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8008234:	eeb0 1b46 	vmov.f64	d1, d6
 8008238:	eeb0 0b47 	vmov.f64	d0, d7
 800823c:	f007 ff38 	bl	80100b0 <atan2>
 8008240:	eeb0 7b40 	vmov.f64	d7, d0
 8008244:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	edc3 7a06 	vstr	s15, [r3, #24]
	DataStruct->pitch = -asin(2.0f * (DataStruct->q[1] * DataStruct->q[3] - DataStruct->q[0] * DataStruct->q[2]));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800825a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	edd3 6a08 	vldr	s13, [r3, #32]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800826a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800826e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008272:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008276:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800827a:	eeb0 0b47 	vmov.f64	d0, d7
 800827e:	f007 feeb 	bl	8010058 <asin>
 8008282:	eeb0 7b40 	vmov.f64	d7, d0
 8008286:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800828a:	eef1 7a67 	vneg.f32	s15, s15
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	ed93 7a08 	vldr	s14, [r3, #32]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80082a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80082b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80082bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			DataStruct->q[0] * DataStruct->q[0] - DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] + DataStruct->q[3] * DataStruct->q[3]);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	ed93 6a08 	vldr	s12, [r3, #32]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	edd3 6a08 	vldr	s13, [r3, #32]
 80082cc:	ee26 6a26 	vmul.f32	s12, s12, s13
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80082dc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80082e0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80082f0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80082f4:	ee36 6a66 	vsub.f32	s12, s12, s13
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8008304:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8008308:	ee76 6a26 	vadd.f32	s13, s12, s13
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 800830c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8008310:	eeb0 1b46 	vmov.f64	d1, d6
 8008314:	eeb0 0b47 	vmov.f64	d0, d7
 8008318:	f007 feca 	bl	80100b0 <atan2>
 800831c:	eeb0 7b40 	vmov.f64	d7, d0
 8008320:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->pitch *= 180.0f / M_PI;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	edd3 7a05 	vldr	s15, [r3, #20]
 8008330:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008334:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8008388 <quaternionEulerUpdate+0x1d8>
 8008338:	ee27 7b06 	vmul.f64	d7, d7, d6
 800833c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->yaw   *= 180.0f / M_PI;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	edd3 7a06 	vldr	s15, [r3, #24]
 800834c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008350:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8008388 <quaternionEulerUpdate+0x1d8>
 8008354:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008358:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	edc3 7a06 	vstr	s15, [r3, #24]
	DataStruct->roll  *= 180.0f / M_PI;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	edd3 7a07 	vldr	s15, [r3, #28]
 8008368:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800836c:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8008388 <quaternionEulerUpdate+0x1d8>
 8008370:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008374:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	1a63c1f8 	.word	0x1a63c1f8
 800838c:	404ca5dc 	.word	0x404ca5dc

08008390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008396:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <HAL_MspInit+0x30>)
 8008398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800839c:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <HAL_MspInit+0x30>)
 800839e:	f043 0302 	orr.w	r3, r3, #2
 80083a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80083a6:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <HAL_MspInit+0x30>)
 80083a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	607b      	str	r3, [r7, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	58024400 	.word	0x58024400

080083c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80083c8:	e7fe      	b.n	80083c8 <NMI_Handler+0x4>

080083ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083ca:	b480      	push	{r7}
 80083cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083ce:	e7fe      	b.n	80083ce <HardFault_Handler+0x4>

080083d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083d4:	e7fe      	b.n	80083d4 <MemManage_Handler+0x4>

080083d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083d6:	b480      	push	{r7}
 80083d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083da:	e7fe      	b.n	80083da <BusFault_Handler+0x4>

080083dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083e0:	e7fe      	b.n	80083e0 <UsageFault_Handler+0x4>

080083e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083e2:	b480      	push	{r7}
 80083e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083f4:	bf00      	nop
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083fe:	b480      	push	{r7}
 8008400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008402:	bf00      	nop
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008410:	f000 fa82 	bl	8008918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008414:	bf00      	nop
 8008416:	bd80      	pop	{r7, pc}

08008418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
	return 1;
 800841c:	2301      	movs	r3, #1
}
 800841e:	4618      	mov	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <_kill>:

int _kill(int pid, int sig)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008432:	f004 ff7f 	bl	800d334 <__errno>
 8008436:	4603      	mov	r3, r0
 8008438:	2216      	movs	r2, #22
 800843a:	601a      	str	r2, [r3, #0]
	return -1;
 800843c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <_exit>:

void _exit (int status)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008450:	f04f 31ff 	mov.w	r1, #4294967295
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff ffe7 	bl	8008428 <_kill>
	while (1) {}		/* Make sure we hang here */
 800845a:	e7fe      	b.n	800845a <_exit+0x12>

0800845c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	e00a      	b.n	8008484 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800846e:	f3af 8000 	nop.w
 8008472:	4601      	mov	r1, r0
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	60ba      	str	r2, [r7, #8]
 800847a:	b2ca      	uxtb	r2, r1
 800847c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3301      	adds	r3, #1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	dbf0      	blt.n	800846e <_read+0x12>
	}

return len;
 800848c:	687b      	ldr	r3, [r7, #4]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
	return -1;
 800849e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084be:	605a      	str	r2, [r3, #4]
	return 0;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <_isatty>:

int _isatty(int file)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
	return 1;
 80084d6:	2301      	movs	r3, #1
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
	return 0;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
	...

08008500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008508:	4a14      	ldr	r2, [pc, #80]	; (800855c <_sbrk+0x5c>)
 800850a:	4b15      	ldr	r3, [pc, #84]	; (8008560 <_sbrk+0x60>)
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008514:	4b13      	ldr	r3, [pc, #76]	; (8008564 <_sbrk+0x64>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800851c:	4b11      	ldr	r3, [pc, #68]	; (8008564 <_sbrk+0x64>)
 800851e:	4a12      	ldr	r2, [pc, #72]	; (8008568 <_sbrk+0x68>)
 8008520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008522:	4b10      	ldr	r3, [pc, #64]	; (8008564 <_sbrk+0x64>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4413      	add	r3, r2
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	429a      	cmp	r2, r3
 800852e:	d207      	bcs.n	8008540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008530:	f004 ff00 	bl	800d334 <__errno>
 8008534:	4603      	mov	r3, r0
 8008536:	220c      	movs	r2, #12
 8008538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800853a:	f04f 33ff 	mov.w	r3, #4294967295
 800853e:	e009      	b.n	8008554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008540:	4b08      	ldr	r3, [pc, #32]	; (8008564 <_sbrk+0x64>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008546:	4b07      	ldr	r3, [pc, #28]	; (8008564 <_sbrk+0x64>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	4a05      	ldr	r2, [pc, #20]	; (8008564 <_sbrk+0x64>)
 8008550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008552:	68fb      	ldr	r3, [r7, #12]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	24080000 	.word	0x24080000
 8008560:	00000800 	.word	0x00000800
 8008564:	240006f8 	.word	0x240006f8
 8008568:	240007a0 	.word	0x240007a0

0800856c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008570:	4b37      	ldr	r3, [pc, #220]	; (8008650 <SystemInit+0xe4>)
 8008572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008576:	4a36      	ldr	r2, [pc, #216]	; (8008650 <SystemInit+0xe4>)
 8008578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800857c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008580:	4b34      	ldr	r3, [pc, #208]	; (8008654 <SystemInit+0xe8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	2b06      	cmp	r3, #6
 800858a:	d807      	bhi.n	800859c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800858c:	4b31      	ldr	r3, [pc, #196]	; (8008654 <SystemInit+0xe8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f023 030f 	bic.w	r3, r3, #15
 8008594:	4a2f      	ldr	r2, [pc, #188]	; (8008654 <SystemInit+0xe8>)
 8008596:	f043 0307 	orr.w	r3, r3, #7
 800859a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800859c:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <SystemInit+0xec>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a2d      	ldr	r2, [pc, #180]	; (8008658 <SystemInit+0xec>)
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80085a8:	4b2b      	ldr	r3, [pc, #172]	; (8008658 <SystemInit+0xec>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80085ae:	4b2a      	ldr	r3, [pc, #168]	; (8008658 <SystemInit+0xec>)
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4929      	ldr	r1, [pc, #164]	; (8008658 <SystemInit+0xec>)
 80085b4:	4b29      	ldr	r3, [pc, #164]	; (800865c <SystemInit+0xf0>)
 80085b6:	4013      	ands	r3, r2
 80085b8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80085ba:	4b26      	ldr	r3, [pc, #152]	; (8008654 <SystemInit+0xe8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0308 	and.w	r3, r3, #8
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80085c6:	4b23      	ldr	r3, [pc, #140]	; (8008654 <SystemInit+0xe8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f023 030f 	bic.w	r3, r3, #15
 80085ce:	4a21      	ldr	r2, [pc, #132]	; (8008654 <SystemInit+0xe8>)
 80085d0:	f043 0307 	orr.w	r3, r3, #7
 80085d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80085d6:	4b20      	ldr	r3, [pc, #128]	; (8008658 <SystemInit+0xec>)
 80085d8:	2200      	movs	r2, #0
 80085da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80085dc:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <SystemInit+0xec>)
 80085de:	2200      	movs	r2, #0
 80085e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80085e2:	4b1d      	ldr	r3, [pc, #116]	; (8008658 <SystemInit+0xec>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80085e8:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <SystemInit+0xec>)
 80085ea:	4a1d      	ldr	r2, [pc, #116]	; (8008660 <SystemInit+0xf4>)
 80085ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80085ee:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <SystemInit+0xec>)
 80085f0:	4a1c      	ldr	r2, [pc, #112]	; (8008664 <SystemInit+0xf8>)
 80085f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80085f4:	4b18      	ldr	r3, [pc, #96]	; (8008658 <SystemInit+0xec>)
 80085f6:	4a1c      	ldr	r2, [pc, #112]	; (8008668 <SystemInit+0xfc>)
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80085fa:	4b17      	ldr	r3, [pc, #92]	; (8008658 <SystemInit+0xec>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008600:	4b15      	ldr	r3, [pc, #84]	; (8008658 <SystemInit+0xec>)
 8008602:	4a19      	ldr	r2, [pc, #100]	; (8008668 <SystemInit+0xfc>)
 8008604:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <SystemInit+0xec>)
 8008608:	2200      	movs	r2, #0
 800860a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800860c:	4b12      	ldr	r3, [pc, #72]	; (8008658 <SystemInit+0xec>)
 800860e:	4a16      	ldr	r2, [pc, #88]	; (8008668 <SystemInit+0xfc>)
 8008610:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008612:	4b11      	ldr	r3, [pc, #68]	; (8008658 <SystemInit+0xec>)
 8008614:	2200      	movs	r2, #0
 8008616:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008618:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <SystemInit+0xec>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a0e      	ldr	r2, [pc, #56]	; (8008658 <SystemInit+0xec>)
 800861e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008622:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008624:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <SystemInit+0xec>)
 8008626:	2200      	movs	r2, #0
 8008628:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800862a:	4b10      	ldr	r3, [pc, #64]	; (800866c <SystemInit+0x100>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	4b10      	ldr	r3, [pc, #64]	; (8008670 <SystemInit+0x104>)
 8008630:	4013      	ands	r3, r2
 8008632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008636:	d202      	bcs.n	800863e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008638:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <SystemInit+0x108>)
 800863a:	2201      	movs	r2, #1
 800863c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800863e:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <SystemInit+0x10c>)
 8008640:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008644:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008646:	bf00      	nop
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	e000ed00 	.word	0xe000ed00
 8008654:	52002000 	.word	0x52002000
 8008658:	58024400 	.word	0x58024400
 800865c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008660:	02020200 	.word	0x02020200
 8008664:	01ff0000 	.word	0x01ff0000
 8008668:	01010280 	.word	0x01010280
 800866c:	5c001000 	.word	0x5c001000
 8008670:	ffff0000 	.word	0xffff0000
 8008674:	51008108 	.word	0x51008108
 8008678:	52004000 	.word	0x52004000

0800867c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008680:	4b22      	ldr	r3, [pc, #136]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 8008682:	4a23      	ldr	r2, [pc, #140]	; (8008710 <MX_LPUART1_UART_Init+0x94>)
 8008684:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8008686:	4b21      	ldr	r3, [pc, #132]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 8008688:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800868c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 8008690:	2200      	movs	r2, #0
 8008692:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008694:	4b1d      	ldr	r3, [pc, #116]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 8008696:	2200      	movs	r2, #0
 8008698:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800869a:	4b1c      	ldr	r3, [pc, #112]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 800869c:	2200      	movs	r2, #0
 800869e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80086a0:	4b1a      	ldr	r3, [pc, #104]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086a2:	220c      	movs	r2, #12
 80086a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086a6:	4b19      	ldr	r3, [pc, #100]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80086b2:	4b16      	ldr	r3, [pc, #88]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80086b8:	4b14      	ldr	r3, [pc, #80]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80086be:	4b13      	ldr	r3, [pc, #76]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80086c4:	4811      	ldr	r0, [pc, #68]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086c6:	f003 fd2f 	bl	800c128 <HAL_UART_Init>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80086d0:	f7ff fa82 	bl	8007bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80086d4:	2100      	movs	r1, #0
 80086d6:	480d      	ldr	r0, [pc, #52]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086d8:	f004 fd62 	bl	800d1a0 <HAL_UARTEx_SetTxFifoThreshold>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80086e2:	f7ff fa79 	bl	8007bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80086e6:	2100      	movs	r1, #0
 80086e8:	4808      	ldr	r0, [pc, #32]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086ea:	f004 fd97 	bl	800d21c <HAL_UARTEx_SetRxFifoThreshold>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80086f4:	f7ff fa70 	bl	8007bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80086f8:	4804      	ldr	r0, [pc, #16]	; (800870c <MX_LPUART1_UART_Init+0x90>)
 80086fa:	f004 fd18 	bl	800d12e <HAL_UARTEx_DisableFifoMode>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008704:	f7ff fa68 	bl	8007bd8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008708:	bf00      	nop
 800870a:	bd80      	pop	{r7, pc}
 800870c:	240006fc 	.word	0x240006fc
 8008710:	58000c00 	.word	0x58000c00

08008714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b0b8      	sub	sp, #224	; 0xe0
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800871c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	605a      	str	r2, [r3, #4]
 8008726:	609a      	str	r2, [r3, #8]
 8008728:	60da      	str	r2, [r3, #12]
 800872a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800872c:	f107 0310 	add.w	r3, r7, #16
 8008730:	22bc      	movs	r2, #188	; 0xbc
 8008732:	2100      	movs	r1, #0
 8008734:	4618      	mov	r0, r3
 8008736:	f004 fe35 	bl	800d3a4 <memset>
  if(uartHandle->Instance==LPUART1)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a25      	ldr	r2, [pc, #148]	; (80087d4 <HAL_UART_MspInit+0xc0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d142      	bne.n	80087ca <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008744:	2304      	movs	r3, #4
 8008746:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800874e:	f107 0310 	add.w	r3, r7, #16
 8008752:	4618      	mov	r0, r3
 8008754:	f002 f980 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800875e:	f7ff fa3b 	bl	8007bd8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8008762:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <HAL_UART_MspInit+0xc4>)
 8008764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008768:	4a1b      	ldr	r2, [pc, #108]	; (80087d8 <HAL_UART_MspInit+0xc4>)
 800876a:	f043 0308 	orr.w	r3, r3, #8
 800876e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008772:	4b19      	ldr	r3, [pc, #100]	; (80087d8 <HAL_UART_MspInit+0xc4>)
 8008774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008780:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <HAL_UART_MspInit+0xc4>)
 8008782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008786:	4a14      	ldr	r2, [pc, #80]	; (80087d8 <HAL_UART_MspInit+0xc4>)
 8008788:	f043 0301 	orr.w	r3, r3, #1
 800878c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008790:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <HAL_UART_MspInit+0xc4>)
 8008792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	60bb      	str	r3, [r7, #8]
 800879c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800879e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80087a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a6:	2302      	movs	r3, #2
 80087a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 80087b8:	2303      	movs	r3, #3
 80087ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80087c2:	4619      	mov	r1, r3
 80087c4:	4805      	ldr	r0, [pc, #20]	; (80087dc <HAL_UART_MspInit+0xc8>)
 80087c6:	f000 f9db 	bl	8008b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80087ca:	bf00      	nop
 80087cc:	37e0      	adds	r7, #224	; 0xe0
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	58000c00 	.word	0x58000c00
 80087d8:	58024400 	.word	0x58024400
 80087dc:	58020000 	.word	0x58020000

080087e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80087e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008818 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80087e4:	f7ff fec2 	bl	800856c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80087e8:	480c      	ldr	r0, [pc, #48]	; (800881c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80087ea:	490d      	ldr	r1, [pc, #52]	; (8008820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80087ec:	4a0d      	ldr	r2, [pc, #52]	; (8008824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80087ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087f0:	e002      	b.n	80087f8 <LoopCopyDataInit>

080087f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087f6:	3304      	adds	r3, #4

080087f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087fc:	d3f9      	bcc.n	80087f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087fe:	4a0a      	ldr	r2, [pc, #40]	; (8008828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008800:	4c0a      	ldr	r4, [pc, #40]	; (800882c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008804:	e001      	b.n	800880a <LoopFillZerobss>

08008806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008808:	3204      	adds	r2, #4

0800880a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800880a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800880c:	d3fb      	bcc.n	8008806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800880e:	f004 fd97 	bl	800d340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008812:	f7fe ff49 	bl	80076a8 <main>
  bx  lr
 8008816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008818:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800881c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008820:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 8008824:	080120f0 	.word	0x080120f0
  ldr r2, =_sbss
 8008828:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 800882c:	240007a0 	.word	0x240007a0

08008830 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008830:	e7fe      	b.n	8008830 <ADC3_IRQHandler>
	...

08008834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800883a:	2003      	movs	r0, #3
 800883c:	f000 f96e 	bl	8008b1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008840:	f001 ff34 	bl	800a6ac <HAL_RCC_GetSysClockFreq>
 8008844:	4602      	mov	r2, r0
 8008846:	4b15      	ldr	r3, [pc, #84]	; (800889c <HAL_Init+0x68>)
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	f003 030f 	and.w	r3, r3, #15
 8008850:	4913      	ldr	r1, [pc, #76]	; (80088a0 <HAL_Init+0x6c>)
 8008852:	5ccb      	ldrb	r3, [r1, r3]
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
 800885c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <HAL_Init+0x68>)
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	4a0e      	ldr	r2, [pc, #56]	; (80088a0 <HAL_Init+0x6c>)
 8008868:	5cd3      	ldrb	r3, [r2, r3]
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	fa22 f303 	lsr.w	r3, r2, r3
 8008874:	4a0b      	ldr	r2, [pc, #44]	; (80088a4 <HAL_Init+0x70>)
 8008876:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008878:	4a0b      	ldr	r2, [pc, #44]	; (80088a8 <HAL_Init+0x74>)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800887e:	200f      	movs	r0, #15
 8008880:	f000 f814 	bl	80088ac <HAL_InitTick>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e002      	b.n	8008894 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800888e:	f7ff fd7f 	bl	8008390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	58024400 	.word	0x58024400
 80088a0:	08011710 	.word	0x08011710
 80088a4:	24000028 	.word	0x24000028
 80088a8:	24000024 	.word	0x24000024

080088ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80088b4:	4b15      	ldr	r3, [pc, #84]	; (800890c <HAL_InitTick+0x60>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e021      	b.n	8008904 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80088c0:	4b13      	ldr	r3, [pc, #76]	; (8008910 <HAL_InitTick+0x64>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	4b11      	ldr	r3, [pc, #68]	; (800890c <HAL_InitTick+0x60>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80088d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f945 	bl	8008b66 <HAL_SYSTICK_Config>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e00e      	b.n	8008904 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b0f      	cmp	r3, #15
 80088ea:	d80a      	bhi.n	8008902 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088ec:	2200      	movs	r2, #0
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	f04f 30ff 	mov.w	r0, #4294967295
 80088f4:	f000 f91d 	bl	8008b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088f8:	4a06      	ldr	r2, [pc, #24]	; (8008914 <HAL_InitTick+0x68>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	e000      	b.n	8008904 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	24000030 	.word	0x24000030
 8008910:	24000024 	.word	0x24000024
 8008914:	2400002c 	.word	0x2400002c

08008918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008918:	b480      	push	{r7}
 800891a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800891c:	4b06      	ldr	r3, [pc, #24]	; (8008938 <HAL_IncTick+0x20>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	4b06      	ldr	r3, [pc, #24]	; (800893c <HAL_IncTick+0x24>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4413      	add	r3, r2
 8008928:	4a04      	ldr	r2, [pc, #16]	; (800893c <HAL_IncTick+0x24>)
 800892a:	6013      	str	r3, [r2, #0]
}
 800892c:	bf00      	nop
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	24000030 	.word	0x24000030
 800893c:	2400078c 	.word	0x2400078c

08008940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
  return uwTick;
 8008944:	4b03      	ldr	r3, [pc, #12]	; (8008954 <HAL_GetTick+0x14>)
 8008946:	681b      	ldr	r3, [r3, #0]
}
 8008948:	4618      	mov	r0, r3
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	2400078c 	.word	0x2400078c

08008958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008960:	f7ff ffee 	bl	8008940 <HAL_GetTick>
 8008964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d005      	beq.n	800897e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008972:	4b0a      	ldr	r3, [pc, #40]	; (800899c <HAL_Delay+0x44>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800897e:	bf00      	nop
 8008980:	f7ff ffde 	bl	8008940 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	429a      	cmp	r2, r3
 800898e:	d8f7      	bhi.n	8008980 <HAL_Delay+0x28>
  {
  }
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	24000030 	.word	0x24000030

080089a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80089a4:	4b03      	ldr	r3, [pc, #12]	; (80089b4 <HAL_GetREVID+0x14>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	0c1b      	lsrs	r3, r3, #16
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	5c001000 	.word	0x5c001000

080089b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089c8:	4b0b      	ldr	r3, [pc, #44]	; (80089f8 <__NVIC_SetPriorityGrouping+0x40>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089d4:	4013      	ands	r3, r2
 80089d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <__NVIC_SetPriorityGrouping+0x44>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089e6:	4a04      	ldr	r2, [pc, #16]	; (80089f8 <__NVIC_SetPriorityGrouping+0x40>)
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	60d3      	str	r3, [r2, #12]
}
 80089ec:	bf00      	nop
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	e000ed00 	.word	0xe000ed00
 80089fc:	05fa0000 	.word	0x05fa0000

08008a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a04:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <__NVIC_GetPriorityGrouping+0x18>)
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	0a1b      	lsrs	r3, r3, #8
 8008a0a:	f003 0307 	and.w	r3, r3, #7
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	e000ed00 	.word	0xe000ed00

08008a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	db0a      	blt.n	8008a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	490c      	ldr	r1, [pc, #48]	; (8008a68 <__NVIC_SetPriority+0x4c>)
 8008a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a3a:	0112      	lsls	r2, r2, #4
 8008a3c:	b2d2      	uxtb	r2, r2
 8008a3e:	440b      	add	r3, r1
 8008a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a44:	e00a      	b.n	8008a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	4908      	ldr	r1, [pc, #32]	; (8008a6c <__NVIC_SetPriority+0x50>)
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	3b04      	subs	r3, #4
 8008a54:	0112      	lsls	r2, r2, #4
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	440b      	add	r3, r1
 8008a5a:	761a      	strb	r2, [r3, #24]
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	e000e100 	.word	0xe000e100
 8008a6c:	e000ed00 	.word	0xe000ed00

08008a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b089      	sub	sp, #36	; 0x24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f1c3 0307 	rsb	r3, r3, #7
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	bf28      	it	cs
 8008a8e:	2304      	movcs	r3, #4
 8008a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	3304      	adds	r3, #4
 8008a96:	2b06      	cmp	r3, #6
 8008a98:	d902      	bls.n	8008aa0 <NVIC_EncodePriority+0x30>
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	3b03      	subs	r3, #3
 8008a9e:	e000      	b.n	8008aa2 <NVIC_EncodePriority+0x32>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	43da      	mvns	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	401a      	ands	r2, r3
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac2:	43d9      	mvns	r1, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ac8:	4313      	orrs	r3, r2
         );
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3724      	adds	r7, #36	; 0x24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
	...

08008ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ae8:	d301      	bcc.n	8008aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008aea:	2301      	movs	r3, #1
 8008aec:	e00f      	b.n	8008b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008aee:	4a0a      	ldr	r2, [pc, #40]	; (8008b18 <SysTick_Config+0x40>)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008af6:	210f      	movs	r1, #15
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	f7ff ff8e 	bl	8008a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <SysTick_Config+0x40>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b06:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <SysTick_Config+0x40>)
 8008b08:	2207      	movs	r2, #7
 8008b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000e010 	.word	0xe000e010

08008b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff ff47 	bl	80089b8 <__NVIC_SetPriorityGrouping>
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b086      	sub	sp, #24
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	4603      	mov	r3, r0
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
 8008b3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008b40:	f7ff ff5e 	bl	8008a00 <__NVIC_GetPriorityGrouping>
 8008b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	68b9      	ldr	r1, [r7, #8]
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f7ff ff90 	bl	8008a70 <NVIC_EncodePriority>
 8008b50:	4602      	mov	r2, r0
 8008b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff ff5f 	bl	8008a1c <__NVIC_SetPriority>
}
 8008b5e:	bf00      	nop
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff ffb2 	bl	8008ad8 <SysTick_Config>
 8008b74:	4603      	mov	r3, r0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b089      	sub	sp, #36	; 0x24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b8e:	4b89      	ldr	r3, [pc, #548]	; (8008db4 <HAL_GPIO_Init+0x234>)
 8008b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b92:	e194      	b.n	8008ebe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	2101      	movs	r1, #1
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 8186 	beq.w	8008eb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f003 0303 	and.w	r3, r3, #3
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d005      	beq.n	8008bc4 <HAL_GPIO_Init+0x44>
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d130      	bne.n	8008c26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	2203      	movs	r2, #3
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	43db      	mvns	r3, r3
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	fa02 f303 	lsl.w	r3, r2, r3
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43db      	mvns	r3, r3
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	4013      	ands	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	091b      	lsrs	r3, r3, #4
 8008c10:	f003 0201 	and.w	r2, r3, #1
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d017      	beq.n	8008c62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	43db      	mvns	r3, r3
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	4013      	ands	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d123      	bne.n	8008cb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	08da      	lsrs	r2, r3, #3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3208      	adds	r2, #8
 8008c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	220f      	movs	r2, #15
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	43db      	mvns	r3, r3
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	691a      	ldr	r2, [r3, #16]
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	08da      	lsrs	r2, r3, #3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3208      	adds	r2, #8
 8008cb0:	69b9      	ldr	r1, [r7, #24]
 8008cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f003 0203 	and.w	r2, r3, #3
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 80e0 	beq.w	8008eb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cf8:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <HAL_GPIO_Init+0x238>)
 8008cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008cfe:	4a2e      	ldr	r2, [pc, #184]	; (8008db8 <HAL_GPIO_Init+0x238>)
 8008d00:	f043 0302 	orr.w	r3, r3, #2
 8008d04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d08:	4b2b      	ldr	r3, [pc, #172]	; (8008db8 <HAL_GPIO_Init+0x238>)
 8008d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d16:	4a29      	ldr	r2, [pc, #164]	; (8008dbc <HAL_GPIO_Init+0x23c>)
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	089b      	lsrs	r3, r3, #2
 8008d1c:	3302      	adds	r3, #2
 8008d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	220f      	movs	r2, #15
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	43db      	mvns	r3, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	4013      	ands	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a20      	ldr	r2, [pc, #128]	; (8008dc0 <HAL_GPIO_Init+0x240>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d052      	beq.n	8008de8 <HAL_GPIO_Init+0x268>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a1f      	ldr	r2, [pc, #124]	; (8008dc4 <HAL_GPIO_Init+0x244>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d031      	beq.n	8008dae <HAL_GPIO_Init+0x22e>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a1e      	ldr	r2, [pc, #120]	; (8008dc8 <HAL_GPIO_Init+0x248>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d02b      	beq.n	8008daa <HAL_GPIO_Init+0x22a>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a1d      	ldr	r2, [pc, #116]	; (8008dcc <HAL_GPIO_Init+0x24c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d025      	beq.n	8008da6 <HAL_GPIO_Init+0x226>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a1c      	ldr	r2, [pc, #112]	; (8008dd0 <HAL_GPIO_Init+0x250>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d01f      	beq.n	8008da2 <HAL_GPIO_Init+0x222>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a1b      	ldr	r2, [pc, #108]	; (8008dd4 <HAL_GPIO_Init+0x254>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d019      	beq.n	8008d9e <HAL_GPIO_Init+0x21e>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a1a      	ldr	r2, [pc, #104]	; (8008dd8 <HAL_GPIO_Init+0x258>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d013      	beq.n	8008d9a <HAL_GPIO_Init+0x21a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a19      	ldr	r2, [pc, #100]	; (8008ddc <HAL_GPIO_Init+0x25c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d00d      	beq.n	8008d96 <HAL_GPIO_Init+0x216>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <HAL_GPIO_Init+0x260>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d007      	beq.n	8008d92 <HAL_GPIO_Init+0x212>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a17      	ldr	r2, [pc, #92]	; (8008de4 <HAL_GPIO_Init+0x264>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d101      	bne.n	8008d8e <HAL_GPIO_Init+0x20e>
 8008d8a:	2309      	movs	r3, #9
 8008d8c:	e02d      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008d8e:	230a      	movs	r3, #10
 8008d90:	e02b      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008d92:	2308      	movs	r3, #8
 8008d94:	e029      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008d96:	2307      	movs	r3, #7
 8008d98:	e027      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008d9a:	2306      	movs	r3, #6
 8008d9c:	e025      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008d9e:	2305      	movs	r3, #5
 8008da0:	e023      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008da2:	2304      	movs	r3, #4
 8008da4:	e021      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008da6:	2303      	movs	r3, #3
 8008da8:	e01f      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008daa:	2302      	movs	r3, #2
 8008dac:	e01d      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e01b      	b.n	8008dea <HAL_GPIO_Init+0x26a>
 8008db2:	bf00      	nop
 8008db4:	58000080 	.word	0x58000080
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	58000400 	.word	0x58000400
 8008dc0:	58020000 	.word	0x58020000
 8008dc4:	58020400 	.word	0x58020400
 8008dc8:	58020800 	.word	0x58020800
 8008dcc:	58020c00 	.word	0x58020c00
 8008dd0:	58021000 	.word	0x58021000
 8008dd4:	58021400 	.word	0x58021400
 8008dd8:	58021800 	.word	0x58021800
 8008ddc:	58021c00 	.word	0x58021c00
 8008de0:	58022000 	.word	0x58022000
 8008de4:	58022400 	.word	0x58022400
 8008de8:	2300      	movs	r3, #0
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	f002 0203 	and.w	r2, r2, #3
 8008df0:	0092      	lsls	r2, r2, #2
 8008df2:	4093      	lsls	r3, r2
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dfa:	4938      	ldr	r1, [pc, #224]	; (8008edc <HAL_GPIO_Init+0x35c>)
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	089b      	lsrs	r3, r3, #2
 8008e00:	3302      	adds	r3, #2
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	43db      	mvns	r3, r3
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	4013      	ands	r3, r2
 8008e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	43db      	mvns	r3, r3
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	4013      	ands	r3, r2
 8008e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	4013      	ands	r3, r2
 8008e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	43db      	mvns	r3, r3
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f47f ae63 	bne.w	8008b94 <HAL_GPIO_Init+0x14>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	3724      	adds	r7, #36	; 0x24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	58000400 	.word	0x58000400

08008ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	807b      	strh	r3, [r7, #2]
 8008eec:	4613      	mov	r3, r2
 8008eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ef0:	787b      	ldrb	r3, [r7, #1]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ef6:	887a      	ldrh	r2, [r7, #2]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008efc:	e003      	b.n	8008f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008efe:	887b      	ldrh	r3, [r7, #2]
 8008f00:	041a      	lsls	r2, r3, #16
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	619a      	str	r2, [r3, #24]
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
	...

08008f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e07f      	b.n	8009026 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d106      	bne.n	8008f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7fe fab8 	bl	80074b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2224      	movs	r2, #36	; 0x24
 8008f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0201 	bic.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d107      	bne.n	8008f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f8a:	609a      	str	r2, [r3, #8]
 8008f8c:	e006      	b.n	8008f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d104      	bne.n	8008fae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6859      	ldr	r1, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <HAL_I2C_Init+0x11c>)
 8008fba:	430b      	orrs	r3, r1
 8008fbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	69d9      	ldr	r1, [r3, #28]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a1a      	ldr	r2, [r3, #32]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0201 	orr.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2220      	movs	r2, #32
 8009012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	02008000 	.word	0x02008000

08009034 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af02      	add	r7, sp, #8
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	607a      	str	r2, [r7, #4]
 800903e:	461a      	mov	r2, r3
 8009040:	460b      	mov	r3, r1
 8009042:	817b      	strh	r3, [r7, #10]
 8009044:	4613      	mov	r3, r2
 8009046:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b20      	cmp	r3, #32
 8009052:	f040 80da 	bne.w	800920a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_I2C_Master_Transmit+0x30>
 8009060:	2302      	movs	r3, #2
 8009062:	e0d3      	b.n	800920c <HAL_I2C_Master_Transmit+0x1d8>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800906c:	f7ff fc68 	bl	8008940 <HAL_GetTick>
 8009070:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	2319      	movs	r3, #25
 8009078:	2201      	movs	r2, #1
 800907a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 f9e6 	bl	8009450 <I2C_WaitOnFlagUntilTimeout>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e0be      	b.n	800920c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2221      	movs	r2, #33	; 0x21
 8009092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2210      	movs	r2, #16
 800909a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	893a      	ldrh	r2, [r7, #8]
 80090ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	2bff      	cmp	r3, #255	; 0xff
 80090be:	d90e      	bls.n	80090de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	22ff      	movs	r2, #255	; 0xff
 80090c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	8979      	ldrh	r1, [r7, #10]
 80090ce:	4b51      	ldr	r3, [pc, #324]	; (8009214 <HAL_I2C_Master_Transmit+0x1e0>)
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 fbdc 	bl	8009894 <I2C_TransferConfig>
 80090dc:	e06c      	b.n	80091b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	8979      	ldrh	r1, [r7, #10]
 80090f0:	4b48      	ldr	r3, [pc, #288]	; (8009214 <HAL_I2C_Master_Transmit+0x1e0>)
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 fbcb 	bl	8009894 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80090fe:	e05b      	b.n	80091b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	6a39      	ldr	r1, [r7, #32]
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f9e3 	bl	80094d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e07b      	b.n	800920c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	781a      	ldrb	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d034      	beq.n	80091b8 <HAL_I2C_Master_Transmit+0x184>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009152:	2b00      	cmp	r3, #0
 8009154:	d130      	bne.n	80091b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	2200      	movs	r2, #0
 800915e:	2180      	movs	r1, #128	; 0x80
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 f975 	bl	8009450 <I2C_WaitOnFlagUntilTimeout>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e04d      	b.n	800920c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009174:	b29b      	uxth	r3, r3
 8009176:	2bff      	cmp	r3, #255	; 0xff
 8009178:	d90e      	bls.n	8009198 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	22ff      	movs	r2, #255	; 0xff
 800917e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009184:	b2da      	uxtb	r2, r3
 8009186:	8979      	ldrh	r1, [r7, #10]
 8009188:	2300      	movs	r3, #0
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 fb7f 	bl	8009894 <I2C_TransferConfig>
 8009196:	e00f      	b.n	80091b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	8979      	ldrh	r1, [r7, #10]
 80091aa:	2300      	movs	r3, #0
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f000 fb6e 	bl	8009894 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d19e      	bne.n	8009100 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	6a39      	ldr	r1, [r7, #32]
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f9c2 	bl	8009550 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e01a      	b.n	800920c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2220      	movs	r2, #32
 80091dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6859      	ldr	r1, [r3, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	4b0b      	ldr	r3, [pc, #44]	; (8009218 <HAL_I2C_Master_Transmit+0x1e4>)
 80091ea:	400b      	ands	r3, r1
 80091ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	e000      	b.n	800920c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800920a:	2302      	movs	r3, #2
  }
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	80002000 	.word	0x80002000
 8009218:	fe00e800 	.word	0xfe00e800

0800921c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af02      	add	r7, sp, #8
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	607a      	str	r2, [r7, #4]
 8009226:	461a      	mov	r2, r3
 8009228:	460b      	mov	r3, r1
 800922a:	817b      	strh	r3, [r7, #10]
 800922c:	4613      	mov	r3, r2
 800922e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b20      	cmp	r3, #32
 800923a:	f040 80db 	bne.w	80093f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009244:	2b01      	cmp	r3, #1
 8009246:	d101      	bne.n	800924c <HAL_I2C_Master_Receive+0x30>
 8009248:	2302      	movs	r3, #2
 800924a:	e0d4      	b.n	80093f6 <HAL_I2C_Master_Receive+0x1da>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009254:	f7ff fb74 	bl	8008940 <HAL_GetTick>
 8009258:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	2319      	movs	r3, #25
 8009260:	2201      	movs	r2, #1
 8009262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f8f2 	bl	8009450 <I2C_WaitOnFlagUntilTimeout>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e0bf      	b.n	80093f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2222      	movs	r2, #34	; 0x22
 800927a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2210      	movs	r2, #16
 8009282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	893a      	ldrh	r2, [r7, #8]
 8009296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	2bff      	cmp	r3, #255	; 0xff
 80092a6:	d90e      	bls.n	80092c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	22ff      	movs	r2, #255	; 0xff
 80092ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	8979      	ldrh	r1, [r7, #10]
 80092b6:	4b52      	ldr	r3, [pc, #328]	; (8009400 <HAL_I2C_Master_Receive+0x1e4>)
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fae8 	bl	8009894 <I2C_TransferConfig>
 80092c4:	e06d      	b.n	80093a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	8979      	ldrh	r1, [r7, #10]
 80092d8:	4b49      	ldr	r3, [pc, #292]	; (8009400 <HAL_I2C_Master_Receive+0x1e4>)
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fad7 	bl	8009894 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80092e6:	e05c      	b.n	80093a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	6a39      	ldr	r1, [r7, #32]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 f96b 	bl	80095c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e07c      	b.n	80093f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	b2d2      	uxtb	r2, r2
 8009308:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009318:	3b01      	subs	r3, #1
 800931a:	b29a      	uxth	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009324:	b29b      	uxth	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	b29a      	uxth	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009332:	b29b      	uxth	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d034      	beq.n	80093a2 <HAL_I2C_Master_Receive+0x186>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933c:	2b00      	cmp	r3, #0
 800933e:	d130      	bne.n	80093a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	2200      	movs	r2, #0
 8009348:	2180      	movs	r1, #128	; 0x80
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 f880 	bl	8009450 <I2C_WaitOnFlagUntilTimeout>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e04d      	b.n	80093f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935e:	b29b      	uxth	r3, r3
 8009360:	2bff      	cmp	r3, #255	; 0xff
 8009362:	d90e      	bls.n	8009382 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	22ff      	movs	r2, #255	; 0xff
 8009368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936e:	b2da      	uxtb	r2, r3
 8009370:	8979      	ldrh	r1, [r7, #10]
 8009372:	2300      	movs	r3, #0
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 fa8a 	bl	8009894 <I2C_TransferConfig>
 8009380:	e00f      	b.n	80093a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009390:	b2da      	uxtb	r2, r3
 8009392:	8979      	ldrh	r1, [r7, #10]
 8009394:	2300      	movs	r3, #0
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 fa79 	bl	8009894 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d19d      	bne.n	80092e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	6a39      	ldr	r1, [r7, #32]
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f8cd 	bl	8009550 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e01a      	b.n	80093f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2220      	movs	r2, #32
 80093c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6859      	ldr	r1, [r3, #4]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <HAL_I2C_Master_Receive+0x1e8>)
 80093d4:	400b      	ands	r3, r1
 80093d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	e000      	b.n	80093f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80093f4:	2302      	movs	r3, #2
  }
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	80002400 	.word	0x80002400
 8009404:	fe00e800 	.word	0xfe00e800

08009408 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b02      	cmp	r3, #2
 800941c:	d103      	bne.n	8009426 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2200      	movs	r2, #0
 8009424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b01      	cmp	r3, #1
 8009432:	d007      	beq.n	8009444 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699a      	ldr	r2, [r3, #24]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0201 	orr.w	r2, r2, #1
 8009442:	619a      	str	r2, [r3, #24]
  }
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	4613      	mov	r3, r2
 800945e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009460:	e022      	b.n	80094a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d01e      	beq.n	80094a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946a:	f7ff fa69 	bl	8008940 <HAL_GetTick>
 800946e:	4602      	mov	r2, r0
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d302      	bcc.n	8009480 <I2C_WaitOnFlagUntilTimeout+0x30>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d113      	bne.n	80094a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009484:	f043 0220 	orr.w	r2, r3, #32
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2220      	movs	r2, #32
 8009490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e00f      	b.n	80094c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699a      	ldr	r2, [r3, #24]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	4013      	ands	r3, r2
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	bf0c      	ite	eq
 80094b8:	2301      	moveq	r3, #1
 80094ba:	2300      	movne	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	461a      	mov	r2, r3
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d0cd      	beq.n	8009462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80094dc:	e02c      	b.n	8009538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	68b9      	ldr	r1, [r7, #8]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 f8ea 	bl	80096bc <I2C_IsErrorOccurred>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e02a      	b.n	8009548 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f8:	d01e      	beq.n	8009538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094fa:	f7ff fa21 	bl	8008940 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	429a      	cmp	r2, r3
 8009508:	d302      	bcc.n	8009510 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d113      	bne.n	8009538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009514:	f043 0220 	orr.w	r2, r3, #32
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e007      	b.n	8009548 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b02      	cmp	r3, #2
 8009544:	d1cb      	bne.n	80094de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800955c:	e028      	b.n	80095b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	68b9      	ldr	r1, [r7, #8]
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 f8aa 	bl	80096bc <I2C_IsErrorOccurred>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e026      	b.n	80095c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009572:	f7ff f9e5 	bl	8008940 <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	429a      	cmp	r2, r3
 8009580:	d302      	bcc.n	8009588 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d113      	bne.n	80095b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958c:	f043 0220 	orr.w	r2, r3, #32
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2220      	movs	r2, #32
 8009598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e007      	b.n	80095c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	f003 0320 	and.w	r3, r3, #32
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d1cf      	bne.n	800955e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095d4:	e064      	b.n	80096a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 f86e 	bl	80096bc <I2C_IsErrorOccurred>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e062      	b.n	80096b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	d138      	bne.n	800966a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	2b04      	cmp	r3, #4
 8009604:	d105      	bne.n	8009612 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	e04e      	b.n	80096b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b10      	cmp	r3, #16
 800961e:	d107      	bne.n	8009630 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2210      	movs	r2, #16
 8009626:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2204      	movs	r2, #4
 800962c:	645a      	str	r2, [r3, #68]	; 0x44
 800962e:	e002      	b.n	8009636 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2220      	movs	r2, #32
 800963c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6859      	ldr	r1, [r3, #4]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	4b1b      	ldr	r3, [pc, #108]	; (80096b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800964a:	400b      	ands	r3, r1
 800964c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2220      	movs	r2, #32
 8009652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e022      	b.n	80096b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966a:	f7ff f969 	bl	8008940 <HAL_GetTick>
 800966e:	4602      	mov	r2, r0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	429a      	cmp	r2, r3
 8009678:	d302      	bcc.n	8009680 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10f      	bne.n	80096a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009684:	f043 0220 	orr.w	r2, r3, #32
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e007      	b.n	80096b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f003 0304 	and.w	r3, r3, #4
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d193      	bne.n	80095d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	fe00e800 	.word	0xfe00e800

080096bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08a      	sub	sp, #40	; 0x28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	f003 0310 	and.w	r3, r3, #16
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d075      	beq.n	80097d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2210      	movs	r2, #16
 80096ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80096f0:	e056      	b.n	80097a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f8:	d052      	beq.n	80097a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80096fa:	f7ff f921 	bl	8008940 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	429a      	cmp	r2, r3
 8009708:	d302      	bcc.n	8009710 <I2C_IsErrorOccurred+0x54>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d147      	bne.n	80097a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800971a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009722:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800972e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009732:	d12e      	bne.n	8009792 <I2C_IsErrorOccurred+0xd6>
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800973a:	d02a      	beq.n	8009792 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800973c:	7cfb      	ldrb	r3, [r7, #19]
 800973e:	2b20      	cmp	r3, #32
 8009740:	d027      	beq.n	8009792 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009750:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009752:	f7ff f8f5 	bl	8008940 <HAL_GetTick>
 8009756:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009758:	e01b      	b.n	8009792 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800975a:	f7ff f8f1 	bl	8008940 <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	2b19      	cmp	r3, #25
 8009766:	d914      	bls.n	8009792 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976c:	f043 0220 	orr.w	r2, r3, #32
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b20      	cmp	r3, #32
 800979e:	d1dc      	bne.n	800975a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	f003 0320 	and.w	r3, r3, #32
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d003      	beq.n	80097b6 <I2C_IsErrorOccurred+0xfa>
 80097ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d09d      	beq.n	80096f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80097b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d103      	bne.n	80097c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2220      	movs	r2, #32
 80097c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	f043 0304 	orr.w	r3, r3, #4
 80097cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00b      	beq.n	80097fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	f043 0301 	orr.w	r3, r3, #1
 80097ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00b      	beq.n	8009820 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	f043 0308 	orr.w	r3, r3, #8
 800980e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	f043 0302 	orr.w	r3, r3, #2
 8009830:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800983a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009846:	2b00      	cmp	r3, #0
 8009848:	d01c      	beq.n	8009884 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff fddc 	bl	8009408 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6859      	ldr	r1, [r3, #4]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <I2C_IsErrorOccurred+0x1d4>)
 800985c:	400b      	ands	r3, r1
 800985e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	431a      	orrs	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009888:	4618      	mov	r0, r3
 800988a:	3728      	adds	r7, #40	; 0x28
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	fe00e800 	.word	0xfe00e800

08009894 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	817b      	strh	r3, [r7, #10]
 80098a2:	4613      	mov	r3, r2
 80098a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80098a6:	897b      	ldrh	r3, [r7, #10]
 80098a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80098ac:	7a7b      	ldrb	r3, [r7, #9]
 80098ae:	041b      	lsls	r3, r3, #16
 80098b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80098b4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	4313      	orrs	r3, r2
 80098be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098c2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	0d5b      	lsrs	r3, r3, #21
 80098ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80098d2:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <I2C_TransferConfig+0x60>)
 80098d4:	430b      	orrs	r3, r1
 80098d6:	43db      	mvns	r3, r3
 80098d8:	ea02 0103 	and.w	r1, r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	03ff63ff 	.word	0x03ff63ff

080098f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b20      	cmp	r3, #32
 800990c:	d138      	bne.n	8009980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009914:	2b01      	cmp	r3, #1
 8009916:	d101      	bne.n	800991c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009918:	2302      	movs	r3, #2
 800991a:	e032      	b.n	8009982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2224      	movs	r2, #36	; 0x24
 8009928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0201 	bic.w	r2, r2, #1
 800993a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800994a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6819      	ldr	r1, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0201 	orr.w	r2, r2, #1
 800996a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2220      	movs	r2, #32
 8009970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	e000      	b.n	8009982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009980:	2302      	movs	r3, #2
  }
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800998e:	b480      	push	{r7}
 8009990:	b085      	sub	sp, #20
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b20      	cmp	r3, #32
 80099a2:	d139      	bne.n	8009a18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d101      	bne.n	80099b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80099ae:	2302      	movs	r3, #2
 80099b0:	e033      	b.n	8009a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2224      	movs	r2, #36	; 0x24
 80099be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0201 	bic.w	r2, r2, #1
 80099d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80099e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	021b      	lsls	r3, r3, #8
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f042 0201 	orr.w	r2, r2, #1
 8009a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	e000      	b.n	8009a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a18:	2302      	movs	r3, #2
  }
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
	...

08009a28 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a30:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a36:	4a0c      	ldr	r2, [pc, #48]	; (8009a68 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009a38:	f043 0302 	orr.w	r3, r3, #2
 8009a3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009a4e:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	4906      	ldr	r1, [pc, #24]	; (8009a6c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	604b      	str	r3, [r1, #4]
}
 8009a5a:	bf00      	nop
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	58024400 	.word	0x58024400
 8009a6c:	58000400 	.word	0x58000400

08009a70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009a78:	4b19      	ldr	r3, [pc, #100]	; (8009ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d00a      	beq.n	8009a9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009a84:	4b16      	ldr	r3, [pc, #88]	; (8009ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d001      	beq.n	8009a96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e01f      	b.n	8009ad6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e01d      	b.n	8009ad6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a9a:	4b11      	ldr	r3, [pc, #68]	; (8009ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f023 0207 	bic.w	r2, r3, #7
 8009aa2:	490f      	ldr	r1, [pc, #60]	; (8009ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009aaa:	f7fe ff49 	bl	8008940 <HAL_GetTick>
 8009aae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ab0:	e009      	b.n	8009ac6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ab2:	f7fe ff45 	bl	8008940 <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ac0:	d901      	bls.n	8009ac6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e007      	b.n	8009ad6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ac6:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad2:	d1ee      	bne.n	8009ab2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	58024800 	.word	0x58024800

08009ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08c      	sub	sp, #48	; 0x30
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d102      	bne.n	8009af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f000 bc1d 	b.w	800a332 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 8087 	beq.w	8009c14 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b06:	4b99      	ldr	r3, [pc, #612]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b10:	4b96      	ldr	r3, [pc, #600]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	2b10      	cmp	r3, #16
 8009b1a:	d007      	beq.n	8009b2c <HAL_RCC_OscConfig+0x48>
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	2b18      	cmp	r3, #24
 8009b20:	d110      	bne.n	8009b44 <HAL_RCC_OscConfig+0x60>
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	f003 0303 	and.w	r3, r3, #3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d10b      	bne.n	8009b44 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b2c:	4b8f      	ldr	r3, [pc, #572]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d06c      	beq.n	8009c12 <HAL_RCC_OscConfig+0x12e>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d168      	bne.n	8009c12 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e3f6      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b4c:	d106      	bne.n	8009b5c <HAL_RCC_OscConfig+0x78>
 8009b4e:	4b87      	ldr	r3, [pc, #540]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a86      	ldr	r2, [pc, #536]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	e02e      	b.n	8009bba <HAL_RCC_OscConfig+0xd6>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10c      	bne.n	8009b7e <HAL_RCC_OscConfig+0x9a>
 8009b64:	4b81      	ldr	r3, [pc, #516]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a80      	ldr	r2, [pc, #512]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	4b7e      	ldr	r3, [pc, #504]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a7d      	ldr	r2, [pc, #500]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	e01d      	b.n	8009bba <HAL_RCC_OscConfig+0xd6>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b86:	d10c      	bne.n	8009ba2 <HAL_RCC_OscConfig+0xbe>
 8009b88:	4b78      	ldr	r3, [pc, #480]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a77      	ldr	r2, [pc, #476]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	4b75      	ldr	r3, [pc, #468]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a74      	ldr	r2, [pc, #464]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	e00b      	b.n	8009bba <HAL_RCC_OscConfig+0xd6>
 8009ba2:	4b72      	ldr	r3, [pc, #456]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a71      	ldr	r2, [pc, #452]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	4b6f      	ldr	r3, [pc, #444]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a6e      	ldr	r2, [pc, #440]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d013      	beq.n	8009bea <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc2:	f7fe febd 	bl	8008940 <HAL_GetTick>
 8009bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bc8:	e008      	b.n	8009bdc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bca:	f7fe feb9 	bl	8008940 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b64      	cmp	r3, #100	; 0x64
 8009bd6:	d901      	bls.n	8009bdc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e3aa      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bdc:	4b63      	ldr	r3, [pc, #396]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0f0      	beq.n	8009bca <HAL_RCC_OscConfig+0xe6>
 8009be8:	e014      	b.n	8009c14 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bea:	f7fe fea9 	bl	8008940 <HAL_GetTick>
 8009bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009bf0:	e008      	b.n	8009c04 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bf2:	f7fe fea5 	bl	8008940 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b64      	cmp	r3, #100	; 0x64
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e396      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009c04:	4b59      	ldr	r3, [pc, #356]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1f0      	bne.n	8009bf2 <HAL_RCC_OscConfig+0x10e>
 8009c10:	e000      	b.n	8009c14 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 80cb 	beq.w	8009db8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c22:	4b52      	ldr	r3, [pc, #328]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c2a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c2c:	4b4f      	ldr	r3, [pc, #316]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d007      	beq.n	8009c48 <HAL_RCC_OscConfig+0x164>
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	2b18      	cmp	r3, #24
 8009c3c:	d156      	bne.n	8009cec <HAL_RCC_OscConfig+0x208>
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f003 0303 	and.w	r3, r3, #3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d151      	bne.n	8009cec <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c48:	4b48      	ldr	r3, [pc, #288]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d005      	beq.n	8009c60 <HAL_RCC_OscConfig+0x17c>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e368      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c60:	4b42      	ldr	r3, [pc, #264]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f023 0219 	bic.w	r2, r3, #25
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	493f      	ldr	r1, [pc, #252]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c72:	f7fe fe65 	bl	8008940 <HAL_GetTick>
 8009c76:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c78:	e008      	b.n	8009c8c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c7a:	f7fe fe61 	bl	8008940 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d901      	bls.n	8009c8c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e352      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c8c:	4b37      	ldr	r3, [pc, #220]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0f0      	beq.n	8009c7a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c98:	f7fe fe82 	bl	80089a0 <HAL_GetREVID>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d817      	bhi.n	8009cd6 <HAL_RCC_OscConfig+0x1f2>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	2b40      	cmp	r3, #64	; 0x40
 8009cac:	d108      	bne.n	8009cc0 <HAL_RCC_OscConfig+0x1dc>
 8009cae:	4b2f      	ldr	r3, [pc, #188]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009cb6:	4a2d      	ldr	r2, [pc, #180]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cbc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cbe:	e07b      	b.n	8009db8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cc0:	4b2a      	ldr	r3, [pc, #168]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	031b      	lsls	r3, r3, #12
 8009cce:	4927      	ldr	r1, [pc, #156]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cd4:	e070      	b.n	8009db8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cd6:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	061b      	lsls	r3, r3, #24
 8009ce4:	4921      	ldr	r1, [pc, #132]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cea:	e065      	b.n	8009db8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d048      	beq.n	8009d86 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009cf4:	4b1d      	ldr	r3, [pc, #116]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f023 0219 	bic.w	r2, r3, #25
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	491a      	ldr	r1, [pc, #104]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009d02:	4313      	orrs	r3, r2
 8009d04:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d06:	f7fe fe1b 	bl	8008940 <HAL_GetTick>
 8009d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d0c:	e008      	b.n	8009d20 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d0e:	f7fe fe17 	bl	8008940 <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d901      	bls.n	8009d20 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e308      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d20:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0f0      	beq.n	8009d0e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d2c:	f7fe fe38 	bl	80089a0 <HAL_GetREVID>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d81a      	bhi.n	8009d70 <HAL_RCC_OscConfig+0x28c>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	2b40      	cmp	r3, #64	; 0x40
 8009d40:	d108      	bne.n	8009d54 <HAL_RCC_OscConfig+0x270>
 8009d42:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009d4a:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d50:	6053      	str	r3, [r2, #4]
 8009d52:	e031      	b.n	8009db8 <HAL_RCC_OscConfig+0x2d4>
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	031b      	lsls	r3, r3, #12
 8009d62:	4902      	ldr	r1, [pc, #8]	; (8009d6c <HAL_RCC_OscConfig+0x288>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	604b      	str	r3, [r1, #4]
 8009d68:	e026      	b.n	8009db8 <HAL_RCC_OscConfig+0x2d4>
 8009d6a:	bf00      	nop
 8009d6c:	58024400 	.word	0x58024400
 8009d70:	4b9a      	ldr	r3, [pc, #616]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	061b      	lsls	r3, r3, #24
 8009d7e:	4997      	ldr	r1, [pc, #604]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	604b      	str	r3, [r1, #4]
 8009d84:	e018      	b.n	8009db8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d86:	4b95      	ldr	r3, [pc, #596]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a94      	ldr	r2, [pc, #592]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009d8c:	f023 0301 	bic.w	r3, r3, #1
 8009d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d92:	f7fe fdd5 	bl	8008940 <HAL_GetTick>
 8009d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d98:	e008      	b.n	8009dac <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d9a:	f7fe fdd1 	bl	8008940 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d901      	bls.n	8009dac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e2c2      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009dac:	4b8b      	ldr	r3, [pc, #556]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f0      	bne.n	8009d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0310 	and.w	r3, r3, #16
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 80a9 	beq.w	8009f18 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dc6:	4b85      	ldr	r3, [pc, #532]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dd0:	4b82      	ldr	r3, [pc, #520]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	2b08      	cmp	r3, #8
 8009dda:	d007      	beq.n	8009dec <HAL_RCC_OscConfig+0x308>
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	2b18      	cmp	r3, #24
 8009de0:	d13a      	bne.n	8009e58 <HAL_RCC_OscConfig+0x374>
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f003 0303 	and.w	r3, r3, #3
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d135      	bne.n	8009e58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dec:	4b7b      	ldr	r3, [pc, #492]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <HAL_RCC_OscConfig+0x320>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	2b80      	cmp	r3, #128	; 0x80
 8009dfe:	d001      	beq.n	8009e04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e296      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e04:	f7fe fdcc 	bl	80089a0 <HAL_GetREVID>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d817      	bhi.n	8009e42 <HAL_RCC_OscConfig+0x35e>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	2b20      	cmp	r3, #32
 8009e18:	d108      	bne.n	8009e2c <HAL_RCC_OscConfig+0x348>
 8009e1a:	4b70      	ldr	r3, [pc, #448]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009e22:	4a6e      	ldr	r2, [pc, #440]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e28:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e2a:	e075      	b.n	8009f18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e2c:	4b6b      	ldr	r3, [pc, #428]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	069b      	lsls	r3, r3, #26
 8009e3a:	4968      	ldr	r1, [pc, #416]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e40:	e06a      	b.n	8009f18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e42:	4b66      	ldr	r3, [pc, #408]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	061b      	lsls	r3, r3, #24
 8009e50:	4962      	ldr	r1, [pc, #392]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e56:	e05f      	b.n	8009f18 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d042      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009e60:	4b5e      	ldr	r3, [pc, #376]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a5d      	ldr	r2, [pc, #372]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e6c:	f7fe fd68 	bl	8008940 <HAL_GetTick>
 8009e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009e74:	f7fe fd64 	bl	8008940 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e255      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e86:	4b55      	ldr	r3, [pc, #340]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f0      	beq.n	8009e74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e92:	f7fe fd85 	bl	80089a0 <HAL_GetREVID>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d817      	bhi.n	8009ed0 <HAL_RCC_OscConfig+0x3ec>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	d108      	bne.n	8009eba <HAL_RCC_OscConfig+0x3d6>
 8009ea8:	4b4c      	ldr	r3, [pc, #304]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009eb0:	4a4a      	ldr	r2, [pc, #296]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009eb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eb6:	6053      	str	r3, [r2, #4]
 8009eb8:	e02e      	b.n	8009f18 <HAL_RCC_OscConfig+0x434>
 8009eba:	4b48      	ldr	r3, [pc, #288]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	069b      	lsls	r3, r3, #26
 8009ec8:	4944      	ldr	r1, [pc, #272]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	604b      	str	r3, [r1, #4]
 8009ece:	e023      	b.n	8009f18 <HAL_RCC_OscConfig+0x434>
 8009ed0:	4b42      	ldr	r3, [pc, #264]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	061b      	lsls	r3, r3, #24
 8009ede:	493f      	ldr	r1, [pc, #252]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	60cb      	str	r3, [r1, #12]
 8009ee4:	e018      	b.n	8009f18 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ee6:	4b3d      	ldr	r3, [pc, #244]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a3c      	ldr	r2, [pc, #240]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef2:	f7fe fd25 	bl	8008940 <HAL_GetTick>
 8009ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ef8:	e008      	b.n	8009f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009efa:	f7fe fd21 	bl	8008940 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d901      	bls.n	8009f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e212      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009f0c:	4b33      	ldr	r3, [pc, #204]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1f0      	bne.n	8009efa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0308 	and.w	r3, r3, #8
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d036      	beq.n	8009f92 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d019      	beq.n	8009f60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f2c:	4b2b      	ldr	r3, [pc, #172]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f30:	4a2a      	ldr	r2, [pc, #168]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f38:	f7fe fd02 	bl	8008940 <HAL_GetTick>
 8009f3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f3e:	e008      	b.n	8009f52 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f40:	f7fe fcfe 	bl	8008940 <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d901      	bls.n	8009f52 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e1ef      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f52:	4b22      	ldr	r3, [pc, #136]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0f0      	beq.n	8009f40 <HAL_RCC_OscConfig+0x45c>
 8009f5e:	e018      	b.n	8009f92 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f60:	4b1e      	ldr	r3, [pc, #120]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f64:	4a1d      	ldr	r2, [pc, #116]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009f66:	f023 0301 	bic.w	r3, r3, #1
 8009f6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f6c:	f7fe fce8 	bl	8008940 <HAL_GetTick>
 8009f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f72:	e008      	b.n	8009f86 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f74:	f7fe fce4 	bl	8008940 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e1d5      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f86:	4b15      	ldr	r3, [pc, #84]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1f0      	bne.n	8009f74 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0320 	and.w	r3, r3, #32
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d039      	beq.n	800a012 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01c      	beq.n	8009fe0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a0c      	ldr	r2, [pc, #48]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009fb2:	f7fe fcc5 	bl	8008940 <HAL_GetTick>
 8009fb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009fb8:	e008      	b.n	8009fcc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009fba:	f7fe fcc1 	bl	8008940 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d901      	bls.n	8009fcc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e1b2      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009fcc:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <HAL_RCC_OscConfig+0x4f8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0f0      	beq.n	8009fba <HAL_RCC_OscConfig+0x4d6>
 8009fd8:	e01b      	b.n	800a012 <HAL_RCC_OscConfig+0x52e>
 8009fda:	bf00      	nop
 8009fdc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009fe0:	4b9b      	ldr	r3, [pc, #620]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a9a      	ldr	r2, [pc, #616]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 8009fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009fec:	f7fe fca8 	bl	8008940 <HAL_GetTick>
 8009ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ff2:	e008      	b.n	800a006 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009ff4:	f7fe fca4 	bl	8008940 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d901      	bls.n	800a006 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e195      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a006:	4b92      	ldr	r3, [pc, #584]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1f0      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0304 	and.w	r3, r3, #4
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 8081 	beq.w	800a122 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a020:	4b8c      	ldr	r3, [pc, #560]	; (800a254 <HAL_RCC_OscConfig+0x770>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a8b      	ldr	r2, [pc, #556]	; (800a254 <HAL_RCC_OscConfig+0x770>)
 800a026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a02a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a02c:	f7fe fc88 	bl	8008940 <HAL_GetTick>
 800a030:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a032:	e008      	b.n	800a046 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a034:	f7fe fc84 	bl	8008940 <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b64      	cmp	r3, #100	; 0x64
 800a040:	d901      	bls.n	800a046 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e175      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a046:	4b83      	ldr	r3, [pc, #524]	; (800a254 <HAL_RCC_OscConfig+0x770>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0f0      	beq.n	800a034 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d106      	bne.n	800a068 <HAL_RCC_OscConfig+0x584>
 800a05a:	4b7d      	ldr	r3, [pc, #500]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a05e:	4a7c      	ldr	r2, [pc, #496]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	6713      	str	r3, [r2, #112]	; 0x70
 800a066:	e02d      	b.n	800a0c4 <HAL_RCC_OscConfig+0x5e0>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10c      	bne.n	800a08a <HAL_RCC_OscConfig+0x5a6>
 800a070:	4b77      	ldr	r3, [pc, #476]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a074:	4a76      	ldr	r2, [pc, #472]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a076:	f023 0301 	bic.w	r3, r3, #1
 800a07a:	6713      	str	r3, [r2, #112]	; 0x70
 800a07c:	4b74      	ldr	r3, [pc, #464]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a080:	4a73      	ldr	r2, [pc, #460]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a082:	f023 0304 	bic.w	r3, r3, #4
 800a086:	6713      	str	r3, [r2, #112]	; 0x70
 800a088:	e01c      	b.n	800a0c4 <HAL_RCC_OscConfig+0x5e0>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	2b05      	cmp	r3, #5
 800a090:	d10c      	bne.n	800a0ac <HAL_RCC_OscConfig+0x5c8>
 800a092:	4b6f      	ldr	r3, [pc, #444]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a096:	4a6e      	ldr	r2, [pc, #440]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a098:	f043 0304 	orr.w	r3, r3, #4
 800a09c:	6713      	str	r3, [r2, #112]	; 0x70
 800a09e:	4b6c      	ldr	r3, [pc, #432]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a2:	4a6b      	ldr	r2, [pc, #428]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0aa:	e00b      	b.n	800a0c4 <HAL_RCC_OscConfig+0x5e0>
 800a0ac:	4b68      	ldr	r3, [pc, #416]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b0:	4a67      	ldr	r2, [pc, #412]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a0b2:	f023 0301 	bic.w	r3, r3, #1
 800a0b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a0b8:	4b65      	ldr	r3, [pc, #404]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0bc:	4a64      	ldr	r2, [pc, #400]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a0be:	f023 0304 	bic.w	r3, r3, #4
 800a0c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d015      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0cc:	f7fe fc38 	bl	8008940 <HAL_GetTick>
 800a0d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0d2:	e00a      	b.n	800a0ea <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0d4:	f7fe fc34 	bl	8008940 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e123      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0ea:	4b59      	ldr	r3, [pc, #356]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0ee      	beq.n	800a0d4 <HAL_RCC_OscConfig+0x5f0>
 800a0f6:	e014      	b.n	800a122 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0f8:	f7fe fc22 	bl	8008940 <HAL_GetTick>
 800a0fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0fe:	e00a      	b.n	800a116 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a100:	f7fe fc1e 	bl	8008940 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a10e:	4293      	cmp	r3, r2
 800a110:	d901      	bls.n	800a116 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e10d      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a116:	4b4e      	ldr	r3, [pc, #312]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1ee      	bne.n	800a100 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 8102 	beq.w	800a330 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a12c:	4b48      	ldr	r3, [pc, #288]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a134:	2b18      	cmp	r3, #24
 800a136:	f000 80bd 	beq.w	800a2b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	2b02      	cmp	r3, #2
 800a140:	f040 809e 	bne.w	800a280 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a144:	4b42      	ldr	r3, [pc, #264]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a41      	ldr	r2, [pc, #260]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a14a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a14e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a150:	f7fe fbf6 	bl	8008940 <HAL_GetTick>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a156:	e008      	b.n	800a16a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a158:	f7fe fbf2 	bl	8008940 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d901      	bls.n	800a16a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e0e3      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a16a:	4b39      	ldr	r3, [pc, #228]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1f0      	bne.n	800a158 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a176:	4b36      	ldr	r3, [pc, #216]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a17a:	4b37      	ldr	r3, [pc, #220]	; (800a258 <HAL_RCC_OscConfig+0x774>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a186:	0112      	lsls	r2, r2, #4
 800a188:	430a      	orrs	r2, r1
 800a18a:	4931      	ldr	r1, [pc, #196]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	628b      	str	r3, [r1, #40]	; 0x28
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a194:	3b01      	subs	r3, #1
 800a196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	025b      	lsls	r3, r3, #9
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	041b      	lsls	r3, r3, #16
 800a1ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	061b      	lsls	r3, r3, #24
 800a1bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1c0:	4923      	ldr	r1, [pc, #140]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a1c6:	4b22      	ldr	r3, [pc, #136]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	4a21      	ldr	r2, [pc, #132]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a1cc:	f023 0301 	bic.w	r3, r3, #1
 800a1d0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1d2:	4b1f      	ldr	r3, [pc, #124]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a1d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1d6:	4b21      	ldr	r3, [pc, #132]	; (800a25c <HAL_RCC_OscConfig+0x778>)
 800a1d8:	4013      	ands	r3, r2
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1de:	00d2      	lsls	r2, r2, #3
 800a1e0:	491b      	ldr	r1, [pc, #108]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a1e6:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ea:	f023 020c 	bic.w	r2, r3, #12
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	4917      	ldr	r1, [pc, #92]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a1f8:	4b15      	ldr	r3, [pc, #84]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	f023 0202 	bic.w	r2, r3, #2
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a204:	4912      	ldr	r1, [pc, #72]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a206:	4313      	orrs	r3, r2
 800a208:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	4a10      	ldr	r2, [pc, #64]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a214:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a216:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	4a0d      	ldr	r2, [pc, #52]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a21c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a222:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a226:	4a0a      	ldr	r2, [pc, #40]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a22c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a22e:	4b08      	ldr	r3, [pc, #32]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	4a07      	ldr	r2, [pc, #28]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a234:	f043 0301 	orr.w	r3, r3, #1
 800a238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a23a:	4b05      	ldr	r3, [pc, #20]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a04      	ldr	r2, [pc, #16]	; (800a250 <HAL_RCC_OscConfig+0x76c>)
 800a240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a246:	f7fe fb7b 	bl	8008940 <HAL_GetTick>
 800a24a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a24c:	e011      	b.n	800a272 <HAL_RCC_OscConfig+0x78e>
 800a24e:	bf00      	nop
 800a250:	58024400 	.word	0x58024400
 800a254:	58024800 	.word	0x58024800
 800a258:	fffffc0c 	.word	0xfffffc0c
 800a25c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a260:	f7fe fb6e 	bl	8008940 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d901      	bls.n	800a272 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e05f      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a272:	4b32      	ldr	r3, [pc, #200]	; (800a33c <HAL_RCC_OscConfig+0x858>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f0      	beq.n	800a260 <HAL_RCC_OscConfig+0x77c>
 800a27e:	e057      	b.n	800a330 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a280:	4b2e      	ldr	r3, [pc, #184]	; (800a33c <HAL_RCC_OscConfig+0x858>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a2d      	ldr	r2, [pc, #180]	; (800a33c <HAL_RCC_OscConfig+0x858>)
 800a286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a28a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28c:	f7fe fb58 	bl	8008940 <HAL_GetTick>
 800a290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a294:	f7fe fb54 	bl	8008940 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e045      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2a6:	4b25      	ldr	r3, [pc, #148]	; (800a33c <HAL_RCC_OscConfig+0x858>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f0      	bne.n	800a294 <HAL_RCC_OscConfig+0x7b0>
 800a2b2:	e03d      	b.n	800a330 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a2b4:	4b21      	ldr	r3, [pc, #132]	; (800a33c <HAL_RCC_OscConfig+0x858>)
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a2ba:	4b20      	ldr	r3, [pc, #128]	; (800a33c <HAL_RCC_OscConfig+0x858>)
 800a2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2be:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d031      	beq.n	800a32c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f003 0203 	and.w	r2, r3, #3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d12a      	bne.n	800a32c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	091b      	lsrs	r3, r3, #4
 800a2da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d122      	bne.n	800a32c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d11a      	bne.n	800a32c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	0a5b      	lsrs	r3, r3, #9
 800a2fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a302:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a304:	429a      	cmp	r2, r3
 800a306:	d111      	bne.n	800a32c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	0c1b      	lsrs	r3, r3, #16
 800a30c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a316:	429a      	cmp	r2, r3
 800a318:	d108      	bne.n	800a32c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	0e1b      	lsrs	r3, r3, #24
 800a31e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a326:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a328:	429a      	cmp	r2, r3
 800a32a:	d001      	beq.n	800a330 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e000      	b.n	800a332 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3730      	adds	r7, #48	; 0x30
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	58024400 	.word	0x58024400

0800a340 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e19c      	b.n	800a68e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a354:	4b8a      	ldr	r3, [pc, #552]	; (800a580 <HAL_RCC_ClockConfig+0x240>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 030f 	and.w	r3, r3, #15
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d910      	bls.n	800a384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a362:	4b87      	ldr	r3, [pc, #540]	; (800a580 <HAL_RCC_ClockConfig+0x240>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f023 020f 	bic.w	r2, r3, #15
 800a36a:	4985      	ldr	r1, [pc, #532]	; (800a580 <HAL_RCC_ClockConfig+0x240>)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	4313      	orrs	r3, r2
 800a370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a372:	4b83      	ldr	r3, [pc, #524]	; (800a580 <HAL_RCC_ClockConfig+0x240>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d001      	beq.n	800a384 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e184      	b.n	800a68e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d010      	beq.n	800a3b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	691a      	ldr	r2, [r3, #16]
 800a394:	4b7b      	ldr	r3, [pc, #492]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d908      	bls.n	800a3b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3a0:	4b78      	ldr	r3, [pc, #480]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	4975      	ldr	r1, [pc, #468]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0308 	and.w	r3, r3, #8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d010      	beq.n	800a3e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	695a      	ldr	r2, [r3, #20]
 800a3c2:	4b70      	ldr	r3, [pc, #448]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d908      	bls.n	800a3e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3ce:	4b6d      	ldr	r3, [pc, #436]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	496a      	ldr	r1, [pc, #424]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0310 	and.w	r3, r3, #16
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d010      	beq.n	800a40e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	699a      	ldr	r2, [r3, #24]
 800a3f0:	4b64      	ldr	r3, [pc, #400]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d908      	bls.n	800a40e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3fc:	4b61      	ldr	r3, [pc, #388]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	495e      	ldr	r1, [pc, #376]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b00      	cmp	r3, #0
 800a418:	d010      	beq.n	800a43c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	69da      	ldr	r2, [r3, #28]
 800a41e:	4b59      	ldr	r3, [pc, #356]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a426:	429a      	cmp	r2, r3
 800a428:	d908      	bls.n	800a43c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a42a:	4b56      	ldr	r3, [pc, #344]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	4953      	ldr	r1, [pc, #332]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b00      	cmp	r3, #0
 800a446:	d010      	beq.n	800a46a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	4b4d      	ldr	r3, [pc, #308]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	f003 030f 	and.w	r3, r3, #15
 800a454:	429a      	cmp	r2, r3
 800a456:	d908      	bls.n	800a46a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a458:	4b4a      	ldr	r3, [pc, #296]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	f023 020f 	bic.w	r2, r3, #15
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	4947      	ldr	r1, [pc, #284]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a466:	4313      	orrs	r3, r2
 800a468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d055      	beq.n	800a522 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a476:	4b43      	ldr	r3, [pc, #268]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	4940      	ldr	r1, [pc, #256]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a484:	4313      	orrs	r3, r2
 800a486:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d107      	bne.n	800a4a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a490:	4b3c      	ldr	r3, [pc, #240]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d121      	bne.n	800a4e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e0f6      	b.n	800a68e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d107      	bne.n	800a4b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a4a8:	4b36      	ldr	r3, [pc, #216]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d115      	bne.n	800a4e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e0ea      	b.n	800a68e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d107      	bne.n	800a4d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a4c0:	4b30      	ldr	r3, [pc, #192]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d109      	bne.n	800a4e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e0de      	b.n	800a68e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4d0:	4b2c      	ldr	r3, [pc, #176]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d101      	bne.n	800a4e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e0d6      	b.n	800a68e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4e0:	4b28      	ldr	r3, [pc, #160]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f023 0207 	bic.w	r2, r3, #7
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	4925      	ldr	r1, [pc, #148]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f2:	f7fe fa25 	bl	8008940 <HAL_GetTick>
 800a4f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4f8:	e00a      	b.n	800a510 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4fa:	f7fe fa21 	bl	8008940 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	f241 3288 	movw	r2, #5000	; 0x1388
 800a508:	4293      	cmp	r3, r2
 800a50a:	d901      	bls.n	800a510 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e0be      	b.n	800a68e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a510:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	429a      	cmp	r2, r3
 800a520:	d1eb      	bne.n	800a4fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d010      	beq.n	800a550 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	4b14      	ldr	r3, [pc, #80]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d208      	bcs.n	800a550 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a53e:	4b11      	ldr	r3, [pc, #68]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	f023 020f 	bic.w	r2, r3, #15
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	490e      	ldr	r1, [pc, #56]	; (800a584 <HAL_RCC_ClockConfig+0x244>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a550:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <HAL_RCC_ClockConfig+0x240>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d214      	bcs.n	800a588 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a55e:	4b08      	ldr	r3, [pc, #32]	; (800a580 <HAL_RCC_ClockConfig+0x240>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f023 020f 	bic.w	r2, r3, #15
 800a566:	4906      	ldr	r1, [pc, #24]	; (800a580 <HAL_RCC_ClockConfig+0x240>)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a56e:	4b04      	ldr	r3, [pc, #16]	; (800a580 <HAL_RCC_ClockConfig+0x240>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 030f 	and.w	r3, r3, #15
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d005      	beq.n	800a588 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e086      	b.n	800a68e <HAL_RCC_ClockConfig+0x34e>
 800a580:	52002000 	.word	0x52002000
 800a584:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	2b00      	cmp	r3, #0
 800a592:	d010      	beq.n	800a5b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	691a      	ldr	r2, [r3, #16]
 800a598:	4b3f      	ldr	r3, [pc, #252]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d208      	bcs.n	800a5b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5a4:	4b3c      	ldr	r3, [pc, #240]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	4939      	ldr	r1, [pc, #228]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0308 	and.w	r3, r3, #8
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d010      	beq.n	800a5e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	695a      	ldr	r2, [r3, #20]
 800a5c6:	4b34      	ldr	r3, [pc, #208]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d208      	bcs.n	800a5e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5d2:	4b31      	ldr	r3, [pc, #196]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	695b      	ldr	r3, [r3, #20]
 800a5de:	492e      	ldr	r1, [pc, #184]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0310 	and.w	r3, r3, #16
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d010      	beq.n	800a612 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	699a      	ldr	r2, [r3, #24]
 800a5f4:	4b28      	ldr	r3, [pc, #160]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d208      	bcs.n	800a612 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a600:	4b25      	ldr	r3, [pc, #148]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	4922      	ldr	r1, [pc, #136]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d010      	beq.n	800a640 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	69da      	ldr	r2, [r3, #28]
 800a622:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d208      	bcs.n	800a640 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a62e:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	4917      	ldr	r1, [pc, #92]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a63c:	4313      	orrs	r3, r2
 800a63e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a640:	f000 f834 	bl	800a6ac <HAL_RCC_GetSysClockFreq>
 800a644:	4602      	mov	r2, r0
 800a646:	4b14      	ldr	r3, [pc, #80]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	0a1b      	lsrs	r3, r3, #8
 800a64c:	f003 030f 	and.w	r3, r3, #15
 800a650:	4912      	ldr	r1, [pc, #72]	; (800a69c <HAL_RCC_ClockConfig+0x35c>)
 800a652:	5ccb      	ldrb	r3, [r1, r3]
 800a654:	f003 031f 	and.w	r3, r3, #31
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
 800a65c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a65e:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <HAL_RCC_ClockConfig+0x358>)
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	f003 030f 	and.w	r3, r3, #15
 800a666:	4a0d      	ldr	r2, [pc, #52]	; (800a69c <HAL_RCC_ClockConfig+0x35c>)
 800a668:	5cd3      	ldrb	r3, [r2, r3]
 800a66a:	f003 031f 	and.w	r3, r3, #31
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	fa22 f303 	lsr.w	r3, r2, r3
 800a674:	4a0a      	ldr	r2, [pc, #40]	; (800a6a0 <HAL_RCC_ClockConfig+0x360>)
 800a676:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a678:	4a0a      	ldr	r2, [pc, #40]	; (800a6a4 <HAL_RCC_ClockConfig+0x364>)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a67e:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <HAL_RCC_ClockConfig+0x368>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe f912 	bl	80088ac <HAL_InitTick>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	58024400 	.word	0x58024400
 800a69c:	08011710 	.word	0x08011710
 800a6a0:	24000028 	.word	0x24000028
 800a6a4:	24000024 	.word	0x24000024
 800a6a8:	2400002c 	.word	0x2400002c

0800a6ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b089      	sub	sp, #36	; 0x24
 800a6b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6b2:	4bb3      	ldr	r3, [pc, #716]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6ba:	2b18      	cmp	r3, #24
 800a6bc:	f200 8155 	bhi.w	800a96a <HAL_RCC_GetSysClockFreq+0x2be>
 800a6c0:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c6:	bf00      	nop
 800a6c8:	0800a72d 	.word	0x0800a72d
 800a6cc:	0800a96b 	.word	0x0800a96b
 800a6d0:	0800a96b 	.word	0x0800a96b
 800a6d4:	0800a96b 	.word	0x0800a96b
 800a6d8:	0800a96b 	.word	0x0800a96b
 800a6dc:	0800a96b 	.word	0x0800a96b
 800a6e0:	0800a96b 	.word	0x0800a96b
 800a6e4:	0800a96b 	.word	0x0800a96b
 800a6e8:	0800a753 	.word	0x0800a753
 800a6ec:	0800a96b 	.word	0x0800a96b
 800a6f0:	0800a96b 	.word	0x0800a96b
 800a6f4:	0800a96b 	.word	0x0800a96b
 800a6f8:	0800a96b 	.word	0x0800a96b
 800a6fc:	0800a96b 	.word	0x0800a96b
 800a700:	0800a96b 	.word	0x0800a96b
 800a704:	0800a96b 	.word	0x0800a96b
 800a708:	0800a759 	.word	0x0800a759
 800a70c:	0800a96b 	.word	0x0800a96b
 800a710:	0800a96b 	.word	0x0800a96b
 800a714:	0800a96b 	.word	0x0800a96b
 800a718:	0800a96b 	.word	0x0800a96b
 800a71c:	0800a96b 	.word	0x0800a96b
 800a720:	0800a96b 	.word	0x0800a96b
 800a724:	0800a96b 	.word	0x0800a96b
 800a728:	0800a75f 	.word	0x0800a75f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a72c:	4b94      	ldr	r3, [pc, #592]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0320 	and.w	r3, r3, #32
 800a734:	2b00      	cmp	r3, #0
 800a736:	d009      	beq.n	800a74c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a738:	4b91      	ldr	r3, [pc, #580]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	08db      	lsrs	r3, r3, #3
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	4a90      	ldr	r2, [pc, #576]	; (800a984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a744:	fa22 f303 	lsr.w	r3, r2, r3
 800a748:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a74a:	e111      	b.n	800a970 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a74c:	4b8d      	ldr	r3, [pc, #564]	; (800a984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a74e:	61bb      	str	r3, [r7, #24]
    break;
 800a750:	e10e      	b.n	800a970 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a752:	4b8d      	ldr	r3, [pc, #564]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a754:	61bb      	str	r3, [r7, #24]
    break;
 800a756:	e10b      	b.n	800a970 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a758:	4b8c      	ldr	r3, [pc, #560]	; (800a98c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a75a:	61bb      	str	r3, [r7, #24]
    break;
 800a75c:	e108      	b.n	800a970 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a75e:	4b88      	ldr	r3, [pc, #544]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a762:	f003 0303 	and.w	r3, r3, #3
 800a766:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a768:	4b85      	ldr	r3, [pc, #532]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76c:	091b      	lsrs	r3, r3, #4
 800a76e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a772:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a774:	4b82      	ldr	r3, [pc, #520]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a77e:	4b80      	ldr	r3, [pc, #512]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a782:	08db      	lsrs	r3, r3, #3
 800a784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	fb02 f303 	mul.w	r3, r2, r3
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a796:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 80e1 	beq.w	800a964 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	f000 8083 	beq.w	800a8b0 <HAL_RCC_GetSysClockFreq+0x204>
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	f200 80a1 	bhi.w	800a8f4 <HAL_RCC_GetSysClockFreq+0x248>
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d003      	beq.n	800a7c0 <HAL_RCC_GetSysClockFreq+0x114>
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d056      	beq.n	800a86c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a7be:	e099      	b.n	800a8f4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7c0:	4b6f      	ldr	r3, [pc, #444]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d02d      	beq.n	800a828 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7cc:	4b6c      	ldr	r3, [pc, #432]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	08db      	lsrs	r3, r3, #3
 800a7d2:	f003 0303 	and.w	r3, r3, #3
 800a7d6:	4a6b      	ldr	r2, [pc, #428]	; (800a984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7dc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	ee07 3a90 	vmov	s15, r3
 800a7e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7f6:	4b62      	ldr	r3, [pc, #392]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fe:	ee07 3a90 	vmov	s15, r3
 800a802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a806:	ed97 6a02 	vldr	s12, [r7, #8]
 800a80a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a990 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a822:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a826:	e087      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a832:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a994 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a83a:	4b51      	ldr	r3, [pc, #324]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a842:	ee07 3a90 	vmov	s15, r3
 800a846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a84a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a84e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a990 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a85a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a86a:	e065      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a876:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a998 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a87e:	4b40      	ldr	r3, [pc, #256]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a88e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a892:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a990 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8ae:	e043      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a99c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8c2:	4b2f      	ldr	r3, [pc, #188]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a990 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8f2:	e021      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a998 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a906:	4b1e      	ldr	r3, [pc, #120]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a916:	ed97 6a02 	vldr	s12, [r7, #8]
 800a91a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a990 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a91e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a92a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a936:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a938:	4b11      	ldr	r3, [pc, #68]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93c:	0a5b      	lsrs	r3, r3, #9
 800a93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a942:	3301      	adds	r3, #1
 800a944:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	ee07 3a90 	vmov	s15, r3
 800a94c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a950:	edd7 6a07 	vldr	s13, [r7, #28]
 800a954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a95c:	ee17 3a90 	vmov	r3, s15
 800a960:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a962:	e005      	b.n	800a970 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a964:	2300      	movs	r3, #0
 800a966:	61bb      	str	r3, [r7, #24]
    break;
 800a968:	e002      	b.n	800a970 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a96a:	4b07      	ldr	r3, [pc, #28]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a96c:	61bb      	str	r3, [r7, #24]
    break;
 800a96e:	bf00      	nop
  }

  return sysclockfreq;
 800a970:	69bb      	ldr	r3, [r7, #24]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3724      	adds	r7, #36	; 0x24
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	58024400 	.word	0x58024400
 800a984:	03d09000 	.word	0x03d09000
 800a988:	003d0900 	.word	0x003d0900
 800a98c:	017d7840 	.word	0x017d7840
 800a990:	46000000 	.word	0x46000000
 800a994:	4c742400 	.word	0x4c742400
 800a998:	4a742400 	.word	0x4a742400
 800a99c:	4bbebc20 	.word	0x4bbebc20

0800a9a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a9a6:	f7ff fe81 	bl	800a6ac <HAL_RCC_GetSysClockFreq>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	0a1b      	lsrs	r3, r3, #8
 800a9b2:	f003 030f 	and.w	r3, r3, #15
 800a9b6:	490f      	ldr	r1, [pc, #60]	; (800a9f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a9b8:	5ccb      	ldrb	r3, [r1, r3]
 800a9ba:	f003 031f 	and.w	r3, r3, #31
 800a9be:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9c4:	4b0a      	ldr	r3, [pc, #40]	; (800a9f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	f003 030f 	and.w	r3, r3, #15
 800a9cc:	4a09      	ldr	r2, [pc, #36]	; (800a9f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a9ce:	5cd3      	ldrb	r3, [r2, r3]
 800a9d0:	f003 031f 	and.w	r3, r3, #31
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9da:	4a07      	ldr	r2, [pc, #28]	; (800a9f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9de:	4a07      	ldr	r2, [pc, #28]	; (800a9fc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a9e4:	4b04      	ldr	r3, [pc, #16]	; (800a9f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	58024400 	.word	0x58024400
 800a9f4:	08011710 	.word	0x08011710
 800a9f8:	24000028 	.word	0x24000028
 800a9fc:	24000024 	.word	0x24000024

0800aa00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aa04:	f7ff ffcc 	bl	800a9a0 <HAL_RCC_GetHCLKFreq>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	4b06      	ldr	r3, [pc, #24]	; (800aa24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	091b      	lsrs	r3, r3, #4
 800aa10:	f003 0307 	and.w	r3, r3, #7
 800aa14:	4904      	ldr	r1, [pc, #16]	; (800aa28 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aa16:	5ccb      	ldrb	r3, [r1, r3]
 800aa18:	f003 031f 	and.w	r3, r3, #31
 800aa1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	58024400 	.word	0x58024400
 800aa28:	08011710 	.word	0x08011710

0800aa2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aa30:	f7ff ffb6 	bl	800a9a0 <HAL_RCC_GetHCLKFreq>
 800aa34:	4602      	mov	r2, r0
 800aa36:	4b06      	ldr	r3, [pc, #24]	; (800aa50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	0a1b      	lsrs	r3, r3, #8
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	4904      	ldr	r1, [pc, #16]	; (800aa54 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aa42:	5ccb      	ldrb	r3, [r1, r3]
 800aa44:	f003 031f 	and.w	r3, r3, #31
 800aa48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	58024400 	.word	0x58024400
 800aa54:	08011710 	.word	0x08011710

0800aa58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa60:	2300      	movs	r3, #0
 800aa62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa64:	2300      	movs	r3, #0
 800aa66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d03f      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa7c:	d02a      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800aa7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa82:	d824      	bhi.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aa84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa88:	d018      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aa8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa8e:	d81e      	bhi.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800aa94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa98:	d007      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800aa9a:	e018      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa9c:	4ba3      	ldr	r3, [pc, #652]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	4aa2      	ldr	r2, [pc, #648]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aaa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aaa8:	e015      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3304      	adds	r3, #4
 800aaae:	2102      	movs	r1, #2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 f9d5 	bl	800be60 <RCCEx_PLL2_Config>
 800aab6:	4603      	mov	r3, r0
 800aab8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aaba:	e00c      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3324      	adds	r3, #36	; 0x24
 800aac0:	2102      	movs	r1, #2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f001 fa7e 	bl	800bfc4 <RCCEx_PLL3_Config>
 800aac8:	4603      	mov	r3, r0
 800aaca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aacc:	e003      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	75fb      	strb	r3, [r7, #23]
      break;
 800aad2:	e000      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d109      	bne.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aadc:	4b93      	ldr	r3, [pc, #588]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aae8:	4990      	ldr	r1, [pc, #576]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	650b      	str	r3, [r1, #80]	; 0x50
 800aaee:	e001      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d03d      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d826      	bhi.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ab08:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ab0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0e:	bf00      	nop
 800ab10:	0800ab25 	.word	0x0800ab25
 800ab14:	0800ab33 	.word	0x0800ab33
 800ab18:	0800ab45 	.word	0x0800ab45
 800ab1c:	0800ab5d 	.word	0x0800ab5d
 800ab20:	0800ab5d 	.word	0x0800ab5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab24:	4b81      	ldr	r3, [pc, #516]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	4a80      	ldr	r2, [pc, #512]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab30:	e015      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3304      	adds	r3, #4
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 f991 	bl	800be60 <RCCEx_PLL2_Config>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab42:	e00c      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3324      	adds	r3, #36	; 0x24
 800ab48:	2100      	movs	r1, #0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 fa3a 	bl	800bfc4 <RCCEx_PLL3_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab54:	e003      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5a:	e000      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ab5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d109      	bne.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab64:	4b71      	ldr	r3, [pc, #452]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab68:	f023 0207 	bic.w	r2, r3, #7
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab70:	496e      	ldr	r1, [pc, #440]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab72:	4313      	orrs	r3, r2
 800ab74:	650b      	str	r3, [r1, #80]	; 0x50
 800ab76:	e001      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d042      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab90:	d02b      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ab92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab96:	d825      	bhi.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ab98:	2bc0      	cmp	r3, #192	; 0xc0
 800ab9a:	d028      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ab9c:	2bc0      	cmp	r3, #192	; 0xc0
 800ab9e:	d821      	bhi.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aba0:	2b80      	cmp	r3, #128	; 0x80
 800aba2:	d016      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800aba4:	2b80      	cmp	r3, #128	; 0x80
 800aba6:	d81d      	bhi.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800abac:	2b40      	cmp	r3, #64	; 0x40
 800abae:	d007      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800abb0:	e018      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb2:	4b5e      	ldr	r3, [pc, #376]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800abb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb6:	4a5d      	ldr	r2, [pc, #372]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800abb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800abbe:	e017      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3304      	adds	r3, #4
 800abc4:	2100      	movs	r1, #0
 800abc6:	4618      	mov	r0, r3
 800abc8:	f001 f94a 	bl	800be60 <RCCEx_PLL2_Config>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800abd0:	e00e      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3324      	adds	r3, #36	; 0x24
 800abd6:	2100      	movs	r1, #0
 800abd8:	4618      	mov	r0, r3
 800abda:	f001 f9f3 	bl	800bfc4 <RCCEx_PLL3_Config>
 800abde:	4603      	mov	r3, r0
 800abe0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800abe2:	e005      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	75fb      	strb	r3, [r7, #23]
      break;
 800abe8:	e002      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800abea:	bf00      	nop
 800abec:	e000      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800abee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d109      	bne.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800abf6:	4b4d      	ldr	r3, [pc, #308]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800abf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abfa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac02:	494a      	ldr	r1, [pc, #296]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	650b      	str	r3, [r1, #80]	; 0x50
 800ac08:	e001      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac0a:	7dfb      	ldrb	r3, [r7, #23]
 800ac0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d049      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac24:	d030      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ac26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac2a:	d82a      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ac2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac30:	d02c      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ac32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac36:	d824      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ac38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac3c:	d018      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ac3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac42:	d81e      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ac48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac4c:	d007      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ac4e:	e018      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac50:	4b36      	ldr	r3, [pc, #216]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	4a35      	ldr	r2, [pc, #212]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac5c:	e017      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	3304      	adds	r3, #4
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 f8fb 	bl	800be60 <RCCEx_PLL2_Config>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ac6e:	e00e      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3324      	adds	r3, #36	; 0x24
 800ac74:	2100      	movs	r1, #0
 800ac76:	4618      	mov	r0, r3
 800ac78:	f001 f9a4 	bl	800bfc4 <RCCEx_PLL3_Config>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac80:	e005      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	75fb      	strb	r3, [r7, #23]
      break;
 800ac86:	e002      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ac88:	bf00      	nop
 800ac8a:	e000      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ac8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10a      	bne.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ac94:	4b25      	ldr	r3, [pc, #148]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aca2:	4922      	ldr	r1, [pc, #136]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	658b      	str	r3, [r1, #88]	; 0x58
 800aca8:	e001      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acaa:	7dfb      	ldrb	r3, [r7, #23]
 800acac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d04b      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800acc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acc4:	d030      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800acc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acca:	d82a      	bhi.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800accc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acd0:	d02e      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800acd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acd6:	d824      	bhi.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800acd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acdc:	d018      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800acde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ace2:	d81e      	bhi.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d003      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ace8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acec:	d007      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800acee:	e018      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acf0:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800acf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf4:	4a0d      	ldr	r2, [pc, #52]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800acf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800acfc:	e019      	b.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3304      	adds	r3, #4
 800ad02:	2100      	movs	r1, #0
 800ad04:	4618      	mov	r0, r3
 800ad06:	f001 f8ab 	bl	800be60 <RCCEx_PLL2_Config>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ad0e:	e010      	b.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3324      	adds	r3, #36	; 0x24
 800ad14:	2100      	movs	r1, #0
 800ad16:	4618      	mov	r0, r3
 800ad18:	f001 f954 	bl	800bfc4 <RCCEx_PLL3_Config>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad20:	e007      	b.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	75fb      	strb	r3, [r7, #23]
      break;
 800ad26:	e004      	b.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800ad28:	bf00      	nop
 800ad2a:	e002      	b.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ad2c:	58024400 	.word	0x58024400
      break;
 800ad30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ad38:	4b99      	ldr	r3, [pc, #612]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad46:	4996      	ldr	r1, [pc, #600]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	658b      	str	r3, [r1, #88]	; 0x58
 800ad4c:	e001      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
 800ad50:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d032      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad62:	2b30      	cmp	r3, #48	; 0x30
 800ad64:	d01c      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800ad66:	2b30      	cmp	r3, #48	; 0x30
 800ad68:	d817      	bhi.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ad6a:	2b20      	cmp	r3, #32
 800ad6c:	d00c      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800ad6e:	2b20      	cmp	r3, #32
 800ad70:	d813      	bhi.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d016      	beq.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ad76:	2b10      	cmp	r3, #16
 800ad78:	d10f      	bne.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad7a:	4b89      	ldr	r3, [pc, #548]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	4a88      	ldr	r2, [pc, #544]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ad86:	e00e      	b.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	2102      	movs	r1, #2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f001 f866 	bl	800be60 <RCCEx_PLL2_Config>
 800ad94:	4603      	mov	r3, r0
 800ad96:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ad98:	e005      	b.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad9e:	e002      	b.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ada0:	bf00      	nop
 800ada2:	e000      	b.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ada4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ada6:	7dfb      	ldrb	r3, [r7, #23]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d109      	bne.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800adac:	4b7c      	ldr	r3, [pc, #496]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800adae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adb8:	4979      	ldr	r1, [pc, #484]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 800adbe:	e001      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc0:	7dfb      	ldrb	r3, [r7, #23]
 800adc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d047      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800add4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800add8:	d030      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800adda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adde:	d82a      	bhi.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ade0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ade4:	d02c      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800ade6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adea:	d824      	bhi.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800adec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adf0:	d018      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800adf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adf6:	d81e      	bhi.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800adfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae00:	d007      	beq.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800ae02:	e018      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae04:	4b66      	ldr	r3, [pc, #408]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	4a65      	ldr	r2, [pc, #404]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ae0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ae10:	e017      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3304      	adds	r3, #4
 800ae16:	2100      	movs	r1, #0
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f001 f821 	bl	800be60 <RCCEx_PLL2_Config>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ae22:	e00e      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	3324      	adds	r3, #36	; 0x24
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f001 f8ca 	bl	800bfc4 <RCCEx_PLL3_Config>
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ae34:	e005      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	75fb      	strb	r3, [r7, #23]
      break;
 800ae3a:	e002      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ae3c:	bf00      	nop
 800ae3e:	e000      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ae40:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ae48:	4b55      	ldr	r3, [pc, #340]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ae4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae54:	4952      	ldr	r1, [pc, #328]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	650b      	str	r3, [r1, #80]	; 0x50
 800ae5a:	e001      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d049      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae74:	d02e      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ae76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae7a:	d828      	bhi.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ae7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae80:	d02a      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800ae82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae86:	d822      	bhi.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ae88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae8c:	d026      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800ae8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae92:	d81c      	bhi.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ae94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae98:	d010      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x464>
 800ae9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae9e:	d816      	bhi.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x476>
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01d      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800aea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aea8:	d111      	bne.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	3304      	adds	r3, #4
 800aeae:	2101      	movs	r1, #1
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 ffd5 	bl	800be60 <RCCEx_PLL2_Config>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aeba:	e012      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3324      	adds	r3, #36	; 0x24
 800aec0:	2101      	movs	r1, #1
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 f87e 	bl	800bfc4 <RCCEx_PLL3_Config>
 800aec8:	4603      	mov	r3, r0
 800aeca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aecc:	e009      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	75fb      	strb	r3, [r7, #23]
      break;
 800aed2:	e006      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aed4:	bf00      	nop
 800aed6:	e004      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aed8:	bf00      	nop
 800aeda:	e002      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aedc:	bf00      	nop
 800aede:	e000      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d109      	bne.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aee8:	4b2d      	ldr	r3, [pc, #180]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aeea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aef4:	492a      	ldr	r1, [pc, #168]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	650b      	str	r3, [r1, #80]	; 0x50
 800aefa:	e001      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
 800aefe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d04d      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af16:	d02e      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800af18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af1c:	d828      	bhi.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800af1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af22:	d02a      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800af24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af28:	d822      	bhi.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800af2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af2e:	d026      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800af30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af34:	d81c      	bhi.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800af36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af3a:	d010      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800af3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af40:	d816      	bhi.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d01d      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800af46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af4a:	d111      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3304      	adds	r3, #4
 800af50:	2101      	movs	r1, #1
 800af52:	4618      	mov	r0, r3
 800af54:	f000 ff84 	bl	800be60 <RCCEx_PLL2_Config>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800af5c:	e012      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	3324      	adds	r3, #36	; 0x24
 800af62:	2101      	movs	r1, #1
 800af64:	4618      	mov	r0, r3
 800af66:	f001 f82d 	bl	800bfc4 <RCCEx_PLL3_Config>
 800af6a:	4603      	mov	r3, r0
 800af6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800af6e:	e009      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	75fb      	strb	r3, [r7, #23]
      break;
 800af74:	e006      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800af76:	bf00      	nop
 800af78:	e004      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800af7a:	bf00      	nop
 800af7c:	e002      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800af7e:	bf00      	nop
 800af80:	e000      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800af82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af84:	7dfb      	ldrb	r3, [r7, #23]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10c      	bne.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800af8a:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af98:	4901      	ldr	r1, [pc, #4]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af9a:	4313      	orrs	r3, r2
 800af9c:	658b      	str	r3, [r1, #88]	; 0x58
 800af9e:	e003      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800afa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa4:	7dfb      	ldrb	r3, [r7, #23]
 800afa6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d02f      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afbc:	d00e      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800afbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afc2:	d814      	bhi.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x596>
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d015      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800afc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afcc:	d10f      	bne.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afce:	4baf      	ldr	r3, [pc, #700]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	4aae      	ldr	r2, [pc, #696]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800afda:	e00c      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3304      	adds	r3, #4
 800afe0:	2101      	movs	r1, #1
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 ff3c 	bl	800be60 <RCCEx_PLL2_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800afec:	e003      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	75fb      	strb	r3, [r7, #23]
      break;
 800aff2:	e000      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800aff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d109      	bne.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800affc:	4ba3      	ldr	r3, [pc, #652]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800affe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b000:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b008:	49a0      	ldr	r1, [pc, #640]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b00a:	4313      	orrs	r3, r2
 800b00c:	650b      	str	r3, [r1, #80]	; 0x50
 800b00e:	e001      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d032      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b024:	2b03      	cmp	r3, #3
 800b026:	d81b      	bhi.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b028:	a201      	add	r2, pc, #4	; (adr r2, 800b030 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02e:	bf00      	nop
 800b030:	0800b067 	.word	0x0800b067
 800b034:	0800b041 	.word	0x0800b041
 800b038:	0800b04f 	.word	0x0800b04f
 800b03c:	0800b067 	.word	0x0800b067
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b040:	4b92      	ldr	r3, [pc, #584]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	4a91      	ldr	r2, [pc, #580]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b04a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b04c:	e00c      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3304      	adds	r3, #4
 800b052:	2102      	movs	r1, #2
 800b054:	4618      	mov	r0, r3
 800b056:	f000 ff03 	bl	800be60 <RCCEx_PLL2_Config>
 800b05a:	4603      	mov	r3, r0
 800b05c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b05e:	e003      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	75fb      	strb	r3, [r7, #23]
      break;
 800b064:	e000      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b066:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b068:	7dfb      	ldrb	r3, [r7, #23]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d109      	bne.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b06e:	4b87      	ldr	r3, [pc, #540]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b072:	f023 0203 	bic.w	r2, r3, #3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07a:	4984      	ldr	r1, [pc, #528]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b07c:	4313      	orrs	r3, r2
 800b07e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b080:	e001      	b.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 8086 	beq.w	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b094:	4b7e      	ldr	r3, [pc, #504]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a7d      	ldr	r2, [pc, #500]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b09a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b09e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0a0:	f7fd fc4e 	bl	8008940 <HAL_GetTick>
 800b0a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0a6:	e009      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0a8:	f7fd fc4a 	bl	8008940 <HAL_GetTick>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	2b64      	cmp	r3, #100	; 0x64
 800b0b4:	d902      	bls.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	75fb      	strb	r3, [r7, #23]
        break;
 800b0ba:	e005      	b.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0bc:	4b74      	ldr	r3, [pc, #464]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0ef      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d166      	bne.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b0ce:	4b6f      	ldr	r3, [pc, #444]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0d8:	4053      	eors	r3, r2
 800b0da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d013      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b0e2:	4b6a      	ldr	r3, [pc, #424]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b0ec:	4b67      	ldr	r3, [pc, #412]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f0:	4a66      	ldr	r2, [pc, #408]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b0f8:	4b64      	ldr	r3, [pc, #400]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fc:	4a63      	ldr	r2, [pc, #396]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b0fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b102:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b104:	4a61      	ldr	r2, [pc, #388]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b114:	d115      	bne.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b116:	f7fd fc13 	bl	8008940 <HAL_GetTick>
 800b11a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b11c:	e00b      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b11e:	f7fd fc0f 	bl	8008940 <HAL_GetTick>
 800b122:	4602      	mov	r2, r0
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	f241 3288 	movw	r2, #5000	; 0x1388
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d902      	bls.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b130:	2303      	movs	r3, #3
 800b132:	75fb      	strb	r3, [r7, #23]
            break;
 800b134:	e005      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b136:	4b55      	ldr	r3, [pc, #340]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0ed      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b142:	7dfb      	ldrb	r3, [r7, #23]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d126      	bne.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b14e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b156:	d10d      	bne.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b158:	4b4c      	ldr	r3, [pc, #304]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b166:	0919      	lsrs	r1, r3, #4
 800b168:	4b4a      	ldr	r3, [pc, #296]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b16a:	400b      	ands	r3, r1
 800b16c:	4947      	ldr	r1, [pc, #284]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b16e:	4313      	orrs	r3, r2
 800b170:	610b      	str	r3, [r1, #16]
 800b172:	e005      	b.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b174:	4b45      	ldr	r3, [pc, #276]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	4a44      	ldr	r2, [pc, #272]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b17a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b17e:	6113      	str	r3, [r2, #16]
 800b180:	4b42      	ldr	r3, [pc, #264]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b18a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b18e:	493f      	ldr	r1, [pc, #252]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b190:	4313      	orrs	r3, r2
 800b192:	670b      	str	r3, [r1, #112]	; 0x70
 800b194:	e004      	b.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	75bb      	strb	r3, [r7, #22]
 800b19a:	e001      	b.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 8085 	beq.w	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1b2:	2b28      	cmp	r3, #40	; 0x28
 800b1b4:	d866      	bhi.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b299 	.word	0x0800b299
 800b1c0:	0800b285 	.word	0x0800b285
 800b1c4:	0800b285 	.word	0x0800b285
 800b1c8:	0800b285 	.word	0x0800b285
 800b1cc:	0800b285 	.word	0x0800b285
 800b1d0:	0800b285 	.word	0x0800b285
 800b1d4:	0800b285 	.word	0x0800b285
 800b1d8:	0800b285 	.word	0x0800b285
 800b1dc:	0800b261 	.word	0x0800b261
 800b1e0:	0800b285 	.word	0x0800b285
 800b1e4:	0800b285 	.word	0x0800b285
 800b1e8:	0800b285 	.word	0x0800b285
 800b1ec:	0800b285 	.word	0x0800b285
 800b1f0:	0800b285 	.word	0x0800b285
 800b1f4:	0800b285 	.word	0x0800b285
 800b1f8:	0800b285 	.word	0x0800b285
 800b1fc:	0800b273 	.word	0x0800b273
 800b200:	0800b285 	.word	0x0800b285
 800b204:	0800b285 	.word	0x0800b285
 800b208:	0800b285 	.word	0x0800b285
 800b20c:	0800b285 	.word	0x0800b285
 800b210:	0800b285 	.word	0x0800b285
 800b214:	0800b285 	.word	0x0800b285
 800b218:	0800b285 	.word	0x0800b285
 800b21c:	0800b299 	.word	0x0800b299
 800b220:	0800b285 	.word	0x0800b285
 800b224:	0800b285 	.word	0x0800b285
 800b228:	0800b285 	.word	0x0800b285
 800b22c:	0800b285 	.word	0x0800b285
 800b230:	0800b285 	.word	0x0800b285
 800b234:	0800b285 	.word	0x0800b285
 800b238:	0800b285 	.word	0x0800b285
 800b23c:	0800b299 	.word	0x0800b299
 800b240:	0800b285 	.word	0x0800b285
 800b244:	0800b285 	.word	0x0800b285
 800b248:	0800b285 	.word	0x0800b285
 800b24c:	0800b285 	.word	0x0800b285
 800b250:	0800b285 	.word	0x0800b285
 800b254:	0800b285 	.word	0x0800b285
 800b258:	0800b285 	.word	0x0800b285
 800b25c:	0800b299 	.word	0x0800b299
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3304      	adds	r3, #4
 800b264:	2101      	movs	r1, #1
 800b266:	4618      	mov	r0, r3
 800b268:	f000 fdfa 	bl	800be60 <RCCEx_PLL2_Config>
 800b26c:	4603      	mov	r3, r0
 800b26e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b270:	e013      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3324      	adds	r3, #36	; 0x24
 800b276:	2101      	movs	r1, #1
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 fea3 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b27e:	4603      	mov	r3, r0
 800b280:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b282:	e00a      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	75fb      	strb	r3, [r7, #23]
      break;
 800b288:	e007      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b28a:	bf00      	nop
 800b28c:	58024400 	.word	0x58024400
 800b290:	58024800 	.word	0x58024800
 800b294:	00ffffcf 	.word	0x00ffffcf
      break;
 800b298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d109      	bne.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b2a0:	4b96      	ldr	r3, [pc, #600]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ac:	4993      	ldr	r1, [pc, #588]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	654b      	str	r3, [r1, #84]	; 0x54
 800b2b2:	e001      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d038      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c8:	2b05      	cmp	r3, #5
 800b2ca:	d821      	bhi.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b2cc:	a201      	add	r2, pc, #4	; (adr r2, 800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800b2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d2:	bf00      	nop
 800b2d4:	0800b317 	.word	0x0800b317
 800b2d8:	0800b2ed 	.word	0x0800b2ed
 800b2dc:	0800b2ff 	.word	0x0800b2ff
 800b2e0:	0800b317 	.word	0x0800b317
 800b2e4:	0800b317 	.word	0x0800b317
 800b2e8:	0800b317 	.word	0x0800b317
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fdb4 	bl	800be60 <RCCEx_PLL2_Config>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b2fc:	e00c      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3324      	adds	r3, #36	; 0x24
 800b302:	2101      	movs	r1, #1
 800b304:	4618      	mov	r0, r3
 800b306:	f000 fe5d 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b30a:	4603      	mov	r3, r0
 800b30c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b30e:	e003      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	75fb      	strb	r3, [r7, #23]
      break;
 800b314:	e000      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800b316:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d109      	bne.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b31e:	4b77      	ldr	r3, [pc, #476]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b322:	f023 0207 	bic.w	r2, r3, #7
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b32a:	4974      	ldr	r1, [pc, #464]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	654b      	str	r3, [r1, #84]	; 0x54
 800b330:	e001      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0304 	and.w	r3, r3, #4
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d03a      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b348:	2b05      	cmp	r3, #5
 800b34a:	d821      	bhi.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b34c:	a201      	add	r2, pc, #4	; (adr r2, 800b354 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b352:	bf00      	nop
 800b354:	0800b397 	.word	0x0800b397
 800b358:	0800b36d 	.word	0x0800b36d
 800b35c:	0800b37f 	.word	0x0800b37f
 800b360:	0800b397 	.word	0x0800b397
 800b364:	0800b397 	.word	0x0800b397
 800b368:	0800b397 	.word	0x0800b397
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3304      	adds	r3, #4
 800b370:	2101      	movs	r1, #1
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fd74 	bl	800be60 <RCCEx_PLL2_Config>
 800b378:	4603      	mov	r3, r0
 800b37a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b37c:	e00c      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	3324      	adds	r3, #36	; 0x24
 800b382:	2101      	movs	r1, #1
 800b384:	4618      	mov	r0, r3
 800b386:	f000 fe1d 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b38a:	4603      	mov	r3, r0
 800b38c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b38e:	e003      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	75fb      	strb	r3, [r7, #23]
      break;
 800b394:	e000      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b396:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b398:	7dfb      	ldrb	r3, [r7, #23]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10a      	bne.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b39e:	4b57      	ldr	r3, [pc, #348]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a2:	f023 0207 	bic.w	r2, r3, #7
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ac:	4953      	ldr	r1, [pc, #332]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	658b      	str	r3, [r1, #88]	; 0x58
 800b3b2:	e001      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b4:	7dfb      	ldrb	r3, [r7, #23]
 800b3b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0320 	and.w	r3, r3, #32
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d04b      	beq.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3ce:	d02e      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b3d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3d4:	d828      	bhi.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3da:	d02a      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3e0:	d822      	bhi.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b3e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3e6:	d026      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b3e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3ec:	d81c      	bhi.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b3ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3f2:	d010      	beq.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b3f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3f8:	d816      	bhi.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d01d      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b3fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b402:	d111      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3304      	adds	r3, #4
 800b408:	2100      	movs	r1, #0
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 fd28 	bl	800be60 <RCCEx_PLL2_Config>
 800b410:	4603      	mov	r3, r0
 800b412:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b414:	e012      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3324      	adds	r3, #36	; 0x24
 800b41a:	2102      	movs	r1, #2
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 fdd1 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b422:	4603      	mov	r3, r0
 800b424:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b426:	e009      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	75fb      	strb	r3, [r7, #23]
      break;
 800b42c:	e006      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b42e:	bf00      	nop
 800b430:	e004      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b432:	bf00      	nop
 800b434:	e002      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b436:	bf00      	nop
 800b438:	e000      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b43a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b442:	4b2e      	ldr	r3, [pc, #184]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b446:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b450:	492a      	ldr	r1, [pc, #168]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b452:	4313      	orrs	r3, r2
 800b454:	654b      	str	r3, [r1, #84]	; 0x54
 800b456:	e001      	b.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	d04d      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b46e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b472:	d02e      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b474:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b478:	d828      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b47e:	d02a      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b484:	d822      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b48a:	d026      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b48c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b490:	d81c      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b496:	d010      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b49c:	d816      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d01d      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b4a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4a6:	d111      	bne.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 fcd6 	bl	800be60 <RCCEx_PLL2_Config>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b4b8:	e012      	b.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3324      	adds	r3, #36	; 0x24
 800b4be:	2102      	movs	r1, #2
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 fd7f 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b4ca:	e009      	b.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d0:	e006      	b.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b4d2:	bf00      	nop
 800b4d4:	e004      	b.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b4d6:	bf00      	nop
 800b4d8:	e002      	b.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b4da:	bf00      	nop
 800b4dc:	e000      	b.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b4de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10c      	bne.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4e6:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4f4:	4901      	ldr	r1, [pc, #4]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	658b      	str	r3, [r1, #88]	; 0x58
 800b4fa:	e003      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b4fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d04b      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b516:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b51a:	d02e      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b51c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b520:	d828      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b526:	d02a      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b52c:	d822      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b52e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b532:	d026      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b534:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b538:	d81c      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b53a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b53e:	d010      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b544:	d816      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b546:	2b00      	cmp	r3, #0
 800b548:	d01d      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b54a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b54e:	d111      	bne.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3304      	adds	r3, #4
 800b554:	2100      	movs	r1, #0
 800b556:	4618      	mov	r0, r3
 800b558:	f000 fc82 	bl	800be60 <RCCEx_PLL2_Config>
 800b55c:	4603      	mov	r3, r0
 800b55e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b560:	e012      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3324      	adds	r3, #36	; 0x24
 800b566:	2102      	movs	r1, #2
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 fd2b 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b572:	e009      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	75fb      	strb	r3, [r7, #23]
      break;
 800b578:	e006      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b57a:	bf00      	nop
 800b57c:	e004      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b57e:	bf00      	nop
 800b580:	e002      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b582:	bf00      	nop
 800b584:	e000      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b586:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b58e:	4b9d      	ldr	r3, [pc, #628]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b59c:	4999      	ldr	r1, [pc, #612]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	658b      	str	r3, [r1, #88]	; 0x58
 800b5a2:	e001      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0308 	and.w	r3, r3, #8
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01a      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5be:	d10a      	bne.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3324      	adds	r3, #36	; 0x24
 800b5c4:	2102      	movs	r1, #2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 fcfc 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b5d6:	4b8b      	ldr	r3, [pc, #556]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5e4:	4987      	ldr	r1, [pc, #540]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0310 	and.w	r3, r3, #16
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d01a      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b600:	d10a      	bne.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	3324      	adds	r3, #36	; 0x24
 800b606:	2102      	movs	r1, #2
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 fcdb 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d001      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b618:	4b7a      	ldr	r3, [pc, #488]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b61c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b626:	4977      	ldr	r1, [pc, #476]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d034      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b63e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b642:	d01d      	beq.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b648:	d817      	bhi.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b652:	d009      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b654:	e011      	b.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3304      	adds	r3, #4
 800b65a:	2100      	movs	r1, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fbff 	bl	800be60 <RCCEx_PLL2_Config>
 800b662:	4603      	mov	r3, r0
 800b664:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b666:	e00c      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3324      	adds	r3, #36	; 0x24
 800b66c:	2102      	movs	r1, #2
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fca8 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b674:	4603      	mov	r3, r0
 800b676:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b678:	e003      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	75fb      	strb	r3, [r7, #23]
      break;
 800b67e:	e000      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b680:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b682:	7dfb      	ldrb	r3, [r7, #23]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10a      	bne.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b688:	4b5e      	ldr	r3, [pc, #376]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b68c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b696:	495b      	ldr	r1, [pc, #364]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b698:	4313      	orrs	r3, r2
 800b69a:	658b      	str	r3, [r1, #88]	; 0x58
 800b69c:	e001      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b69e:	7dfb      	ldrb	r3, [r7, #23]
 800b6a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d033      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6b8:	d01c      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b6ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6be:	d816      	bhi.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b6c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6c4:	d003      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b6c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6ca:	d007      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b6cc:	e00f      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ce:	4b4d      	ldr	r3, [pc, #308]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d2:	4a4c      	ldr	r2, [pc, #304]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b6d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b6da:	e00c      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3324      	adds	r3, #36	; 0x24
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 fc6e 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b6ec:	e003      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f2:	e000      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b6f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6fc:	4b41      	ldr	r3, [pc, #260]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b70a:	493e      	ldr	r1, [pc, #248]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b70c:	4313      	orrs	r3, r2
 800b70e:	654b      	str	r3, [r1, #84]	; 0x54
 800b710:	e001      	b.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d029      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b72a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b72e:	d007      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b730:	e00f      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b732:	4b34      	ldr	r3, [pc, #208]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	4a33      	ldr	r2, [pc, #204]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b73c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b73e:	e00b      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3304      	adds	r3, #4
 800b744:	2102      	movs	r1, #2
 800b746:	4618      	mov	r0, r3
 800b748:	f000 fb8a 	bl	800be60 <RCCEx_PLL2_Config>
 800b74c:	4603      	mov	r3, r0
 800b74e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b750:	e002      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	75fb      	strb	r3, [r7, #23]
      break;
 800b756:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b758:	7dfb      	ldrb	r3, [r7, #23]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d109      	bne.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b75e:	4b29      	ldr	r3, [pc, #164]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b76a:	4926      	ldr	r1, [pc, #152]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b76c:	4313      	orrs	r3, r2
 800b76e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b770:	e001      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00a      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	3324      	adds	r3, #36	; 0x24
 800b786:	2102      	movs	r1, #2
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 fc1b 	bl	800bfc4 <RCCEx_PLL3_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d033      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7ac:	d017      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b7ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7b2:	d811      	bhi.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b7b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7b8:	d013      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b7ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7be:	d80b      	bhi.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d010      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b7c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c8:	d106      	bne.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7ca:	4b0e      	ldr	r3, [pc, #56]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ce:	4a0d      	ldr	r2, [pc, #52]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b7d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b7d6:	e007      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	75fb      	strb	r3, [r7, #23]
      break;
 800b7dc:	e004      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b7de:	bf00      	nop
 800b7e0:	e002      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b7e2:	bf00      	nop
 800b7e4:	e000      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b7e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7e8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10c      	bne.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7fa:	4902      	ldr	r1, [pc, #8]	; (800b804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	654b      	str	r3, [r1, #84]	; 0x54
 800b800:	e004      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b802:	bf00      	nop
 800b804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b808:	7dfb      	ldrb	r3, [r7, #23]
 800b80a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b814:	2b00      	cmp	r3, #0
 800b816:	d008      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b818:	4b31      	ldr	r3, [pc, #196]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b824:	492e      	ldr	r1, [pc, #184]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b826:	4313      	orrs	r3, r2
 800b828:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d009      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b836:	4b2a      	ldr	r3, [pc, #168]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b844:	4926      	ldr	r1, [pc, #152]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b846:	4313      	orrs	r3, r2
 800b848:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b852:	2b00      	cmp	r3, #0
 800b854:	d008      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b856:	4b22      	ldr	r3, [pc, #136]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b85a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b862:	491f      	ldr	r1, [pc, #124]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b864:	4313      	orrs	r3, r2
 800b866:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00d      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b874:	4b1a      	ldr	r3, [pc, #104]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	4a19      	ldr	r2, [pc, #100]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b87a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b87e:	6113      	str	r3, [r2, #16]
 800b880:	4b17      	ldr	r3, [pc, #92]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b882:	691a      	ldr	r2, [r3, #16]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b88a:	4915      	ldr	r1, [pc, #84]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b88c:	4313      	orrs	r3, r2
 800b88e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	da08      	bge.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b898:	4b11      	ldr	r3, [pc, #68]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b89c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a4:	490e      	ldr	r1, [pc, #56]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d009      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8b6:	4b0a      	ldr	r3, [pc, #40]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8c4:	4906      	ldr	r1, [pc, #24]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b8ca:	7dbb      	ldrb	r3, [r7, #22]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e000      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3718      	adds	r7, #24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	58024400 	.word	0x58024400

0800b8e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b8e8:	f7ff f85a 	bl	800a9a0 <HAL_RCC_GetHCLKFreq>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	4b06      	ldr	r3, [pc, #24]	; (800b908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	091b      	lsrs	r3, r3, #4
 800b8f4:	f003 0307 	and.w	r3, r3, #7
 800b8f8:	4904      	ldr	r1, [pc, #16]	; (800b90c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b8fa:	5ccb      	ldrb	r3, [r1, r3]
 800b8fc:	f003 031f 	and.w	r3, r3, #31
 800b900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b904:	4618      	mov	r0, r3
 800b906:	bd80      	pop	{r7, pc}
 800b908:	58024400 	.word	0x58024400
 800b90c:	08011710 	.word	0x08011710

0800b910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b910:	b480      	push	{r7}
 800b912:	b089      	sub	sp, #36	; 0x24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b918:	4ba1      	ldr	r3, [pc, #644]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91c:	f003 0303 	and.w	r3, r3, #3
 800b920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b922:	4b9f      	ldr	r3, [pc, #636]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b926:	0b1b      	lsrs	r3, r3, #12
 800b928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b92c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b92e:	4b9c      	ldr	r3, [pc, #624]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b932:	091b      	lsrs	r3, r3, #4
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b93a:	4b99      	ldr	r3, [pc, #612]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b93e:	08db      	lsrs	r3, r3, #3
 800b940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	fb02 f303 	mul.w	r3, r2, r3
 800b94a:	ee07 3a90 	vmov	s15, r3
 800b94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 8111 	beq.w	800bb80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	2b02      	cmp	r3, #2
 800b962:	f000 8083 	beq.w	800ba6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	f200 80a1 	bhi.w	800bab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d056      	beq.n	800ba28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b97a:	e099      	b.n	800bab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b97c:	4b88      	ldr	r3, [pc, #544]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0320 	and.w	r3, r3, #32
 800b984:	2b00      	cmp	r3, #0
 800b986:	d02d      	beq.n	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b988:	4b85      	ldr	r3, [pc, #532]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	08db      	lsrs	r3, r3, #3
 800b98e:	f003 0303 	and.w	r3, r3, #3
 800b992:	4a84      	ldr	r2, [pc, #528]	; (800bba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b994:	fa22 f303 	lsr.w	r3, r2, r3
 800b998:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	ee07 3a90 	vmov	s15, r3
 800b9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b2:	4b7b      	ldr	r3, [pc, #492]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b9e2:	e087      	b.n	800baf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f6:	4b6a      	ldr	r3, [pc, #424]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba26:	e065      	b.n	800baf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3a:	4b59      	ldr	r3, [pc, #356]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba6a:	e043      	b.n	800baf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ba7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba7e:	4b48      	ldr	r3, [pc, #288]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baae:	e021      	b.n	800baf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	ee07 3a90 	vmov	s15, r3
 800bab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800babe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac2:	4b37      	ldr	r3, [pc, #220]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800baf4:	4b2a      	ldr	r3, [pc, #168]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf8:	0a5b      	lsrs	r3, r3, #9
 800bafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bafe:	ee07 3a90 	vmov	s15, r3
 800bb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb1a:	ee17 2a90 	vmov	r2, s15
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bb22:	4b1f      	ldr	r3, [pc, #124]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb26:	0c1b      	lsrs	r3, r3, #16
 800bb28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb2c:	ee07 3a90 	vmov	s15, r3
 800bb30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb48:	ee17 2a90 	vmov	r2, s15
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bb50:	4b13      	ldr	r3, [pc, #76]	; (800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	0e1b      	lsrs	r3, r3, #24
 800bb56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb76:	ee17 2a90 	vmov	r2, s15
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bb7e:	e008      	b.n	800bb92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	609a      	str	r2, [r3, #8]
}
 800bb92:	bf00      	nop
 800bb94:	3724      	adds	r7, #36	; 0x24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	58024400 	.word	0x58024400
 800bba4:	03d09000 	.word	0x03d09000
 800bba8:	46000000 	.word	0x46000000
 800bbac:	4c742400 	.word	0x4c742400
 800bbb0:	4a742400 	.word	0x4a742400
 800bbb4:	4bbebc20 	.word	0x4bbebc20

0800bbb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b089      	sub	sp, #36	; 0x24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbc0:	4ba1      	ldr	r3, [pc, #644]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc4:	f003 0303 	and.w	r3, r3, #3
 800bbc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bbca:	4b9f      	ldr	r3, [pc, #636]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbce:	0d1b      	lsrs	r3, r3, #20
 800bbd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bbd6:	4b9c      	ldr	r3, [pc, #624]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbda:	0a1b      	lsrs	r3, r3, #8
 800bbdc:	f003 0301 	and.w	r3, r3, #1
 800bbe0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bbe2:	4b99      	ldr	r3, [pc, #612]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbe6:	08db      	lsrs	r3, r3, #3
 800bbe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	fb02 f303 	mul.w	r3, r2, r3
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 8111 	beq.w	800be28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	f000 8083 	beq.w	800bd14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	f200 80a1 	bhi.w	800bd58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d003      	beq.n	800bc24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d056      	beq.n	800bcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bc22:	e099      	b.n	800bd58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc24:	4b88      	ldr	r3, [pc, #544]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0320 	and.w	r3, r3, #32
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d02d      	beq.n	800bc8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc30:	4b85      	ldr	r3, [pc, #532]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	08db      	lsrs	r3, r3, #3
 800bc36:	f003 0303 	and.w	r3, r3, #3
 800bc3a:	4a84      	ldr	r2, [pc, #528]	; (800be4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bc3c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	ee07 3a90 	vmov	s15, r3
 800bc48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5a:	4b7b      	ldr	r3, [pc, #492]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc8a:	e087      	b.n	800bd9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bc9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc9e:	4b6a      	ldr	r3, [pc, #424]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcae:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcce:	e065      	b.n	800bd9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bcde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce2:	4b59      	ldr	r3, [pc, #356]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd12:	e043      	b.n	800bd9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bd22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd26:	4b48      	ldr	r3, [pc, #288]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd56:	e021      	b.n	800bd9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	ee07 3a90 	vmov	s15, r3
 800bd5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd6a:	4b37      	ldr	r3, [pc, #220]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd72:	ee07 3a90 	vmov	s15, r3
 800bd76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bd9c:	4b2a      	ldr	r3, [pc, #168]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda0:	0a5b      	lsrs	r3, r3, #9
 800bda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda6:	ee07 3a90 	vmov	s15, r3
 800bdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc2:	ee17 2a90 	vmov	r2, s15
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bdca:	4b1f      	ldr	r3, [pc, #124]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdce:	0c1b      	lsrs	r3, r3, #16
 800bdd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd4:	ee07 3a90 	vmov	s15, r3
 800bdd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bde0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bde4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bde8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdf0:	ee17 2a90 	vmov	r2, s15
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bdf8:	4b13      	ldr	r3, [pc, #76]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfc:	0e1b      	lsrs	r3, r3, #24
 800bdfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be12:	edd7 6a07 	vldr	s13, [r7, #28]
 800be16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be1e:	ee17 2a90 	vmov	r2, s15
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800be26:	e008      	b.n	800be3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	609a      	str	r2, [r3, #8]
}
 800be3a:	bf00      	nop
 800be3c:	3724      	adds	r7, #36	; 0x24
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	58024400 	.word	0x58024400
 800be4c:	03d09000 	.word	0x03d09000
 800be50:	46000000 	.word	0x46000000
 800be54:	4c742400 	.word	0x4c742400
 800be58:	4a742400 	.word	0x4a742400
 800be5c:	4bbebc20 	.word	0x4bbebc20

0800be60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be6e:	4b53      	ldr	r3, [pc, #332]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	f003 0303 	and.w	r3, r3, #3
 800be76:	2b03      	cmp	r3, #3
 800be78:	d101      	bne.n	800be7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e099      	b.n	800bfb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be7e:	4b4f      	ldr	r3, [pc, #316]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a4e      	ldr	r2, [pc, #312]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800be84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be8a:	f7fc fd59 	bl	8008940 <HAL_GetTick>
 800be8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be90:	e008      	b.n	800bea4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800be92:	f7fc fd55 	bl	8008940 <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d901      	bls.n	800bea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bea0:	2303      	movs	r3, #3
 800bea2:	e086      	b.n	800bfb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bea4:	4b45      	ldr	r3, [pc, #276]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1f0      	bne.n	800be92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800beb0:	4b42      	ldr	r3, [pc, #264]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800beb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	031b      	lsls	r3, r3, #12
 800bebe:	493f      	ldr	r1, [pc, #252]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	628b      	str	r3, [r1, #40]	; 0x28
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	3b01      	subs	r3, #1
 800beca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	3b01      	subs	r3, #1
 800bed4:	025b      	lsls	r3, r3, #9
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	431a      	orrs	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	3b01      	subs	r3, #1
 800bee0:	041b      	lsls	r3, r3, #16
 800bee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bee6:	431a      	orrs	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	3b01      	subs	r3, #1
 800beee:	061b      	lsls	r3, r3, #24
 800bef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bef4:	4931      	ldr	r1, [pc, #196]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800befa:	4b30      	ldr	r3, [pc, #192]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800befc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	492d      	ldr	r1, [pc, #180]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf0c:	4b2b      	ldr	r3, [pc, #172]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	f023 0220 	bic.w	r2, r3, #32
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	4928      	ldr	r1, [pc, #160]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf1e:	4b27      	ldr	r3, [pc, #156]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf22:	4a26      	ldr	r2, [pc, #152]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf24:	f023 0310 	bic.w	r3, r3, #16
 800bf28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf2a:	4b24      	ldr	r3, [pc, #144]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf2e:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <RCCEx_PLL2_Config+0x160>)
 800bf30:	4013      	ands	r3, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	69d2      	ldr	r2, [r2, #28]
 800bf36:	00d2      	lsls	r2, r2, #3
 800bf38:	4920      	ldr	r1, [pc, #128]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf3e:	4b1f      	ldr	r3, [pc, #124]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf42:	4a1e      	ldr	r2, [pc, #120]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf44:	f043 0310 	orr.w	r3, r3, #16
 800bf48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d106      	bne.n	800bf5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf50:	4b1a      	ldr	r3, [pc, #104]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf54:	4a19      	ldr	r2, [pc, #100]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf5c:	e00f      	b.n	800bf7e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d106      	bne.n	800bf72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf64:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf68:	4a14      	ldr	r2, [pc, #80]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf70:	e005      	b.n	800bf7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf72:	4b12      	ldr	r3, [pc, #72]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf76:	4a11      	ldr	r2, [pc, #68]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf7e:	4b0f      	ldr	r3, [pc, #60]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a0e      	ldr	r2, [pc, #56]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf8a:	f7fc fcd9 	bl	8008940 <HAL_GetTick>
 800bf8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf90:	e008      	b.n	800bfa4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bf92:	f7fc fcd5 	bl	8008940 <HAL_GetTick>
 800bf96:	4602      	mov	r2, r0
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d901      	bls.n	800bfa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e006      	b.n	800bfb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d0f0      	beq.n	800bf92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	58024400 	.word	0x58024400
 800bfc0:	ffff0007 	.word	0xffff0007

0800bfc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bfd2:	4b53      	ldr	r3, [pc, #332]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800bfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd6:	f003 0303 	and.w	r3, r3, #3
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d101      	bne.n	800bfe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e099      	b.n	800c116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bfe2:	4b4f      	ldr	r3, [pc, #316]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a4e      	ldr	r2, [pc, #312]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800bfe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfee:	f7fc fca7 	bl	8008940 <HAL_GetTick>
 800bff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bff4:	e008      	b.n	800c008 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bff6:	f7fc fca3 	bl	8008940 <HAL_GetTick>
 800bffa:	4602      	mov	r2, r0
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	2b02      	cmp	r3, #2
 800c002:	d901      	bls.n	800c008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c004:	2303      	movs	r3, #3
 800c006:	e086      	b.n	800c116 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c008:	4b45      	ldr	r3, [pc, #276]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1f0      	bne.n	800bff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c014:	4b42      	ldr	r3, [pc, #264]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	051b      	lsls	r3, r3, #20
 800c022:	493f      	ldr	r1, [pc, #252]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c024:	4313      	orrs	r3, r2
 800c026:	628b      	str	r3, [r1, #40]	; 0x28
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	3b01      	subs	r3, #1
 800c038:	025b      	lsls	r3, r3, #9
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	431a      	orrs	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	3b01      	subs	r3, #1
 800c044:	041b      	lsls	r3, r3, #16
 800c046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c04a:	431a      	orrs	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	3b01      	subs	r3, #1
 800c052:	061b      	lsls	r3, r3, #24
 800c054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c058:	4931      	ldr	r1, [pc, #196]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c05a:	4313      	orrs	r3, r2
 800c05c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c05e:	4b30      	ldr	r3, [pc, #192]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	492d      	ldr	r1, [pc, #180]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c070:	4b2b      	ldr	r3, [pc, #172]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	4928      	ldr	r1, [pc, #160]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c07e:	4313      	orrs	r3, r2
 800c080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c082:	4b27      	ldr	r3, [pc, #156]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c086:	4a26      	ldr	r2, [pc, #152]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c08c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c08e:	4b24      	ldr	r3, [pc, #144]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c092:	4b24      	ldr	r3, [pc, #144]	; (800c124 <RCCEx_PLL3_Config+0x160>)
 800c094:	4013      	ands	r3, r2
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	69d2      	ldr	r2, [r2, #28]
 800c09a:	00d2      	lsls	r2, r2, #3
 800c09c:	4920      	ldr	r1, [pc, #128]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0a2:	4b1f      	ldr	r3, [pc, #124]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a6:	4a1e      	ldr	r2, [pc, #120]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0b4:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	4a19      	ldr	r2, [pc, #100]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c0be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0c0:	e00f      	b.n	800c0e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d106      	bne.n	800c0d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c0c8:	4b15      	ldr	r3, [pc, #84]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0cc:	4a14      	ldr	r2, [pc, #80]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c0d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0d4:	e005      	b.n	800c0e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c0d6:	4b12      	ldr	r3, [pc, #72]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	4a11      	ldr	r2, [pc, #68]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c0e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c0e2:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a0e      	ldr	r2, [pc, #56]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ee:	f7fc fc27 	bl	8008940 <HAL_GetTick>
 800c0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0f4:	e008      	b.n	800c108 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c0f6:	f7fc fc23 	bl	8008940 <HAL_GetTick>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	2b02      	cmp	r3, #2
 800c102:	d901      	bls.n	800c108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e006      	b.n	800c116 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0f0      	beq.n	800c0f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c114:	7bfb      	ldrb	r3, [r7, #15]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	58024400 	.word	0x58024400
 800c124:	ffff0007 	.word	0xffff0007

0800c128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d101      	bne.n	800c13a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	e042      	b.n	800c1c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c140:	2b00      	cmp	r3, #0
 800c142:	d106      	bne.n	800c152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7fc fae1 	bl	8008714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2224      	movs	r2, #36	; 0x24
 800c156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f022 0201 	bic.w	r2, r2, #1
 800c168:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f8c2 	bl	800c2f4 <UART_SetConfig>
 800c170:	4603      	mov	r3, r0
 800c172:	2b01      	cmp	r3, #1
 800c174:	d101      	bne.n	800c17a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e022      	b.n	800c1c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d002      	beq.n	800c188 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fe1e 	bl	800cdc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	689a      	ldr	r2, [r3, #8]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f042 0201 	orr.w	r2, r2, #1
 800c1b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fea5 	bl	800cf08 <UART_CheckIdleState>
 800c1be:	4603      	mov	r3, r0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08a      	sub	sp, #40	; 0x28
 800c1cc:	af02      	add	r7, sp, #8
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	603b      	str	r3, [r7, #0]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1de:	2b20      	cmp	r3, #32
 800c1e0:	f040 8083 	bne.w	800c2ea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <HAL_UART_Transmit+0x28>
 800c1ea:	88fb      	ldrh	r3, [r7, #6]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e07b      	b.n	800c2ec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <HAL_UART_Transmit+0x3a>
 800c1fe:	2302      	movs	r3, #2
 800c200:	e074      	b.n	800c2ec <HAL_UART_Transmit+0x124>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2221      	movs	r2, #33	; 0x21
 800c216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c21a:	f7fc fb91 	bl	8008940 <HAL_GetTick>
 800c21e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	88fa      	ldrh	r2, [r7, #6]
 800c224:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	88fa      	ldrh	r2, [r7, #6]
 800c22c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c238:	d108      	bne.n	800c24c <HAL_UART_Transmit+0x84>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d104      	bne.n	800c24c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c242:	2300      	movs	r3, #0
 800c244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	61bb      	str	r3, [r7, #24]
 800c24a:	e003      	b.n	800c254 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c25c:	e02c      	b.n	800c2b8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2200      	movs	r2, #0
 800c266:	2180      	movs	r1, #128	; 0x80
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f000 fe98 	bl	800cf9e <UART_WaitOnFlagUntilTimeout>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c274:	2303      	movs	r3, #3
 800c276:	e039      	b.n	800c2ec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10b      	bne.n	800c296 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c28c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	3302      	adds	r3, #2
 800c292:	61bb      	str	r3, [r7, #24]
 800c294:	e007      	b.n	800c2a6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	781a      	ldrb	r2, [r3, #0]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1cc      	bne.n	800c25e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	2140      	movs	r1, #64	; 0x40
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 fe65 	bl	800cf9e <UART_WaitOnFlagUntilTimeout>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e006      	b.n	800c2ec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e000      	b.n	800c2ec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c2ea:	2302      	movs	r3, #2
  }
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3720      	adds	r7, #32
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2f8:	b092      	sub	sp, #72	; 0x48
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	431a      	orrs	r2, r3
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	431a      	orrs	r2, r3
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	4313      	orrs	r3, r2
 800c31a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	4bbe      	ldr	r3, [pc, #760]	; (800c61c <UART_SetConfig+0x328>)
 800c324:	4013      	ands	r3, r2
 800c326:	697a      	ldr	r2, [r7, #20]
 800c328:	6812      	ldr	r2, [r2, #0]
 800c32a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c32c:	430b      	orrs	r3, r1
 800c32e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	68da      	ldr	r2, [r3, #12]
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4ab3      	ldr	r2, [pc, #716]	; (800c620 <UART_SetConfig+0x32c>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d004      	beq.n	800c360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c35c:	4313      	orrs	r3, r2
 800c35e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	689a      	ldr	r2, [r3, #8]
 800c366:	4baf      	ldr	r3, [pc, #700]	; (800c624 <UART_SetConfig+0x330>)
 800c368:	4013      	ands	r3, r2
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	6812      	ldr	r2, [r2, #0]
 800c36e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c370:	430b      	orrs	r3, r1
 800c372:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37a:	f023 010f 	bic.w	r1, r3, #15
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4aa6      	ldr	r2, [pc, #664]	; (800c628 <UART_SetConfig+0x334>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d177      	bne.n	800c484 <UART_SetConfig+0x190>
 800c394:	4ba5      	ldr	r3, [pc, #660]	; (800c62c <UART_SetConfig+0x338>)
 800c396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c39c:	2b28      	cmp	r3, #40	; 0x28
 800c39e:	d86d      	bhi.n	800c47c <UART_SetConfig+0x188>
 800c3a0:	a201      	add	r2, pc, #4	; (adr r2, 800c3a8 <UART_SetConfig+0xb4>)
 800c3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a6:	bf00      	nop
 800c3a8:	0800c44d 	.word	0x0800c44d
 800c3ac:	0800c47d 	.word	0x0800c47d
 800c3b0:	0800c47d 	.word	0x0800c47d
 800c3b4:	0800c47d 	.word	0x0800c47d
 800c3b8:	0800c47d 	.word	0x0800c47d
 800c3bc:	0800c47d 	.word	0x0800c47d
 800c3c0:	0800c47d 	.word	0x0800c47d
 800c3c4:	0800c47d 	.word	0x0800c47d
 800c3c8:	0800c455 	.word	0x0800c455
 800c3cc:	0800c47d 	.word	0x0800c47d
 800c3d0:	0800c47d 	.word	0x0800c47d
 800c3d4:	0800c47d 	.word	0x0800c47d
 800c3d8:	0800c47d 	.word	0x0800c47d
 800c3dc:	0800c47d 	.word	0x0800c47d
 800c3e0:	0800c47d 	.word	0x0800c47d
 800c3e4:	0800c47d 	.word	0x0800c47d
 800c3e8:	0800c45d 	.word	0x0800c45d
 800c3ec:	0800c47d 	.word	0x0800c47d
 800c3f0:	0800c47d 	.word	0x0800c47d
 800c3f4:	0800c47d 	.word	0x0800c47d
 800c3f8:	0800c47d 	.word	0x0800c47d
 800c3fc:	0800c47d 	.word	0x0800c47d
 800c400:	0800c47d 	.word	0x0800c47d
 800c404:	0800c47d 	.word	0x0800c47d
 800c408:	0800c465 	.word	0x0800c465
 800c40c:	0800c47d 	.word	0x0800c47d
 800c410:	0800c47d 	.word	0x0800c47d
 800c414:	0800c47d 	.word	0x0800c47d
 800c418:	0800c47d 	.word	0x0800c47d
 800c41c:	0800c47d 	.word	0x0800c47d
 800c420:	0800c47d 	.word	0x0800c47d
 800c424:	0800c47d 	.word	0x0800c47d
 800c428:	0800c46d 	.word	0x0800c46d
 800c42c:	0800c47d 	.word	0x0800c47d
 800c430:	0800c47d 	.word	0x0800c47d
 800c434:	0800c47d 	.word	0x0800c47d
 800c438:	0800c47d 	.word	0x0800c47d
 800c43c:	0800c47d 	.word	0x0800c47d
 800c440:	0800c47d 	.word	0x0800c47d
 800c444:	0800c47d 	.word	0x0800c47d
 800c448:	0800c475 	.word	0x0800c475
 800c44c:	2301      	movs	r3, #1
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e222      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c454:	2304      	movs	r3, #4
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e21e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c45c:	2308      	movs	r3, #8
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e21a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c464:	2310      	movs	r3, #16
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e216      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c46c:	2320      	movs	r3, #32
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c472:	e212      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c474:	2340      	movs	r3, #64	; 0x40
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47a:	e20e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c47c:	2380      	movs	r3, #128	; 0x80
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c482:	e20a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a69      	ldr	r2, [pc, #420]	; (800c630 <UART_SetConfig+0x33c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d130      	bne.n	800c4f0 <UART_SetConfig+0x1fc>
 800c48e:	4b67      	ldr	r3, [pc, #412]	; (800c62c <UART_SetConfig+0x338>)
 800c490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	2b05      	cmp	r3, #5
 800c498:	d826      	bhi.n	800c4e8 <UART_SetConfig+0x1f4>
 800c49a:	a201      	add	r2, pc, #4	; (adr r2, 800c4a0 <UART_SetConfig+0x1ac>)
 800c49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a0:	0800c4b9 	.word	0x0800c4b9
 800c4a4:	0800c4c1 	.word	0x0800c4c1
 800c4a8:	0800c4c9 	.word	0x0800c4c9
 800c4ac:	0800c4d1 	.word	0x0800c4d1
 800c4b0:	0800c4d9 	.word	0x0800c4d9
 800c4b4:	0800c4e1 	.word	0x0800c4e1
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e1ec      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4c0:	2304      	movs	r3, #4
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e1e8      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4c8:	2308      	movs	r3, #8
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e1e4      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4d0:	2310      	movs	r3, #16
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e1e0      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4d8:	2320      	movs	r3, #32
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e1dc      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4e0:	2340      	movs	r3, #64	; 0x40
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e1d8      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4e8:	2380      	movs	r3, #128	; 0x80
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ee:	e1d4      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a4f      	ldr	r2, [pc, #316]	; (800c634 <UART_SetConfig+0x340>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d130      	bne.n	800c55c <UART_SetConfig+0x268>
 800c4fa:	4b4c      	ldr	r3, [pc, #304]	; (800c62c <UART_SetConfig+0x338>)
 800c4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fe:	f003 0307 	and.w	r3, r3, #7
 800c502:	2b05      	cmp	r3, #5
 800c504:	d826      	bhi.n	800c554 <UART_SetConfig+0x260>
 800c506:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <UART_SetConfig+0x218>)
 800c508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50c:	0800c525 	.word	0x0800c525
 800c510:	0800c52d 	.word	0x0800c52d
 800c514:	0800c535 	.word	0x0800c535
 800c518:	0800c53d 	.word	0x0800c53d
 800c51c:	0800c545 	.word	0x0800c545
 800c520:	0800c54d 	.word	0x0800c54d
 800c524:	2300      	movs	r3, #0
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e1b6      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c52c:	2304      	movs	r3, #4
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e1b2      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c534:	2308      	movs	r3, #8
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e1ae      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c53c:	2310      	movs	r3, #16
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e1aa      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c544:	2320      	movs	r3, #32
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e1a6      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c54c:	2340      	movs	r3, #64	; 0x40
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e1a2      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c554:	2380      	movs	r3, #128	; 0x80
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55a:	e19e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a35      	ldr	r2, [pc, #212]	; (800c638 <UART_SetConfig+0x344>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d130      	bne.n	800c5c8 <UART_SetConfig+0x2d4>
 800c566:	4b31      	ldr	r3, [pc, #196]	; (800c62c <UART_SetConfig+0x338>)
 800c568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56a:	f003 0307 	and.w	r3, r3, #7
 800c56e:	2b05      	cmp	r3, #5
 800c570:	d826      	bhi.n	800c5c0 <UART_SetConfig+0x2cc>
 800c572:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <UART_SetConfig+0x284>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c591 	.word	0x0800c591
 800c57c:	0800c599 	.word	0x0800c599
 800c580:	0800c5a1 	.word	0x0800c5a1
 800c584:	0800c5a9 	.word	0x0800c5a9
 800c588:	0800c5b1 	.word	0x0800c5b1
 800c58c:	0800c5b9 	.word	0x0800c5b9
 800c590:	2300      	movs	r3, #0
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e180      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c598:	2304      	movs	r3, #4
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e17c      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5a0:	2308      	movs	r3, #8
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e178      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e174      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5b0:	2320      	movs	r3, #32
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e170      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5b8:	2340      	movs	r3, #64	; 0x40
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e16c      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5c0:	2380      	movs	r3, #128	; 0x80
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c6:	e168      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a1b      	ldr	r2, [pc, #108]	; (800c63c <UART_SetConfig+0x348>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d142      	bne.n	800c658 <UART_SetConfig+0x364>
 800c5d2:	4b16      	ldr	r3, [pc, #88]	; (800c62c <UART_SetConfig+0x338>)
 800c5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d6:	f003 0307 	and.w	r3, r3, #7
 800c5da:	2b05      	cmp	r3, #5
 800c5dc:	d838      	bhi.n	800c650 <UART_SetConfig+0x35c>
 800c5de:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <UART_SetConfig+0x2f0>)
 800c5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e4:	0800c5fd 	.word	0x0800c5fd
 800c5e8:	0800c605 	.word	0x0800c605
 800c5ec:	0800c60d 	.word	0x0800c60d
 800c5f0:	0800c615 	.word	0x0800c615
 800c5f4:	0800c641 	.word	0x0800c641
 800c5f8:	0800c649 	.word	0x0800c649
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c602:	e14a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c604:	2304      	movs	r3, #4
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60a:	e146      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c60c:	2308      	movs	r3, #8
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c612:	e142      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c614:	2310      	movs	r3, #16
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61a:	e13e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c61c:	cfff69f3 	.word	0xcfff69f3
 800c620:	58000c00 	.word	0x58000c00
 800c624:	11fff4ff 	.word	0x11fff4ff
 800c628:	40011000 	.word	0x40011000
 800c62c:	58024400 	.word	0x58024400
 800c630:	40004400 	.word	0x40004400
 800c634:	40004800 	.word	0x40004800
 800c638:	40004c00 	.word	0x40004c00
 800c63c:	40005000 	.word	0x40005000
 800c640:	2320      	movs	r3, #32
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c646:	e128      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c648:	2340      	movs	r3, #64	; 0x40
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64e:	e124      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c650:	2380      	movs	r3, #128	; 0x80
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c656:	e120      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4acb      	ldr	r2, [pc, #812]	; (800c98c <UART_SetConfig+0x698>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d176      	bne.n	800c750 <UART_SetConfig+0x45c>
 800c662:	4bcb      	ldr	r3, [pc, #812]	; (800c990 <UART_SetConfig+0x69c>)
 800c664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c66a:	2b28      	cmp	r3, #40	; 0x28
 800c66c:	d86c      	bhi.n	800c748 <UART_SetConfig+0x454>
 800c66e:	a201      	add	r2, pc, #4	; (adr r2, 800c674 <UART_SetConfig+0x380>)
 800c670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c674:	0800c719 	.word	0x0800c719
 800c678:	0800c749 	.word	0x0800c749
 800c67c:	0800c749 	.word	0x0800c749
 800c680:	0800c749 	.word	0x0800c749
 800c684:	0800c749 	.word	0x0800c749
 800c688:	0800c749 	.word	0x0800c749
 800c68c:	0800c749 	.word	0x0800c749
 800c690:	0800c749 	.word	0x0800c749
 800c694:	0800c721 	.word	0x0800c721
 800c698:	0800c749 	.word	0x0800c749
 800c69c:	0800c749 	.word	0x0800c749
 800c6a0:	0800c749 	.word	0x0800c749
 800c6a4:	0800c749 	.word	0x0800c749
 800c6a8:	0800c749 	.word	0x0800c749
 800c6ac:	0800c749 	.word	0x0800c749
 800c6b0:	0800c749 	.word	0x0800c749
 800c6b4:	0800c729 	.word	0x0800c729
 800c6b8:	0800c749 	.word	0x0800c749
 800c6bc:	0800c749 	.word	0x0800c749
 800c6c0:	0800c749 	.word	0x0800c749
 800c6c4:	0800c749 	.word	0x0800c749
 800c6c8:	0800c749 	.word	0x0800c749
 800c6cc:	0800c749 	.word	0x0800c749
 800c6d0:	0800c749 	.word	0x0800c749
 800c6d4:	0800c731 	.word	0x0800c731
 800c6d8:	0800c749 	.word	0x0800c749
 800c6dc:	0800c749 	.word	0x0800c749
 800c6e0:	0800c749 	.word	0x0800c749
 800c6e4:	0800c749 	.word	0x0800c749
 800c6e8:	0800c749 	.word	0x0800c749
 800c6ec:	0800c749 	.word	0x0800c749
 800c6f0:	0800c749 	.word	0x0800c749
 800c6f4:	0800c739 	.word	0x0800c739
 800c6f8:	0800c749 	.word	0x0800c749
 800c6fc:	0800c749 	.word	0x0800c749
 800c700:	0800c749 	.word	0x0800c749
 800c704:	0800c749 	.word	0x0800c749
 800c708:	0800c749 	.word	0x0800c749
 800c70c:	0800c749 	.word	0x0800c749
 800c710:	0800c749 	.word	0x0800c749
 800c714:	0800c741 	.word	0x0800c741
 800c718:	2301      	movs	r3, #1
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e0bc      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c720:	2304      	movs	r3, #4
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e0b8      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c728:	2308      	movs	r3, #8
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72e:	e0b4      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c730:	2310      	movs	r3, #16
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c736:	e0b0      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c738:	2320      	movs	r3, #32
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73e:	e0ac      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c740:	2340      	movs	r3, #64	; 0x40
 800c742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c746:	e0a8      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c748:	2380      	movs	r3, #128	; 0x80
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74e:	e0a4      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a8f      	ldr	r2, [pc, #572]	; (800c994 <UART_SetConfig+0x6a0>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d130      	bne.n	800c7bc <UART_SetConfig+0x4c8>
 800c75a:	4b8d      	ldr	r3, [pc, #564]	; (800c990 <UART_SetConfig+0x69c>)
 800c75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c75e:	f003 0307 	and.w	r3, r3, #7
 800c762:	2b05      	cmp	r3, #5
 800c764:	d826      	bhi.n	800c7b4 <UART_SetConfig+0x4c0>
 800c766:	a201      	add	r2, pc, #4	; (adr r2, 800c76c <UART_SetConfig+0x478>)
 800c768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76c:	0800c785 	.word	0x0800c785
 800c770:	0800c78d 	.word	0x0800c78d
 800c774:	0800c795 	.word	0x0800c795
 800c778:	0800c79d 	.word	0x0800c79d
 800c77c:	0800c7a5 	.word	0x0800c7a5
 800c780:	0800c7ad 	.word	0x0800c7ad
 800c784:	2300      	movs	r3, #0
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78a:	e086      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c78c:	2304      	movs	r3, #4
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e082      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c794:	2308      	movs	r3, #8
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79a:	e07e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c79c:	2310      	movs	r3, #16
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a2:	e07a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7a4:	2320      	movs	r3, #32
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7aa:	e076      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7ac:	2340      	movs	r3, #64	; 0x40
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b2:	e072      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7b4:	2380      	movs	r3, #128	; 0x80
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ba:	e06e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a75      	ldr	r2, [pc, #468]	; (800c998 <UART_SetConfig+0x6a4>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d130      	bne.n	800c828 <UART_SetConfig+0x534>
 800c7c6:	4b72      	ldr	r3, [pc, #456]	; (800c990 <UART_SetConfig+0x69c>)
 800c7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	2b05      	cmp	r3, #5
 800c7d0:	d826      	bhi.n	800c820 <UART_SetConfig+0x52c>
 800c7d2:	a201      	add	r2, pc, #4	; (adr r2, 800c7d8 <UART_SetConfig+0x4e4>)
 800c7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d8:	0800c7f1 	.word	0x0800c7f1
 800c7dc:	0800c7f9 	.word	0x0800c7f9
 800c7e0:	0800c801 	.word	0x0800c801
 800c7e4:	0800c809 	.word	0x0800c809
 800c7e8:	0800c811 	.word	0x0800c811
 800c7ec:	0800c819 	.word	0x0800c819
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7f6:	e050      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7f8:	2304      	movs	r3, #4
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fe:	e04c      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c800:	2308      	movs	r3, #8
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c806:	e048      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c808:	2310      	movs	r3, #16
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80e:	e044      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c810:	2320      	movs	r3, #32
 800c812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c816:	e040      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c818:	2340      	movs	r3, #64	; 0x40
 800c81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81e:	e03c      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c820:	2380      	movs	r3, #128	; 0x80
 800c822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c826:	e038      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a5b      	ldr	r2, [pc, #364]	; (800c99c <UART_SetConfig+0x6a8>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d130      	bne.n	800c894 <UART_SetConfig+0x5a0>
 800c832:	4b57      	ldr	r3, [pc, #348]	; (800c990 <UART_SetConfig+0x69c>)
 800c834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	2b05      	cmp	r3, #5
 800c83c:	d826      	bhi.n	800c88c <UART_SetConfig+0x598>
 800c83e:	a201      	add	r2, pc, #4	; (adr r2, 800c844 <UART_SetConfig+0x550>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c85d 	.word	0x0800c85d
 800c848:	0800c865 	.word	0x0800c865
 800c84c:	0800c86d 	.word	0x0800c86d
 800c850:	0800c875 	.word	0x0800c875
 800c854:	0800c87d 	.word	0x0800c87d
 800c858:	0800c885 	.word	0x0800c885
 800c85c:	2302      	movs	r3, #2
 800c85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c862:	e01a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c864:	2304      	movs	r3, #4
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86a:	e016      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c86c:	2308      	movs	r3, #8
 800c86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c872:	e012      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c874:	2310      	movs	r3, #16
 800c876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87a:	e00e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c87c:	2320      	movs	r3, #32
 800c87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c882:	e00a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c884:	2340      	movs	r3, #64	; 0x40
 800c886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88a:	e006      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c88c:	2380      	movs	r3, #128	; 0x80
 800c88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c892:	e002      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c894:	2380      	movs	r3, #128	; 0x80
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a3f      	ldr	r2, [pc, #252]	; (800c99c <UART_SetConfig+0x6a8>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	f040 80f8 	bne.w	800ca96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8aa:	2b20      	cmp	r3, #32
 800c8ac:	dc46      	bgt.n	800c93c <UART_SetConfig+0x648>
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	f2c0 8082 	blt.w	800c9b8 <UART_SetConfig+0x6c4>
 800c8b4:	3b02      	subs	r3, #2
 800c8b6:	2b1e      	cmp	r3, #30
 800c8b8:	d87e      	bhi.n	800c9b8 <UART_SetConfig+0x6c4>
 800c8ba:	a201      	add	r2, pc, #4	; (adr r2, 800c8c0 <UART_SetConfig+0x5cc>)
 800c8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c0:	0800c943 	.word	0x0800c943
 800c8c4:	0800c9b9 	.word	0x0800c9b9
 800c8c8:	0800c94b 	.word	0x0800c94b
 800c8cc:	0800c9b9 	.word	0x0800c9b9
 800c8d0:	0800c9b9 	.word	0x0800c9b9
 800c8d4:	0800c9b9 	.word	0x0800c9b9
 800c8d8:	0800c95b 	.word	0x0800c95b
 800c8dc:	0800c9b9 	.word	0x0800c9b9
 800c8e0:	0800c9b9 	.word	0x0800c9b9
 800c8e4:	0800c9b9 	.word	0x0800c9b9
 800c8e8:	0800c9b9 	.word	0x0800c9b9
 800c8ec:	0800c9b9 	.word	0x0800c9b9
 800c8f0:	0800c9b9 	.word	0x0800c9b9
 800c8f4:	0800c9b9 	.word	0x0800c9b9
 800c8f8:	0800c96b 	.word	0x0800c96b
 800c8fc:	0800c9b9 	.word	0x0800c9b9
 800c900:	0800c9b9 	.word	0x0800c9b9
 800c904:	0800c9b9 	.word	0x0800c9b9
 800c908:	0800c9b9 	.word	0x0800c9b9
 800c90c:	0800c9b9 	.word	0x0800c9b9
 800c910:	0800c9b9 	.word	0x0800c9b9
 800c914:	0800c9b9 	.word	0x0800c9b9
 800c918:	0800c9b9 	.word	0x0800c9b9
 800c91c:	0800c9b9 	.word	0x0800c9b9
 800c920:	0800c9b9 	.word	0x0800c9b9
 800c924:	0800c9b9 	.word	0x0800c9b9
 800c928:	0800c9b9 	.word	0x0800c9b9
 800c92c:	0800c9b9 	.word	0x0800c9b9
 800c930:	0800c9b9 	.word	0x0800c9b9
 800c934:	0800c9b9 	.word	0x0800c9b9
 800c938:	0800c9ab 	.word	0x0800c9ab
 800c93c:	2b40      	cmp	r3, #64	; 0x40
 800c93e:	d037      	beq.n	800c9b0 <UART_SetConfig+0x6bc>
 800c940:	e03a      	b.n	800c9b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c942:	f7fe ffcf 	bl	800b8e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c946:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c948:	e03c      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fe ffde 	bl	800b910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c958:	e034      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c95a:	f107 0318 	add.w	r3, r7, #24
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff f92a 	bl	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c968:	e02c      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c96a:	4b09      	ldr	r3, [pc, #36]	; (800c990 <UART_SetConfig+0x69c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 0320 	and.w	r3, r3, #32
 800c972:	2b00      	cmp	r3, #0
 800c974:	d016      	beq.n	800c9a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <UART_SetConfig+0x69c>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	08db      	lsrs	r3, r3, #3
 800c97c:	f003 0303 	and.w	r3, r3, #3
 800c980:	4a07      	ldr	r2, [pc, #28]	; (800c9a0 <UART_SetConfig+0x6ac>)
 800c982:	fa22 f303 	lsr.w	r3, r2, r3
 800c986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c988:	e01c      	b.n	800c9c4 <UART_SetConfig+0x6d0>
 800c98a:	bf00      	nop
 800c98c:	40011400 	.word	0x40011400
 800c990:	58024400 	.word	0x58024400
 800c994:	40007800 	.word	0x40007800
 800c998:	40007c00 	.word	0x40007c00
 800c99c:	58000c00 	.word	0x58000c00
 800c9a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c9a4:	4b9d      	ldr	r3, [pc, #628]	; (800cc1c <UART_SetConfig+0x928>)
 800c9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a8:	e00c      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9aa:	4b9d      	ldr	r3, [pc, #628]	; (800cc20 <UART_SetConfig+0x92c>)
 800c9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ae:	e009      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b6:	e005      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 81de 	beq.w	800cd88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d0:	4a94      	ldr	r2, [pc, #592]	; (800cc24 <UART_SetConfig+0x930>)
 800c9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9da:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9de:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d305      	bcc.n	800c9fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d903      	bls.n	800ca04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca02:	e1c1      	b.n	800cd88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca06:	2200      	movs	r2, #0
 800ca08:	60bb      	str	r3, [r7, #8]
 800ca0a:	60fa      	str	r2, [r7, #12]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	4a84      	ldr	r2, [pc, #528]	; (800cc24 <UART_SetConfig+0x930>)
 800ca12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	2200      	movs	r2, #0
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	607a      	str	r2, [r7, #4]
 800ca1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca26:	f7f3 ff7d 	bl	8000924 <__aeabi_uldivmod>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4610      	mov	r0, r2
 800ca30:	4619      	mov	r1, r3
 800ca32:	f04f 0200 	mov.w	r2, #0
 800ca36:	f04f 0300 	mov.w	r3, #0
 800ca3a:	020b      	lsls	r3, r1, #8
 800ca3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca40:	0202      	lsls	r2, r0, #8
 800ca42:	6979      	ldr	r1, [r7, #20]
 800ca44:	6849      	ldr	r1, [r1, #4]
 800ca46:	0849      	lsrs	r1, r1, #1
 800ca48:	2000      	movs	r0, #0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	eb12 0804 	adds.w	r8, r2, r4
 800ca52:	eb43 0905 	adc.w	r9, r3, r5
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	469a      	mov	sl, r3
 800ca5e:	4693      	mov	fp, r2
 800ca60:	4652      	mov	r2, sl
 800ca62:	465b      	mov	r3, fp
 800ca64:	4640      	mov	r0, r8
 800ca66:	4649      	mov	r1, r9
 800ca68:	f7f3 ff5c 	bl	8000924 <__aeabi_uldivmod>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4613      	mov	r3, r2
 800ca72:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca7a:	d308      	bcc.n	800ca8e <UART_SetConfig+0x79a>
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca82:	d204      	bcs.n	800ca8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca8a:	60da      	str	r2, [r3, #12]
 800ca8c:	e17c      	b.n	800cd88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca94:	e178      	b.n	800cd88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca9e:	f040 80c5 	bne.w	800cc2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800caa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800caa6:	2b20      	cmp	r3, #32
 800caa8:	dc48      	bgt.n	800cb3c <UART_SetConfig+0x848>
 800caaa:	2b00      	cmp	r3, #0
 800caac:	db7b      	blt.n	800cba6 <UART_SetConfig+0x8b2>
 800caae:	2b20      	cmp	r3, #32
 800cab0:	d879      	bhi.n	800cba6 <UART_SetConfig+0x8b2>
 800cab2:	a201      	add	r2, pc, #4	; (adr r2, 800cab8 <UART_SetConfig+0x7c4>)
 800cab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab8:	0800cb43 	.word	0x0800cb43
 800cabc:	0800cb4b 	.word	0x0800cb4b
 800cac0:	0800cba7 	.word	0x0800cba7
 800cac4:	0800cba7 	.word	0x0800cba7
 800cac8:	0800cb53 	.word	0x0800cb53
 800cacc:	0800cba7 	.word	0x0800cba7
 800cad0:	0800cba7 	.word	0x0800cba7
 800cad4:	0800cba7 	.word	0x0800cba7
 800cad8:	0800cb63 	.word	0x0800cb63
 800cadc:	0800cba7 	.word	0x0800cba7
 800cae0:	0800cba7 	.word	0x0800cba7
 800cae4:	0800cba7 	.word	0x0800cba7
 800cae8:	0800cba7 	.word	0x0800cba7
 800caec:	0800cba7 	.word	0x0800cba7
 800caf0:	0800cba7 	.word	0x0800cba7
 800caf4:	0800cba7 	.word	0x0800cba7
 800caf8:	0800cb73 	.word	0x0800cb73
 800cafc:	0800cba7 	.word	0x0800cba7
 800cb00:	0800cba7 	.word	0x0800cba7
 800cb04:	0800cba7 	.word	0x0800cba7
 800cb08:	0800cba7 	.word	0x0800cba7
 800cb0c:	0800cba7 	.word	0x0800cba7
 800cb10:	0800cba7 	.word	0x0800cba7
 800cb14:	0800cba7 	.word	0x0800cba7
 800cb18:	0800cba7 	.word	0x0800cba7
 800cb1c:	0800cba7 	.word	0x0800cba7
 800cb20:	0800cba7 	.word	0x0800cba7
 800cb24:	0800cba7 	.word	0x0800cba7
 800cb28:	0800cba7 	.word	0x0800cba7
 800cb2c:	0800cba7 	.word	0x0800cba7
 800cb30:	0800cba7 	.word	0x0800cba7
 800cb34:	0800cba7 	.word	0x0800cba7
 800cb38:	0800cb99 	.word	0x0800cb99
 800cb3c:	2b40      	cmp	r3, #64	; 0x40
 800cb3e:	d02e      	beq.n	800cb9e <UART_SetConfig+0x8aa>
 800cb40:	e031      	b.n	800cba6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb42:	f7fd ff5d 	bl	800aa00 <HAL_RCC_GetPCLK1Freq>
 800cb46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb48:	e033      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb4a:	f7fd ff6f 	bl	800aa2c <HAL_RCC_GetPCLK2Freq>
 800cb4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb50:	e02f      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe feda 	bl	800b910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb60:	e027      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb62:	f107 0318 	add.w	r3, r7, #24
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7ff f826 	bl	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb70:	e01f      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb72:	4b2d      	ldr	r3, [pc, #180]	; (800cc28 <UART_SetConfig+0x934>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 0320 	and.w	r3, r3, #32
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d009      	beq.n	800cb92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb7e:	4b2a      	ldr	r3, [pc, #168]	; (800cc28 <UART_SetConfig+0x934>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	08db      	lsrs	r3, r3, #3
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	4a24      	ldr	r2, [pc, #144]	; (800cc1c <UART_SetConfig+0x928>)
 800cb8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb90:	e00f      	b.n	800cbb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cb92:	4b22      	ldr	r3, [pc, #136]	; (800cc1c <UART_SetConfig+0x928>)
 800cb94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb96:	e00c      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb98:	4b21      	ldr	r3, [pc, #132]	; (800cc20 <UART_SetConfig+0x92c>)
 800cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb9c:	e009      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba4:	e005      	b.n	800cbb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 80e7 	beq.w	800cd88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbe:	4a19      	ldr	r2, [pc, #100]	; (800cc24 <UART_SetConfig+0x930>)
 800cbc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbcc:	005a      	lsls	r2, r3, #1
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	085b      	lsrs	r3, r3, #1
 800cbd4:	441a      	add	r2, r3
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbde:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	2b0f      	cmp	r3, #15
 800cbe4:	d916      	bls.n	800cc14 <UART_SetConfig+0x920>
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbec:	d212      	bcs.n	800cc14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	f023 030f 	bic.w	r3, r3, #15
 800cbf6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	085b      	lsrs	r3, r3, #1
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f003 0307 	and.w	r3, r3, #7
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc06:	4313      	orrs	r3, r2
 800cc08:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc10:	60da      	str	r2, [r3, #12]
 800cc12:	e0b9      	b.n	800cd88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc1a:	e0b5      	b.n	800cd88 <UART_SetConfig+0xa94>
 800cc1c:	03d09000 	.word	0x03d09000
 800cc20:	003d0900 	.word	0x003d0900
 800cc24:	08011720 	.word	0x08011720
 800cc28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc30:	2b20      	cmp	r3, #32
 800cc32:	dc49      	bgt.n	800ccc8 <UART_SetConfig+0x9d4>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	db7c      	blt.n	800cd32 <UART_SetConfig+0xa3e>
 800cc38:	2b20      	cmp	r3, #32
 800cc3a:	d87a      	bhi.n	800cd32 <UART_SetConfig+0xa3e>
 800cc3c:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <UART_SetConfig+0x950>)
 800cc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc42:	bf00      	nop
 800cc44:	0800cccf 	.word	0x0800cccf
 800cc48:	0800ccd7 	.word	0x0800ccd7
 800cc4c:	0800cd33 	.word	0x0800cd33
 800cc50:	0800cd33 	.word	0x0800cd33
 800cc54:	0800ccdf 	.word	0x0800ccdf
 800cc58:	0800cd33 	.word	0x0800cd33
 800cc5c:	0800cd33 	.word	0x0800cd33
 800cc60:	0800cd33 	.word	0x0800cd33
 800cc64:	0800ccef 	.word	0x0800ccef
 800cc68:	0800cd33 	.word	0x0800cd33
 800cc6c:	0800cd33 	.word	0x0800cd33
 800cc70:	0800cd33 	.word	0x0800cd33
 800cc74:	0800cd33 	.word	0x0800cd33
 800cc78:	0800cd33 	.word	0x0800cd33
 800cc7c:	0800cd33 	.word	0x0800cd33
 800cc80:	0800cd33 	.word	0x0800cd33
 800cc84:	0800ccff 	.word	0x0800ccff
 800cc88:	0800cd33 	.word	0x0800cd33
 800cc8c:	0800cd33 	.word	0x0800cd33
 800cc90:	0800cd33 	.word	0x0800cd33
 800cc94:	0800cd33 	.word	0x0800cd33
 800cc98:	0800cd33 	.word	0x0800cd33
 800cc9c:	0800cd33 	.word	0x0800cd33
 800cca0:	0800cd33 	.word	0x0800cd33
 800cca4:	0800cd33 	.word	0x0800cd33
 800cca8:	0800cd33 	.word	0x0800cd33
 800ccac:	0800cd33 	.word	0x0800cd33
 800ccb0:	0800cd33 	.word	0x0800cd33
 800ccb4:	0800cd33 	.word	0x0800cd33
 800ccb8:	0800cd33 	.word	0x0800cd33
 800ccbc:	0800cd33 	.word	0x0800cd33
 800ccc0:	0800cd33 	.word	0x0800cd33
 800ccc4:	0800cd25 	.word	0x0800cd25
 800ccc8:	2b40      	cmp	r3, #64	; 0x40
 800ccca:	d02e      	beq.n	800cd2a <UART_SetConfig+0xa36>
 800cccc:	e031      	b.n	800cd32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccce:	f7fd fe97 	bl	800aa00 <HAL_RCC_GetPCLK1Freq>
 800ccd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccd4:	e033      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccd6:	f7fd fea9 	bl	800aa2c <HAL_RCC_GetPCLK2Freq>
 800ccda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccdc:	e02f      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fe fe14 	bl	800b910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccec:	e027      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccee:	f107 0318 	add.w	r3, r7, #24
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fe ff60 	bl	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccfc:	e01f      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccfe:	4b2d      	ldr	r3, [pc, #180]	; (800cdb4 <UART_SetConfig+0xac0>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0320 	and.w	r3, r3, #32
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d009      	beq.n	800cd1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd0a:	4b2a      	ldr	r3, [pc, #168]	; (800cdb4 <UART_SetConfig+0xac0>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	08db      	lsrs	r3, r3, #3
 800cd10:	f003 0303 	and.w	r3, r3, #3
 800cd14:	4a28      	ldr	r2, [pc, #160]	; (800cdb8 <UART_SetConfig+0xac4>)
 800cd16:	fa22 f303 	lsr.w	r3, r2, r3
 800cd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd1c:	e00f      	b.n	800cd3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cd1e:	4b26      	ldr	r3, [pc, #152]	; (800cdb8 <UART_SetConfig+0xac4>)
 800cd20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd22:	e00c      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd24:	4b25      	ldr	r3, [pc, #148]	; (800cdbc <UART_SetConfig+0xac8>)
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd28:	e009      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd30:	e005      	b.n	800cd3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd3c:	bf00      	nop
    }

    if (pclk != 0U)
 800cd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d021      	beq.n	800cd88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd48:	4a1d      	ldr	r2, [pc, #116]	; (800cdc0 <UART_SetConfig+0xacc>)
 800cd4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd52:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	085b      	lsrs	r3, r3, #1
 800cd5c:	441a      	add	r2, r3
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	2b0f      	cmp	r3, #15
 800cd6c:	d909      	bls.n	800cd82 <UART_SetConfig+0xa8e>
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd74:	d205      	bcs.n	800cd82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	60da      	str	r2, [r3, #12]
 800cd80:	e002      	b.n	800cd88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2200      	movs	r2, #0
 800cda2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cda4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3748      	adds	r7, #72	; 0x48
 800cdac:	46bd      	mov	sp, r7
 800cdae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdb2:	bf00      	nop
 800cdb4:	58024400 	.word	0x58024400
 800cdb8:	03d09000 	.word	0x03d09000
 800cdbc:	003d0900 	.word	0x003d0900
 800cdc0:	08011720 	.word	0x08011720

0800cdc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00a      	beq.n	800cdee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	430a      	orrs	r2, r1
 800cdec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00a      	beq.n	800ce10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00a      	beq.n	800ce32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	430a      	orrs	r2, r1
 800ce30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce36:	f003 0308 	and.w	r3, r3, #8
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00a      	beq.n	800ce54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	430a      	orrs	r2, r1
 800ce52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce58:	f003 0310 	and.w	r3, r3, #16
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00a      	beq.n	800ce76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	430a      	orrs	r2, r1
 800ce74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7a:	f003 0320 	and.w	r3, r3, #32
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	430a      	orrs	r2, r1
 800ce96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d01a      	beq.n	800ceda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cec2:	d10a      	bne.n	800ceda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	430a      	orrs	r2, r1
 800ced8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00a      	beq.n	800cefc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	430a      	orrs	r2, r1
 800cefa:	605a      	str	r2, [r3, #4]
  }
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf18:	f7fb fd12 	bl	8008940 <HAL_GetTick>
 800cf1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0308 	and.w	r3, r3, #8
 800cf28:	2b08      	cmp	r3, #8
 800cf2a:	d10e      	bne.n	800cf4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f82f 	bl	800cf9e <UART_WaitOnFlagUntilTimeout>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e025      	b.n	800cf96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f003 0304 	and.w	r3, r3, #4
 800cf54:	2b04      	cmp	r3, #4
 800cf56:	d10e      	bne.n	800cf76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f819 	bl	800cf9e <UART_WaitOnFlagUntilTimeout>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e00f      	b.n	800cf96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2220      	movs	r2, #32
 800cf7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2220      	movs	r2, #32
 800cf82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b09c      	sub	sp, #112	; 0x70
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	60f8      	str	r0, [r7, #12]
 800cfa6:	60b9      	str	r1, [r7, #8]
 800cfa8:	603b      	str	r3, [r7, #0]
 800cfaa:	4613      	mov	r3, r2
 800cfac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfae:	e0a9      	b.n	800d104 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb6:	f000 80a5 	beq.w	800d104 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfba:	f7fb fcc1 	bl	8008940 <HAL_GetTick>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d302      	bcc.n	800cfd0 <UART_WaitOnFlagUntilTimeout+0x32>
 800cfca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d140      	bne.n	800d052 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfd8:	e853 3f00 	ldrex	r3, [r3]
 800cfdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cfe4:	667b      	str	r3, [r7, #100]	; 0x64
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cff0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cff4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cff6:	e841 2300 	strex	r3, r2, [r1]
 800cffa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1e6      	bne.n	800cfd0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	3308      	adds	r3, #8
 800d008:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00c:	e853 3f00 	ldrex	r3, [r3]
 800d010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d014:	f023 0301 	bic.w	r3, r3, #1
 800d018:	663b      	str	r3, [r7, #96]	; 0x60
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	3308      	adds	r3, #8
 800d020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d022:	64ba      	str	r2, [r7, #72]	; 0x48
 800d024:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d02a:	e841 2300 	strex	r3, r2, [r1]
 800d02e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1e5      	bne.n	800d002 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2220      	movs	r2, #32
 800d03a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2220      	movs	r2, #32
 800d042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d04e:	2303      	movs	r3, #3
 800d050:	e069      	b.n	800d126 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f003 0304 	and.w	r3, r3, #4
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d051      	beq.n	800d104 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	69db      	ldr	r3, [r3, #28]
 800d066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d06a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d06e:	d149      	bne.n	800d104 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d078:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	e853 3f00 	ldrex	r3, [r3]
 800d086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d08e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	461a      	mov	r2, r3
 800d096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d098:	637b      	str	r3, [r7, #52]	; 0x34
 800d09a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d09e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0a0:	e841 2300 	strex	r3, r2, [r1]
 800d0a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e6      	bne.n	800d07a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	e853 3f00 	ldrex	r3, [r3]
 800d0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f023 0301 	bic.w	r3, r3, #1
 800d0c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3308      	adds	r3, #8
 800d0ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d0cc:	623a      	str	r2, [r7, #32]
 800d0ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d0:	69f9      	ldr	r1, [r7, #28]
 800d0d2:	6a3a      	ldr	r2, [r7, #32]
 800d0d4:	e841 2300 	strex	r3, r2, [r1]
 800d0d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1e5      	bne.n	800d0ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2220      	movs	r2, #32
 800d0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2220      	movs	r2, #32
 800d0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2220      	movs	r2, #32
 800d0f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d100:	2303      	movs	r3, #3
 800d102:	e010      	b.n	800d126 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	69da      	ldr	r2, [r3, #28]
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	4013      	ands	r3, r2
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	429a      	cmp	r2, r3
 800d112:	bf0c      	ite	eq
 800d114:	2301      	moveq	r3, #1
 800d116:	2300      	movne	r3, #0
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	461a      	mov	r2, r3
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	429a      	cmp	r2, r3
 800d120:	f43f af46 	beq.w	800cfb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3770      	adds	r7, #112	; 0x70
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d12e:	b480      	push	{r7}
 800d130:	b085      	sub	sp, #20
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d101      	bne.n	800d144 <HAL_UARTEx_DisableFifoMode+0x16>
 800d140:	2302      	movs	r3, #2
 800d142:	e027      	b.n	800d194 <HAL_UARTEx_DisableFifoMode+0x66>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2224      	movs	r2, #36	; 0x24
 800d150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f022 0201 	bic.w	r2, r2, #1
 800d16a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d172:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2220      	movs	r2, #32
 800d186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d101      	bne.n	800d1b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	e02d      	b.n	800d214 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2224      	movs	r2, #36	; 0x24
 800d1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f022 0201 	bic.w	r2, r2, #1
 800d1de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	430a      	orrs	r2, r1
 800d1f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f84f 	bl	800d298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2220      	movs	r2, #32
 800d206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d101      	bne.n	800d234 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d230:	2302      	movs	r3, #2
 800d232:	e02d      	b.n	800d290 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2224      	movs	r2, #36	; 0x24
 800d240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f022 0201 	bic.w	r2, r2, #1
 800d25a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	430a      	orrs	r2, r1
 800d26e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f811 	bl	800d298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2220      	movs	r2, #32
 800d282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d108      	bne.n	800d2ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d2b8:	e031      	b.n	800d31e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d2ba:	2310      	movs	r3, #16
 800d2bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d2be:	2310      	movs	r3, #16
 800d2c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	0e5b      	lsrs	r3, r3, #25
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	f003 0307 	and.w	r3, r3, #7
 800d2d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	0f5b      	lsrs	r3, r3, #29
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	f003 0307 	and.w	r3, r3, #7
 800d2e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2e2:	7bbb      	ldrb	r3, [r7, #14]
 800d2e4:	7b3a      	ldrb	r2, [r7, #12]
 800d2e6:	4911      	ldr	r1, [pc, #68]	; (800d32c <UARTEx_SetNbDataToProcess+0x94>)
 800d2e8:	5c8a      	ldrb	r2, [r1, r2]
 800d2ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2ee:	7b3a      	ldrb	r2, [r7, #12]
 800d2f0:	490f      	ldr	r1, [pc, #60]	; (800d330 <UARTEx_SetNbDataToProcess+0x98>)
 800d2f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d300:	7bfb      	ldrb	r3, [r7, #15]
 800d302:	7b7a      	ldrb	r2, [r7, #13]
 800d304:	4909      	ldr	r1, [pc, #36]	; (800d32c <UARTEx_SetNbDataToProcess+0x94>)
 800d306:	5c8a      	ldrb	r2, [r1, r2]
 800d308:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d30c:	7b7a      	ldrb	r2, [r7, #13]
 800d30e:	4908      	ldr	r1, [pc, #32]	; (800d330 <UARTEx_SetNbDataToProcess+0x98>)
 800d310:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d312:	fb93 f3f2 	sdiv	r3, r3, r2
 800d316:	b29a      	uxth	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d31e:	bf00      	nop
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	08011738 	.word	0x08011738
 800d330:	08011740 	.word	0x08011740

0800d334 <__errno>:
 800d334:	4b01      	ldr	r3, [pc, #4]	; (800d33c <__errno+0x8>)
 800d336:	6818      	ldr	r0, [r3, #0]
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	24000034 	.word	0x24000034

0800d340 <__libc_init_array>:
 800d340:	b570      	push	{r4, r5, r6, lr}
 800d342:	4d0d      	ldr	r5, [pc, #52]	; (800d378 <__libc_init_array+0x38>)
 800d344:	4c0d      	ldr	r4, [pc, #52]	; (800d37c <__libc_init_array+0x3c>)
 800d346:	1b64      	subs	r4, r4, r5
 800d348:	10a4      	asrs	r4, r4, #2
 800d34a:	2600      	movs	r6, #0
 800d34c:	42a6      	cmp	r6, r4
 800d34e:	d109      	bne.n	800d364 <__libc_init_array+0x24>
 800d350:	4d0b      	ldr	r5, [pc, #44]	; (800d380 <__libc_init_array+0x40>)
 800d352:	4c0c      	ldr	r4, [pc, #48]	; (800d384 <__libc_init_array+0x44>)
 800d354:	f004 f9ac 	bl	80116b0 <_init>
 800d358:	1b64      	subs	r4, r4, r5
 800d35a:	10a4      	asrs	r4, r4, #2
 800d35c:	2600      	movs	r6, #0
 800d35e:	42a6      	cmp	r6, r4
 800d360:	d105      	bne.n	800d36e <__libc_init_array+0x2e>
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	f855 3b04 	ldr.w	r3, [r5], #4
 800d368:	4798      	blx	r3
 800d36a:	3601      	adds	r6, #1
 800d36c:	e7ee      	b.n	800d34c <__libc_init_array+0xc>
 800d36e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d372:	4798      	blx	r3
 800d374:	3601      	adds	r6, #1
 800d376:	e7f2      	b.n	800d35e <__libc_init_array+0x1e>
 800d378:	080120e8 	.word	0x080120e8
 800d37c:	080120e8 	.word	0x080120e8
 800d380:	080120e8 	.word	0x080120e8
 800d384:	080120ec 	.word	0x080120ec

0800d388 <memcpy>:
 800d388:	440a      	add	r2, r1
 800d38a:	4291      	cmp	r1, r2
 800d38c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d390:	d100      	bne.n	800d394 <memcpy+0xc>
 800d392:	4770      	bx	lr
 800d394:	b510      	push	{r4, lr}
 800d396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d39a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d39e:	4291      	cmp	r1, r2
 800d3a0:	d1f9      	bne.n	800d396 <memcpy+0xe>
 800d3a2:	bd10      	pop	{r4, pc}

0800d3a4 <memset>:
 800d3a4:	4402      	add	r2, r0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d100      	bne.n	800d3ae <memset+0xa>
 800d3ac:	4770      	bx	lr
 800d3ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d3b2:	e7f9      	b.n	800d3a8 <memset+0x4>

0800d3b4 <__cvt>:
 800d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b6:	ed2d 8b02 	vpush	{d8}
 800d3ba:	eeb0 8b40 	vmov.f64	d8, d0
 800d3be:	b085      	sub	sp, #20
 800d3c0:	4617      	mov	r7, r2
 800d3c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d3c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d3c6:	ee18 2a90 	vmov	r2, s17
 800d3ca:	f025 0520 	bic.w	r5, r5, #32
 800d3ce:	2a00      	cmp	r2, #0
 800d3d0:	bfb6      	itet	lt
 800d3d2:	222d      	movlt	r2, #45	; 0x2d
 800d3d4:	2200      	movge	r2, #0
 800d3d6:	eeb1 8b40 	vneglt.f64	d8, d0
 800d3da:	2d46      	cmp	r5, #70	; 0x46
 800d3dc:	460c      	mov	r4, r1
 800d3de:	701a      	strb	r2, [r3, #0]
 800d3e0:	d004      	beq.n	800d3ec <__cvt+0x38>
 800d3e2:	2d45      	cmp	r5, #69	; 0x45
 800d3e4:	d100      	bne.n	800d3e8 <__cvt+0x34>
 800d3e6:	3401      	adds	r4, #1
 800d3e8:	2102      	movs	r1, #2
 800d3ea:	e000      	b.n	800d3ee <__cvt+0x3a>
 800d3ec:	2103      	movs	r1, #3
 800d3ee:	ab03      	add	r3, sp, #12
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	ab02      	add	r3, sp, #8
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	4633      	mov	r3, r6
 800d3fa:	eeb0 0b48 	vmov.f64	d0, d8
 800d3fe:	f000 fcc3 	bl	800dd88 <_dtoa_r>
 800d402:	2d47      	cmp	r5, #71	; 0x47
 800d404:	d101      	bne.n	800d40a <__cvt+0x56>
 800d406:	07fb      	lsls	r3, r7, #31
 800d408:	d51a      	bpl.n	800d440 <__cvt+0x8c>
 800d40a:	2d46      	cmp	r5, #70	; 0x46
 800d40c:	eb00 0204 	add.w	r2, r0, r4
 800d410:	d10c      	bne.n	800d42c <__cvt+0x78>
 800d412:	7803      	ldrb	r3, [r0, #0]
 800d414:	2b30      	cmp	r3, #48	; 0x30
 800d416:	d107      	bne.n	800d428 <__cvt+0x74>
 800d418:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d420:	bf1c      	itt	ne
 800d422:	f1c4 0401 	rsbne	r4, r4, #1
 800d426:	6034      	strne	r4, [r6, #0]
 800d428:	6833      	ldr	r3, [r6, #0]
 800d42a:	441a      	add	r2, r3
 800d42c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d434:	bf08      	it	eq
 800d436:	9203      	streq	r2, [sp, #12]
 800d438:	2130      	movs	r1, #48	; 0x30
 800d43a:	9b03      	ldr	r3, [sp, #12]
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d307      	bcc.n	800d450 <__cvt+0x9c>
 800d440:	9b03      	ldr	r3, [sp, #12]
 800d442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d444:	1a1b      	subs	r3, r3, r0
 800d446:	6013      	str	r3, [r2, #0]
 800d448:	b005      	add	sp, #20
 800d44a:	ecbd 8b02 	vpop	{d8}
 800d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d450:	1c5c      	adds	r4, r3, #1
 800d452:	9403      	str	r4, [sp, #12]
 800d454:	7019      	strb	r1, [r3, #0]
 800d456:	e7f0      	b.n	800d43a <__cvt+0x86>

0800d458 <__exponent>:
 800d458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d45a:	4603      	mov	r3, r0
 800d45c:	2900      	cmp	r1, #0
 800d45e:	bfb8      	it	lt
 800d460:	4249      	neglt	r1, r1
 800d462:	f803 2b02 	strb.w	r2, [r3], #2
 800d466:	bfb4      	ite	lt
 800d468:	222d      	movlt	r2, #45	; 0x2d
 800d46a:	222b      	movge	r2, #43	; 0x2b
 800d46c:	2909      	cmp	r1, #9
 800d46e:	7042      	strb	r2, [r0, #1]
 800d470:	dd2a      	ble.n	800d4c8 <__exponent+0x70>
 800d472:	f10d 0407 	add.w	r4, sp, #7
 800d476:	46a4      	mov	ip, r4
 800d478:	270a      	movs	r7, #10
 800d47a:	46a6      	mov	lr, r4
 800d47c:	460a      	mov	r2, r1
 800d47e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d482:	fb07 1516 	mls	r5, r7, r6, r1
 800d486:	3530      	adds	r5, #48	; 0x30
 800d488:	2a63      	cmp	r2, #99	; 0x63
 800d48a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d48e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d492:	4631      	mov	r1, r6
 800d494:	dcf1      	bgt.n	800d47a <__exponent+0x22>
 800d496:	3130      	adds	r1, #48	; 0x30
 800d498:	f1ae 0502 	sub.w	r5, lr, #2
 800d49c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d4a0:	1c44      	adds	r4, r0, #1
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	4561      	cmp	r1, ip
 800d4a6:	d30a      	bcc.n	800d4be <__exponent+0x66>
 800d4a8:	f10d 0209 	add.w	r2, sp, #9
 800d4ac:	eba2 020e 	sub.w	r2, r2, lr
 800d4b0:	4565      	cmp	r5, ip
 800d4b2:	bf88      	it	hi
 800d4b4:	2200      	movhi	r2, #0
 800d4b6:	4413      	add	r3, r2
 800d4b8:	1a18      	subs	r0, r3, r0
 800d4ba:	b003      	add	sp, #12
 800d4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d4c6:	e7ed      	b.n	800d4a4 <__exponent+0x4c>
 800d4c8:	2330      	movs	r3, #48	; 0x30
 800d4ca:	3130      	adds	r1, #48	; 0x30
 800d4cc:	7083      	strb	r3, [r0, #2]
 800d4ce:	70c1      	strb	r1, [r0, #3]
 800d4d0:	1d03      	adds	r3, r0, #4
 800d4d2:	e7f1      	b.n	800d4b8 <__exponent+0x60>
 800d4d4:	0000      	movs	r0, r0
	...

0800d4d8 <_printf_float>:
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	b08b      	sub	sp, #44	; 0x2c
 800d4de:	460c      	mov	r4, r1
 800d4e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d4e4:	4616      	mov	r6, r2
 800d4e6:	461f      	mov	r7, r3
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	f001 fab1 	bl	800ea50 <_localeconv_r>
 800d4ee:	f8d0 b000 	ldr.w	fp, [r0]
 800d4f2:	4658      	mov	r0, fp
 800d4f4:	f7f2 fef4 	bl	80002e0 <strlen>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	9308      	str	r3, [sp, #32]
 800d4fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d500:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d504:	6822      	ldr	r2, [r4, #0]
 800d506:	3307      	adds	r3, #7
 800d508:	f023 0307 	bic.w	r3, r3, #7
 800d50c:	f103 0108 	add.w	r1, r3, #8
 800d510:	f8c8 1000 	str.w	r1, [r8]
 800d514:	4682      	mov	sl, r0
 800d516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d51a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d51e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d780 <_printf_float+0x2a8>
 800d522:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d526:	eeb0 6bc0 	vabs.f64	d6, d0
 800d52a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d532:	dd24      	ble.n	800d57e <_printf_float+0xa6>
 800d534:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53c:	d502      	bpl.n	800d544 <_printf_float+0x6c>
 800d53e:	232d      	movs	r3, #45	; 0x2d
 800d540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d544:	4b90      	ldr	r3, [pc, #576]	; (800d788 <_printf_float+0x2b0>)
 800d546:	4891      	ldr	r0, [pc, #580]	; (800d78c <_printf_float+0x2b4>)
 800d548:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d54c:	bf94      	ite	ls
 800d54e:	4698      	movls	r8, r3
 800d550:	4680      	movhi	r8, r0
 800d552:	2303      	movs	r3, #3
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	f022 0204 	bic.w	r2, r2, #4
 800d55a:	2300      	movs	r3, #0
 800d55c:	6022      	str	r2, [r4, #0]
 800d55e:	9304      	str	r3, [sp, #16]
 800d560:	9700      	str	r7, [sp, #0]
 800d562:	4633      	mov	r3, r6
 800d564:	aa09      	add	r2, sp, #36	; 0x24
 800d566:	4621      	mov	r1, r4
 800d568:	4628      	mov	r0, r5
 800d56a:	f000 f9d3 	bl	800d914 <_printf_common>
 800d56e:	3001      	adds	r0, #1
 800d570:	f040 808a 	bne.w	800d688 <_printf_float+0x1b0>
 800d574:	f04f 30ff 	mov.w	r0, #4294967295
 800d578:	b00b      	add	sp, #44	; 0x2c
 800d57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d586:	d709      	bvc.n	800d59c <_printf_float+0xc4>
 800d588:	ee10 3a90 	vmov	r3, s1
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	bfbc      	itt	lt
 800d590:	232d      	movlt	r3, #45	; 0x2d
 800d592:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d596:	487e      	ldr	r0, [pc, #504]	; (800d790 <_printf_float+0x2b8>)
 800d598:	4b7e      	ldr	r3, [pc, #504]	; (800d794 <_printf_float+0x2bc>)
 800d59a:	e7d5      	b.n	800d548 <_printf_float+0x70>
 800d59c:	6863      	ldr	r3, [r4, #4]
 800d59e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d5a2:	9104      	str	r1, [sp, #16]
 800d5a4:	1c59      	adds	r1, r3, #1
 800d5a6:	d13c      	bne.n	800d622 <_printf_float+0x14a>
 800d5a8:	2306      	movs	r3, #6
 800d5aa:	6063      	str	r3, [r4, #4]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9303      	str	r3, [sp, #12]
 800d5b0:	ab08      	add	r3, sp, #32
 800d5b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d5b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d5ba:	ab07      	add	r3, sp, #28
 800d5bc:	6861      	ldr	r1, [r4, #4]
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	6022      	str	r2, [r4, #0]
 800d5c2:	f10d 031b 	add.w	r3, sp, #27
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f7ff fef4 	bl	800d3b4 <__cvt>
 800d5cc:	9b04      	ldr	r3, [sp, #16]
 800d5ce:	9907      	ldr	r1, [sp, #28]
 800d5d0:	2b47      	cmp	r3, #71	; 0x47
 800d5d2:	4680      	mov	r8, r0
 800d5d4:	d108      	bne.n	800d5e8 <_printf_float+0x110>
 800d5d6:	1cc8      	adds	r0, r1, #3
 800d5d8:	db02      	blt.n	800d5e0 <_printf_float+0x108>
 800d5da:	6863      	ldr	r3, [r4, #4]
 800d5dc:	4299      	cmp	r1, r3
 800d5de:	dd41      	ble.n	800d664 <_printf_float+0x18c>
 800d5e0:	f1a9 0902 	sub.w	r9, r9, #2
 800d5e4:	fa5f f989 	uxtb.w	r9, r9
 800d5e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d5ec:	d820      	bhi.n	800d630 <_printf_float+0x158>
 800d5ee:	3901      	subs	r1, #1
 800d5f0:	464a      	mov	r2, r9
 800d5f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d5f6:	9107      	str	r1, [sp, #28]
 800d5f8:	f7ff ff2e 	bl	800d458 <__exponent>
 800d5fc:	9a08      	ldr	r2, [sp, #32]
 800d5fe:	9004      	str	r0, [sp, #16]
 800d600:	1813      	adds	r3, r2, r0
 800d602:	2a01      	cmp	r2, #1
 800d604:	6123      	str	r3, [r4, #16]
 800d606:	dc02      	bgt.n	800d60e <_printf_float+0x136>
 800d608:	6822      	ldr	r2, [r4, #0]
 800d60a:	07d2      	lsls	r2, r2, #31
 800d60c:	d501      	bpl.n	800d612 <_printf_float+0x13a>
 800d60e:	3301      	adds	r3, #1
 800d610:	6123      	str	r3, [r4, #16]
 800d612:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0a2      	beq.n	800d560 <_printf_float+0x88>
 800d61a:	232d      	movs	r3, #45	; 0x2d
 800d61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d620:	e79e      	b.n	800d560 <_printf_float+0x88>
 800d622:	9904      	ldr	r1, [sp, #16]
 800d624:	2947      	cmp	r1, #71	; 0x47
 800d626:	d1c1      	bne.n	800d5ac <_printf_float+0xd4>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1bf      	bne.n	800d5ac <_printf_float+0xd4>
 800d62c:	2301      	movs	r3, #1
 800d62e:	e7bc      	b.n	800d5aa <_printf_float+0xd2>
 800d630:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d634:	d118      	bne.n	800d668 <_printf_float+0x190>
 800d636:	2900      	cmp	r1, #0
 800d638:	6863      	ldr	r3, [r4, #4]
 800d63a:	dd0b      	ble.n	800d654 <_printf_float+0x17c>
 800d63c:	6121      	str	r1, [r4, #16]
 800d63e:	b913      	cbnz	r3, 800d646 <_printf_float+0x16e>
 800d640:	6822      	ldr	r2, [r4, #0]
 800d642:	07d0      	lsls	r0, r2, #31
 800d644:	d502      	bpl.n	800d64c <_printf_float+0x174>
 800d646:	3301      	adds	r3, #1
 800d648:	440b      	add	r3, r1
 800d64a:	6123      	str	r3, [r4, #16]
 800d64c:	2300      	movs	r3, #0
 800d64e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d650:	9304      	str	r3, [sp, #16]
 800d652:	e7de      	b.n	800d612 <_printf_float+0x13a>
 800d654:	b913      	cbnz	r3, 800d65c <_printf_float+0x184>
 800d656:	6822      	ldr	r2, [r4, #0]
 800d658:	07d2      	lsls	r2, r2, #31
 800d65a:	d501      	bpl.n	800d660 <_printf_float+0x188>
 800d65c:	3302      	adds	r3, #2
 800d65e:	e7f4      	b.n	800d64a <_printf_float+0x172>
 800d660:	2301      	movs	r3, #1
 800d662:	e7f2      	b.n	800d64a <_printf_float+0x172>
 800d664:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d668:	9b08      	ldr	r3, [sp, #32]
 800d66a:	4299      	cmp	r1, r3
 800d66c:	db05      	blt.n	800d67a <_printf_float+0x1a2>
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	6121      	str	r1, [r4, #16]
 800d672:	07d8      	lsls	r0, r3, #31
 800d674:	d5ea      	bpl.n	800d64c <_printf_float+0x174>
 800d676:	1c4b      	adds	r3, r1, #1
 800d678:	e7e7      	b.n	800d64a <_printf_float+0x172>
 800d67a:	2900      	cmp	r1, #0
 800d67c:	bfd4      	ite	le
 800d67e:	f1c1 0202 	rsble	r2, r1, #2
 800d682:	2201      	movgt	r2, #1
 800d684:	4413      	add	r3, r2
 800d686:	e7e0      	b.n	800d64a <_printf_float+0x172>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	055a      	lsls	r2, r3, #21
 800d68c:	d407      	bmi.n	800d69e <_printf_float+0x1c6>
 800d68e:	6923      	ldr	r3, [r4, #16]
 800d690:	4642      	mov	r2, r8
 800d692:	4631      	mov	r1, r6
 800d694:	4628      	mov	r0, r5
 800d696:	47b8      	blx	r7
 800d698:	3001      	adds	r0, #1
 800d69a:	d12a      	bne.n	800d6f2 <_printf_float+0x21a>
 800d69c:	e76a      	b.n	800d574 <_printf_float+0x9c>
 800d69e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d6a2:	f240 80e2 	bls.w	800d86a <_printf_float+0x392>
 800d6a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d6aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b2:	d133      	bne.n	800d71c <_printf_float+0x244>
 800d6b4:	4a38      	ldr	r2, [pc, #224]	; (800d798 <_printf_float+0x2c0>)
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	4631      	mov	r1, r6
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	47b8      	blx	r7
 800d6be:	3001      	adds	r0, #1
 800d6c0:	f43f af58 	beq.w	800d574 <_printf_float+0x9c>
 800d6c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	db02      	blt.n	800d6d2 <_printf_float+0x1fa>
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	07d8      	lsls	r0, r3, #31
 800d6d0:	d50f      	bpl.n	800d6f2 <_printf_float+0x21a>
 800d6d2:	4653      	mov	r3, sl
 800d6d4:	465a      	mov	r2, fp
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4628      	mov	r0, r5
 800d6da:	47b8      	blx	r7
 800d6dc:	3001      	adds	r0, #1
 800d6de:	f43f af49 	beq.w	800d574 <_printf_float+0x9c>
 800d6e2:	f04f 0800 	mov.w	r8, #0
 800d6e6:	f104 091a 	add.w	r9, r4, #26
 800d6ea:	9b08      	ldr	r3, [sp, #32]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	4543      	cmp	r3, r8
 800d6f0:	dc09      	bgt.n	800d706 <_printf_float+0x22e>
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	079b      	lsls	r3, r3, #30
 800d6f6:	f100 8108 	bmi.w	800d90a <_printf_float+0x432>
 800d6fa:	68e0      	ldr	r0, [r4, #12]
 800d6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6fe:	4298      	cmp	r0, r3
 800d700:	bfb8      	it	lt
 800d702:	4618      	movlt	r0, r3
 800d704:	e738      	b.n	800d578 <_printf_float+0xa0>
 800d706:	2301      	movs	r3, #1
 800d708:	464a      	mov	r2, r9
 800d70a:	4631      	mov	r1, r6
 800d70c:	4628      	mov	r0, r5
 800d70e:	47b8      	blx	r7
 800d710:	3001      	adds	r0, #1
 800d712:	f43f af2f 	beq.w	800d574 <_printf_float+0x9c>
 800d716:	f108 0801 	add.w	r8, r8, #1
 800d71a:	e7e6      	b.n	800d6ea <_printf_float+0x212>
 800d71c:	9b07      	ldr	r3, [sp, #28]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	dc3c      	bgt.n	800d79c <_printf_float+0x2c4>
 800d722:	4a1d      	ldr	r2, [pc, #116]	; (800d798 <_printf_float+0x2c0>)
 800d724:	2301      	movs	r3, #1
 800d726:	4631      	mov	r1, r6
 800d728:	4628      	mov	r0, r5
 800d72a:	47b8      	blx	r7
 800d72c:	3001      	adds	r0, #1
 800d72e:	f43f af21 	beq.w	800d574 <_printf_float+0x9c>
 800d732:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d736:	4313      	orrs	r3, r2
 800d738:	d102      	bne.n	800d740 <_printf_float+0x268>
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	07d9      	lsls	r1, r3, #31
 800d73e:	d5d8      	bpl.n	800d6f2 <_printf_float+0x21a>
 800d740:	4653      	mov	r3, sl
 800d742:	465a      	mov	r2, fp
 800d744:	4631      	mov	r1, r6
 800d746:	4628      	mov	r0, r5
 800d748:	47b8      	blx	r7
 800d74a:	3001      	adds	r0, #1
 800d74c:	f43f af12 	beq.w	800d574 <_printf_float+0x9c>
 800d750:	f04f 0900 	mov.w	r9, #0
 800d754:	f104 0a1a 	add.w	sl, r4, #26
 800d758:	9b07      	ldr	r3, [sp, #28]
 800d75a:	425b      	negs	r3, r3
 800d75c:	454b      	cmp	r3, r9
 800d75e:	dc01      	bgt.n	800d764 <_printf_float+0x28c>
 800d760:	9b08      	ldr	r3, [sp, #32]
 800d762:	e795      	b.n	800d690 <_printf_float+0x1b8>
 800d764:	2301      	movs	r3, #1
 800d766:	4652      	mov	r2, sl
 800d768:	4631      	mov	r1, r6
 800d76a:	4628      	mov	r0, r5
 800d76c:	47b8      	blx	r7
 800d76e:	3001      	adds	r0, #1
 800d770:	f43f af00 	beq.w	800d574 <_printf_float+0x9c>
 800d774:	f109 0901 	add.w	r9, r9, #1
 800d778:	e7ee      	b.n	800d758 <_printf_float+0x280>
 800d77a:	bf00      	nop
 800d77c:	f3af 8000 	nop.w
 800d780:	ffffffff 	.word	0xffffffff
 800d784:	7fefffff 	.word	0x7fefffff
 800d788:	0801174c 	.word	0x0801174c
 800d78c:	08011750 	.word	0x08011750
 800d790:	08011758 	.word	0x08011758
 800d794:	08011754 	.word	0x08011754
 800d798:	0801175c 	.word	0x0801175c
 800d79c:	9a08      	ldr	r2, [sp, #32]
 800d79e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	bfa8      	it	ge
 800d7a4:	461a      	movge	r2, r3
 800d7a6:	2a00      	cmp	r2, #0
 800d7a8:	4691      	mov	r9, r2
 800d7aa:	dc38      	bgt.n	800d81e <_printf_float+0x346>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	9305      	str	r3, [sp, #20]
 800d7b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7b4:	f104 021a 	add.w	r2, r4, #26
 800d7b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7ba:	9905      	ldr	r1, [sp, #20]
 800d7bc:	9304      	str	r3, [sp, #16]
 800d7be:	eba3 0309 	sub.w	r3, r3, r9
 800d7c2:	428b      	cmp	r3, r1
 800d7c4:	dc33      	bgt.n	800d82e <_printf_float+0x356>
 800d7c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	db3c      	blt.n	800d848 <_printf_float+0x370>
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	07da      	lsls	r2, r3, #31
 800d7d2:	d439      	bmi.n	800d848 <_printf_float+0x370>
 800d7d4:	9b08      	ldr	r3, [sp, #32]
 800d7d6:	9a04      	ldr	r2, [sp, #16]
 800d7d8:	9907      	ldr	r1, [sp, #28]
 800d7da:	1a9a      	subs	r2, r3, r2
 800d7dc:	eba3 0901 	sub.w	r9, r3, r1
 800d7e0:	4591      	cmp	r9, r2
 800d7e2:	bfa8      	it	ge
 800d7e4:	4691      	movge	r9, r2
 800d7e6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ea:	dc35      	bgt.n	800d858 <_printf_float+0x380>
 800d7ec:	f04f 0800 	mov.w	r8, #0
 800d7f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7f4:	f104 0a1a 	add.w	sl, r4, #26
 800d7f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	eba3 0309 	sub.w	r3, r3, r9
 800d802:	4543      	cmp	r3, r8
 800d804:	f77f af75 	ble.w	800d6f2 <_printf_float+0x21a>
 800d808:	2301      	movs	r3, #1
 800d80a:	4652      	mov	r2, sl
 800d80c:	4631      	mov	r1, r6
 800d80e:	4628      	mov	r0, r5
 800d810:	47b8      	blx	r7
 800d812:	3001      	adds	r0, #1
 800d814:	f43f aeae 	beq.w	800d574 <_printf_float+0x9c>
 800d818:	f108 0801 	add.w	r8, r8, #1
 800d81c:	e7ec      	b.n	800d7f8 <_printf_float+0x320>
 800d81e:	4613      	mov	r3, r2
 800d820:	4631      	mov	r1, r6
 800d822:	4642      	mov	r2, r8
 800d824:	4628      	mov	r0, r5
 800d826:	47b8      	blx	r7
 800d828:	3001      	adds	r0, #1
 800d82a:	d1bf      	bne.n	800d7ac <_printf_float+0x2d4>
 800d82c:	e6a2      	b.n	800d574 <_printf_float+0x9c>
 800d82e:	2301      	movs	r3, #1
 800d830:	4631      	mov	r1, r6
 800d832:	4628      	mov	r0, r5
 800d834:	9204      	str	r2, [sp, #16]
 800d836:	47b8      	blx	r7
 800d838:	3001      	adds	r0, #1
 800d83a:	f43f ae9b 	beq.w	800d574 <_printf_float+0x9c>
 800d83e:	9b05      	ldr	r3, [sp, #20]
 800d840:	9a04      	ldr	r2, [sp, #16]
 800d842:	3301      	adds	r3, #1
 800d844:	9305      	str	r3, [sp, #20]
 800d846:	e7b7      	b.n	800d7b8 <_printf_float+0x2e0>
 800d848:	4653      	mov	r3, sl
 800d84a:	465a      	mov	r2, fp
 800d84c:	4631      	mov	r1, r6
 800d84e:	4628      	mov	r0, r5
 800d850:	47b8      	blx	r7
 800d852:	3001      	adds	r0, #1
 800d854:	d1be      	bne.n	800d7d4 <_printf_float+0x2fc>
 800d856:	e68d      	b.n	800d574 <_printf_float+0x9c>
 800d858:	9a04      	ldr	r2, [sp, #16]
 800d85a:	464b      	mov	r3, r9
 800d85c:	4442      	add	r2, r8
 800d85e:	4631      	mov	r1, r6
 800d860:	4628      	mov	r0, r5
 800d862:	47b8      	blx	r7
 800d864:	3001      	adds	r0, #1
 800d866:	d1c1      	bne.n	800d7ec <_printf_float+0x314>
 800d868:	e684      	b.n	800d574 <_printf_float+0x9c>
 800d86a:	9a08      	ldr	r2, [sp, #32]
 800d86c:	2a01      	cmp	r2, #1
 800d86e:	dc01      	bgt.n	800d874 <_printf_float+0x39c>
 800d870:	07db      	lsls	r3, r3, #31
 800d872:	d537      	bpl.n	800d8e4 <_printf_float+0x40c>
 800d874:	2301      	movs	r3, #1
 800d876:	4642      	mov	r2, r8
 800d878:	4631      	mov	r1, r6
 800d87a:	4628      	mov	r0, r5
 800d87c:	47b8      	blx	r7
 800d87e:	3001      	adds	r0, #1
 800d880:	f43f ae78 	beq.w	800d574 <_printf_float+0x9c>
 800d884:	4653      	mov	r3, sl
 800d886:	465a      	mov	r2, fp
 800d888:	4631      	mov	r1, r6
 800d88a:	4628      	mov	r0, r5
 800d88c:	47b8      	blx	r7
 800d88e:	3001      	adds	r0, #1
 800d890:	f43f ae70 	beq.w	800d574 <_printf_float+0x9c>
 800d894:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d898:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a0:	d01b      	beq.n	800d8da <_printf_float+0x402>
 800d8a2:	9b08      	ldr	r3, [sp, #32]
 800d8a4:	f108 0201 	add.w	r2, r8, #1
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	4631      	mov	r1, r6
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	47b8      	blx	r7
 800d8b0:	3001      	adds	r0, #1
 800d8b2:	d10e      	bne.n	800d8d2 <_printf_float+0x3fa>
 800d8b4:	e65e      	b.n	800d574 <_printf_float+0x9c>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	464a      	mov	r2, r9
 800d8ba:	4631      	mov	r1, r6
 800d8bc:	4628      	mov	r0, r5
 800d8be:	47b8      	blx	r7
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	f43f ae57 	beq.w	800d574 <_printf_float+0x9c>
 800d8c6:	f108 0801 	add.w	r8, r8, #1
 800d8ca:	9b08      	ldr	r3, [sp, #32]
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	4543      	cmp	r3, r8
 800d8d0:	dcf1      	bgt.n	800d8b6 <_printf_float+0x3de>
 800d8d2:	9b04      	ldr	r3, [sp, #16]
 800d8d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d8d8:	e6db      	b.n	800d692 <_printf_float+0x1ba>
 800d8da:	f04f 0800 	mov.w	r8, #0
 800d8de:	f104 091a 	add.w	r9, r4, #26
 800d8e2:	e7f2      	b.n	800d8ca <_printf_float+0x3f2>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	4642      	mov	r2, r8
 800d8e8:	e7df      	b.n	800d8aa <_printf_float+0x3d2>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	464a      	mov	r2, r9
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	47b8      	blx	r7
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	f43f ae3d 	beq.w	800d574 <_printf_float+0x9c>
 800d8fa:	f108 0801 	add.w	r8, r8, #1
 800d8fe:	68e3      	ldr	r3, [r4, #12]
 800d900:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d902:	1a5b      	subs	r3, r3, r1
 800d904:	4543      	cmp	r3, r8
 800d906:	dcf0      	bgt.n	800d8ea <_printf_float+0x412>
 800d908:	e6f7      	b.n	800d6fa <_printf_float+0x222>
 800d90a:	f04f 0800 	mov.w	r8, #0
 800d90e:	f104 0919 	add.w	r9, r4, #25
 800d912:	e7f4      	b.n	800d8fe <_printf_float+0x426>

0800d914 <_printf_common>:
 800d914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d918:	4616      	mov	r6, r2
 800d91a:	4699      	mov	r9, r3
 800d91c:	688a      	ldr	r2, [r1, #8]
 800d91e:	690b      	ldr	r3, [r1, #16]
 800d920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d924:	4293      	cmp	r3, r2
 800d926:	bfb8      	it	lt
 800d928:	4613      	movlt	r3, r2
 800d92a:	6033      	str	r3, [r6, #0]
 800d92c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d930:	4607      	mov	r7, r0
 800d932:	460c      	mov	r4, r1
 800d934:	b10a      	cbz	r2, 800d93a <_printf_common+0x26>
 800d936:	3301      	adds	r3, #1
 800d938:	6033      	str	r3, [r6, #0]
 800d93a:	6823      	ldr	r3, [r4, #0]
 800d93c:	0699      	lsls	r1, r3, #26
 800d93e:	bf42      	ittt	mi
 800d940:	6833      	ldrmi	r3, [r6, #0]
 800d942:	3302      	addmi	r3, #2
 800d944:	6033      	strmi	r3, [r6, #0]
 800d946:	6825      	ldr	r5, [r4, #0]
 800d948:	f015 0506 	ands.w	r5, r5, #6
 800d94c:	d106      	bne.n	800d95c <_printf_common+0x48>
 800d94e:	f104 0a19 	add.w	sl, r4, #25
 800d952:	68e3      	ldr	r3, [r4, #12]
 800d954:	6832      	ldr	r2, [r6, #0]
 800d956:	1a9b      	subs	r3, r3, r2
 800d958:	42ab      	cmp	r3, r5
 800d95a:	dc26      	bgt.n	800d9aa <_printf_common+0x96>
 800d95c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d960:	1e13      	subs	r3, r2, #0
 800d962:	6822      	ldr	r2, [r4, #0]
 800d964:	bf18      	it	ne
 800d966:	2301      	movne	r3, #1
 800d968:	0692      	lsls	r2, r2, #26
 800d96a:	d42b      	bmi.n	800d9c4 <_printf_common+0xb0>
 800d96c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d970:	4649      	mov	r1, r9
 800d972:	4638      	mov	r0, r7
 800d974:	47c0      	blx	r8
 800d976:	3001      	adds	r0, #1
 800d978:	d01e      	beq.n	800d9b8 <_printf_common+0xa4>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	68e5      	ldr	r5, [r4, #12]
 800d97e:	6832      	ldr	r2, [r6, #0]
 800d980:	f003 0306 	and.w	r3, r3, #6
 800d984:	2b04      	cmp	r3, #4
 800d986:	bf08      	it	eq
 800d988:	1aad      	subeq	r5, r5, r2
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	6922      	ldr	r2, [r4, #16]
 800d98e:	bf0c      	ite	eq
 800d990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d994:	2500      	movne	r5, #0
 800d996:	4293      	cmp	r3, r2
 800d998:	bfc4      	itt	gt
 800d99a:	1a9b      	subgt	r3, r3, r2
 800d99c:	18ed      	addgt	r5, r5, r3
 800d99e:	2600      	movs	r6, #0
 800d9a0:	341a      	adds	r4, #26
 800d9a2:	42b5      	cmp	r5, r6
 800d9a4:	d11a      	bne.n	800d9dc <_printf_common+0xc8>
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	e008      	b.n	800d9bc <_printf_common+0xa8>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	4652      	mov	r2, sl
 800d9ae:	4649      	mov	r1, r9
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	47c0      	blx	r8
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	d103      	bne.n	800d9c0 <_printf_common+0xac>
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c0:	3501      	adds	r5, #1
 800d9c2:	e7c6      	b.n	800d952 <_printf_common+0x3e>
 800d9c4:	18e1      	adds	r1, r4, r3
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	2030      	movs	r0, #48	; 0x30
 800d9ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9ce:	4422      	add	r2, r4
 800d9d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9d8:	3302      	adds	r3, #2
 800d9da:	e7c7      	b.n	800d96c <_printf_common+0x58>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	4622      	mov	r2, r4
 800d9e0:	4649      	mov	r1, r9
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	47c0      	blx	r8
 800d9e6:	3001      	adds	r0, #1
 800d9e8:	d0e6      	beq.n	800d9b8 <_printf_common+0xa4>
 800d9ea:	3601      	adds	r6, #1
 800d9ec:	e7d9      	b.n	800d9a2 <_printf_common+0x8e>
	...

0800d9f0 <_printf_i>:
 800d9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f4:	7e0f      	ldrb	r7, [r1, #24]
 800d9f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9f8:	2f78      	cmp	r7, #120	; 0x78
 800d9fa:	4691      	mov	r9, r2
 800d9fc:	4680      	mov	r8, r0
 800d9fe:	460c      	mov	r4, r1
 800da00:	469a      	mov	sl, r3
 800da02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da06:	d807      	bhi.n	800da18 <_printf_i+0x28>
 800da08:	2f62      	cmp	r7, #98	; 0x62
 800da0a:	d80a      	bhi.n	800da22 <_printf_i+0x32>
 800da0c:	2f00      	cmp	r7, #0
 800da0e:	f000 80d8 	beq.w	800dbc2 <_printf_i+0x1d2>
 800da12:	2f58      	cmp	r7, #88	; 0x58
 800da14:	f000 80a3 	beq.w	800db5e <_printf_i+0x16e>
 800da18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da20:	e03a      	b.n	800da98 <_printf_i+0xa8>
 800da22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da26:	2b15      	cmp	r3, #21
 800da28:	d8f6      	bhi.n	800da18 <_printf_i+0x28>
 800da2a:	a101      	add	r1, pc, #4	; (adr r1, 800da30 <_printf_i+0x40>)
 800da2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da30:	0800da89 	.word	0x0800da89
 800da34:	0800da9d 	.word	0x0800da9d
 800da38:	0800da19 	.word	0x0800da19
 800da3c:	0800da19 	.word	0x0800da19
 800da40:	0800da19 	.word	0x0800da19
 800da44:	0800da19 	.word	0x0800da19
 800da48:	0800da9d 	.word	0x0800da9d
 800da4c:	0800da19 	.word	0x0800da19
 800da50:	0800da19 	.word	0x0800da19
 800da54:	0800da19 	.word	0x0800da19
 800da58:	0800da19 	.word	0x0800da19
 800da5c:	0800dba9 	.word	0x0800dba9
 800da60:	0800dacd 	.word	0x0800dacd
 800da64:	0800db8b 	.word	0x0800db8b
 800da68:	0800da19 	.word	0x0800da19
 800da6c:	0800da19 	.word	0x0800da19
 800da70:	0800dbcb 	.word	0x0800dbcb
 800da74:	0800da19 	.word	0x0800da19
 800da78:	0800dacd 	.word	0x0800dacd
 800da7c:	0800da19 	.word	0x0800da19
 800da80:	0800da19 	.word	0x0800da19
 800da84:	0800db93 	.word	0x0800db93
 800da88:	682b      	ldr	r3, [r5, #0]
 800da8a:	1d1a      	adds	r2, r3, #4
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	602a      	str	r2, [r5, #0]
 800da90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da98:	2301      	movs	r3, #1
 800da9a:	e0a3      	b.n	800dbe4 <_printf_i+0x1f4>
 800da9c:	6820      	ldr	r0, [r4, #0]
 800da9e:	6829      	ldr	r1, [r5, #0]
 800daa0:	0606      	lsls	r6, r0, #24
 800daa2:	f101 0304 	add.w	r3, r1, #4
 800daa6:	d50a      	bpl.n	800dabe <_printf_i+0xce>
 800daa8:	680e      	ldr	r6, [r1, #0]
 800daaa:	602b      	str	r3, [r5, #0]
 800daac:	2e00      	cmp	r6, #0
 800daae:	da03      	bge.n	800dab8 <_printf_i+0xc8>
 800dab0:	232d      	movs	r3, #45	; 0x2d
 800dab2:	4276      	negs	r6, r6
 800dab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab8:	485e      	ldr	r0, [pc, #376]	; (800dc34 <_printf_i+0x244>)
 800daba:	230a      	movs	r3, #10
 800dabc:	e019      	b.n	800daf2 <_printf_i+0x102>
 800dabe:	680e      	ldr	r6, [r1, #0]
 800dac0:	602b      	str	r3, [r5, #0]
 800dac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dac6:	bf18      	it	ne
 800dac8:	b236      	sxthne	r6, r6
 800daca:	e7ef      	b.n	800daac <_printf_i+0xbc>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	6820      	ldr	r0, [r4, #0]
 800dad0:	1d19      	adds	r1, r3, #4
 800dad2:	6029      	str	r1, [r5, #0]
 800dad4:	0601      	lsls	r1, r0, #24
 800dad6:	d501      	bpl.n	800dadc <_printf_i+0xec>
 800dad8:	681e      	ldr	r6, [r3, #0]
 800dada:	e002      	b.n	800dae2 <_printf_i+0xf2>
 800dadc:	0646      	lsls	r6, r0, #25
 800dade:	d5fb      	bpl.n	800dad8 <_printf_i+0xe8>
 800dae0:	881e      	ldrh	r6, [r3, #0]
 800dae2:	4854      	ldr	r0, [pc, #336]	; (800dc34 <_printf_i+0x244>)
 800dae4:	2f6f      	cmp	r7, #111	; 0x6f
 800dae6:	bf0c      	ite	eq
 800dae8:	2308      	moveq	r3, #8
 800daea:	230a      	movne	r3, #10
 800daec:	2100      	movs	r1, #0
 800daee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800daf2:	6865      	ldr	r5, [r4, #4]
 800daf4:	60a5      	str	r5, [r4, #8]
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	bfa2      	ittt	ge
 800dafa:	6821      	ldrge	r1, [r4, #0]
 800dafc:	f021 0104 	bicge.w	r1, r1, #4
 800db00:	6021      	strge	r1, [r4, #0]
 800db02:	b90e      	cbnz	r6, 800db08 <_printf_i+0x118>
 800db04:	2d00      	cmp	r5, #0
 800db06:	d04d      	beq.n	800dba4 <_printf_i+0x1b4>
 800db08:	4615      	mov	r5, r2
 800db0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800db0e:	fb03 6711 	mls	r7, r3, r1, r6
 800db12:	5dc7      	ldrb	r7, [r0, r7]
 800db14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db18:	4637      	mov	r7, r6
 800db1a:	42bb      	cmp	r3, r7
 800db1c:	460e      	mov	r6, r1
 800db1e:	d9f4      	bls.n	800db0a <_printf_i+0x11a>
 800db20:	2b08      	cmp	r3, #8
 800db22:	d10b      	bne.n	800db3c <_printf_i+0x14c>
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	07de      	lsls	r6, r3, #31
 800db28:	d508      	bpl.n	800db3c <_printf_i+0x14c>
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	6861      	ldr	r1, [r4, #4]
 800db2e:	4299      	cmp	r1, r3
 800db30:	bfde      	ittt	le
 800db32:	2330      	movle	r3, #48	; 0x30
 800db34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db3c:	1b52      	subs	r2, r2, r5
 800db3e:	6122      	str	r2, [r4, #16]
 800db40:	f8cd a000 	str.w	sl, [sp]
 800db44:	464b      	mov	r3, r9
 800db46:	aa03      	add	r2, sp, #12
 800db48:	4621      	mov	r1, r4
 800db4a:	4640      	mov	r0, r8
 800db4c:	f7ff fee2 	bl	800d914 <_printf_common>
 800db50:	3001      	adds	r0, #1
 800db52:	d14c      	bne.n	800dbee <_printf_i+0x1fe>
 800db54:	f04f 30ff 	mov.w	r0, #4294967295
 800db58:	b004      	add	sp, #16
 800db5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5e:	4835      	ldr	r0, [pc, #212]	; (800dc34 <_printf_i+0x244>)
 800db60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db64:	6829      	ldr	r1, [r5, #0]
 800db66:	6823      	ldr	r3, [r4, #0]
 800db68:	f851 6b04 	ldr.w	r6, [r1], #4
 800db6c:	6029      	str	r1, [r5, #0]
 800db6e:	061d      	lsls	r5, r3, #24
 800db70:	d514      	bpl.n	800db9c <_printf_i+0x1ac>
 800db72:	07df      	lsls	r7, r3, #31
 800db74:	bf44      	itt	mi
 800db76:	f043 0320 	orrmi.w	r3, r3, #32
 800db7a:	6023      	strmi	r3, [r4, #0]
 800db7c:	b91e      	cbnz	r6, 800db86 <_printf_i+0x196>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	f023 0320 	bic.w	r3, r3, #32
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	2310      	movs	r3, #16
 800db88:	e7b0      	b.n	800daec <_printf_i+0xfc>
 800db8a:	6823      	ldr	r3, [r4, #0]
 800db8c:	f043 0320 	orr.w	r3, r3, #32
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	2378      	movs	r3, #120	; 0x78
 800db94:	4828      	ldr	r0, [pc, #160]	; (800dc38 <_printf_i+0x248>)
 800db96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db9a:	e7e3      	b.n	800db64 <_printf_i+0x174>
 800db9c:	0659      	lsls	r1, r3, #25
 800db9e:	bf48      	it	mi
 800dba0:	b2b6      	uxthmi	r6, r6
 800dba2:	e7e6      	b.n	800db72 <_printf_i+0x182>
 800dba4:	4615      	mov	r5, r2
 800dba6:	e7bb      	b.n	800db20 <_printf_i+0x130>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	6826      	ldr	r6, [r4, #0]
 800dbac:	6961      	ldr	r1, [r4, #20]
 800dbae:	1d18      	adds	r0, r3, #4
 800dbb0:	6028      	str	r0, [r5, #0]
 800dbb2:	0635      	lsls	r5, r6, #24
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	d501      	bpl.n	800dbbc <_printf_i+0x1cc>
 800dbb8:	6019      	str	r1, [r3, #0]
 800dbba:	e002      	b.n	800dbc2 <_printf_i+0x1d2>
 800dbbc:	0670      	lsls	r0, r6, #25
 800dbbe:	d5fb      	bpl.n	800dbb8 <_printf_i+0x1c8>
 800dbc0:	8019      	strh	r1, [r3, #0]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	6123      	str	r3, [r4, #16]
 800dbc6:	4615      	mov	r5, r2
 800dbc8:	e7ba      	b.n	800db40 <_printf_i+0x150>
 800dbca:	682b      	ldr	r3, [r5, #0]
 800dbcc:	1d1a      	adds	r2, r3, #4
 800dbce:	602a      	str	r2, [r5, #0]
 800dbd0:	681d      	ldr	r5, [r3, #0]
 800dbd2:	6862      	ldr	r2, [r4, #4]
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	f7f2 fb8a 	bl	80002f0 <memchr>
 800dbdc:	b108      	cbz	r0, 800dbe2 <_printf_i+0x1f2>
 800dbde:	1b40      	subs	r0, r0, r5
 800dbe0:	6060      	str	r0, [r4, #4]
 800dbe2:	6863      	ldr	r3, [r4, #4]
 800dbe4:	6123      	str	r3, [r4, #16]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbec:	e7a8      	b.n	800db40 <_printf_i+0x150>
 800dbee:	6923      	ldr	r3, [r4, #16]
 800dbf0:	462a      	mov	r2, r5
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	47d0      	blx	sl
 800dbf8:	3001      	adds	r0, #1
 800dbfa:	d0ab      	beq.n	800db54 <_printf_i+0x164>
 800dbfc:	6823      	ldr	r3, [r4, #0]
 800dbfe:	079b      	lsls	r3, r3, #30
 800dc00:	d413      	bmi.n	800dc2a <_printf_i+0x23a>
 800dc02:	68e0      	ldr	r0, [r4, #12]
 800dc04:	9b03      	ldr	r3, [sp, #12]
 800dc06:	4298      	cmp	r0, r3
 800dc08:	bfb8      	it	lt
 800dc0a:	4618      	movlt	r0, r3
 800dc0c:	e7a4      	b.n	800db58 <_printf_i+0x168>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	4632      	mov	r2, r6
 800dc12:	4649      	mov	r1, r9
 800dc14:	4640      	mov	r0, r8
 800dc16:	47d0      	blx	sl
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d09b      	beq.n	800db54 <_printf_i+0x164>
 800dc1c:	3501      	adds	r5, #1
 800dc1e:	68e3      	ldr	r3, [r4, #12]
 800dc20:	9903      	ldr	r1, [sp, #12]
 800dc22:	1a5b      	subs	r3, r3, r1
 800dc24:	42ab      	cmp	r3, r5
 800dc26:	dcf2      	bgt.n	800dc0e <_printf_i+0x21e>
 800dc28:	e7eb      	b.n	800dc02 <_printf_i+0x212>
 800dc2a:	2500      	movs	r5, #0
 800dc2c:	f104 0619 	add.w	r6, r4, #25
 800dc30:	e7f5      	b.n	800dc1e <_printf_i+0x22e>
 800dc32:	bf00      	nop
 800dc34:	0801175e 	.word	0x0801175e
 800dc38:	0801176f 	.word	0x0801176f

0800dc3c <iprintf>:
 800dc3c:	b40f      	push	{r0, r1, r2, r3}
 800dc3e:	4b0a      	ldr	r3, [pc, #40]	; (800dc68 <iprintf+0x2c>)
 800dc40:	b513      	push	{r0, r1, r4, lr}
 800dc42:	681c      	ldr	r4, [r3, #0]
 800dc44:	b124      	cbz	r4, 800dc50 <iprintf+0x14>
 800dc46:	69a3      	ldr	r3, [r4, #24]
 800dc48:	b913      	cbnz	r3, 800dc50 <iprintf+0x14>
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 fe62 	bl	800e914 <__sinit>
 800dc50:	ab05      	add	r3, sp, #20
 800dc52:	9a04      	ldr	r2, [sp, #16]
 800dc54:	68a1      	ldr	r1, [r4, #8]
 800dc56:	9301      	str	r3, [sp, #4]
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f001 fbad 	bl	800f3b8 <_vfiprintf_r>
 800dc5e:	b002      	add	sp, #8
 800dc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc64:	b004      	add	sp, #16
 800dc66:	4770      	bx	lr
 800dc68:	24000034 	.word	0x24000034

0800dc6c <quorem>:
 800dc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc70:	6903      	ldr	r3, [r0, #16]
 800dc72:	690c      	ldr	r4, [r1, #16]
 800dc74:	42a3      	cmp	r3, r4
 800dc76:	4607      	mov	r7, r0
 800dc78:	f2c0 8081 	blt.w	800dd7e <quorem+0x112>
 800dc7c:	3c01      	subs	r4, #1
 800dc7e:	f101 0814 	add.w	r8, r1, #20
 800dc82:	f100 0514 	add.w	r5, r0, #20
 800dc86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc8a:	9301      	str	r3, [sp, #4]
 800dc8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc94:	3301      	adds	r3, #1
 800dc96:	429a      	cmp	r2, r3
 800dc98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dca0:	fbb2 f6f3 	udiv	r6, r2, r3
 800dca4:	d331      	bcc.n	800dd0a <quorem+0x9e>
 800dca6:	f04f 0e00 	mov.w	lr, #0
 800dcaa:	4640      	mov	r0, r8
 800dcac:	46ac      	mov	ip, r5
 800dcae:	46f2      	mov	sl, lr
 800dcb0:	f850 2b04 	ldr.w	r2, [r0], #4
 800dcb4:	b293      	uxth	r3, r2
 800dcb6:	fb06 e303 	mla	r3, r6, r3, lr
 800dcba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	ebaa 0303 	sub.w	r3, sl, r3
 800dcc4:	f8dc a000 	ldr.w	sl, [ip]
 800dcc8:	0c12      	lsrs	r2, r2, #16
 800dcca:	fa13 f38a 	uxtah	r3, r3, sl
 800dcce:	fb06 e202 	mla	r2, r6, r2, lr
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	9b00      	ldr	r3, [sp, #0]
 800dcd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dcda:	b292      	uxth	r2, r2
 800dcdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dce4:	f8bd 3000 	ldrh.w	r3, [sp]
 800dce8:	4581      	cmp	r9, r0
 800dcea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcee:	f84c 3b04 	str.w	r3, [ip], #4
 800dcf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dcf6:	d2db      	bcs.n	800dcb0 <quorem+0x44>
 800dcf8:	f855 300b 	ldr.w	r3, [r5, fp]
 800dcfc:	b92b      	cbnz	r3, 800dd0a <quorem+0x9e>
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	3b04      	subs	r3, #4
 800dd02:	429d      	cmp	r5, r3
 800dd04:	461a      	mov	r2, r3
 800dd06:	d32e      	bcc.n	800dd66 <quorem+0xfa>
 800dd08:	613c      	str	r4, [r7, #16]
 800dd0a:	4638      	mov	r0, r7
 800dd0c:	f001 f932 	bl	800ef74 <__mcmp>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	db24      	blt.n	800dd5e <quorem+0xf2>
 800dd14:	3601      	adds	r6, #1
 800dd16:	4628      	mov	r0, r5
 800dd18:	f04f 0c00 	mov.w	ip, #0
 800dd1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd20:	f8d0 e000 	ldr.w	lr, [r0]
 800dd24:	b293      	uxth	r3, r2
 800dd26:	ebac 0303 	sub.w	r3, ip, r3
 800dd2a:	0c12      	lsrs	r2, r2, #16
 800dd2c:	fa13 f38e 	uxtah	r3, r3, lr
 800dd30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd3e:	45c1      	cmp	r9, r8
 800dd40:	f840 3b04 	str.w	r3, [r0], #4
 800dd44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd48:	d2e8      	bcs.n	800dd1c <quorem+0xb0>
 800dd4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd52:	b922      	cbnz	r2, 800dd5e <quorem+0xf2>
 800dd54:	3b04      	subs	r3, #4
 800dd56:	429d      	cmp	r5, r3
 800dd58:	461a      	mov	r2, r3
 800dd5a:	d30a      	bcc.n	800dd72 <quorem+0x106>
 800dd5c:	613c      	str	r4, [r7, #16]
 800dd5e:	4630      	mov	r0, r6
 800dd60:	b003      	add	sp, #12
 800dd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd66:	6812      	ldr	r2, [r2, #0]
 800dd68:	3b04      	subs	r3, #4
 800dd6a:	2a00      	cmp	r2, #0
 800dd6c:	d1cc      	bne.n	800dd08 <quorem+0x9c>
 800dd6e:	3c01      	subs	r4, #1
 800dd70:	e7c7      	b.n	800dd02 <quorem+0x96>
 800dd72:	6812      	ldr	r2, [r2, #0]
 800dd74:	3b04      	subs	r3, #4
 800dd76:	2a00      	cmp	r2, #0
 800dd78:	d1f0      	bne.n	800dd5c <quorem+0xf0>
 800dd7a:	3c01      	subs	r4, #1
 800dd7c:	e7eb      	b.n	800dd56 <quorem+0xea>
 800dd7e:	2000      	movs	r0, #0
 800dd80:	e7ee      	b.n	800dd60 <quorem+0xf4>
 800dd82:	0000      	movs	r0, r0
 800dd84:	0000      	movs	r0, r0
	...

0800dd88 <_dtoa_r>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	ed2d 8b02 	vpush	{d8}
 800dd90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd92:	b091      	sub	sp, #68	; 0x44
 800dd94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd98:	ec59 8b10 	vmov	r8, r9, d0
 800dd9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800dd9e:	9106      	str	r1, [sp, #24]
 800dda0:	4606      	mov	r6, r0
 800dda2:	9208      	str	r2, [sp, #32]
 800dda4:	930c      	str	r3, [sp, #48]	; 0x30
 800dda6:	b975      	cbnz	r5, 800ddc6 <_dtoa_r+0x3e>
 800dda8:	2010      	movs	r0, #16
 800ddaa:	f000 fe59 	bl	800ea60 <malloc>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	6270      	str	r0, [r6, #36]	; 0x24
 800ddb2:	b920      	cbnz	r0, 800ddbe <_dtoa_r+0x36>
 800ddb4:	4baa      	ldr	r3, [pc, #680]	; (800e060 <_dtoa_r+0x2d8>)
 800ddb6:	21ea      	movs	r1, #234	; 0xea
 800ddb8:	48aa      	ldr	r0, [pc, #680]	; (800e064 <_dtoa_r+0x2dc>)
 800ddba:	f001 fd53 	bl	800f864 <__assert_func>
 800ddbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddc2:	6005      	str	r5, [r0, #0]
 800ddc4:	60c5      	str	r5, [r0, #12]
 800ddc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ddc8:	6819      	ldr	r1, [r3, #0]
 800ddca:	b151      	cbz	r1, 800dde2 <_dtoa_r+0x5a>
 800ddcc:	685a      	ldr	r2, [r3, #4]
 800ddce:	604a      	str	r2, [r1, #4]
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	4093      	lsls	r3, r2
 800ddd4:	608b      	str	r3, [r1, #8]
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f000 fe8a 	bl	800eaf0 <_Bfree>
 800dddc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ddde:	2200      	movs	r2, #0
 800dde0:	601a      	str	r2, [r3, #0]
 800dde2:	f1b9 0300 	subs.w	r3, r9, #0
 800dde6:	bfbb      	ittet	lt
 800dde8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ddec:	9303      	strlt	r3, [sp, #12]
 800ddee:	2300      	movge	r3, #0
 800ddf0:	2201      	movlt	r2, #1
 800ddf2:	bfac      	ite	ge
 800ddf4:	6023      	strge	r3, [r4, #0]
 800ddf6:	6022      	strlt	r2, [r4, #0]
 800ddf8:	4b9b      	ldr	r3, [pc, #620]	; (800e068 <_dtoa_r+0x2e0>)
 800ddfa:	9c03      	ldr	r4, [sp, #12]
 800ddfc:	43a3      	bics	r3, r4
 800ddfe:	d11c      	bne.n	800de3a <_dtoa_r+0xb2>
 800de00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de02:	f242 730f 	movw	r3, #9999	; 0x270f
 800de06:	6013      	str	r3, [r2, #0]
 800de08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800de0c:	ea53 0308 	orrs.w	r3, r3, r8
 800de10:	f000 84fd 	beq.w	800e80e <_dtoa_r+0xa86>
 800de14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de16:	b963      	cbnz	r3, 800de32 <_dtoa_r+0xaa>
 800de18:	4b94      	ldr	r3, [pc, #592]	; (800e06c <_dtoa_r+0x2e4>)
 800de1a:	e01f      	b.n	800de5c <_dtoa_r+0xd4>
 800de1c:	4b94      	ldr	r3, [pc, #592]	; (800e070 <_dtoa_r+0x2e8>)
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	3308      	adds	r3, #8
 800de22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800de24:	6013      	str	r3, [r2, #0]
 800de26:	9801      	ldr	r0, [sp, #4]
 800de28:	b011      	add	sp, #68	; 0x44
 800de2a:	ecbd 8b02 	vpop	{d8}
 800de2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de32:	4b8e      	ldr	r3, [pc, #568]	; (800e06c <_dtoa_r+0x2e4>)
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	3303      	adds	r3, #3
 800de38:	e7f3      	b.n	800de22 <_dtoa_r+0x9a>
 800de3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800de3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800de42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de46:	d10b      	bne.n	800de60 <_dtoa_r+0xd8>
 800de48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de4a:	2301      	movs	r3, #1
 800de4c:	6013      	str	r3, [r2, #0]
 800de4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 84d9 	beq.w	800e808 <_dtoa_r+0xa80>
 800de56:	4887      	ldr	r0, [pc, #540]	; (800e074 <_dtoa_r+0x2ec>)
 800de58:	6018      	str	r0, [r3, #0]
 800de5a:	1e43      	subs	r3, r0, #1
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	e7e2      	b.n	800de26 <_dtoa_r+0x9e>
 800de60:	a90f      	add	r1, sp, #60	; 0x3c
 800de62:	aa0e      	add	r2, sp, #56	; 0x38
 800de64:	4630      	mov	r0, r6
 800de66:	eeb0 0b48 	vmov.f64	d0, d8
 800de6a:	f001 f929 	bl	800f0c0 <__d2b>
 800de6e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800de72:	4605      	mov	r5, r0
 800de74:	980e      	ldr	r0, [sp, #56]	; 0x38
 800de76:	2900      	cmp	r1, #0
 800de78:	d046      	beq.n	800df08 <_dtoa_r+0x180>
 800de7a:	ee18 4a90 	vmov	r4, s17
 800de7e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800de82:	ec53 2b18 	vmov	r2, r3, d8
 800de86:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800de8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800de92:	2400      	movs	r4, #0
 800de94:	ec43 2b16 	vmov	d6, r2, r3
 800de98:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800de9c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800e048 <_dtoa_r+0x2c0>
 800dea0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dea4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800e050 <_dtoa_r+0x2c8>
 800dea8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800deac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800e058 <_dtoa_r+0x2d0>
 800deb0:	ee07 1a90 	vmov	s15, r1
 800deb4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800deb8:	eeb0 7b46 	vmov.f64	d7, d6
 800debc:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dec0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800dec4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800decc:	ee16 ba90 	vmov	fp, s13
 800ded0:	940a      	str	r4, [sp, #40]	; 0x28
 800ded2:	d508      	bpl.n	800dee6 <_dtoa_r+0x15e>
 800ded4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ded8:	eeb4 6b47 	vcmp.f64	d6, d7
 800dedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee0:	bf18      	it	ne
 800dee2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800dee6:	f1bb 0f16 	cmp.w	fp, #22
 800deea:	d82f      	bhi.n	800df4c <_dtoa_r+0x1c4>
 800deec:	4b62      	ldr	r3, [pc, #392]	; (800e078 <_dtoa_r+0x2f0>)
 800deee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800def2:	ed93 7b00 	vldr	d7, [r3]
 800def6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800defa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800defe:	d501      	bpl.n	800df04 <_dtoa_r+0x17c>
 800df00:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df04:	2300      	movs	r3, #0
 800df06:	e022      	b.n	800df4e <_dtoa_r+0x1c6>
 800df08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800df0a:	4401      	add	r1, r0
 800df0c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800df10:	2b20      	cmp	r3, #32
 800df12:	bfc1      	itttt	gt
 800df14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800df18:	fa04 f303 	lslgt.w	r3, r4, r3
 800df1c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800df20:	fa28 f804 	lsrgt.w	r8, r8, r4
 800df24:	bfd6      	itet	le
 800df26:	f1c3 0320 	rsble	r3, r3, #32
 800df2a:	ea43 0808 	orrgt.w	r8, r3, r8
 800df2e:	fa08 f803 	lslle.w	r8, r8, r3
 800df32:	ee07 8a90 	vmov	s15, r8
 800df36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800df3a:	3901      	subs	r1, #1
 800df3c:	ee17 4a90 	vmov	r4, s15
 800df40:	ec53 2b17 	vmov	r2, r3, d7
 800df44:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800df48:	2401      	movs	r4, #1
 800df4a:	e7a3      	b.n	800de94 <_dtoa_r+0x10c>
 800df4c:	2301      	movs	r3, #1
 800df4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800df50:	1a43      	subs	r3, r0, r1
 800df52:	1e5a      	subs	r2, r3, #1
 800df54:	bf45      	ittet	mi
 800df56:	f1c3 0301 	rsbmi	r3, r3, #1
 800df5a:	9304      	strmi	r3, [sp, #16]
 800df5c:	2300      	movpl	r3, #0
 800df5e:	2300      	movmi	r3, #0
 800df60:	9205      	str	r2, [sp, #20]
 800df62:	bf54      	ite	pl
 800df64:	9304      	strpl	r3, [sp, #16]
 800df66:	9305      	strmi	r3, [sp, #20]
 800df68:	f1bb 0f00 	cmp.w	fp, #0
 800df6c:	db18      	blt.n	800dfa0 <_dtoa_r+0x218>
 800df6e:	9b05      	ldr	r3, [sp, #20]
 800df70:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800df74:	445b      	add	r3, fp
 800df76:	9305      	str	r3, [sp, #20]
 800df78:	2300      	movs	r3, #0
 800df7a:	9a06      	ldr	r2, [sp, #24]
 800df7c:	2a09      	cmp	r2, #9
 800df7e:	d849      	bhi.n	800e014 <_dtoa_r+0x28c>
 800df80:	2a05      	cmp	r2, #5
 800df82:	bfc4      	itt	gt
 800df84:	3a04      	subgt	r2, #4
 800df86:	9206      	strgt	r2, [sp, #24]
 800df88:	9a06      	ldr	r2, [sp, #24]
 800df8a:	f1a2 0202 	sub.w	r2, r2, #2
 800df8e:	bfcc      	ite	gt
 800df90:	2400      	movgt	r4, #0
 800df92:	2401      	movle	r4, #1
 800df94:	2a03      	cmp	r2, #3
 800df96:	d848      	bhi.n	800e02a <_dtoa_r+0x2a2>
 800df98:	e8df f002 	tbb	[pc, r2]
 800df9c:	3a2c2e0b 	.word	0x3a2c2e0b
 800dfa0:	9b04      	ldr	r3, [sp, #16]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	eba3 030b 	sub.w	r3, r3, fp
 800dfa8:	9304      	str	r3, [sp, #16]
 800dfaa:	9209      	str	r2, [sp, #36]	; 0x24
 800dfac:	f1cb 0300 	rsb	r3, fp, #0
 800dfb0:	e7e3      	b.n	800df7a <_dtoa_r+0x1f2>
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	9207      	str	r2, [sp, #28]
 800dfb6:	9a08      	ldr	r2, [sp, #32]
 800dfb8:	2a00      	cmp	r2, #0
 800dfba:	dc39      	bgt.n	800e030 <_dtoa_r+0x2a8>
 800dfbc:	f04f 0a01 	mov.w	sl, #1
 800dfc0:	46d1      	mov	r9, sl
 800dfc2:	4652      	mov	r2, sl
 800dfc4:	f8cd a020 	str.w	sl, [sp, #32]
 800dfc8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800dfca:	2100      	movs	r1, #0
 800dfcc:	6079      	str	r1, [r7, #4]
 800dfce:	2004      	movs	r0, #4
 800dfd0:	f100 0c14 	add.w	ip, r0, #20
 800dfd4:	4594      	cmp	ip, r2
 800dfd6:	6879      	ldr	r1, [r7, #4]
 800dfd8:	d92f      	bls.n	800e03a <_dtoa_r+0x2b2>
 800dfda:	4630      	mov	r0, r6
 800dfdc:	930d      	str	r3, [sp, #52]	; 0x34
 800dfde:	f000 fd47 	bl	800ea70 <_Balloc>
 800dfe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfe4:	9001      	str	r0, [sp, #4]
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d149      	bne.n	800e080 <_dtoa_r+0x2f8>
 800dfec:	4b23      	ldr	r3, [pc, #140]	; (800e07c <_dtoa_r+0x2f4>)
 800dfee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dff2:	e6e1      	b.n	800ddb8 <_dtoa_r+0x30>
 800dff4:	2201      	movs	r2, #1
 800dff6:	e7dd      	b.n	800dfb4 <_dtoa_r+0x22c>
 800dff8:	2200      	movs	r2, #0
 800dffa:	9207      	str	r2, [sp, #28]
 800dffc:	9a08      	ldr	r2, [sp, #32]
 800dffe:	eb0b 0a02 	add.w	sl, fp, r2
 800e002:	f10a 0901 	add.w	r9, sl, #1
 800e006:	464a      	mov	r2, r9
 800e008:	2a01      	cmp	r2, #1
 800e00a:	bfb8      	it	lt
 800e00c:	2201      	movlt	r2, #1
 800e00e:	e7db      	b.n	800dfc8 <_dtoa_r+0x240>
 800e010:	2201      	movs	r2, #1
 800e012:	e7f2      	b.n	800dffa <_dtoa_r+0x272>
 800e014:	2401      	movs	r4, #1
 800e016:	2200      	movs	r2, #0
 800e018:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800e01c:	f04f 3aff 	mov.w	sl, #4294967295
 800e020:	2100      	movs	r1, #0
 800e022:	46d1      	mov	r9, sl
 800e024:	2212      	movs	r2, #18
 800e026:	9108      	str	r1, [sp, #32]
 800e028:	e7ce      	b.n	800dfc8 <_dtoa_r+0x240>
 800e02a:	2201      	movs	r2, #1
 800e02c:	9207      	str	r2, [sp, #28]
 800e02e:	e7f5      	b.n	800e01c <_dtoa_r+0x294>
 800e030:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e034:	46d1      	mov	r9, sl
 800e036:	4652      	mov	r2, sl
 800e038:	e7c6      	b.n	800dfc8 <_dtoa_r+0x240>
 800e03a:	3101      	adds	r1, #1
 800e03c:	6079      	str	r1, [r7, #4]
 800e03e:	0040      	lsls	r0, r0, #1
 800e040:	e7c6      	b.n	800dfd0 <_dtoa_r+0x248>
 800e042:	bf00      	nop
 800e044:	f3af 8000 	nop.w
 800e048:	636f4361 	.word	0x636f4361
 800e04c:	3fd287a7 	.word	0x3fd287a7
 800e050:	8b60c8b3 	.word	0x8b60c8b3
 800e054:	3fc68a28 	.word	0x3fc68a28
 800e058:	509f79fb 	.word	0x509f79fb
 800e05c:	3fd34413 	.word	0x3fd34413
 800e060:	0801178d 	.word	0x0801178d
 800e064:	080117a4 	.word	0x080117a4
 800e068:	7ff00000 	.word	0x7ff00000
 800e06c:	08011789 	.word	0x08011789
 800e070:	08011780 	.word	0x08011780
 800e074:	0801175d 	.word	0x0801175d
 800e078:	080118f8 	.word	0x080118f8
 800e07c:	080117ff 	.word	0x080117ff
 800e080:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e082:	9901      	ldr	r1, [sp, #4]
 800e084:	6011      	str	r1, [r2, #0]
 800e086:	f1b9 0f0e 	cmp.w	r9, #14
 800e08a:	d86c      	bhi.n	800e166 <_dtoa_r+0x3de>
 800e08c:	2c00      	cmp	r4, #0
 800e08e:	d06a      	beq.n	800e166 <_dtoa_r+0x3de>
 800e090:	f1bb 0f00 	cmp.w	fp, #0
 800e094:	f340 80a0 	ble.w	800e1d8 <_dtoa_r+0x450>
 800e098:	49c1      	ldr	r1, [pc, #772]	; (800e3a0 <_dtoa_r+0x618>)
 800e09a:	f00b 020f 	and.w	r2, fp, #15
 800e09e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e0a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e0a6:	ed92 7b00 	vldr	d7, [r2]
 800e0aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e0ae:	f000 8087 	beq.w	800e1c0 <_dtoa_r+0x438>
 800e0b2:	4abc      	ldr	r2, [pc, #752]	; (800e3a4 <_dtoa_r+0x61c>)
 800e0b4:	ed92 6b08 	vldr	d6, [r2, #32]
 800e0b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e0bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e0c0:	f001 010f 	and.w	r1, r1, #15
 800e0c4:	2203      	movs	r2, #3
 800e0c6:	48b7      	ldr	r0, [pc, #732]	; (800e3a4 <_dtoa_r+0x61c>)
 800e0c8:	2900      	cmp	r1, #0
 800e0ca:	d17b      	bne.n	800e1c4 <_dtoa_r+0x43c>
 800e0cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e0d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e0d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0da:	2900      	cmp	r1, #0
 800e0dc:	f000 80a2 	beq.w	800e224 <_dtoa_r+0x49c>
 800e0e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e0e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f0:	f140 8098 	bpl.w	800e224 <_dtoa_r+0x49c>
 800e0f4:	f1b9 0f00 	cmp.w	r9, #0
 800e0f8:	f000 8094 	beq.w	800e224 <_dtoa_r+0x49c>
 800e0fc:	f1ba 0f00 	cmp.w	sl, #0
 800e100:	dd2f      	ble.n	800e162 <_dtoa_r+0x3da>
 800e102:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e106:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e10a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e10e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e112:	3201      	adds	r2, #1
 800e114:	4650      	mov	r0, sl
 800e116:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e11a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e11e:	ee07 2a90 	vmov	s15, r2
 800e122:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e126:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e12a:	ee15 4a90 	vmov	r4, s11
 800e12e:	ec52 1b15 	vmov	r1, r2, d5
 800e132:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e136:	2800      	cmp	r0, #0
 800e138:	d177      	bne.n	800e22a <_dtoa_r+0x4a2>
 800e13a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e13e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e142:	ec42 1b17 	vmov	d7, r1, r2
 800e146:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14e:	f300 8263 	bgt.w	800e618 <_dtoa_r+0x890>
 800e152:	eeb1 7b47 	vneg.f64	d7, d7
 800e156:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15e:	f100 8258 	bmi.w	800e612 <_dtoa_r+0x88a>
 800e162:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e168:	2a00      	cmp	r2, #0
 800e16a:	f2c0 811d 	blt.w	800e3a8 <_dtoa_r+0x620>
 800e16e:	f1bb 0f0e 	cmp.w	fp, #14
 800e172:	f300 8119 	bgt.w	800e3a8 <_dtoa_r+0x620>
 800e176:	4b8a      	ldr	r3, [pc, #552]	; (800e3a0 <_dtoa_r+0x618>)
 800e178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e17c:	ed93 6b00 	vldr	d6, [r3]
 800e180:	9b08      	ldr	r3, [sp, #32]
 800e182:	2b00      	cmp	r3, #0
 800e184:	f280 80b7 	bge.w	800e2f6 <_dtoa_r+0x56e>
 800e188:	f1b9 0f00 	cmp.w	r9, #0
 800e18c:	f300 80b3 	bgt.w	800e2f6 <_dtoa_r+0x56e>
 800e190:	f040 823f 	bne.w	800e612 <_dtoa_r+0x88a>
 800e194:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e198:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e19c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a8:	464c      	mov	r4, r9
 800e1aa:	464f      	mov	r7, r9
 800e1ac:	f280 8215 	bge.w	800e5da <_dtoa_r+0x852>
 800e1b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1b4:	2331      	movs	r3, #49	; 0x31
 800e1b6:	f808 3b01 	strb.w	r3, [r8], #1
 800e1ba:	f10b 0b01 	add.w	fp, fp, #1
 800e1be:	e211      	b.n	800e5e4 <_dtoa_r+0x85c>
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	e780      	b.n	800e0c6 <_dtoa_r+0x33e>
 800e1c4:	07cc      	lsls	r4, r1, #31
 800e1c6:	d504      	bpl.n	800e1d2 <_dtoa_r+0x44a>
 800e1c8:	ed90 6b00 	vldr	d6, [r0]
 800e1cc:	3201      	adds	r2, #1
 800e1ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1d2:	1049      	asrs	r1, r1, #1
 800e1d4:	3008      	adds	r0, #8
 800e1d6:	e777      	b.n	800e0c8 <_dtoa_r+0x340>
 800e1d8:	d022      	beq.n	800e220 <_dtoa_r+0x498>
 800e1da:	f1cb 0100 	rsb	r1, fp, #0
 800e1de:	4a70      	ldr	r2, [pc, #448]	; (800e3a0 <_dtoa_r+0x618>)
 800e1e0:	f001 000f 	and.w	r0, r1, #15
 800e1e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e1e8:	ed92 7b00 	vldr	d7, [r2]
 800e1ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e1f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1f4:	486b      	ldr	r0, [pc, #428]	; (800e3a4 <_dtoa_r+0x61c>)
 800e1f6:	1109      	asrs	r1, r1, #4
 800e1f8:	2400      	movs	r4, #0
 800e1fa:	2202      	movs	r2, #2
 800e1fc:	b929      	cbnz	r1, 800e20a <_dtoa_r+0x482>
 800e1fe:	2c00      	cmp	r4, #0
 800e200:	f43f af6a 	beq.w	800e0d8 <_dtoa_r+0x350>
 800e204:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e208:	e766      	b.n	800e0d8 <_dtoa_r+0x350>
 800e20a:	07cf      	lsls	r7, r1, #31
 800e20c:	d505      	bpl.n	800e21a <_dtoa_r+0x492>
 800e20e:	ed90 6b00 	vldr	d6, [r0]
 800e212:	3201      	adds	r2, #1
 800e214:	2401      	movs	r4, #1
 800e216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e21a:	1049      	asrs	r1, r1, #1
 800e21c:	3008      	adds	r0, #8
 800e21e:	e7ed      	b.n	800e1fc <_dtoa_r+0x474>
 800e220:	2202      	movs	r2, #2
 800e222:	e759      	b.n	800e0d8 <_dtoa_r+0x350>
 800e224:	465f      	mov	r7, fp
 800e226:	4648      	mov	r0, r9
 800e228:	e775      	b.n	800e116 <_dtoa_r+0x38e>
 800e22a:	ec42 1b17 	vmov	d7, r1, r2
 800e22e:	4a5c      	ldr	r2, [pc, #368]	; (800e3a0 <_dtoa_r+0x618>)
 800e230:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e234:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e238:	9a01      	ldr	r2, [sp, #4]
 800e23a:	1814      	adds	r4, r2, r0
 800e23c:	9a07      	ldr	r2, [sp, #28]
 800e23e:	b352      	cbz	r2, 800e296 <_dtoa_r+0x50e>
 800e240:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e244:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e248:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e24c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e250:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e254:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e258:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e25c:	ee14 2a90 	vmov	r2, s9
 800e260:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e264:	3230      	adds	r2, #48	; 0x30
 800e266:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e26a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e272:	f808 2b01 	strb.w	r2, [r8], #1
 800e276:	d439      	bmi.n	800e2ec <_dtoa_r+0x564>
 800e278:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e27c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e284:	d472      	bmi.n	800e36c <_dtoa_r+0x5e4>
 800e286:	45a0      	cmp	r8, r4
 800e288:	f43f af6b 	beq.w	800e162 <_dtoa_r+0x3da>
 800e28c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e290:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e294:	e7e0      	b.n	800e258 <_dtoa_r+0x4d0>
 800e296:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e29a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e29e:	4621      	mov	r1, r4
 800e2a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e2a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e2a8:	ee14 2a90 	vmov	r2, s9
 800e2ac:	3230      	adds	r2, #48	; 0x30
 800e2ae:	f808 2b01 	strb.w	r2, [r8], #1
 800e2b2:	45a0      	cmp	r8, r4
 800e2b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e2b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e2bc:	d118      	bne.n	800e2f0 <_dtoa_r+0x568>
 800e2be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e2c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e2c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ce:	dc4d      	bgt.n	800e36c <_dtoa_r+0x5e4>
 800e2d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e2d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2dc:	f57f af41 	bpl.w	800e162 <_dtoa_r+0x3da>
 800e2e0:	4688      	mov	r8, r1
 800e2e2:	3901      	subs	r1, #1
 800e2e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e2e8:	2b30      	cmp	r3, #48	; 0x30
 800e2ea:	d0f9      	beq.n	800e2e0 <_dtoa_r+0x558>
 800e2ec:	46bb      	mov	fp, r7
 800e2ee:	e02a      	b.n	800e346 <_dtoa_r+0x5be>
 800e2f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e2f4:	e7d6      	b.n	800e2a4 <_dtoa_r+0x51c>
 800e2f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e2fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e302:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e306:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e30a:	ee15 3a10 	vmov	r3, s10
 800e30e:	3330      	adds	r3, #48	; 0x30
 800e310:	f808 3b01 	strb.w	r3, [r8], #1
 800e314:	9b01      	ldr	r3, [sp, #4]
 800e316:	eba8 0303 	sub.w	r3, r8, r3
 800e31a:	4599      	cmp	r9, r3
 800e31c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e320:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e324:	d133      	bne.n	800e38e <_dtoa_r+0x606>
 800e326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e32a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e332:	dc1a      	bgt.n	800e36a <_dtoa_r+0x5e2>
 800e334:	eeb4 7b46 	vcmp.f64	d7, d6
 800e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33c:	d103      	bne.n	800e346 <_dtoa_r+0x5be>
 800e33e:	ee15 3a10 	vmov	r3, s10
 800e342:	07d9      	lsls	r1, r3, #31
 800e344:	d411      	bmi.n	800e36a <_dtoa_r+0x5e2>
 800e346:	4629      	mov	r1, r5
 800e348:	4630      	mov	r0, r6
 800e34a:	f000 fbd1 	bl	800eaf0 <_Bfree>
 800e34e:	2300      	movs	r3, #0
 800e350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e352:	f888 3000 	strb.w	r3, [r8]
 800e356:	f10b 0301 	add.w	r3, fp, #1
 800e35a:	6013      	str	r3, [r2, #0]
 800e35c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f43f ad61 	beq.w	800de26 <_dtoa_r+0x9e>
 800e364:	f8c3 8000 	str.w	r8, [r3]
 800e368:	e55d      	b.n	800de26 <_dtoa_r+0x9e>
 800e36a:	465f      	mov	r7, fp
 800e36c:	4643      	mov	r3, r8
 800e36e:	4698      	mov	r8, r3
 800e370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e374:	2a39      	cmp	r2, #57	; 0x39
 800e376:	d106      	bne.n	800e386 <_dtoa_r+0x5fe>
 800e378:	9a01      	ldr	r2, [sp, #4]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d1f7      	bne.n	800e36e <_dtoa_r+0x5e6>
 800e37e:	9901      	ldr	r1, [sp, #4]
 800e380:	2230      	movs	r2, #48	; 0x30
 800e382:	3701      	adds	r7, #1
 800e384:	700a      	strb	r2, [r1, #0]
 800e386:	781a      	ldrb	r2, [r3, #0]
 800e388:	3201      	adds	r2, #1
 800e38a:	701a      	strb	r2, [r3, #0]
 800e38c:	e7ae      	b.n	800e2ec <_dtoa_r+0x564>
 800e38e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39a:	d1b2      	bne.n	800e302 <_dtoa_r+0x57a>
 800e39c:	e7d3      	b.n	800e346 <_dtoa_r+0x5be>
 800e39e:	bf00      	nop
 800e3a0:	080118f8 	.word	0x080118f8
 800e3a4:	080118d0 	.word	0x080118d0
 800e3a8:	9907      	ldr	r1, [sp, #28]
 800e3aa:	2900      	cmp	r1, #0
 800e3ac:	f000 80d0 	beq.w	800e550 <_dtoa_r+0x7c8>
 800e3b0:	9906      	ldr	r1, [sp, #24]
 800e3b2:	2901      	cmp	r1, #1
 800e3b4:	f300 80b4 	bgt.w	800e520 <_dtoa_r+0x798>
 800e3b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e3ba:	2900      	cmp	r1, #0
 800e3bc:	f000 80ac 	beq.w	800e518 <_dtoa_r+0x790>
 800e3c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e3c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e3c8:	461c      	mov	r4, r3
 800e3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800e3cc:	9b04      	ldr	r3, [sp, #16]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	9304      	str	r3, [sp, #16]
 800e3d2:	9b05      	ldr	r3, [sp, #20]
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	4413      	add	r3, r2
 800e3d8:	4630      	mov	r0, r6
 800e3da:	9305      	str	r3, [sp, #20]
 800e3dc:	f000 fc40 	bl	800ec60 <__i2b>
 800e3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3e2:	4607      	mov	r7, r0
 800e3e4:	f1b8 0f00 	cmp.w	r8, #0
 800e3e8:	dd0d      	ble.n	800e406 <_dtoa_r+0x67e>
 800e3ea:	9a05      	ldr	r2, [sp, #20]
 800e3ec:	2a00      	cmp	r2, #0
 800e3ee:	dd0a      	ble.n	800e406 <_dtoa_r+0x67e>
 800e3f0:	4542      	cmp	r2, r8
 800e3f2:	9904      	ldr	r1, [sp, #16]
 800e3f4:	bfa8      	it	ge
 800e3f6:	4642      	movge	r2, r8
 800e3f8:	1a89      	subs	r1, r1, r2
 800e3fa:	9104      	str	r1, [sp, #16]
 800e3fc:	9905      	ldr	r1, [sp, #20]
 800e3fe:	eba8 0802 	sub.w	r8, r8, r2
 800e402:	1a8a      	subs	r2, r1, r2
 800e404:	9205      	str	r2, [sp, #20]
 800e406:	b303      	cbz	r3, 800e44a <_dtoa_r+0x6c2>
 800e408:	9a07      	ldr	r2, [sp, #28]
 800e40a:	2a00      	cmp	r2, #0
 800e40c:	f000 80a5 	beq.w	800e55a <_dtoa_r+0x7d2>
 800e410:	2c00      	cmp	r4, #0
 800e412:	dd13      	ble.n	800e43c <_dtoa_r+0x6b4>
 800e414:	4639      	mov	r1, r7
 800e416:	4622      	mov	r2, r4
 800e418:	4630      	mov	r0, r6
 800e41a:	930d      	str	r3, [sp, #52]	; 0x34
 800e41c:	f000 fce0 	bl	800ede0 <__pow5mult>
 800e420:	462a      	mov	r2, r5
 800e422:	4601      	mov	r1, r0
 800e424:	4607      	mov	r7, r0
 800e426:	4630      	mov	r0, r6
 800e428:	f000 fc30 	bl	800ec8c <__multiply>
 800e42c:	4629      	mov	r1, r5
 800e42e:	900a      	str	r0, [sp, #40]	; 0x28
 800e430:	4630      	mov	r0, r6
 800e432:	f000 fb5d 	bl	800eaf0 <_Bfree>
 800e436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e43a:	4615      	mov	r5, r2
 800e43c:	1b1a      	subs	r2, r3, r4
 800e43e:	d004      	beq.n	800e44a <_dtoa_r+0x6c2>
 800e440:	4629      	mov	r1, r5
 800e442:	4630      	mov	r0, r6
 800e444:	f000 fccc 	bl	800ede0 <__pow5mult>
 800e448:	4605      	mov	r5, r0
 800e44a:	2101      	movs	r1, #1
 800e44c:	4630      	mov	r0, r6
 800e44e:	f000 fc07 	bl	800ec60 <__i2b>
 800e452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e454:	2b00      	cmp	r3, #0
 800e456:	4604      	mov	r4, r0
 800e458:	f340 8081 	ble.w	800e55e <_dtoa_r+0x7d6>
 800e45c:	461a      	mov	r2, r3
 800e45e:	4601      	mov	r1, r0
 800e460:	4630      	mov	r0, r6
 800e462:	f000 fcbd 	bl	800ede0 <__pow5mult>
 800e466:	9b06      	ldr	r3, [sp, #24]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	4604      	mov	r4, r0
 800e46c:	dd7a      	ble.n	800e564 <_dtoa_r+0x7dc>
 800e46e:	2300      	movs	r3, #0
 800e470:	930a      	str	r3, [sp, #40]	; 0x28
 800e472:	6922      	ldr	r2, [r4, #16]
 800e474:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e478:	6910      	ldr	r0, [r2, #16]
 800e47a:	f000 fba1 	bl	800ebc0 <__hi0bits>
 800e47e:	f1c0 0020 	rsb	r0, r0, #32
 800e482:	9b05      	ldr	r3, [sp, #20]
 800e484:	4418      	add	r0, r3
 800e486:	f010 001f 	ands.w	r0, r0, #31
 800e48a:	f000 808c 	beq.w	800e5a6 <_dtoa_r+0x81e>
 800e48e:	f1c0 0220 	rsb	r2, r0, #32
 800e492:	2a04      	cmp	r2, #4
 800e494:	f340 8085 	ble.w	800e5a2 <_dtoa_r+0x81a>
 800e498:	f1c0 001c 	rsb	r0, r0, #28
 800e49c:	9b04      	ldr	r3, [sp, #16]
 800e49e:	4403      	add	r3, r0
 800e4a0:	9304      	str	r3, [sp, #16]
 800e4a2:	9b05      	ldr	r3, [sp, #20]
 800e4a4:	4403      	add	r3, r0
 800e4a6:	4480      	add	r8, r0
 800e4a8:	9305      	str	r3, [sp, #20]
 800e4aa:	9b04      	ldr	r3, [sp, #16]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	dd05      	ble.n	800e4bc <_dtoa_r+0x734>
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f000 fced 	bl	800ee94 <__lshift>
 800e4ba:	4605      	mov	r5, r0
 800e4bc:	9b05      	ldr	r3, [sp, #20]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	dd05      	ble.n	800e4ce <_dtoa_r+0x746>
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	f000 fce4 	bl	800ee94 <__lshift>
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d06a      	beq.n	800e5aa <_dtoa_r+0x822>
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	f000 fd4c 	bl	800ef74 <__mcmp>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	da64      	bge.n	800e5aa <_dtoa_r+0x822>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	220a      	movs	r2, #10
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f000 fb24 	bl	800eb34 <__multadd>
 800e4ec:	9b07      	ldr	r3, [sp, #28]
 800e4ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4f2:	4605      	mov	r5, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 8191 	beq.w	800e81c <_dtoa_r+0xa94>
 800e4fa:	4639      	mov	r1, r7
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	220a      	movs	r2, #10
 800e500:	4630      	mov	r0, r6
 800e502:	f000 fb17 	bl	800eb34 <__multadd>
 800e506:	f1ba 0f00 	cmp.w	sl, #0
 800e50a:	4607      	mov	r7, r0
 800e50c:	f300 808d 	bgt.w	800e62a <_dtoa_r+0x8a2>
 800e510:	9b06      	ldr	r3, [sp, #24]
 800e512:	2b02      	cmp	r3, #2
 800e514:	dc50      	bgt.n	800e5b8 <_dtoa_r+0x830>
 800e516:	e088      	b.n	800e62a <_dtoa_r+0x8a2>
 800e518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e51a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e51e:	e751      	b.n	800e3c4 <_dtoa_r+0x63c>
 800e520:	f109 34ff 	add.w	r4, r9, #4294967295
 800e524:	42a3      	cmp	r3, r4
 800e526:	bfbf      	itttt	lt
 800e528:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800e52a:	1ae3      	sublt	r3, r4, r3
 800e52c:	18d2      	addlt	r2, r2, r3
 800e52e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800e530:	bfb6      	itet	lt
 800e532:	4623      	movlt	r3, r4
 800e534:	1b1c      	subge	r4, r3, r4
 800e536:	2400      	movlt	r4, #0
 800e538:	f1b9 0f00 	cmp.w	r9, #0
 800e53c:	bfb5      	itete	lt
 800e53e:	9a04      	ldrlt	r2, [sp, #16]
 800e540:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e544:	eba2 0809 	sublt.w	r8, r2, r9
 800e548:	464a      	movge	r2, r9
 800e54a:	bfb8      	it	lt
 800e54c:	2200      	movlt	r2, #0
 800e54e:	e73c      	b.n	800e3ca <_dtoa_r+0x642>
 800e550:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e554:	9f07      	ldr	r7, [sp, #28]
 800e556:	461c      	mov	r4, r3
 800e558:	e744      	b.n	800e3e4 <_dtoa_r+0x65c>
 800e55a:	461a      	mov	r2, r3
 800e55c:	e770      	b.n	800e440 <_dtoa_r+0x6b8>
 800e55e:	9b06      	ldr	r3, [sp, #24]
 800e560:	2b01      	cmp	r3, #1
 800e562:	dc18      	bgt.n	800e596 <_dtoa_r+0x80e>
 800e564:	9b02      	ldr	r3, [sp, #8]
 800e566:	b9b3      	cbnz	r3, 800e596 <_dtoa_r+0x80e>
 800e568:	9b03      	ldr	r3, [sp, #12]
 800e56a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e56e:	b9a2      	cbnz	r2, 800e59a <_dtoa_r+0x812>
 800e570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e574:	0d12      	lsrs	r2, r2, #20
 800e576:	0512      	lsls	r2, r2, #20
 800e578:	b18a      	cbz	r2, 800e59e <_dtoa_r+0x816>
 800e57a:	9b04      	ldr	r3, [sp, #16]
 800e57c:	3301      	adds	r3, #1
 800e57e:	9304      	str	r3, [sp, #16]
 800e580:	9b05      	ldr	r3, [sp, #20]
 800e582:	3301      	adds	r3, #1
 800e584:	9305      	str	r3, [sp, #20]
 800e586:	2301      	movs	r3, #1
 800e588:	930a      	str	r3, [sp, #40]	; 0x28
 800e58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f47f af70 	bne.w	800e472 <_dtoa_r+0x6ea>
 800e592:	2001      	movs	r0, #1
 800e594:	e775      	b.n	800e482 <_dtoa_r+0x6fa>
 800e596:	2300      	movs	r3, #0
 800e598:	e7f6      	b.n	800e588 <_dtoa_r+0x800>
 800e59a:	9b02      	ldr	r3, [sp, #8]
 800e59c:	e7f4      	b.n	800e588 <_dtoa_r+0x800>
 800e59e:	920a      	str	r2, [sp, #40]	; 0x28
 800e5a0:	e7f3      	b.n	800e58a <_dtoa_r+0x802>
 800e5a2:	d082      	beq.n	800e4aa <_dtoa_r+0x722>
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	301c      	adds	r0, #28
 800e5a8:	e778      	b.n	800e49c <_dtoa_r+0x714>
 800e5aa:	f1b9 0f00 	cmp.w	r9, #0
 800e5ae:	dc37      	bgt.n	800e620 <_dtoa_r+0x898>
 800e5b0:	9b06      	ldr	r3, [sp, #24]
 800e5b2:	2b02      	cmp	r3, #2
 800e5b4:	dd34      	ble.n	800e620 <_dtoa_r+0x898>
 800e5b6:	46ca      	mov	sl, r9
 800e5b8:	f1ba 0f00 	cmp.w	sl, #0
 800e5bc:	d10d      	bne.n	800e5da <_dtoa_r+0x852>
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4653      	mov	r3, sl
 800e5c2:	2205      	movs	r2, #5
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f000 fab5 	bl	800eb34 <__multadd>
 800e5ca:	4601      	mov	r1, r0
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	f000 fcd0 	bl	800ef74 <__mcmp>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	f73f adeb 	bgt.w	800e1b0 <_dtoa_r+0x428>
 800e5da:	9b08      	ldr	r3, [sp, #32]
 800e5dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e5e0:	ea6f 0b03 	mvn.w	fp, r3
 800e5e4:	f04f 0900 	mov.w	r9, #0
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	f000 fa80 	bl	800eaf0 <_Bfree>
 800e5f0:	2f00      	cmp	r7, #0
 800e5f2:	f43f aea8 	beq.w	800e346 <_dtoa_r+0x5be>
 800e5f6:	f1b9 0f00 	cmp.w	r9, #0
 800e5fa:	d005      	beq.n	800e608 <_dtoa_r+0x880>
 800e5fc:	45b9      	cmp	r9, r7
 800e5fe:	d003      	beq.n	800e608 <_dtoa_r+0x880>
 800e600:	4649      	mov	r1, r9
 800e602:	4630      	mov	r0, r6
 800e604:	f000 fa74 	bl	800eaf0 <_Bfree>
 800e608:	4639      	mov	r1, r7
 800e60a:	4630      	mov	r0, r6
 800e60c:	f000 fa70 	bl	800eaf0 <_Bfree>
 800e610:	e699      	b.n	800e346 <_dtoa_r+0x5be>
 800e612:	2400      	movs	r4, #0
 800e614:	4627      	mov	r7, r4
 800e616:	e7e0      	b.n	800e5da <_dtoa_r+0x852>
 800e618:	46bb      	mov	fp, r7
 800e61a:	4604      	mov	r4, r0
 800e61c:	4607      	mov	r7, r0
 800e61e:	e5c7      	b.n	800e1b0 <_dtoa_r+0x428>
 800e620:	9b07      	ldr	r3, [sp, #28]
 800e622:	46ca      	mov	sl, r9
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 8100 	beq.w	800e82a <_dtoa_r+0xaa2>
 800e62a:	f1b8 0f00 	cmp.w	r8, #0
 800e62e:	dd05      	ble.n	800e63c <_dtoa_r+0x8b4>
 800e630:	4639      	mov	r1, r7
 800e632:	4642      	mov	r2, r8
 800e634:	4630      	mov	r0, r6
 800e636:	f000 fc2d 	bl	800ee94 <__lshift>
 800e63a:	4607      	mov	r7, r0
 800e63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d05d      	beq.n	800e6fe <_dtoa_r+0x976>
 800e642:	6879      	ldr	r1, [r7, #4]
 800e644:	4630      	mov	r0, r6
 800e646:	f000 fa13 	bl	800ea70 <_Balloc>
 800e64a:	4680      	mov	r8, r0
 800e64c:	b928      	cbnz	r0, 800e65a <_dtoa_r+0x8d2>
 800e64e:	4b82      	ldr	r3, [pc, #520]	; (800e858 <_dtoa_r+0xad0>)
 800e650:	4602      	mov	r2, r0
 800e652:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e656:	f7ff bbaf 	b.w	800ddb8 <_dtoa_r+0x30>
 800e65a:	693a      	ldr	r2, [r7, #16]
 800e65c:	3202      	adds	r2, #2
 800e65e:	0092      	lsls	r2, r2, #2
 800e660:	f107 010c 	add.w	r1, r7, #12
 800e664:	300c      	adds	r0, #12
 800e666:	f7fe fe8f 	bl	800d388 <memcpy>
 800e66a:	2201      	movs	r2, #1
 800e66c:	4641      	mov	r1, r8
 800e66e:	4630      	mov	r0, r6
 800e670:	f000 fc10 	bl	800ee94 <__lshift>
 800e674:	9b01      	ldr	r3, [sp, #4]
 800e676:	3301      	adds	r3, #1
 800e678:	9304      	str	r3, [sp, #16]
 800e67a:	9b01      	ldr	r3, [sp, #4]
 800e67c:	4453      	add	r3, sl
 800e67e:	9308      	str	r3, [sp, #32]
 800e680:	9b02      	ldr	r3, [sp, #8]
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	46b9      	mov	r9, r7
 800e688:	9307      	str	r3, [sp, #28]
 800e68a:	4607      	mov	r7, r0
 800e68c:	9b04      	ldr	r3, [sp, #16]
 800e68e:	4621      	mov	r1, r4
 800e690:	3b01      	subs	r3, #1
 800e692:	4628      	mov	r0, r5
 800e694:	9302      	str	r3, [sp, #8]
 800e696:	f7ff fae9 	bl	800dc6c <quorem>
 800e69a:	4603      	mov	r3, r0
 800e69c:	3330      	adds	r3, #48	; 0x30
 800e69e:	9005      	str	r0, [sp, #20]
 800e6a0:	4649      	mov	r1, r9
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a6:	f000 fc65 	bl	800ef74 <__mcmp>
 800e6aa:	463a      	mov	r2, r7
 800e6ac:	4682      	mov	sl, r0
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	f000 fc7b 	bl	800efac <__mdiff>
 800e6b6:	68c2      	ldr	r2, [r0, #12]
 800e6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ba:	4680      	mov	r8, r0
 800e6bc:	bb0a      	cbnz	r2, 800e702 <_dtoa_r+0x97a>
 800e6be:	4601      	mov	r1, r0
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	f000 fc57 	bl	800ef74 <__mcmp>
 800e6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	4641      	mov	r1, r8
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e6d2:	f000 fa0d 	bl	800eaf0 <_Bfree>
 800e6d6:	9b06      	ldr	r3, [sp, #24]
 800e6d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e6de:	ea43 0102 	orr.w	r1, r3, r2
 800e6e2:	9b07      	ldr	r3, [sp, #28]
 800e6e4:	430b      	orrs	r3, r1
 800e6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6e8:	d10d      	bne.n	800e706 <_dtoa_r+0x97e>
 800e6ea:	2b39      	cmp	r3, #57	; 0x39
 800e6ec:	d029      	beq.n	800e742 <_dtoa_r+0x9ba>
 800e6ee:	f1ba 0f00 	cmp.w	sl, #0
 800e6f2:	dd01      	ble.n	800e6f8 <_dtoa_r+0x970>
 800e6f4:	9b05      	ldr	r3, [sp, #20]
 800e6f6:	3331      	adds	r3, #49	; 0x31
 800e6f8:	9a02      	ldr	r2, [sp, #8]
 800e6fa:	7013      	strb	r3, [r2, #0]
 800e6fc:	e774      	b.n	800e5e8 <_dtoa_r+0x860>
 800e6fe:	4638      	mov	r0, r7
 800e700:	e7b8      	b.n	800e674 <_dtoa_r+0x8ec>
 800e702:	2201      	movs	r2, #1
 800e704:	e7e1      	b.n	800e6ca <_dtoa_r+0x942>
 800e706:	f1ba 0f00 	cmp.w	sl, #0
 800e70a:	db06      	blt.n	800e71a <_dtoa_r+0x992>
 800e70c:	9906      	ldr	r1, [sp, #24]
 800e70e:	ea41 0a0a 	orr.w	sl, r1, sl
 800e712:	9907      	ldr	r1, [sp, #28]
 800e714:	ea5a 0101 	orrs.w	r1, sl, r1
 800e718:	d120      	bne.n	800e75c <_dtoa_r+0x9d4>
 800e71a:	2a00      	cmp	r2, #0
 800e71c:	ddec      	ble.n	800e6f8 <_dtoa_r+0x970>
 800e71e:	4629      	mov	r1, r5
 800e720:	2201      	movs	r2, #1
 800e722:	4630      	mov	r0, r6
 800e724:	9304      	str	r3, [sp, #16]
 800e726:	f000 fbb5 	bl	800ee94 <__lshift>
 800e72a:	4621      	mov	r1, r4
 800e72c:	4605      	mov	r5, r0
 800e72e:	f000 fc21 	bl	800ef74 <__mcmp>
 800e732:	2800      	cmp	r0, #0
 800e734:	9b04      	ldr	r3, [sp, #16]
 800e736:	dc02      	bgt.n	800e73e <_dtoa_r+0x9b6>
 800e738:	d1de      	bne.n	800e6f8 <_dtoa_r+0x970>
 800e73a:	07da      	lsls	r2, r3, #31
 800e73c:	d5dc      	bpl.n	800e6f8 <_dtoa_r+0x970>
 800e73e:	2b39      	cmp	r3, #57	; 0x39
 800e740:	d1d8      	bne.n	800e6f4 <_dtoa_r+0x96c>
 800e742:	9a02      	ldr	r2, [sp, #8]
 800e744:	2339      	movs	r3, #57	; 0x39
 800e746:	7013      	strb	r3, [r2, #0]
 800e748:	4643      	mov	r3, r8
 800e74a:	4698      	mov	r8, r3
 800e74c:	3b01      	subs	r3, #1
 800e74e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e752:	2a39      	cmp	r2, #57	; 0x39
 800e754:	d051      	beq.n	800e7fa <_dtoa_r+0xa72>
 800e756:	3201      	adds	r2, #1
 800e758:	701a      	strb	r2, [r3, #0]
 800e75a:	e745      	b.n	800e5e8 <_dtoa_r+0x860>
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	dd03      	ble.n	800e768 <_dtoa_r+0x9e0>
 800e760:	2b39      	cmp	r3, #57	; 0x39
 800e762:	d0ee      	beq.n	800e742 <_dtoa_r+0x9ba>
 800e764:	3301      	adds	r3, #1
 800e766:	e7c7      	b.n	800e6f8 <_dtoa_r+0x970>
 800e768:	9a04      	ldr	r2, [sp, #16]
 800e76a:	9908      	ldr	r1, [sp, #32]
 800e76c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e770:	428a      	cmp	r2, r1
 800e772:	d02b      	beq.n	800e7cc <_dtoa_r+0xa44>
 800e774:	4629      	mov	r1, r5
 800e776:	2300      	movs	r3, #0
 800e778:	220a      	movs	r2, #10
 800e77a:	4630      	mov	r0, r6
 800e77c:	f000 f9da 	bl	800eb34 <__multadd>
 800e780:	45b9      	cmp	r9, r7
 800e782:	4605      	mov	r5, r0
 800e784:	f04f 0300 	mov.w	r3, #0
 800e788:	f04f 020a 	mov.w	r2, #10
 800e78c:	4649      	mov	r1, r9
 800e78e:	4630      	mov	r0, r6
 800e790:	d107      	bne.n	800e7a2 <_dtoa_r+0xa1a>
 800e792:	f000 f9cf 	bl	800eb34 <__multadd>
 800e796:	4681      	mov	r9, r0
 800e798:	4607      	mov	r7, r0
 800e79a:	9b04      	ldr	r3, [sp, #16]
 800e79c:	3301      	adds	r3, #1
 800e79e:	9304      	str	r3, [sp, #16]
 800e7a0:	e774      	b.n	800e68c <_dtoa_r+0x904>
 800e7a2:	f000 f9c7 	bl	800eb34 <__multadd>
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	4681      	mov	r9, r0
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	220a      	movs	r2, #10
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f000 f9c0 	bl	800eb34 <__multadd>
 800e7b4:	4607      	mov	r7, r0
 800e7b6:	e7f0      	b.n	800e79a <_dtoa_r+0xa12>
 800e7b8:	f1ba 0f00 	cmp.w	sl, #0
 800e7bc:	9a01      	ldr	r2, [sp, #4]
 800e7be:	bfcc      	ite	gt
 800e7c0:	46d0      	movgt	r8, sl
 800e7c2:	f04f 0801 	movle.w	r8, #1
 800e7c6:	4490      	add	r8, r2
 800e7c8:	f04f 0900 	mov.w	r9, #0
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	9302      	str	r3, [sp, #8]
 800e7d4:	f000 fb5e 	bl	800ee94 <__lshift>
 800e7d8:	4621      	mov	r1, r4
 800e7da:	4605      	mov	r5, r0
 800e7dc:	f000 fbca 	bl	800ef74 <__mcmp>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	dcb1      	bgt.n	800e748 <_dtoa_r+0x9c0>
 800e7e4:	d102      	bne.n	800e7ec <_dtoa_r+0xa64>
 800e7e6:	9b02      	ldr	r3, [sp, #8]
 800e7e8:	07db      	lsls	r3, r3, #31
 800e7ea:	d4ad      	bmi.n	800e748 <_dtoa_r+0x9c0>
 800e7ec:	4643      	mov	r3, r8
 800e7ee:	4698      	mov	r8, r3
 800e7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7f4:	2a30      	cmp	r2, #48	; 0x30
 800e7f6:	d0fa      	beq.n	800e7ee <_dtoa_r+0xa66>
 800e7f8:	e6f6      	b.n	800e5e8 <_dtoa_r+0x860>
 800e7fa:	9a01      	ldr	r2, [sp, #4]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d1a4      	bne.n	800e74a <_dtoa_r+0x9c2>
 800e800:	f10b 0b01 	add.w	fp, fp, #1
 800e804:	2331      	movs	r3, #49	; 0x31
 800e806:	e778      	b.n	800e6fa <_dtoa_r+0x972>
 800e808:	4b14      	ldr	r3, [pc, #80]	; (800e85c <_dtoa_r+0xad4>)
 800e80a:	f7ff bb27 	b.w	800de5c <_dtoa_r+0xd4>
 800e80e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e810:	2b00      	cmp	r3, #0
 800e812:	f47f ab03 	bne.w	800de1c <_dtoa_r+0x94>
 800e816:	4b12      	ldr	r3, [pc, #72]	; (800e860 <_dtoa_r+0xad8>)
 800e818:	f7ff bb20 	b.w	800de5c <_dtoa_r+0xd4>
 800e81c:	f1ba 0f00 	cmp.w	sl, #0
 800e820:	dc03      	bgt.n	800e82a <_dtoa_r+0xaa2>
 800e822:	9b06      	ldr	r3, [sp, #24]
 800e824:	2b02      	cmp	r3, #2
 800e826:	f73f aec7 	bgt.w	800e5b8 <_dtoa_r+0x830>
 800e82a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e82e:	4621      	mov	r1, r4
 800e830:	4628      	mov	r0, r5
 800e832:	f7ff fa1b 	bl	800dc6c <quorem>
 800e836:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e83a:	f808 3b01 	strb.w	r3, [r8], #1
 800e83e:	9a01      	ldr	r2, [sp, #4]
 800e840:	eba8 0202 	sub.w	r2, r8, r2
 800e844:	4592      	cmp	sl, r2
 800e846:	ddb7      	ble.n	800e7b8 <_dtoa_r+0xa30>
 800e848:	4629      	mov	r1, r5
 800e84a:	2300      	movs	r3, #0
 800e84c:	220a      	movs	r2, #10
 800e84e:	4630      	mov	r0, r6
 800e850:	f000 f970 	bl	800eb34 <__multadd>
 800e854:	4605      	mov	r5, r0
 800e856:	e7ea      	b.n	800e82e <_dtoa_r+0xaa6>
 800e858:	080117ff 	.word	0x080117ff
 800e85c:	0801175c 	.word	0x0801175c
 800e860:	08011780 	.word	0x08011780

0800e864 <std>:
 800e864:	2300      	movs	r3, #0
 800e866:	b510      	push	{r4, lr}
 800e868:	4604      	mov	r4, r0
 800e86a:	e9c0 3300 	strd	r3, r3, [r0]
 800e86e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e872:	6083      	str	r3, [r0, #8]
 800e874:	8181      	strh	r1, [r0, #12]
 800e876:	6643      	str	r3, [r0, #100]	; 0x64
 800e878:	81c2      	strh	r2, [r0, #14]
 800e87a:	6183      	str	r3, [r0, #24]
 800e87c:	4619      	mov	r1, r3
 800e87e:	2208      	movs	r2, #8
 800e880:	305c      	adds	r0, #92	; 0x5c
 800e882:	f7fe fd8f 	bl	800d3a4 <memset>
 800e886:	4b05      	ldr	r3, [pc, #20]	; (800e89c <std+0x38>)
 800e888:	6263      	str	r3, [r4, #36]	; 0x24
 800e88a:	4b05      	ldr	r3, [pc, #20]	; (800e8a0 <std+0x3c>)
 800e88c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e88e:	4b05      	ldr	r3, [pc, #20]	; (800e8a4 <std+0x40>)
 800e890:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e892:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <std+0x44>)
 800e894:	6224      	str	r4, [r4, #32]
 800e896:	6323      	str	r3, [r4, #48]	; 0x30
 800e898:	bd10      	pop	{r4, pc}
 800e89a:	bf00      	nop
 800e89c:	0800f639 	.word	0x0800f639
 800e8a0:	0800f65b 	.word	0x0800f65b
 800e8a4:	0800f693 	.word	0x0800f693
 800e8a8:	0800f6b7 	.word	0x0800f6b7

0800e8ac <_cleanup_r>:
 800e8ac:	4901      	ldr	r1, [pc, #4]	; (800e8b4 <_cleanup_r+0x8>)
 800e8ae:	f000 b8af 	b.w	800ea10 <_fwalk_reent>
 800e8b2:	bf00      	nop
 800e8b4:	0800f9cd 	.word	0x0800f9cd

0800e8b8 <__sfmoreglue>:
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	2268      	movs	r2, #104	; 0x68
 800e8bc:	1e4d      	subs	r5, r1, #1
 800e8be:	4355      	muls	r5, r2
 800e8c0:	460e      	mov	r6, r1
 800e8c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8c6:	f000 fcd9 	bl	800f27c <_malloc_r>
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	b140      	cbz	r0, 800e8e0 <__sfmoreglue+0x28>
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	e9c0 1600 	strd	r1, r6, [r0]
 800e8d4:	300c      	adds	r0, #12
 800e8d6:	60a0      	str	r0, [r4, #8]
 800e8d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8dc:	f7fe fd62 	bl	800d3a4 <memset>
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	bd70      	pop	{r4, r5, r6, pc}

0800e8e4 <__sfp_lock_acquire>:
 800e8e4:	4801      	ldr	r0, [pc, #4]	; (800e8ec <__sfp_lock_acquire+0x8>)
 800e8e6:	f000 b8b8 	b.w	800ea5a <__retarget_lock_acquire_recursive>
 800e8ea:	bf00      	nop
 800e8ec:	24000791 	.word	0x24000791

0800e8f0 <__sfp_lock_release>:
 800e8f0:	4801      	ldr	r0, [pc, #4]	; (800e8f8 <__sfp_lock_release+0x8>)
 800e8f2:	f000 b8b3 	b.w	800ea5c <__retarget_lock_release_recursive>
 800e8f6:	bf00      	nop
 800e8f8:	24000791 	.word	0x24000791

0800e8fc <__sinit_lock_acquire>:
 800e8fc:	4801      	ldr	r0, [pc, #4]	; (800e904 <__sinit_lock_acquire+0x8>)
 800e8fe:	f000 b8ac 	b.w	800ea5a <__retarget_lock_acquire_recursive>
 800e902:	bf00      	nop
 800e904:	24000792 	.word	0x24000792

0800e908 <__sinit_lock_release>:
 800e908:	4801      	ldr	r0, [pc, #4]	; (800e910 <__sinit_lock_release+0x8>)
 800e90a:	f000 b8a7 	b.w	800ea5c <__retarget_lock_release_recursive>
 800e90e:	bf00      	nop
 800e910:	24000792 	.word	0x24000792

0800e914 <__sinit>:
 800e914:	b510      	push	{r4, lr}
 800e916:	4604      	mov	r4, r0
 800e918:	f7ff fff0 	bl	800e8fc <__sinit_lock_acquire>
 800e91c:	69a3      	ldr	r3, [r4, #24]
 800e91e:	b11b      	cbz	r3, 800e928 <__sinit+0x14>
 800e920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e924:	f7ff bff0 	b.w	800e908 <__sinit_lock_release>
 800e928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e92c:	6523      	str	r3, [r4, #80]	; 0x50
 800e92e:	4b13      	ldr	r3, [pc, #76]	; (800e97c <__sinit+0x68>)
 800e930:	4a13      	ldr	r2, [pc, #76]	; (800e980 <__sinit+0x6c>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	62a2      	str	r2, [r4, #40]	; 0x28
 800e936:	42a3      	cmp	r3, r4
 800e938:	bf04      	itt	eq
 800e93a:	2301      	moveq	r3, #1
 800e93c:	61a3      	streq	r3, [r4, #24]
 800e93e:	4620      	mov	r0, r4
 800e940:	f000 f820 	bl	800e984 <__sfp>
 800e944:	6060      	str	r0, [r4, #4]
 800e946:	4620      	mov	r0, r4
 800e948:	f000 f81c 	bl	800e984 <__sfp>
 800e94c:	60a0      	str	r0, [r4, #8]
 800e94e:	4620      	mov	r0, r4
 800e950:	f000 f818 	bl	800e984 <__sfp>
 800e954:	2200      	movs	r2, #0
 800e956:	60e0      	str	r0, [r4, #12]
 800e958:	2104      	movs	r1, #4
 800e95a:	6860      	ldr	r0, [r4, #4]
 800e95c:	f7ff ff82 	bl	800e864 <std>
 800e960:	68a0      	ldr	r0, [r4, #8]
 800e962:	2201      	movs	r2, #1
 800e964:	2109      	movs	r1, #9
 800e966:	f7ff ff7d 	bl	800e864 <std>
 800e96a:	68e0      	ldr	r0, [r4, #12]
 800e96c:	2202      	movs	r2, #2
 800e96e:	2112      	movs	r1, #18
 800e970:	f7ff ff78 	bl	800e864 <std>
 800e974:	2301      	movs	r3, #1
 800e976:	61a3      	str	r3, [r4, #24]
 800e978:	e7d2      	b.n	800e920 <__sinit+0xc>
 800e97a:	bf00      	nop
 800e97c:	08011748 	.word	0x08011748
 800e980:	0800e8ad 	.word	0x0800e8ad

0800e984 <__sfp>:
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	4607      	mov	r7, r0
 800e988:	f7ff ffac 	bl	800e8e4 <__sfp_lock_acquire>
 800e98c:	4b1e      	ldr	r3, [pc, #120]	; (800ea08 <__sfp+0x84>)
 800e98e:	681e      	ldr	r6, [r3, #0]
 800e990:	69b3      	ldr	r3, [r6, #24]
 800e992:	b913      	cbnz	r3, 800e99a <__sfp+0x16>
 800e994:	4630      	mov	r0, r6
 800e996:	f7ff ffbd 	bl	800e914 <__sinit>
 800e99a:	3648      	adds	r6, #72	; 0x48
 800e99c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	d503      	bpl.n	800e9ac <__sfp+0x28>
 800e9a4:	6833      	ldr	r3, [r6, #0]
 800e9a6:	b30b      	cbz	r3, 800e9ec <__sfp+0x68>
 800e9a8:	6836      	ldr	r6, [r6, #0]
 800e9aa:	e7f7      	b.n	800e99c <__sfp+0x18>
 800e9ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9b0:	b9d5      	cbnz	r5, 800e9e8 <__sfp+0x64>
 800e9b2:	4b16      	ldr	r3, [pc, #88]	; (800ea0c <__sfp+0x88>)
 800e9b4:	60e3      	str	r3, [r4, #12]
 800e9b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9ba:	6665      	str	r5, [r4, #100]	; 0x64
 800e9bc:	f000 f84c 	bl	800ea58 <__retarget_lock_init_recursive>
 800e9c0:	f7ff ff96 	bl	800e8f0 <__sfp_lock_release>
 800e9c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e9cc:	6025      	str	r5, [r4, #0]
 800e9ce:	61a5      	str	r5, [r4, #24]
 800e9d0:	2208      	movs	r2, #8
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9d8:	f7fe fce4 	bl	800d3a4 <memset>
 800e9dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e8:	3468      	adds	r4, #104	; 0x68
 800e9ea:	e7d9      	b.n	800e9a0 <__sfp+0x1c>
 800e9ec:	2104      	movs	r1, #4
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	f7ff ff62 	bl	800e8b8 <__sfmoreglue>
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	6030      	str	r0, [r6, #0]
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d1d5      	bne.n	800e9a8 <__sfp+0x24>
 800e9fc:	f7ff ff78 	bl	800e8f0 <__sfp_lock_release>
 800ea00:	230c      	movs	r3, #12
 800ea02:	603b      	str	r3, [r7, #0]
 800ea04:	e7ee      	b.n	800e9e4 <__sfp+0x60>
 800ea06:	bf00      	nop
 800ea08:	08011748 	.word	0x08011748
 800ea0c:	ffff0001 	.word	0xffff0001

0800ea10 <_fwalk_reent>:
 800ea10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea14:	4606      	mov	r6, r0
 800ea16:	4688      	mov	r8, r1
 800ea18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea1c:	2700      	movs	r7, #0
 800ea1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea22:	f1b9 0901 	subs.w	r9, r9, #1
 800ea26:	d505      	bpl.n	800ea34 <_fwalk_reent+0x24>
 800ea28:	6824      	ldr	r4, [r4, #0]
 800ea2a:	2c00      	cmp	r4, #0
 800ea2c:	d1f7      	bne.n	800ea1e <_fwalk_reent+0xe>
 800ea2e:	4638      	mov	r0, r7
 800ea30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea34:	89ab      	ldrh	r3, [r5, #12]
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d907      	bls.n	800ea4a <_fwalk_reent+0x3a>
 800ea3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	d003      	beq.n	800ea4a <_fwalk_reent+0x3a>
 800ea42:	4629      	mov	r1, r5
 800ea44:	4630      	mov	r0, r6
 800ea46:	47c0      	blx	r8
 800ea48:	4307      	orrs	r7, r0
 800ea4a:	3568      	adds	r5, #104	; 0x68
 800ea4c:	e7e9      	b.n	800ea22 <_fwalk_reent+0x12>
	...

0800ea50 <_localeconv_r>:
 800ea50:	4800      	ldr	r0, [pc, #0]	; (800ea54 <_localeconv_r+0x4>)
 800ea52:	4770      	bx	lr
 800ea54:	24000188 	.word	0x24000188

0800ea58 <__retarget_lock_init_recursive>:
 800ea58:	4770      	bx	lr

0800ea5a <__retarget_lock_acquire_recursive>:
 800ea5a:	4770      	bx	lr

0800ea5c <__retarget_lock_release_recursive>:
 800ea5c:	4770      	bx	lr
	...

0800ea60 <malloc>:
 800ea60:	4b02      	ldr	r3, [pc, #8]	; (800ea6c <malloc+0xc>)
 800ea62:	4601      	mov	r1, r0
 800ea64:	6818      	ldr	r0, [r3, #0]
 800ea66:	f000 bc09 	b.w	800f27c <_malloc_r>
 800ea6a:	bf00      	nop
 800ea6c:	24000034 	.word	0x24000034

0800ea70 <_Balloc>:
 800ea70:	b570      	push	{r4, r5, r6, lr}
 800ea72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea74:	4604      	mov	r4, r0
 800ea76:	460d      	mov	r5, r1
 800ea78:	b976      	cbnz	r6, 800ea98 <_Balloc+0x28>
 800ea7a:	2010      	movs	r0, #16
 800ea7c:	f7ff fff0 	bl	800ea60 <malloc>
 800ea80:	4602      	mov	r2, r0
 800ea82:	6260      	str	r0, [r4, #36]	; 0x24
 800ea84:	b920      	cbnz	r0, 800ea90 <_Balloc+0x20>
 800ea86:	4b18      	ldr	r3, [pc, #96]	; (800eae8 <_Balloc+0x78>)
 800ea88:	4818      	ldr	r0, [pc, #96]	; (800eaec <_Balloc+0x7c>)
 800ea8a:	2166      	movs	r1, #102	; 0x66
 800ea8c:	f000 feea 	bl	800f864 <__assert_func>
 800ea90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea94:	6006      	str	r6, [r0, #0]
 800ea96:	60c6      	str	r6, [r0, #12]
 800ea98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea9a:	68f3      	ldr	r3, [r6, #12]
 800ea9c:	b183      	cbz	r3, 800eac0 <_Balloc+0x50>
 800ea9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eaa6:	b9b8      	cbnz	r0, 800ead8 <_Balloc+0x68>
 800eaa8:	2101      	movs	r1, #1
 800eaaa:	fa01 f605 	lsl.w	r6, r1, r5
 800eaae:	1d72      	adds	r2, r6, #5
 800eab0:	0092      	lsls	r2, r2, #2
 800eab2:	4620      	mov	r0, r4
 800eab4:	f000 fb60 	bl	800f178 <_calloc_r>
 800eab8:	b160      	cbz	r0, 800ead4 <_Balloc+0x64>
 800eaba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eabe:	e00e      	b.n	800eade <_Balloc+0x6e>
 800eac0:	2221      	movs	r2, #33	; 0x21
 800eac2:	2104      	movs	r1, #4
 800eac4:	4620      	mov	r0, r4
 800eac6:	f000 fb57 	bl	800f178 <_calloc_r>
 800eaca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eacc:	60f0      	str	r0, [r6, #12]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1e4      	bne.n	800ea9e <_Balloc+0x2e>
 800ead4:	2000      	movs	r0, #0
 800ead6:	bd70      	pop	{r4, r5, r6, pc}
 800ead8:	6802      	ldr	r2, [r0, #0]
 800eada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eade:	2300      	movs	r3, #0
 800eae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eae4:	e7f7      	b.n	800ead6 <_Balloc+0x66>
 800eae6:	bf00      	nop
 800eae8:	0801178d 	.word	0x0801178d
 800eaec:	08011870 	.word	0x08011870

0800eaf0 <_Bfree>:
 800eaf0:	b570      	push	{r4, r5, r6, lr}
 800eaf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	460c      	mov	r4, r1
 800eaf8:	b976      	cbnz	r6, 800eb18 <_Bfree+0x28>
 800eafa:	2010      	movs	r0, #16
 800eafc:	f7ff ffb0 	bl	800ea60 <malloc>
 800eb00:	4602      	mov	r2, r0
 800eb02:	6268      	str	r0, [r5, #36]	; 0x24
 800eb04:	b920      	cbnz	r0, 800eb10 <_Bfree+0x20>
 800eb06:	4b09      	ldr	r3, [pc, #36]	; (800eb2c <_Bfree+0x3c>)
 800eb08:	4809      	ldr	r0, [pc, #36]	; (800eb30 <_Bfree+0x40>)
 800eb0a:	218a      	movs	r1, #138	; 0x8a
 800eb0c:	f000 feaa 	bl	800f864 <__assert_func>
 800eb10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb14:	6006      	str	r6, [r0, #0]
 800eb16:	60c6      	str	r6, [r0, #12]
 800eb18:	b13c      	cbz	r4, 800eb2a <_Bfree+0x3a>
 800eb1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb1c:	6862      	ldr	r2, [r4, #4]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb24:	6021      	str	r1, [r4, #0]
 800eb26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb2a:	bd70      	pop	{r4, r5, r6, pc}
 800eb2c:	0801178d 	.word	0x0801178d
 800eb30:	08011870 	.word	0x08011870

0800eb34 <__multadd>:
 800eb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb38:	690d      	ldr	r5, [r1, #16]
 800eb3a:	4607      	mov	r7, r0
 800eb3c:	460c      	mov	r4, r1
 800eb3e:	461e      	mov	r6, r3
 800eb40:	f101 0c14 	add.w	ip, r1, #20
 800eb44:	2000      	movs	r0, #0
 800eb46:	f8dc 3000 	ldr.w	r3, [ip]
 800eb4a:	b299      	uxth	r1, r3
 800eb4c:	fb02 6101 	mla	r1, r2, r1, r6
 800eb50:	0c1e      	lsrs	r6, r3, #16
 800eb52:	0c0b      	lsrs	r3, r1, #16
 800eb54:	fb02 3306 	mla	r3, r2, r6, r3
 800eb58:	b289      	uxth	r1, r1
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb60:	4285      	cmp	r5, r0
 800eb62:	f84c 1b04 	str.w	r1, [ip], #4
 800eb66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb6a:	dcec      	bgt.n	800eb46 <__multadd+0x12>
 800eb6c:	b30e      	cbz	r6, 800ebb2 <__multadd+0x7e>
 800eb6e:	68a3      	ldr	r3, [r4, #8]
 800eb70:	42ab      	cmp	r3, r5
 800eb72:	dc19      	bgt.n	800eba8 <__multadd+0x74>
 800eb74:	6861      	ldr	r1, [r4, #4]
 800eb76:	4638      	mov	r0, r7
 800eb78:	3101      	adds	r1, #1
 800eb7a:	f7ff ff79 	bl	800ea70 <_Balloc>
 800eb7e:	4680      	mov	r8, r0
 800eb80:	b928      	cbnz	r0, 800eb8e <__multadd+0x5a>
 800eb82:	4602      	mov	r2, r0
 800eb84:	4b0c      	ldr	r3, [pc, #48]	; (800ebb8 <__multadd+0x84>)
 800eb86:	480d      	ldr	r0, [pc, #52]	; (800ebbc <__multadd+0x88>)
 800eb88:	21b5      	movs	r1, #181	; 0xb5
 800eb8a:	f000 fe6b 	bl	800f864 <__assert_func>
 800eb8e:	6922      	ldr	r2, [r4, #16]
 800eb90:	3202      	adds	r2, #2
 800eb92:	f104 010c 	add.w	r1, r4, #12
 800eb96:	0092      	lsls	r2, r2, #2
 800eb98:	300c      	adds	r0, #12
 800eb9a:	f7fe fbf5 	bl	800d388 <memcpy>
 800eb9e:	4621      	mov	r1, r4
 800eba0:	4638      	mov	r0, r7
 800eba2:	f7ff ffa5 	bl	800eaf0 <_Bfree>
 800eba6:	4644      	mov	r4, r8
 800eba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebac:	3501      	adds	r5, #1
 800ebae:	615e      	str	r6, [r3, #20]
 800ebb0:	6125      	str	r5, [r4, #16]
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb8:	080117ff 	.word	0x080117ff
 800ebbc:	08011870 	.word	0x08011870

0800ebc0 <__hi0bits>:
 800ebc0:	0c03      	lsrs	r3, r0, #16
 800ebc2:	041b      	lsls	r3, r3, #16
 800ebc4:	b9d3      	cbnz	r3, 800ebfc <__hi0bits+0x3c>
 800ebc6:	0400      	lsls	r0, r0, #16
 800ebc8:	2310      	movs	r3, #16
 800ebca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebce:	bf04      	itt	eq
 800ebd0:	0200      	lsleq	r0, r0, #8
 800ebd2:	3308      	addeq	r3, #8
 800ebd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ebd8:	bf04      	itt	eq
 800ebda:	0100      	lsleq	r0, r0, #4
 800ebdc:	3304      	addeq	r3, #4
 800ebde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ebe2:	bf04      	itt	eq
 800ebe4:	0080      	lsleq	r0, r0, #2
 800ebe6:	3302      	addeq	r3, #2
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	db05      	blt.n	800ebf8 <__hi0bits+0x38>
 800ebec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ebf0:	f103 0301 	add.w	r3, r3, #1
 800ebf4:	bf08      	it	eq
 800ebf6:	2320      	moveq	r3, #32
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	4770      	bx	lr
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	e7e4      	b.n	800ebca <__hi0bits+0xa>

0800ec00 <__lo0bits>:
 800ec00:	6803      	ldr	r3, [r0, #0]
 800ec02:	f013 0207 	ands.w	r2, r3, #7
 800ec06:	4601      	mov	r1, r0
 800ec08:	d00b      	beq.n	800ec22 <__lo0bits+0x22>
 800ec0a:	07da      	lsls	r2, r3, #31
 800ec0c:	d423      	bmi.n	800ec56 <__lo0bits+0x56>
 800ec0e:	0798      	lsls	r0, r3, #30
 800ec10:	bf49      	itett	mi
 800ec12:	085b      	lsrmi	r3, r3, #1
 800ec14:	089b      	lsrpl	r3, r3, #2
 800ec16:	2001      	movmi	r0, #1
 800ec18:	600b      	strmi	r3, [r1, #0]
 800ec1a:	bf5c      	itt	pl
 800ec1c:	600b      	strpl	r3, [r1, #0]
 800ec1e:	2002      	movpl	r0, #2
 800ec20:	4770      	bx	lr
 800ec22:	b298      	uxth	r0, r3
 800ec24:	b9a8      	cbnz	r0, 800ec52 <__lo0bits+0x52>
 800ec26:	0c1b      	lsrs	r3, r3, #16
 800ec28:	2010      	movs	r0, #16
 800ec2a:	b2da      	uxtb	r2, r3
 800ec2c:	b90a      	cbnz	r2, 800ec32 <__lo0bits+0x32>
 800ec2e:	3008      	adds	r0, #8
 800ec30:	0a1b      	lsrs	r3, r3, #8
 800ec32:	071a      	lsls	r2, r3, #28
 800ec34:	bf04      	itt	eq
 800ec36:	091b      	lsreq	r3, r3, #4
 800ec38:	3004      	addeq	r0, #4
 800ec3a:	079a      	lsls	r2, r3, #30
 800ec3c:	bf04      	itt	eq
 800ec3e:	089b      	lsreq	r3, r3, #2
 800ec40:	3002      	addeq	r0, #2
 800ec42:	07da      	lsls	r2, r3, #31
 800ec44:	d403      	bmi.n	800ec4e <__lo0bits+0x4e>
 800ec46:	085b      	lsrs	r3, r3, #1
 800ec48:	f100 0001 	add.w	r0, r0, #1
 800ec4c:	d005      	beq.n	800ec5a <__lo0bits+0x5a>
 800ec4e:	600b      	str	r3, [r1, #0]
 800ec50:	4770      	bx	lr
 800ec52:	4610      	mov	r0, r2
 800ec54:	e7e9      	b.n	800ec2a <__lo0bits+0x2a>
 800ec56:	2000      	movs	r0, #0
 800ec58:	4770      	bx	lr
 800ec5a:	2020      	movs	r0, #32
 800ec5c:	4770      	bx	lr
	...

0800ec60 <__i2b>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	460c      	mov	r4, r1
 800ec64:	2101      	movs	r1, #1
 800ec66:	f7ff ff03 	bl	800ea70 <_Balloc>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	b928      	cbnz	r0, 800ec7a <__i2b+0x1a>
 800ec6e:	4b05      	ldr	r3, [pc, #20]	; (800ec84 <__i2b+0x24>)
 800ec70:	4805      	ldr	r0, [pc, #20]	; (800ec88 <__i2b+0x28>)
 800ec72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec76:	f000 fdf5 	bl	800f864 <__assert_func>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	6144      	str	r4, [r0, #20]
 800ec7e:	6103      	str	r3, [r0, #16]
 800ec80:	bd10      	pop	{r4, pc}
 800ec82:	bf00      	nop
 800ec84:	080117ff 	.word	0x080117ff
 800ec88:	08011870 	.word	0x08011870

0800ec8c <__multiply>:
 800ec8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec90:	4691      	mov	r9, r2
 800ec92:	690a      	ldr	r2, [r1, #16]
 800ec94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	bfb8      	it	lt
 800ec9c:	460b      	movlt	r3, r1
 800ec9e:	460c      	mov	r4, r1
 800eca0:	bfbc      	itt	lt
 800eca2:	464c      	movlt	r4, r9
 800eca4:	4699      	movlt	r9, r3
 800eca6:	6927      	ldr	r7, [r4, #16]
 800eca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ecac:	68a3      	ldr	r3, [r4, #8]
 800ecae:	6861      	ldr	r1, [r4, #4]
 800ecb0:	eb07 060a 	add.w	r6, r7, sl
 800ecb4:	42b3      	cmp	r3, r6
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	bfb8      	it	lt
 800ecba:	3101      	addlt	r1, #1
 800ecbc:	f7ff fed8 	bl	800ea70 <_Balloc>
 800ecc0:	b930      	cbnz	r0, 800ecd0 <__multiply+0x44>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	4b44      	ldr	r3, [pc, #272]	; (800edd8 <__multiply+0x14c>)
 800ecc6:	4845      	ldr	r0, [pc, #276]	; (800eddc <__multiply+0x150>)
 800ecc8:	f240 115d 	movw	r1, #349	; 0x15d
 800eccc:	f000 fdca 	bl	800f864 <__assert_func>
 800ecd0:	f100 0514 	add.w	r5, r0, #20
 800ecd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ecd8:	462b      	mov	r3, r5
 800ecda:	2200      	movs	r2, #0
 800ecdc:	4543      	cmp	r3, r8
 800ecde:	d321      	bcc.n	800ed24 <__multiply+0x98>
 800ece0:	f104 0314 	add.w	r3, r4, #20
 800ece4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ece8:	f109 0314 	add.w	r3, r9, #20
 800ecec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ecf0:	9202      	str	r2, [sp, #8]
 800ecf2:	1b3a      	subs	r2, r7, r4
 800ecf4:	3a15      	subs	r2, #21
 800ecf6:	f022 0203 	bic.w	r2, r2, #3
 800ecfa:	3204      	adds	r2, #4
 800ecfc:	f104 0115 	add.w	r1, r4, #21
 800ed00:	428f      	cmp	r7, r1
 800ed02:	bf38      	it	cc
 800ed04:	2204      	movcc	r2, #4
 800ed06:	9201      	str	r2, [sp, #4]
 800ed08:	9a02      	ldr	r2, [sp, #8]
 800ed0a:	9303      	str	r3, [sp, #12]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d80c      	bhi.n	800ed2a <__multiply+0x9e>
 800ed10:	2e00      	cmp	r6, #0
 800ed12:	dd03      	ble.n	800ed1c <__multiply+0x90>
 800ed14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d05a      	beq.n	800edd2 <__multiply+0x146>
 800ed1c:	6106      	str	r6, [r0, #16]
 800ed1e:	b005      	add	sp, #20
 800ed20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed24:	f843 2b04 	str.w	r2, [r3], #4
 800ed28:	e7d8      	b.n	800ecdc <__multiply+0x50>
 800ed2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed2e:	f1ba 0f00 	cmp.w	sl, #0
 800ed32:	d024      	beq.n	800ed7e <__multiply+0xf2>
 800ed34:	f104 0e14 	add.w	lr, r4, #20
 800ed38:	46a9      	mov	r9, r5
 800ed3a:	f04f 0c00 	mov.w	ip, #0
 800ed3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ed42:	f8d9 1000 	ldr.w	r1, [r9]
 800ed46:	fa1f fb82 	uxth.w	fp, r2
 800ed4a:	b289      	uxth	r1, r1
 800ed4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ed50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ed54:	f8d9 2000 	ldr.w	r2, [r9]
 800ed58:	4461      	add	r1, ip
 800ed5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed66:	b289      	uxth	r1, r1
 800ed68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed6c:	4577      	cmp	r7, lr
 800ed6e:	f849 1b04 	str.w	r1, [r9], #4
 800ed72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed76:	d8e2      	bhi.n	800ed3e <__multiply+0xb2>
 800ed78:	9a01      	ldr	r2, [sp, #4]
 800ed7a:	f845 c002 	str.w	ip, [r5, r2]
 800ed7e:	9a03      	ldr	r2, [sp, #12]
 800ed80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed84:	3304      	adds	r3, #4
 800ed86:	f1b9 0f00 	cmp.w	r9, #0
 800ed8a:	d020      	beq.n	800edce <__multiply+0x142>
 800ed8c:	6829      	ldr	r1, [r5, #0]
 800ed8e:	f104 0c14 	add.w	ip, r4, #20
 800ed92:	46ae      	mov	lr, r5
 800ed94:	f04f 0a00 	mov.w	sl, #0
 800ed98:	f8bc b000 	ldrh.w	fp, [ip]
 800ed9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eda0:	fb09 220b 	mla	r2, r9, fp, r2
 800eda4:	4492      	add	sl, r2
 800eda6:	b289      	uxth	r1, r1
 800eda8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800edac:	f84e 1b04 	str.w	r1, [lr], #4
 800edb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800edb4:	f8be 1000 	ldrh.w	r1, [lr]
 800edb8:	0c12      	lsrs	r2, r2, #16
 800edba:	fb09 1102 	mla	r1, r9, r2, r1
 800edbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800edc2:	4567      	cmp	r7, ip
 800edc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800edc8:	d8e6      	bhi.n	800ed98 <__multiply+0x10c>
 800edca:	9a01      	ldr	r2, [sp, #4]
 800edcc:	50a9      	str	r1, [r5, r2]
 800edce:	3504      	adds	r5, #4
 800edd0:	e79a      	b.n	800ed08 <__multiply+0x7c>
 800edd2:	3e01      	subs	r6, #1
 800edd4:	e79c      	b.n	800ed10 <__multiply+0x84>
 800edd6:	bf00      	nop
 800edd8:	080117ff 	.word	0x080117ff
 800eddc:	08011870 	.word	0x08011870

0800ede0 <__pow5mult>:
 800ede0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ede4:	4615      	mov	r5, r2
 800ede6:	f012 0203 	ands.w	r2, r2, #3
 800edea:	4606      	mov	r6, r0
 800edec:	460f      	mov	r7, r1
 800edee:	d007      	beq.n	800ee00 <__pow5mult+0x20>
 800edf0:	4c25      	ldr	r4, [pc, #148]	; (800ee88 <__pow5mult+0xa8>)
 800edf2:	3a01      	subs	r2, #1
 800edf4:	2300      	movs	r3, #0
 800edf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edfa:	f7ff fe9b 	bl	800eb34 <__multadd>
 800edfe:	4607      	mov	r7, r0
 800ee00:	10ad      	asrs	r5, r5, #2
 800ee02:	d03d      	beq.n	800ee80 <__pow5mult+0xa0>
 800ee04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee06:	b97c      	cbnz	r4, 800ee28 <__pow5mult+0x48>
 800ee08:	2010      	movs	r0, #16
 800ee0a:	f7ff fe29 	bl	800ea60 <malloc>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	6270      	str	r0, [r6, #36]	; 0x24
 800ee12:	b928      	cbnz	r0, 800ee20 <__pow5mult+0x40>
 800ee14:	4b1d      	ldr	r3, [pc, #116]	; (800ee8c <__pow5mult+0xac>)
 800ee16:	481e      	ldr	r0, [pc, #120]	; (800ee90 <__pow5mult+0xb0>)
 800ee18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee1c:	f000 fd22 	bl	800f864 <__assert_func>
 800ee20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee24:	6004      	str	r4, [r0, #0]
 800ee26:	60c4      	str	r4, [r0, #12]
 800ee28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee30:	b94c      	cbnz	r4, 800ee46 <__pow5mult+0x66>
 800ee32:	f240 2171 	movw	r1, #625	; 0x271
 800ee36:	4630      	mov	r0, r6
 800ee38:	f7ff ff12 	bl	800ec60 <__i2b>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee42:	4604      	mov	r4, r0
 800ee44:	6003      	str	r3, [r0, #0]
 800ee46:	f04f 0900 	mov.w	r9, #0
 800ee4a:	07eb      	lsls	r3, r5, #31
 800ee4c:	d50a      	bpl.n	800ee64 <__pow5mult+0x84>
 800ee4e:	4639      	mov	r1, r7
 800ee50:	4622      	mov	r2, r4
 800ee52:	4630      	mov	r0, r6
 800ee54:	f7ff ff1a 	bl	800ec8c <__multiply>
 800ee58:	4639      	mov	r1, r7
 800ee5a:	4680      	mov	r8, r0
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	f7ff fe47 	bl	800eaf0 <_Bfree>
 800ee62:	4647      	mov	r7, r8
 800ee64:	106d      	asrs	r5, r5, #1
 800ee66:	d00b      	beq.n	800ee80 <__pow5mult+0xa0>
 800ee68:	6820      	ldr	r0, [r4, #0]
 800ee6a:	b938      	cbnz	r0, 800ee7c <__pow5mult+0x9c>
 800ee6c:	4622      	mov	r2, r4
 800ee6e:	4621      	mov	r1, r4
 800ee70:	4630      	mov	r0, r6
 800ee72:	f7ff ff0b 	bl	800ec8c <__multiply>
 800ee76:	6020      	str	r0, [r4, #0]
 800ee78:	f8c0 9000 	str.w	r9, [r0]
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	e7e4      	b.n	800ee4a <__pow5mult+0x6a>
 800ee80:	4638      	mov	r0, r7
 800ee82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee86:	bf00      	nop
 800ee88:	080119c0 	.word	0x080119c0
 800ee8c:	0801178d 	.word	0x0801178d
 800ee90:	08011870 	.word	0x08011870

0800ee94 <__lshift>:
 800ee94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee98:	460c      	mov	r4, r1
 800ee9a:	6849      	ldr	r1, [r1, #4]
 800ee9c:	6923      	ldr	r3, [r4, #16]
 800ee9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eea2:	68a3      	ldr	r3, [r4, #8]
 800eea4:	4607      	mov	r7, r0
 800eea6:	4691      	mov	r9, r2
 800eea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eeac:	f108 0601 	add.w	r6, r8, #1
 800eeb0:	42b3      	cmp	r3, r6
 800eeb2:	db0b      	blt.n	800eecc <__lshift+0x38>
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	f7ff fddb 	bl	800ea70 <_Balloc>
 800eeba:	4605      	mov	r5, r0
 800eebc:	b948      	cbnz	r0, 800eed2 <__lshift+0x3e>
 800eebe:	4602      	mov	r2, r0
 800eec0:	4b2a      	ldr	r3, [pc, #168]	; (800ef6c <__lshift+0xd8>)
 800eec2:	482b      	ldr	r0, [pc, #172]	; (800ef70 <__lshift+0xdc>)
 800eec4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eec8:	f000 fccc 	bl	800f864 <__assert_func>
 800eecc:	3101      	adds	r1, #1
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	e7ee      	b.n	800eeb0 <__lshift+0x1c>
 800eed2:	2300      	movs	r3, #0
 800eed4:	f100 0114 	add.w	r1, r0, #20
 800eed8:	f100 0210 	add.w	r2, r0, #16
 800eedc:	4618      	mov	r0, r3
 800eede:	4553      	cmp	r3, sl
 800eee0:	db37      	blt.n	800ef52 <__lshift+0xbe>
 800eee2:	6920      	ldr	r0, [r4, #16]
 800eee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eee8:	f104 0314 	add.w	r3, r4, #20
 800eeec:	f019 091f 	ands.w	r9, r9, #31
 800eef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eef4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eef8:	d02f      	beq.n	800ef5a <__lshift+0xc6>
 800eefa:	f1c9 0e20 	rsb	lr, r9, #32
 800eefe:	468a      	mov	sl, r1
 800ef00:	f04f 0c00 	mov.w	ip, #0
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	fa02 f209 	lsl.w	r2, r2, r9
 800ef0a:	ea42 020c 	orr.w	r2, r2, ip
 800ef0e:	f84a 2b04 	str.w	r2, [sl], #4
 800ef12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef16:	4298      	cmp	r0, r3
 800ef18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ef1c:	d8f2      	bhi.n	800ef04 <__lshift+0x70>
 800ef1e:	1b03      	subs	r3, r0, r4
 800ef20:	3b15      	subs	r3, #21
 800ef22:	f023 0303 	bic.w	r3, r3, #3
 800ef26:	3304      	adds	r3, #4
 800ef28:	f104 0215 	add.w	r2, r4, #21
 800ef2c:	4290      	cmp	r0, r2
 800ef2e:	bf38      	it	cc
 800ef30:	2304      	movcc	r3, #4
 800ef32:	f841 c003 	str.w	ip, [r1, r3]
 800ef36:	f1bc 0f00 	cmp.w	ip, #0
 800ef3a:	d001      	beq.n	800ef40 <__lshift+0xac>
 800ef3c:	f108 0602 	add.w	r6, r8, #2
 800ef40:	3e01      	subs	r6, #1
 800ef42:	4638      	mov	r0, r7
 800ef44:	612e      	str	r6, [r5, #16]
 800ef46:	4621      	mov	r1, r4
 800ef48:	f7ff fdd2 	bl	800eaf0 <_Bfree>
 800ef4c:	4628      	mov	r0, r5
 800ef4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef56:	3301      	adds	r3, #1
 800ef58:	e7c1      	b.n	800eede <__lshift+0x4a>
 800ef5a:	3904      	subs	r1, #4
 800ef5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef64:	4298      	cmp	r0, r3
 800ef66:	d8f9      	bhi.n	800ef5c <__lshift+0xc8>
 800ef68:	e7ea      	b.n	800ef40 <__lshift+0xac>
 800ef6a:	bf00      	nop
 800ef6c:	080117ff 	.word	0x080117ff
 800ef70:	08011870 	.word	0x08011870

0800ef74 <__mcmp>:
 800ef74:	b530      	push	{r4, r5, lr}
 800ef76:	6902      	ldr	r2, [r0, #16]
 800ef78:	690c      	ldr	r4, [r1, #16]
 800ef7a:	1b12      	subs	r2, r2, r4
 800ef7c:	d10e      	bne.n	800ef9c <__mcmp+0x28>
 800ef7e:	f100 0314 	add.w	r3, r0, #20
 800ef82:	3114      	adds	r1, #20
 800ef84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef94:	42a5      	cmp	r5, r4
 800ef96:	d003      	beq.n	800efa0 <__mcmp+0x2c>
 800ef98:	d305      	bcc.n	800efa6 <__mcmp+0x32>
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	bd30      	pop	{r4, r5, pc}
 800efa0:	4283      	cmp	r3, r0
 800efa2:	d3f3      	bcc.n	800ef8c <__mcmp+0x18>
 800efa4:	e7fa      	b.n	800ef9c <__mcmp+0x28>
 800efa6:	f04f 32ff 	mov.w	r2, #4294967295
 800efaa:	e7f7      	b.n	800ef9c <__mcmp+0x28>

0800efac <__mdiff>:
 800efac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb0:	460c      	mov	r4, r1
 800efb2:	4606      	mov	r6, r0
 800efb4:	4611      	mov	r1, r2
 800efb6:	4620      	mov	r0, r4
 800efb8:	4690      	mov	r8, r2
 800efba:	f7ff ffdb 	bl	800ef74 <__mcmp>
 800efbe:	1e05      	subs	r5, r0, #0
 800efc0:	d110      	bne.n	800efe4 <__mdiff+0x38>
 800efc2:	4629      	mov	r1, r5
 800efc4:	4630      	mov	r0, r6
 800efc6:	f7ff fd53 	bl	800ea70 <_Balloc>
 800efca:	b930      	cbnz	r0, 800efda <__mdiff+0x2e>
 800efcc:	4b3a      	ldr	r3, [pc, #232]	; (800f0b8 <__mdiff+0x10c>)
 800efce:	4602      	mov	r2, r0
 800efd0:	f240 2132 	movw	r1, #562	; 0x232
 800efd4:	4839      	ldr	r0, [pc, #228]	; (800f0bc <__mdiff+0x110>)
 800efd6:	f000 fc45 	bl	800f864 <__assert_func>
 800efda:	2301      	movs	r3, #1
 800efdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe4:	bfa4      	itt	ge
 800efe6:	4643      	movge	r3, r8
 800efe8:	46a0      	movge	r8, r4
 800efea:	4630      	mov	r0, r6
 800efec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eff0:	bfa6      	itte	ge
 800eff2:	461c      	movge	r4, r3
 800eff4:	2500      	movge	r5, #0
 800eff6:	2501      	movlt	r5, #1
 800eff8:	f7ff fd3a 	bl	800ea70 <_Balloc>
 800effc:	b920      	cbnz	r0, 800f008 <__mdiff+0x5c>
 800effe:	4b2e      	ldr	r3, [pc, #184]	; (800f0b8 <__mdiff+0x10c>)
 800f000:	4602      	mov	r2, r0
 800f002:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f006:	e7e5      	b.n	800efd4 <__mdiff+0x28>
 800f008:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f00c:	6926      	ldr	r6, [r4, #16]
 800f00e:	60c5      	str	r5, [r0, #12]
 800f010:	f104 0914 	add.w	r9, r4, #20
 800f014:	f108 0514 	add.w	r5, r8, #20
 800f018:	f100 0e14 	add.w	lr, r0, #20
 800f01c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f024:	f108 0210 	add.w	r2, r8, #16
 800f028:	46f2      	mov	sl, lr
 800f02a:	2100      	movs	r1, #0
 800f02c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f034:	fa1f f883 	uxth.w	r8, r3
 800f038:	fa11 f18b 	uxtah	r1, r1, fp
 800f03c:	0c1b      	lsrs	r3, r3, #16
 800f03e:	eba1 0808 	sub.w	r8, r1, r8
 800f042:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f046:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f04a:	fa1f f888 	uxth.w	r8, r8
 800f04e:	1419      	asrs	r1, r3, #16
 800f050:	454e      	cmp	r6, r9
 800f052:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f056:	f84a 3b04 	str.w	r3, [sl], #4
 800f05a:	d8e7      	bhi.n	800f02c <__mdiff+0x80>
 800f05c:	1b33      	subs	r3, r6, r4
 800f05e:	3b15      	subs	r3, #21
 800f060:	f023 0303 	bic.w	r3, r3, #3
 800f064:	3304      	adds	r3, #4
 800f066:	3415      	adds	r4, #21
 800f068:	42a6      	cmp	r6, r4
 800f06a:	bf38      	it	cc
 800f06c:	2304      	movcc	r3, #4
 800f06e:	441d      	add	r5, r3
 800f070:	4473      	add	r3, lr
 800f072:	469e      	mov	lr, r3
 800f074:	462e      	mov	r6, r5
 800f076:	4566      	cmp	r6, ip
 800f078:	d30e      	bcc.n	800f098 <__mdiff+0xec>
 800f07a:	f10c 0203 	add.w	r2, ip, #3
 800f07e:	1b52      	subs	r2, r2, r5
 800f080:	f022 0203 	bic.w	r2, r2, #3
 800f084:	3d03      	subs	r5, #3
 800f086:	45ac      	cmp	ip, r5
 800f088:	bf38      	it	cc
 800f08a:	2200      	movcc	r2, #0
 800f08c:	441a      	add	r2, r3
 800f08e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f092:	b17b      	cbz	r3, 800f0b4 <__mdiff+0x108>
 800f094:	6107      	str	r7, [r0, #16]
 800f096:	e7a3      	b.n	800efe0 <__mdiff+0x34>
 800f098:	f856 8b04 	ldr.w	r8, [r6], #4
 800f09c:	fa11 f288 	uxtah	r2, r1, r8
 800f0a0:	1414      	asrs	r4, r2, #16
 800f0a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f0a6:	b292      	uxth	r2, r2
 800f0a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f0ac:	f84e 2b04 	str.w	r2, [lr], #4
 800f0b0:	1421      	asrs	r1, r4, #16
 800f0b2:	e7e0      	b.n	800f076 <__mdiff+0xca>
 800f0b4:	3f01      	subs	r7, #1
 800f0b6:	e7ea      	b.n	800f08e <__mdiff+0xe2>
 800f0b8:	080117ff 	.word	0x080117ff
 800f0bc:	08011870 	.word	0x08011870

0800f0c0 <__d2b>:
 800f0c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0c4:	4689      	mov	r9, r1
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	ec57 6b10 	vmov	r6, r7, d0
 800f0cc:	4690      	mov	r8, r2
 800f0ce:	f7ff fccf 	bl	800ea70 <_Balloc>
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	b930      	cbnz	r0, 800f0e4 <__d2b+0x24>
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	4b25      	ldr	r3, [pc, #148]	; (800f170 <__d2b+0xb0>)
 800f0da:	4826      	ldr	r0, [pc, #152]	; (800f174 <__d2b+0xb4>)
 800f0dc:	f240 310a 	movw	r1, #778	; 0x30a
 800f0e0:	f000 fbc0 	bl	800f864 <__assert_func>
 800f0e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f0e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0ec:	bb35      	cbnz	r5, 800f13c <__d2b+0x7c>
 800f0ee:	2e00      	cmp	r6, #0
 800f0f0:	9301      	str	r3, [sp, #4]
 800f0f2:	d028      	beq.n	800f146 <__d2b+0x86>
 800f0f4:	4668      	mov	r0, sp
 800f0f6:	9600      	str	r6, [sp, #0]
 800f0f8:	f7ff fd82 	bl	800ec00 <__lo0bits>
 800f0fc:	9900      	ldr	r1, [sp, #0]
 800f0fe:	b300      	cbz	r0, 800f142 <__d2b+0x82>
 800f100:	9a01      	ldr	r2, [sp, #4]
 800f102:	f1c0 0320 	rsb	r3, r0, #32
 800f106:	fa02 f303 	lsl.w	r3, r2, r3
 800f10a:	430b      	orrs	r3, r1
 800f10c:	40c2      	lsrs	r2, r0
 800f10e:	6163      	str	r3, [r4, #20]
 800f110:	9201      	str	r2, [sp, #4]
 800f112:	9b01      	ldr	r3, [sp, #4]
 800f114:	61a3      	str	r3, [r4, #24]
 800f116:	2b00      	cmp	r3, #0
 800f118:	bf14      	ite	ne
 800f11a:	2202      	movne	r2, #2
 800f11c:	2201      	moveq	r2, #1
 800f11e:	6122      	str	r2, [r4, #16]
 800f120:	b1d5      	cbz	r5, 800f158 <__d2b+0x98>
 800f122:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f126:	4405      	add	r5, r0
 800f128:	f8c9 5000 	str.w	r5, [r9]
 800f12c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f130:	f8c8 0000 	str.w	r0, [r8]
 800f134:	4620      	mov	r0, r4
 800f136:	b003      	add	sp, #12
 800f138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f13c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f140:	e7d5      	b.n	800f0ee <__d2b+0x2e>
 800f142:	6161      	str	r1, [r4, #20]
 800f144:	e7e5      	b.n	800f112 <__d2b+0x52>
 800f146:	a801      	add	r0, sp, #4
 800f148:	f7ff fd5a 	bl	800ec00 <__lo0bits>
 800f14c:	9b01      	ldr	r3, [sp, #4]
 800f14e:	6163      	str	r3, [r4, #20]
 800f150:	2201      	movs	r2, #1
 800f152:	6122      	str	r2, [r4, #16]
 800f154:	3020      	adds	r0, #32
 800f156:	e7e3      	b.n	800f120 <__d2b+0x60>
 800f158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f15c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f160:	f8c9 0000 	str.w	r0, [r9]
 800f164:	6918      	ldr	r0, [r3, #16]
 800f166:	f7ff fd2b 	bl	800ebc0 <__hi0bits>
 800f16a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f16e:	e7df      	b.n	800f130 <__d2b+0x70>
 800f170:	080117ff 	.word	0x080117ff
 800f174:	08011870 	.word	0x08011870

0800f178 <_calloc_r>:
 800f178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f17a:	fba1 2402 	umull	r2, r4, r1, r2
 800f17e:	b94c      	cbnz	r4, 800f194 <_calloc_r+0x1c>
 800f180:	4611      	mov	r1, r2
 800f182:	9201      	str	r2, [sp, #4]
 800f184:	f000 f87a 	bl	800f27c <_malloc_r>
 800f188:	9a01      	ldr	r2, [sp, #4]
 800f18a:	4605      	mov	r5, r0
 800f18c:	b930      	cbnz	r0, 800f19c <_calloc_r+0x24>
 800f18e:	4628      	mov	r0, r5
 800f190:	b003      	add	sp, #12
 800f192:	bd30      	pop	{r4, r5, pc}
 800f194:	220c      	movs	r2, #12
 800f196:	6002      	str	r2, [r0, #0]
 800f198:	2500      	movs	r5, #0
 800f19a:	e7f8      	b.n	800f18e <_calloc_r+0x16>
 800f19c:	4621      	mov	r1, r4
 800f19e:	f7fe f901 	bl	800d3a4 <memset>
 800f1a2:	e7f4      	b.n	800f18e <_calloc_r+0x16>

0800f1a4 <_free_r>:
 800f1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1a6:	2900      	cmp	r1, #0
 800f1a8:	d044      	beq.n	800f234 <_free_r+0x90>
 800f1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1ae:	9001      	str	r0, [sp, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f1a1 0404 	sub.w	r4, r1, #4
 800f1b6:	bfb8      	it	lt
 800f1b8:	18e4      	addlt	r4, r4, r3
 800f1ba:	f000 fcdf 	bl	800fb7c <__malloc_lock>
 800f1be:	4a1e      	ldr	r2, [pc, #120]	; (800f238 <_free_r+0x94>)
 800f1c0:	9801      	ldr	r0, [sp, #4]
 800f1c2:	6813      	ldr	r3, [r2, #0]
 800f1c4:	b933      	cbnz	r3, 800f1d4 <_free_r+0x30>
 800f1c6:	6063      	str	r3, [r4, #4]
 800f1c8:	6014      	str	r4, [r2, #0]
 800f1ca:	b003      	add	sp, #12
 800f1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1d0:	f000 bcda 	b.w	800fb88 <__malloc_unlock>
 800f1d4:	42a3      	cmp	r3, r4
 800f1d6:	d908      	bls.n	800f1ea <_free_r+0x46>
 800f1d8:	6825      	ldr	r5, [r4, #0]
 800f1da:	1961      	adds	r1, r4, r5
 800f1dc:	428b      	cmp	r3, r1
 800f1de:	bf01      	itttt	eq
 800f1e0:	6819      	ldreq	r1, [r3, #0]
 800f1e2:	685b      	ldreq	r3, [r3, #4]
 800f1e4:	1949      	addeq	r1, r1, r5
 800f1e6:	6021      	streq	r1, [r4, #0]
 800f1e8:	e7ed      	b.n	800f1c6 <_free_r+0x22>
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	b10b      	cbz	r3, 800f1f4 <_free_r+0x50>
 800f1f0:	42a3      	cmp	r3, r4
 800f1f2:	d9fa      	bls.n	800f1ea <_free_r+0x46>
 800f1f4:	6811      	ldr	r1, [r2, #0]
 800f1f6:	1855      	adds	r5, r2, r1
 800f1f8:	42a5      	cmp	r5, r4
 800f1fa:	d10b      	bne.n	800f214 <_free_r+0x70>
 800f1fc:	6824      	ldr	r4, [r4, #0]
 800f1fe:	4421      	add	r1, r4
 800f200:	1854      	adds	r4, r2, r1
 800f202:	42a3      	cmp	r3, r4
 800f204:	6011      	str	r1, [r2, #0]
 800f206:	d1e0      	bne.n	800f1ca <_free_r+0x26>
 800f208:	681c      	ldr	r4, [r3, #0]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	6053      	str	r3, [r2, #4]
 800f20e:	4421      	add	r1, r4
 800f210:	6011      	str	r1, [r2, #0]
 800f212:	e7da      	b.n	800f1ca <_free_r+0x26>
 800f214:	d902      	bls.n	800f21c <_free_r+0x78>
 800f216:	230c      	movs	r3, #12
 800f218:	6003      	str	r3, [r0, #0]
 800f21a:	e7d6      	b.n	800f1ca <_free_r+0x26>
 800f21c:	6825      	ldr	r5, [r4, #0]
 800f21e:	1961      	adds	r1, r4, r5
 800f220:	428b      	cmp	r3, r1
 800f222:	bf04      	itt	eq
 800f224:	6819      	ldreq	r1, [r3, #0]
 800f226:	685b      	ldreq	r3, [r3, #4]
 800f228:	6063      	str	r3, [r4, #4]
 800f22a:	bf04      	itt	eq
 800f22c:	1949      	addeq	r1, r1, r5
 800f22e:	6021      	streq	r1, [r4, #0]
 800f230:	6054      	str	r4, [r2, #4]
 800f232:	e7ca      	b.n	800f1ca <_free_r+0x26>
 800f234:	b003      	add	sp, #12
 800f236:	bd30      	pop	{r4, r5, pc}
 800f238:	24000794 	.word	0x24000794

0800f23c <sbrk_aligned>:
 800f23c:	b570      	push	{r4, r5, r6, lr}
 800f23e:	4e0e      	ldr	r6, [pc, #56]	; (800f278 <sbrk_aligned+0x3c>)
 800f240:	460c      	mov	r4, r1
 800f242:	6831      	ldr	r1, [r6, #0]
 800f244:	4605      	mov	r5, r0
 800f246:	b911      	cbnz	r1, 800f24e <sbrk_aligned+0x12>
 800f248:	f000 f9e6 	bl	800f618 <_sbrk_r>
 800f24c:	6030      	str	r0, [r6, #0]
 800f24e:	4621      	mov	r1, r4
 800f250:	4628      	mov	r0, r5
 800f252:	f000 f9e1 	bl	800f618 <_sbrk_r>
 800f256:	1c43      	adds	r3, r0, #1
 800f258:	d00a      	beq.n	800f270 <sbrk_aligned+0x34>
 800f25a:	1cc4      	adds	r4, r0, #3
 800f25c:	f024 0403 	bic.w	r4, r4, #3
 800f260:	42a0      	cmp	r0, r4
 800f262:	d007      	beq.n	800f274 <sbrk_aligned+0x38>
 800f264:	1a21      	subs	r1, r4, r0
 800f266:	4628      	mov	r0, r5
 800f268:	f000 f9d6 	bl	800f618 <_sbrk_r>
 800f26c:	3001      	adds	r0, #1
 800f26e:	d101      	bne.n	800f274 <sbrk_aligned+0x38>
 800f270:	f04f 34ff 	mov.w	r4, #4294967295
 800f274:	4620      	mov	r0, r4
 800f276:	bd70      	pop	{r4, r5, r6, pc}
 800f278:	24000798 	.word	0x24000798

0800f27c <_malloc_r>:
 800f27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f280:	1ccd      	adds	r5, r1, #3
 800f282:	f025 0503 	bic.w	r5, r5, #3
 800f286:	3508      	adds	r5, #8
 800f288:	2d0c      	cmp	r5, #12
 800f28a:	bf38      	it	cc
 800f28c:	250c      	movcc	r5, #12
 800f28e:	2d00      	cmp	r5, #0
 800f290:	4607      	mov	r7, r0
 800f292:	db01      	blt.n	800f298 <_malloc_r+0x1c>
 800f294:	42a9      	cmp	r1, r5
 800f296:	d905      	bls.n	800f2a4 <_malloc_r+0x28>
 800f298:	230c      	movs	r3, #12
 800f29a:	603b      	str	r3, [r7, #0]
 800f29c:	2600      	movs	r6, #0
 800f29e:	4630      	mov	r0, r6
 800f2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a4:	4e2e      	ldr	r6, [pc, #184]	; (800f360 <_malloc_r+0xe4>)
 800f2a6:	f000 fc69 	bl	800fb7c <__malloc_lock>
 800f2aa:	6833      	ldr	r3, [r6, #0]
 800f2ac:	461c      	mov	r4, r3
 800f2ae:	bb34      	cbnz	r4, 800f2fe <_malloc_r+0x82>
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	4638      	mov	r0, r7
 800f2b4:	f7ff ffc2 	bl	800f23c <sbrk_aligned>
 800f2b8:	1c43      	adds	r3, r0, #1
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	d14d      	bne.n	800f35a <_malloc_r+0xde>
 800f2be:	6834      	ldr	r4, [r6, #0]
 800f2c0:	4626      	mov	r6, r4
 800f2c2:	2e00      	cmp	r6, #0
 800f2c4:	d140      	bne.n	800f348 <_malloc_r+0xcc>
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	4638      	mov	r0, r7
 800f2cc:	eb04 0803 	add.w	r8, r4, r3
 800f2d0:	f000 f9a2 	bl	800f618 <_sbrk_r>
 800f2d4:	4580      	cmp	r8, r0
 800f2d6:	d13a      	bne.n	800f34e <_malloc_r+0xd2>
 800f2d8:	6821      	ldr	r1, [r4, #0]
 800f2da:	3503      	adds	r5, #3
 800f2dc:	1a6d      	subs	r5, r5, r1
 800f2de:	f025 0503 	bic.w	r5, r5, #3
 800f2e2:	3508      	adds	r5, #8
 800f2e4:	2d0c      	cmp	r5, #12
 800f2e6:	bf38      	it	cc
 800f2e8:	250c      	movcc	r5, #12
 800f2ea:	4629      	mov	r1, r5
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	f7ff ffa5 	bl	800f23c <sbrk_aligned>
 800f2f2:	3001      	adds	r0, #1
 800f2f4:	d02b      	beq.n	800f34e <_malloc_r+0xd2>
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	442b      	add	r3, r5
 800f2fa:	6023      	str	r3, [r4, #0]
 800f2fc:	e00e      	b.n	800f31c <_malloc_r+0xa0>
 800f2fe:	6822      	ldr	r2, [r4, #0]
 800f300:	1b52      	subs	r2, r2, r5
 800f302:	d41e      	bmi.n	800f342 <_malloc_r+0xc6>
 800f304:	2a0b      	cmp	r2, #11
 800f306:	d916      	bls.n	800f336 <_malloc_r+0xba>
 800f308:	1961      	adds	r1, r4, r5
 800f30a:	42a3      	cmp	r3, r4
 800f30c:	6025      	str	r5, [r4, #0]
 800f30e:	bf18      	it	ne
 800f310:	6059      	strne	r1, [r3, #4]
 800f312:	6863      	ldr	r3, [r4, #4]
 800f314:	bf08      	it	eq
 800f316:	6031      	streq	r1, [r6, #0]
 800f318:	5162      	str	r2, [r4, r5]
 800f31a:	604b      	str	r3, [r1, #4]
 800f31c:	4638      	mov	r0, r7
 800f31e:	f104 060b 	add.w	r6, r4, #11
 800f322:	f000 fc31 	bl	800fb88 <__malloc_unlock>
 800f326:	f026 0607 	bic.w	r6, r6, #7
 800f32a:	1d23      	adds	r3, r4, #4
 800f32c:	1af2      	subs	r2, r6, r3
 800f32e:	d0b6      	beq.n	800f29e <_malloc_r+0x22>
 800f330:	1b9b      	subs	r3, r3, r6
 800f332:	50a3      	str	r3, [r4, r2]
 800f334:	e7b3      	b.n	800f29e <_malloc_r+0x22>
 800f336:	6862      	ldr	r2, [r4, #4]
 800f338:	42a3      	cmp	r3, r4
 800f33a:	bf0c      	ite	eq
 800f33c:	6032      	streq	r2, [r6, #0]
 800f33e:	605a      	strne	r2, [r3, #4]
 800f340:	e7ec      	b.n	800f31c <_malloc_r+0xa0>
 800f342:	4623      	mov	r3, r4
 800f344:	6864      	ldr	r4, [r4, #4]
 800f346:	e7b2      	b.n	800f2ae <_malloc_r+0x32>
 800f348:	4634      	mov	r4, r6
 800f34a:	6876      	ldr	r6, [r6, #4]
 800f34c:	e7b9      	b.n	800f2c2 <_malloc_r+0x46>
 800f34e:	230c      	movs	r3, #12
 800f350:	603b      	str	r3, [r7, #0]
 800f352:	4638      	mov	r0, r7
 800f354:	f000 fc18 	bl	800fb88 <__malloc_unlock>
 800f358:	e7a1      	b.n	800f29e <_malloc_r+0x22>
 800f35a:	6025      	str	r5, [r4, #0]
 800f35c:	e7de      	b.n	800f31c <_malloc_r+0xa0>
 800f35e:	bf00      	nop
 800f360:	24000794 	.word	0x24000794

0800f364 <__sfputc_r>:
 800f364:	6893      	ldr	r3, [r2, #8]
 800f366:	3b01      	subs	r3, #1
 800f368:	2b00      	cmp	r3, #0
 800f36a:	b410      	push	{r4}
 800f36c:	6093      	str	r3, [r2, #8]
 800f36e:	da08      	bge.n	800f382 <__sfputc_r+0x1e>
 800f370:	6994      	ldr	r4, [r2, #24]
 800f372:	42a3      	cmp	r3, r4
 800f374:	db01      	blt.n	800f37a <__sfputc_r+0x16>
 800f376:	290a      	cmp	r1, #10
 800f378:	d103      	bne.n	800f382 <__sfputc_r+0x1e>
 800f37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f37e:	f000 b99f 	b.w	800f6c0 <__swbuf_r>
 800f382:	6813      	ldr	r3, [r2, #0]
 800f384:	1c58      	adds	r0, r3, #1
 800f386:	6010      	str	r0, [r2, #0]
 800f388:	7019      	strb	r1, [r3, #0]
 800f38a:	4608      	mov	r0, r1
 800f38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <__sfputs_r>:
 800f392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f394:	4606      	mov	r6, r0
 800f396:	460f      	mov	r7, r1
 800f398:	4614      	mov	r4, r2
 800f39a:	18d5      	adds	r5, r2, r3
 800f39c:	42ac      	cmp	r4, r5
 800f39e:	d101      	bne.n	800f3a4 <__sfputs_r+0x12>
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	e007      	b.n	800f3b4 <__sfputs_r+0x22>
 800f3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a8:	463a      	mov	r2, r7
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	f7ff ffda 	bl	800f364 <__sfputc_r>
 800f3b0:	1c43      	adds	r3, r0, #1
 800f3b2:	d1f3      	bne.n	800f39c <__sfputs_r+0xa>
 800f3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3b8 <_vfiprintf_r>:
 800f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3bc:	460d      	mov	r5, r1
 800f3be:	b09d      	sub	sp, #116	; 0x74
 800f3c0:	4614      	mov	r4, r2
 800f3c2:	4698      	mov	r8, r3
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	b118      	cbz	r0, 800f3d0 <_vfiprintf_r+0x18>
 800f3c8:	6983      	ldr	r3, [r0, #24]
 800f3ca:	b90b      	cbnz	r3, 800f3d0 <_vfiprintf_r+0x18>
 800f3cc:	f7ff faa2 	bl	800e914 <__sinit>
 800f3d0:	4b89      	ldr	r3, [pc, #548]	; (800f5f8 <_vfiprintf_r+0x240>)
 800f3d2:	429d      	cmp	r5, r3
 800f3d4:	d11b      	bne.n	800f40e <_vfiprintf_r+0x56>
 800f3d6:	6875      	ldr	r5, [r6, #4]
 800f3d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3da:	07d9      	lsls	r1, r3, #31
 800f3dc:	d405      	bmi.n	800f3ea <_vfiprintf_r+0x32>
 800f3de:	89ab      	ldrh	r3, [r5, #12]
 800f3e0:	059a      	lsls	r2, r3, #22
 800f3e2:	d402      	bmi.n	800f3ea <_vfiprintf_r+0x32>
 800f3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3e6:	f7ff fb38 	bl	800ea5a <__retarget_lock_acquire_recursive>
 800f3ea:	89ab      	ldrh	r3, [r5, #12]
 800f3ec:	071b      	lsls	r3, r3, #28
 800f3ee:	d501      	bpl.n	800f3f4 <_vfiprintf_r+0x3c>
 800f3f0:	692b      	ldr	r3, [r5, #16]
 800f3f2:	b9eb      	cbnz	r3, 800f430 <_vfiprintf_r+0x78>
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f000 f9c6 	bl	800f788 <__swsetup_r>
 800f3fc:	b1c0      	cbz	r0, 800f430 <_vfiprintf_r+0x78>
 800f3fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f400:	07dc      	lsls	r4, r3, #31
 800f402:	d50e      	bpl.n	800f422 <_vfiprintf_r+0x6a>
 800f404:	f04f 30ff 	mov.w	r0, #4294967295
 800f408:	b01d      	add	sp, #116	; 0x74
 800f40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f40e:	4b7b      	ldr	r3, [pc, #492]	; (800f5fc <_vfiprintf_r+0x244>)
 800f410:	429d      	cmp	r5, r3
 800f412:	d101      	bne.n	800f418 <_vfiprintf_r+0x60>
 800f414:	68b5      	ldr	r5, [r6, #8]
 800f416:	e7df      	b.n	800f3d8 <_vfiprintf_r+0x20>
 800f418:	4b79      	ldr	r3, [pc, #484]	; (800f600 <_vfiprintf_r+0x248>)
 800f41a:	429d      	cmp	r5, r3
 800f41c:	bf08      	it	eq
 800f41e:	68f5      	ldreq	r5, [r6, #12]
 800f420:	e7da      	b.n	800f3d8 <_vfiprintf_r+0x20>
 800f422:	89ab      	ldrh	r3, [r5, #12]
 800f424:	0598      	lsls	r0, r3, #22
 800f426:	d4ed      	bmi.n	800f404 <_vfiprintf_r+0x4c>
 800f428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f42a:	f7ff fb17 	bl	800ea5c <__retarget_lock_release_recursive>
 800f42e:	e7e9      	b.n	800f404 <_vfiprintf_r+0x4c>
 800f430:	2300      	movs	r3, #0
 800f432:	9309      	str	r3, [sp, #36]	; 0x24
 800f434:	2320      	movs	r3, #32
 800f436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f43a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f43e:	2330      	movs	r3, #48	; 0x30
 800f440:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f604 <_vfiprintf_r+0x24c>
 800f444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f448:	f04f 0901 	mov.w	r9, #1
 800f44c:	4623      	mov	r3, r4
 800f44e:	469a      	mov	sl, r3
 800f450:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f454:	b10a      	cbz	r2, 800f45a <_vfiprintf_r+0xa2>
 800f456:	2a25      	cmp	r2, #37	; 0x25
 800f458:	d1f9      	bne.n	800f44e <_vfiprintf_r+0x96>
 800f45a:	ebba 0b04 	subs.w	fp, sl, r4
 800f45e:	d00b      	beq.n	800f478 <_vfiprintf_r+0xc0>
 800f460:	465b      	mov	r3, fp
 800f462:	4622      	mov	r2, r4
 800f464:	4629      	mov	r1, r5
 800f466:	4630      	mov	r0, r6
 800f468:	f7ff ff93 	bl	800f392 <__sfputs_r>
 800f46c:	3001      	adds	r0, #1
 800f46e:	f000 80aa 	beq.w	800f5c6 <_vfiprintf_r+0x20e>
 800f472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f474:	445a      	add	r2, fp
 800f476:	9209      	str	r2, [sp, #36]	; 0x24
 800f478:	f89a 3000 	ldrb.w	r3, [sl]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f000 80a2 	beq.w	800f5c6 <_vfiprintf_r+0x20e>
 800f482:	2300      	movs	r3, #0
 800f484:	f04f 32ff 	mov.w	r2, #4294967295
 800f488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f48c:	f10a 0a01 	add.w	sl, sl, #1
 800f490:	9304      	str	r3, [sp, #16]
 800f492:	9307      	str	r3, [sp, #28]
 800f494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f498:	931a      	str	r3, [sp, #104]	; 0x68
 800f49a:	4654      	mov	r4, sl
 800f49c:	2205      	movs	r2, #5
 800f49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4a2:	4858      	ldr	r0, [pc, #352]	; (800f604 <_vfiprintf_r+0x24c>)
 800f4a4:	f7f0 ff24 	bl	80002f0 <memchr>
 800f4a8:	9a04      	ldr	r2, [sp, #16]
 800f4aa:	b9d8      	cbnz	r0, 800f4e4 <_vfiprintf_r+0x12c>
 800f4ac:	06d1      	lsls	r1, r2, #27
 800f4ae:	bf44      	itt	mi
 800f4b0:	2320      	movmi	r3, #32
 800f4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4b6:	0713      	lsls	r3, r2, #28
 800f4b8:	bf44      	itt	mi
 800f4ba:	232b      	movmi	r3, #43	; 0x2b
 800f4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800f4c6:	d015      	beq.n	800f4f4 <_vfiprintf_r+0x13c>
 800f4c8:	9a07      	ldr	r2, [sp, #28]
 800f4ca:	4654      	mov	r4, sl
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	f04f 0c0a 	mov.w	ip, #10
 800f4d2:	4621      	mov	r1, r4
 800f4d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4d8:	3b30      	subs	r3, #48	; 0x30
 800f4da:	2b09      	cmp	r3, #9
 800f4dc:	d94e      	bls.n	800f57c <_vfiprintf_r+0x1c4>
 800f4de:	b1b0      	cbz	r0, 800f50e <_vfiprintf_r+0x156>
 800f4e0:	9207      	str	r2, [sp, #28]
 800f4e2:	e014      	b.n	800f50e <_vfiprintf_r+0x156>
 800f4e4:	eba0 0308 	sub.w	r3, r0, r8
 800f4e8:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	9304      	str	r3, [sp, #16]
 800f4f0:	46a2      	mov	sl, r4
 800f4f2:	e7d2      	b.n	800f49a <_vfiprintf_r+0xe2>
 800f4f4:	9b03      	ldr	r3, [sp, #12]
 800f4f6:	1d19      	adds	r1, r3, #4
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	9103      	str	r1, [sp, #12]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	bfbb      	ittet	lt
 800f500:	425b      	neglt	r3, r3
 800f502:	f042 0202 	orrlt.w	r2, r2, #2
 800f506:	9307      	strge	r3, [sp, #28]
 800f508:	9307      	strlt	r3, [sp, #28]
 800f50a:	bfb8      	it	lt
 800f50c:	9204      	strlt	r2, [sp, #16]
 800f50e:	7823      	ldrb	r3, [r4, #0]
 800f510:	2b2e      	cmp	r3, #46	; 0x2e
 800f512:	d10c      	bne.n	800f52e <_vfiprintf_r+0x176>
 800f514:	7863      	ldrb	r3, [r4, #1]
 800f516:	2b2a      	cmp	r3, #42	; 0x2a
 800f518:	d135      	bne.n	800f586 <_vfiprintf_r+0x1ce>
 800f51a:	9b03      	ldr	r3, [sp, #12]
 800f51c:	1d1a      	adds	r2, r3, #4
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	9203      	str	r2, [sp, #12]
 800f522:	2b00      	cmp	r3, #0
 800f524:	bfb8      	it	lt
 800f526:	f04f 33ff 	movlt.w	r3, #4294967295
 800f52a:	3402      	adds	r4, #2
 800f52c:	9305      	str	r3, [sp, #20]
 800f52e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f614 <_vfiprintf_r+0x25c>
 800f532:	7821      	ldrb	r1, [r4, #0]
 800f534:	2203      	movs	r2, #3
 800f536:	4650      	mov	r0, sl
 800f538:	f7f0 feda 	bl	80002f0 <memchr>
 800f53c:	b140      	cbz	r0, 800f550 <_vfiprintf_r+0x198>
 800f53e:	2340      	movs	r3, #64	; 0x40
 800f540:	eba0 000a 	sub.w	r0, r0, sl
 800f544:	fa03 f000 	lsl.w	r0, r3, r0
 800f548:	9b04      	ldr	r3, [sp, #16]
 800f54a:	4303      	orrs	r3, r0
 800f54c:	3401      	adds	r4, #1
 800f54e:	9304      	str	r3, [sp, #16]
 800f550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f554:	482c      	ldr	r0, [pc, #176]	; (800f608 <_vfiprintf_r+0x250>)
 800f556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f55a:	2206      	movs	r2, #6
 800f55c:	f7f0 fec8 	bl	80002f0 <memchr>
 800f560:	2800      	cmp	r0, #0
 800f562:	d03f      	beq.n	800f5e4 <_vfiprintf_r+0x22c>
 800f564:	4b29      	ldr	r3, [pc, #164]	; (800f60c <_vfiprintf_r+0x254>)
 800f566:	bb1b      	cbnz	r3, 800f5b0 <_vfiprintf_r+0x1f8>
 800f568:	9b03      	ldr	r3, [sp, #12]
 800f56a:	3307      	adds	r3, #7
 800f56c:	f023 0307 	bic.w	r3, r3, #7
 800f570:	3308      	adds	r3, #8
 800f572:	9303      	str	r3, [sp, #12]
 800f574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f576:	443b      	add	r3, r7
 800f578:	9309      	str	r3, [sp, #36]	; 0x24
 800f57a:	e767      	b.n	800f44c <_vfiprintf_r+0x94>
 800f57c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f580:	460c      	mov	r4, r1
 800f582:	2001      	movs	r0, #1
 800f584:	e7a5      	b.n	800f4d2 <_vfiprintf_r+0x11a>
 800f586:	2300      	movs	r3, #0
 800f588:	3401      	adds	r4, #1
 800f58a:	9305      	str	r3, [sp, #20]
 800f58c:	4619      	mov	r1, r3
 800f58e:	f04f 0c0a 	mov.w	ip, #10
 800f592:	4620      	mov	r0, r4
 800f594:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f598:	3a30      	subs	r2, #48	; 0x30
 800f59a:	2a09      	cmp	r2, #9
 800f59c:	d903      	bls.n	800f5a6 <_vfiprintf_r+0x1ee>
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d0c5      	beq.n	800f52e <_vfiprintf_r+0x176>
 800f5a2:	9105      	str	r1, [sp, #20]
 800f5a4:	e7c3      	b.n	800f52e <_vfiprintf_r+0x176>
 800f5a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e7f0      	b.n	800f592 <_vfiprintf_r+0x1da>
 800f5b0:	ab03      	add	r3, sp, #12
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	462a      	mov	r2, r5
 800f5b6:	4b16      	ldr	r3, [pc, #88]	; (800f610 <_vfiprintf_r+0x258>)
 800f5b8:	a904      	add	r1, sp, #16
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	f7fd ff8c 	bl	800d4d8 <_printf_float>
 800f5c0:	4607      	mov	r7, r0
 800f5c2:	1c78      	adds	r0, r7, #1
 800f5c4:	d1d6      	bne.n	800f574 <_vfiprintf_r+0x1bc>
 800f5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5c8:	07d9      	lsls	r1, r3, #31
 800f5ca:	d405      	bmi.n	800f5d8 <_vfiprintf_r+0x220>
 800f5cc:	89ab      	ldrh	r3, [r5, #12]
 800f5ce:	059a      	lsls	r2, r3, #22
 800f5d0:	d402      	bmi.n	800f5d8 <_vfiprintf_r+0x220>
 800f5d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5d4:	f7ff fa42 	bl	800ea5c <__retarget_lock_release_recursive>
 800f5d8:	89ab      	ldrh	r3, [r5, #12]
 800f5da:	065b      	lsls	r3, r3, #25
 800f5dc:	f53f af12 	bmi.w	800f404 <_vfiprintf_r+0x4c>
 800f5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5e2:	e711      	b.n	800f408 <_vfiprintf_r+0x50>
 800f5e4:	ab03      	add	r3, sp, #12
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	462a      	mov	r2, r5
 800f5ea:	4b09      	ldr	r3, [pc, #36]	; (800f610 <_vfiprintf_r+0x258>)
 800f5ec:	a904      	add	r1, sp, #16
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f7fe f9fe 	bl	800d9f0 <_printf_i>
 800f5f4:	e7e4      	b.n	800f5c0 <_vfiprintf_r+0x208>
 800f5f6:	bf00      	nop
 800f5f8:	08011830 	.word	0x08011830
 800f5fc:	08011850 	.word	0x08011850
 800f600:	08011810 	.word	0x08011810
 800f604:	080119cc 	.word	0x080119cc
 800f608:	080119d6 	.word	0x080119d6
 800f60c:	0800d4d9 	.word	0x0800d4d9
 800f610:	0800f393 	.word	0x0800f393
 800f614:	080119d2 	.word	0x080119d2

0800f618 <_sbrk_r>:
 800f618:	b538      	push	{r3, r4, r5, lr}
 800f61a:	4d06      	ldr	r5, [pc, #24]	; (800f634 <_sbrk_r+0x1c>)
 800f61c:	2300      	movs	r3, #0
 800f61e:	4604      	mov	r4, r0
 800f620:	4608      	mov	r0, r1
 800f622:	602b      	str	r3, [r5, #0]
 800f624:	f7f8 ff6c 	bl	8008500 <_sbrk>
 800f628:	1c43      	adds	r3, r0, #1
 800f62a:	d102      	bne.n	800f632 <_sbrk_r+0x1a>
 800f62c:	682b      	ldr	r3, [r5, #0]
 800f62e:	b103      	cbz	r3, 800f632 <_sbrk_r+0x1a>
 800f630:	6023      	str	r3, [r4, #0]
 800f632:	bd38      	pop	{r3, r4, r5, pc}
 800f634:	2400079c 	.word	0x2400079c

0800f638 <__sread>:
 800f638:	b510      	push	{r4, lr}
 800f63a:	460c      	mov	r4, r1
 800f63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f640:	f000 faa8 	bl	800fb94 <_read_r>
 800f644:	2800      	cmp	r0, #0
 800f646:	bfab      	itete	ge
 800f648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f64a:	89a3      	ldrhlt	r3, [r4, #12]
 800f64c:	181b      	addge	r3, r3, r0
 800f64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f652:	bfac      	ite	ge
 800f654:	6563      	strge	r3, [r4, #84]	; 0x54
 800f656:	81a3      	strhlt	r3, [r4, #12]
 800f658:	bd10      	pop	{r4, pc}

0800f65a <__swrite>:
 800f65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f65e:	461f      	mov	r7, r3
 800f660:	898b      	ldrh	r3, [r1, #12]
 800f662:	05db      	lsls	r3, r3, #23
 800f664:	4605      	mov	r5, r0
 800f666:	460c      	mov	r4, r1
 800f668:	4616      	mov	r6, r2
 800f66a:	d505      	bpl.n	800f678 <__swrite+0x1e>
 800f66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f670:	2302      	movs	r3, #2
 800f672:	2200      	movs	r2, #0
 800f674:	f000 f9f8 	bl	800fa68 <_lseek_r>
 800f678:	89a3      	ldrh	r3, [r4, #12]
 800f67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	4632      	mov	r2, r6
 800f686:	463b      	mov	r3, r7
 800f688:	4628      	mov	r0, r5
 800f68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f68e:	f000 b869 	b.w	800f764 <_write_r>

0800f692 <__sseek>:
 800f692:	b510      	push	{r4, lr}
 800f694:	460c      	mov	r4, r1
 800f696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f69a:	f000 f9e5 	bl	800fa68 <_lseek_r>
 800f69e:	1c43      	adds	r3, r0, #1
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	bf15      	itete	ne
 800f6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6ae:	81a3      	strheq	r3, [r4, #12]
 800f6b0:	bf18      	it	ne
 800f6b2:	81a3      	strhne	r3, [r4, #12]
 800f6b4:	bd10      	pop	{r4, pc}

0800f6b6 <__sclose>:
 800f6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ba:	f000 b8f1 	b.w	800f8a0 <_close_r>
	...

0800f6c0 <__swbuf_r>:
 800f6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c2:	460e      	mov	r6, r1
 800f6c4:	4614      	mov	r4, r2
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	b118      	cbz	r0, 800f6d2 <__swbuf_r+0x12>
 800f6ca:	6983      	ldr	r3, [r0, #24]
 800f6cc:	b90b      	cbnz	r3, 800f6d2 <__swbuf_r+0x12>
 800f6ce:	f7ff f921 	bl	800e914 <__sinit>
 800f6d2:	4b21      	ldr	r3, [pc, #132]	; (800f758 <__swbuf_r+0x98>)
 800f6d4:	429c      	cmp	r4, r3
 800f6d6:	d12b      	bne.n	800f730 <__swbuf_r+0x70>
 800f6d8:	686c      	ldr	r4, [r5, #4]
 800f6da:	69a3      	ldr	r3, [r4, #24]
 800f6dc:	60a3      	str	r3, [r4, #8]
 800f6de:	89a3      	ldrh	r3, [r4, #12]
 800f6e0:	071a      	lsls	r2, r3, #28
 800f6e2:	d52f      	bpl.n	800f744 <__swbuf_r+0x84>
 800f6e4:	6923      	ldr	r3, [r4, #16]
 800f6e6:	b36b      	cbz	r3, 800f744 <__swbuf_r+0x84>
 800f6e8:	6923      	ldr	r3, [r4, #16]
 800f6ea:	6820      	ldr	r0, [r4, #0]
 800f6ec:	1ac0      	subs	r0, r0, r3
 800f6ee:	6963      	ldr	r3, [r4, #20]
 800f6f0:	b2f6      	uxtb	r6, r6
 800f6f2:	4283      	cmp	r3, r0
 800f6f4:	4637      	mov	r7, r6
 800f6f6:	dc04      	bgt.n	800f702 <__swbuf_r+0x42>
 800f6f8:	4621      	mov	r1, r4
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f000 f966 	bl	800f9cc <_fflush_r>
 800f700:	bb30      	cbnz	r0, 800f750 <__swbuf_r+0x90>
 800f702:	68a3      	ldr	r3, [r4, #8]
 800f704:	3b01      	subs	r3, #1
 800f706:	60a3      	str	r3, [r4, #8]
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	6022      	str	r2, [r4, #0]
 800f70e:	701e      	strb	r6, [r3, #0]
 800f710:	6963      	ldr	r3, [r4, #20]
 800f712:	3001      	adds	r0, #1
 800f714:	4283      	cmp	r3, r0
 800f716:	d004      	beq.n	800f722 <__swbuf_r+0x62>
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	07db      	lsls	r3, r3, #31
 800f71c:	d506      	bpl.n	800f72c <__swbuf_r+0x6c>
 800f71e:	2e0a      	cmp	r6, #10
 800f720:	d104      	bne.n	800f72c <__swbuf_r+0x6c>
 800f722:	4621      	mov	r1, r4
 800f724:	4628      	mov	r0, r5
 800f726:	f000 f951 	bl	800f9cc <_fflush_r>
 800f72a:	b988      	cbnz	r0, 800f750 <__swbuf_r+0x90>
 800f72c:	4638      	mov	r0, r7
 800f72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f730:	4b0a      	ldr	r3, [pc, #40]	; (800f75c <__swbuf_r+0x9c>)
 800f732:	429c      	cmp	r4, r3
 800f734:	d101      	bne.n	800f73a <__swbuf_r+0x7a>
 800f736:	68ac      	ldr	r4, [r5, #8]
 800f738:	e7cf      	b.n	800f6da <__swbuf_r+0x1a>
 800f73a:	4b09      	ldr	r3, [pc, #36]	; (800f760 <__swbuf_r+0xa0>)
 800f73c:	429c      	cmp	r4, r3
 800f73e:	bf08      	it	eq
 800f740:	68ec      	ldreq	r4, [r5, #12]
 800f742:	e7ca      	b.n	800f6da <__swbuf_r+0x1a>
 800f744:	4621      	mov	r1, r4
 800f746:	4628      	mov	r0, r5
 800f748:	f000 f81e 	bl	800f788 <__swsetup_r>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d0cb      	beq.n	800f6e8 <__swbuf_r+0x28>
 800f750:	f04f 37ff 	mov.w	r7, #4294967295
 800f754:	e7ea      	b.n	800f72c <__swbuf_r+0x6c>
 800f756:	bf00      	nop
 800f758:	08011830 	.word	0x08011830
 800f75c:	08011850 	.word	0x08011850
 800f760:	08011810 	.word	0x08011810

0800f764 <_write_r>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	4d07      	ldr	r5, [pc, #28]	; (800f784 <_write_r+0x20>)
 800f768:	4604      	mov	r4, r0
 800f76a:	4608      	mov	r0, r1
 800f76c:	4611      	mov	r1, r2
 800f76e:	2200      	movs	r2, #0
 800f770:	602a      	str	r2, [r5, #0]
 800f772:	461a      	mov	r2, r3
 800f774:	f7f7 ff80 	bl	8007678 <_write>
 800f778:	1c43      	adds	r3, r0, #1
 800f77a:	d102      	bne.n	800f782 <_write_r+0x1e>
 800f77c:	682b      	ldr	r3, [r5, #0]
 800f77e:	b103      	cbz	r3, 800f782 <_write_r+0x1e>
 800f780:	6023      	str	r3, [r4, #0]
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	2400079c 	.word	0x2400079c

0800f788 <__swsetup_r>:
 800f788:	4b32      	ldr	r3, [pc, #200]	; (800f854 <__swsetup_r+0xcc>)
 800f78a:	b570      	push	{r4, r5, r6, lr}
 800f78c:	681d      	ldr	r5, [r3, #0]
 800f78e:	4606      	mov	r6, r0
 800f790:	460c      	mov	r4, r1
 800f792:	b125      	cbz	r5, 800f79e <__swsetup_r+0x16>
 800f794:	69ab      	ldr	r3, [r5, #24]
 800f796:	b913      	cbnz	r3, 800f79e <__swsetup_r+0x16>
 800f798:	4628      	mov	r0, r5
 800f79a:	f7ff f8bb 	bl	800e914 <__sinit>
 800f79e:	4b2e      	ldr	r3, [pc, #184]	; (800f858 <__swsetup_r+0xd0>)
 800f7a0:	429c      	cmp	r4, r3
 800f7a2:	d10f      	bne.n	800f7c4 <__swsetup_r+0x3c>
 800f7a4:	686c      	ldr	r4, [r5, #4]
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7ac:	0719      	lsls	r1, r3, #28
 800f7ae:	d42c      	bmi.n	800f80a <__swsetup_r+0x82>
 800f7b0:	06dd      	lsls	r5, r3, #27
 800f7b2:	d411      	bmi.n	800f7d8 <__swsetup_r+0x50>
 800f7b4:	2309      	movs	r3, #9
 800f7b6:	6033      	str	r3, [r6, #0]
 800f7b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7bc:	81a3      	strh	r3, [r4, #12]
 800f7be:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c2:	e03e      	b.n	800f842 <__swsetup_r+0xba>
 800f7c4:	4b25      	ldr	r3, [pc, #148]	; (800f85c <__swsetup_r+0xd4>)
 800f7c6:	429c      	cmp	r4, r3
 800f7c8:	d101      	bne.n	800f7ce <__swsetup_r+0x46>
 800f7ca:	68ac      	ldr	r4, [r5, #8]
 800f7cc:	e7eb      	b.n	800f7a6 <__swsetup_r+0x1e>
 800f7ce:	4b24      	ldr	r3, [pc, #144]	; (800f860 <__swsetup_r+0xd8>)
 800f7d0:	429c      	cmp	r4, r3
 800f7d2:	bf08      	it	eq
 800f7d4:	68ec      	ldreq	r4, [r5, #12]
 800f7d6:	e7e6      	b.n	800f7a6 <__swsetup_r+0x1e>
 800f7d8:	0758      	lsls	r0, r3, #29
 800f7da:	d512      	bpl.n	800f802 <__swsetup_r+0x7a>
 800f7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7de:	b141      	cbz	r1, 800f7f2 <__swsetup_r+0x6a>
 800f7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7e4:	4299      	cmp	r1, r3
 800f7e6:	d002      	beq.n	800f7ee <__swsetup_r+0x66>
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	f7ff fcdb 	bl	800f1a4 <_free_r>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	6363      	str	r3, [r4, #52]	; 0x34
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7f8:	81a3      	strh	r3, [r4, #12]
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	6063      	str	r3, [r4, #4]
 800f7fe:	6923      	ldr	r3, [r4, #16]
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	f043 0308 	orr.w	r3, r3, #8
 800f808:	81a3      	strh	r3, [r4, #12]
 800f80a:	6923      	ldr	r3, [r4, #16]
 800f80c:	b94b      	cbnz	r3, 800f822 <__swsetup_r+0x9a>
 800f80e:	89a3      	ldrh	r3, [r4, #12]
 800f810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f818:	d003      	beq.n	800f822 <__swsetup_r+0x9a>
 800f81a:	4621      	mov	r1, r4
 800f81c:	4630      	mov	r0, r6
 800f81e:	f000 f95b 	bl	800fad8 <__smakebuf_r>
 800f822:	89a0      	ldrh	r0, [r4, #12]
 800f824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f828:	f010 0301 	ands.w	r3, r0, #1
 800f82c:	d00a      	beq.n	800f844 <__swsetup_r+0xbc>
 800f82e:	2300      	movs	r3, #0
 800f830:	60a3      	str	r3, [r4, #8]
 800f832:	6963      	ldr	r3, [r4, #20]
 800f834:	425b      	negs	r3, r3
 800f836:	61a3      	str	r3, [r4, #24]
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	b943      	cbnz	r3, 800f84e <__swsetup_r+0xc6>
 800f83c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f840:	d1ba      	bne.n	800f7b8 <__swsetup_r+0x30>
 800f842:	bd70      	pop	{r4, r5, r6, pc}
 800f844:	0781      	lsls	r1, r0, #30
 800f846:	bf58      	it	pl
 800f848:	6963      	ldrpl	r3, [r4, #20]
 800f84a:	60a3      	str	r3, [r4, #8]
 800f84c:	e7f4      	b.n	800f838 <__swsetup_r+0xb0>
 800f84e:	2000      	movs	r0, #0
 800f850:	e7f7      	b.n	800f842 <__swsetup_r+0xba>
 800f852:	bf00      	nop
 800f854:	24000034 	.word	0x24000034
 800f858:	08011830 	.word	0x08011830
 800f85c:	08011850 	.word	0x08011850
 800f860:	08011810 	.word	0x08011810

0800f864 <__assert_func>:
 800f864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f866:	4614      	mov	r4, r2
 800f868:	461a      	mov	r2, r3
 800f86a:	4b09      	ldr	r3, [pc, #36]	; (800f890 <__assert_func+0x2c>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4605      	mov	r5, r0
 800f870:	68d8      	ldr	r0, [r3, #12]
 800f872:	b14c      	cbz	r4, 800f888 <__assert_func+0x24>
 800f874:	4b07      	ldr	r3, [pc, #28]	; (800f894 <__assert_func+0x30>)
 800f876:	9100      	str	r1, [sp, #0]
 800f878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f87c:	4906      	ldr	r1, [pc, #24]	; (800f898 <__assert_func+0x34>)
 800f87e:	462b      	mov	r3, r5
 800f880:	f000 f8e0 	bl	800fa44 <fiprintf>
 800f884:	f000 f9a5 	bl	800fbd2 <abort>
 800f888:	4b04      	ldr	r3, [pc, #16]	; (800f89c <__assert_func+0x38>)
 800f88a:	461c      	mov	r4, r3
 800f88c:	e7f3      	b.n	800f876 <__assert_func+0x12>
 800f88e:	bf00      	nop
 800f890:	24000034 	.word	0x24000034
 800f894:	080119dd 	.word	0x080119dd
 800f898:	080119ea 	.word	0x080119ea
 800f89c:	08011a18 	.word	0x08011a18

0800f8a0 <_close_r>:
 800f8a0:	b538      	push	{r3, r4, r5, lr}
 800f8a2:	4d06      	ldr	r5, [pc, #24]	; (800f8bc <_close_r+0x1c>)
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	4608      	mov	r0, r1
 800f8aa:	602b      	str	r3, [r5, #0]
 800f8ac:	f7f8 fdf3 	bl	8008496 <_close>
 800f8b0:	1c43      	adds	r3, r0, #1
 800f8b2:	d102      	bne.n	800f8ba <_close_r+0x1a>
 800f8b4:	682b      	ldr	r3, [r5, #0]
 800f8b6:	b103      	cbz	r3, 800f8ba <_close_r+0x1a>
 800f8b8:	6023      	str	r3, [r4, #0]
 800f8ba:	bd38      	pop	{r3, r4, r5, pc}
 800f8bc:	2400079c 	.word	0x2400079c

0800f8c0 <__sflush_r>:
 800f8c0:	898a      	ldrh	r2, [r1, #12]
 800f8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c6:	4605      	mov	r5, r0
 800f8c8:	0710      	lsls	r0, r2, #28
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	d458      	bmi.n	800f980 <__sflush_r+0xc0>
 800f8ce:	684b      	ldr	r3, [r1, #4]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	dc05      	bgt.n	800f8e0 <__sflush_r+0x20>
 800f8d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	dc02      	bgt.n	800f8e0 <__sflush_r+0x20>
 800f8da:	2000      	movs	r0, #0
 800f8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8e2:	2e00      	cmp	r6, #0
 800f8e4:	d0f9      	beq.n	800f8da <__sflush_r+0x1a>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8ec:	682f      	ldr	r7, [r5, #0]
 800f8ee:	602b      	str	r3, [r5, #0]
 800f8f0:	d032      	beq.n	800f958 <__sflush_r+0x98>
 800f8f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8f4:	89a3      	ldrh	r3, [r4, #12]
 800f8f6:	075a      	lsls	r2, r3, #29
 800f8f8:	d505      	bpl.n	800f906 <__sflush_r+0x46>
 800f8fa:	6863      	ldr	r3, [r4, #4]
 800f8fc:	1ac0      	subs	r0, r0, r3
 800f8fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f900:	b10b      	cbz	r3, 800f906 <__sflush_r+0x46>
 800f902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f904:	1ac0      	subs	r0, r0, r3
 800f906:	2300      	movs	r3, #0
 800f908:	4602      	mov	r2, r0
 800f90a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f90c:	6a21      	ldr	r1, [r4, #32]
 800f90e:	4628      	mov	r0, r5
 800f910:	47b0      	blx	r6
 800f912:	1c43      	adds	r3, r0, #1
 800f914:	89a3      	ldrh	r3, [r4, #12]
 800f916:	d106      	bne.n	800f926 <__sflush_r+0x66>
 800f918:	6829      	ldr	r1, [r5, #0]
 800f91a:	291d      	cmp	r1, #29
 800f91c:	d82c      	bhi.n	800f978 <__sflush_r+0xb8>
 800f91e:	4a2a      	ldr	r2, [pc, #168]	; (800f9c8 <__sflush_r+0x108>)
 800f920:	40ca      	lsrs	r2, r1
 800f922:	07d6      	lsls	r6, r2, #31
 800f924:	d528      	bpl.n	800f978 <__sflush_r+0xb8>
 800f926:	2200      	movs	r2, #0
 800f928:	6062      	str	r2, [r4, #4]
 800f92a:	04d9      	lsls	r1, r3, #19
 800f92c:	6922      	ldr	r2, [r4, #16]
 800f92e:	6022      	str	r2, [r4, #0]
 800f930:	d504      	bpl.n	800f93c <__sflush_r+0x7c>
 800f932:	1c42      	adds	r2, r0, #1
 800f934:	d101      	bne.n	800f93a <__sflush_r+0x7a>
 800f936:	682b      	ldr	r3, [r5, #0]
 800f938:	b903      	cbnz	r3, 800f93c <__sflush_r+0x7c>
 800f93a:	6560      	str	r0, [r4, #84]	; 0x54
 800f93c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f93e:	602f      	str	r7, [r5, #0]
 800f940:	2900      	cmp	r1, #0
 800f942:	d0ca      	beq.n	800f8da <__sflush_r+0x1a>
 800f944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f948:	4299      	cmp	r1, r3
 800f94a:	d002      	beq.n	800f952 <__sflush_r+0x92>
 800f94c:	4628      	mov	r0, r5
 800f94e:	f7ff fc29 	bl	800f1a4 <_free_r>
 800f952:	2000      	movs	r0, #0
 800f954:	6360      	str	r0, [r4, #52]	; 0x34
 800f956:	e7c1      	b.n	800f8dc <__sflush_r+0x1c>
 800f958:	6a21      	ldr	r1, [r4, #32]
 800f95a:	2301      	movs	r3, #1
 800f95c:	4628      	mov	r0, r5
 800f95e:	47b0      	blx	r6
 800f960:	1c41      	adds	r1, r0, #1
 800f962:	d1c7      	bne.n	800f8f4 <__sflush_r+0x34>
 800f964:	682b      	ldr	r3, [r5, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d0c4      	beq.n	800f8f4 <__sflush_r+0x34>
 800f96a:	2b1d      	cmp	r3, #29
 800f96c:	d001      	beq.n	800f972 <__sflush_r+0xb2>
 800f96e:	2b16      	cmp	r3, #22
 800f970:	d101      	bne.n	800f976 <__sflush_r+0xb6>
 800f972:	602f      	str	r7, [r5, #0]
 800f974:	e7b1      	b.n	800f8da <__sflush_r+0x1a>
 800f976:	89a3      	ldrh	r3, [r4, #12]
 800f978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f97c:	81a3      	strh	r3, [r4, #12]
 800f97e:	e7ad      	b.n	800f8dc <__sflush_r+0x1c>
 800f980:	690f      	ldr	r7, [r1, #16]
 800f982:	2f00      	cmp	r7, #0
 800f984:	d0a9      	beq.n	800f8da <__sflush_r+0x1a>
 800f986:	0793      	lsls	r3, r2, #30
 800f988:	680e      	ldr	r6, [r1, #0]
 800f98a:	bf08      	it	eq
 800f98c:	694b      	ldreq	r3, [r1, #20]
 800f98e:	600f      	str	r7, [r1, #0]
 800f990:	bf18      	it	ne
 800f992:	2300      	movne	r3, #0
 800f994:	eba6 0807 	sub.w	r8, r6, r7
 800f998:	608b      	str	r3, [r1, #8]
 800f99a:	f1b8 0f00 	cmp.w	r8, #0
 800f99e:	dd9c      	ble.n	800f8da <__sflush_r+0x1a>
 800f9a0:	6a21      	ldr	r1, [r4, #32]
 800f9a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f9a4:	4643      	mov	r3, r8
 800f9a6:	463a      	mov	r2, r7
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	47b0      	blx	r6
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	dc06      	bgt.n	800f9be <__sflush_r+0xfe>
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9b6:	81a3      	strh	r3, [r4, #12]
 800f9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9bc:	e78e      	b.n	800f8dc <__sflush_r+0x1c>
 800f9be:	4407      	add	r7, r0
 800f9c0:	eba8 0800 	sub.w	r8, r8, r0
 800f9c4:	e7e9      	b.n	800f99a <__sflush_r+0xda>
 800f9c6:	bf00      	nop
 800f9c8:	20400001 	.word	0x20400001

0800f9cc <_fflush_r>:
 800f9cc:	b538      	push	{r3, r4, r5, lr}
 800f9ce:	690b      	ldr	r3, [r1, #16]
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	460c      	mov	r4, r1
 800f9d4:	b913      	cbnz	r3, 800f9dc <_fflush_r+0x10>
 800f9d6:	2500      	movs	r5, #0
 800f9d8:	4628      	mov	r0, r5
 800f9da:	bd38      	pop	{r3, r4, r5, pc}
 800f9dc:	b118      	cbz	r0, 800f9e6 <_fflush_r+0x1a>
 800f9de:	6983      	ldr	r3, [r0, #24]
 800f9e0:	b90b      	cbnz	r3, 800f9e6 <_fflush_r+0x1a>
 800f9e2:	f7fe ff97 	bl	800e914 <__sinit>
 800f9e6:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <_fflush_r+0x6c>)
 800f9e8:	429c      	cmp	r4, r3
 800f9ea:	d11b      	bne.n	800fa24 <_fflush_r+0x58>
 800f9ec:	686c      	ldr	r4, [r5, #4]
 800f9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d0ef      	beq.n	800f9d6 <_fflush_r+0xa>
 800f9f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9f8:	07d0      	lsls	r0, r2, #31
 800f9fa:	d404      	bmi.n	800fa06 <_fflush_r+0x3a>
 800f9fc:	0599      	lsls	r1, r3, #22
 800f9fe:	d402      	bmi.n	800fa06 <_fflush_r+0x3a>
 800fa00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa02:	f7ff f82a 	bl	800ea5a <__retarget_lock_acquire_recursive>
 800fa06:	4628      	mov	r0, r5
 800fa08:	4621      	mov	r1, r4
 800fa0a:	f7ff ff59 	bl	800f8c0 <__sflush_r>
 800fa0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa10:	07da      	lsls	r2, r3, #31
 800fa12:	4605      	mov	r5, r0
 800fa14:	d4e0      	bmi.n	800f9d8 <_fflush_r+0xc>
 800fa16:	89a3      	ldrh	r3, [r4, #12]
 800fa18:	059b      	lsls	r3, r3, #22
 800fa1a:	d4dd      	bmi.n	800f9d8 <_fflush_r+0xc>
 800fa1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa1e:	f7ff f81d 	bl	800ea5c <__retarget_lock_release_recursive>
 800fa22:	e7d9      	b.n	800f9d8 <_fflush_r+0xc>
 800fa24:	4b05      	ldr	r3, [pc, #20]	; (800fa3c <_fflush_r+0x70>)
 800fa26:	429c      	cmp	r4, r3
 800fa28:	d101      	bne.n	800fa2e <_fflush_r+0x62>
 800fa2a:	68ac      	ldr	r4, [r5, #8]
 800fa2c:	e7df      	b.n	800f9ee <_fflush_r+0x22>
 800fa2e:	4b04      	ldr	r3, [pc, #16]	; (800fa40 <_fflush_r+0x74>)
 800fa30:	429c      	cmp	r4, r3
 800fa32:	bf08      	it	eq
 800fa34:	68ec      	ldreq	r4, [r5, #12]
 800fa36:	e7da      	b.n	800f9ee <_fflush_r+0x22>
 800fa38:	08011830 	.word	0x08011830
 800fa3c:	08011850 	.word	0x08011850
 800fa40:	08011810 	.word	0x08011810

0800fa44 <fiprintf>:
 800fa44:	b40e      	push	{r1, r2, r3}
 800fa46:	b503      	push	{r0, r1, lr}
 800fa48:	4601      	mov	r1, r0
 800fa4a:	ab03      	add	r3, sp, #12
 800fa4c:	4805      	ldr	r0, [pc, #20]	; (800fa64 <fiprintf+0x20>)
 800fa4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa52:	6800      	ldr	r0, [r0, #0]
 800fa54:	9301      	str	r3, [sp, #4]
 800fa56:	f7ff fcaf 	bl	800f3b8 <_vfiprintf_r>
 800fa5a:	b002      	add	sp, #8
 800fa5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa60:	b003      	add	sp, #12
 800fa62:	4770      	bx	lr
 800fa64:	24000034 	.word	0x24000034

0800fa68 <_lseek_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4d07      	ldr	r5, [pc, #28]	; (800fa88 <_lseek_r+0x20>)
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	4608      	mov	r0, r1
 800fa70:	4611      	mov	r1, r2
 800fa72:	2200      	movs	r2, #0
 800fa74:	602a      	str	r2, [r5, #0]
 800fa76:	461a      	mov	r2, r3
 800fa78:	f7f8 fd34 	bl	80084e4 <_lseek>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_lseek_r+0x1e>
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_lseek_r+0x1e>
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	2400079c 	.word	0x2400079c

0800fa8c <__swhatbuf_r>:
 800fa8c:	b570      	push	{r4, r5, r6, lr}
 800fa8e:	460e      	mov	r6, r1
 800fa90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa94:	2900      	cmp	r1, #0
 800fa96:	b096      	sub	sp, #88	; 0x58
 800fa98:	4614      	mov	r4, r2
 800fa9a:	461d      	mov	r5, r3
 800fa9c:	da08      	bge.n	800fab0 <__swhatbuf_r+0x24>
 800fa9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	602a      	str	r2, [r5, #0]
 800faa6:	061a      	lsls	r2, r3, #24
 800faa8:	d410      	bmi.n	800facc <__swhatbuf_r+0x40>
 800faaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faae:	e00e      	b.n	800face <__swhatbuf_r+0x42>
 800fab0:	466a      	mov	r2, sp
 800fab2:	f000 f895 	bl	800fbe0 <_fstat_r>
 800fab6:	2800      	cmp	r0, #0
 800fab8:	dbf1      	blt.n	800fa9e <__swhatbuf_r+0x12>
 800faba:	9a01      	ldr	r2, [sp, #4]
 800fabc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fac0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fac4:	425a      	negs	r2, r3
 800fac6:	415a      	adcs	r2, r3
 800fac8:	602a      	str	r2, [r5, #0]
 800faca:	e7ee      	b.n	800faaa <__swhatbuf_r+0x1e>
 800facc:	2340      	movs	r3, #64	; 0x40
 800face:	2000      	movs	r0, #0
 800fad0:	6023      	str	r3, [r4, #0]
 800fad2:	b016      	add	sp, #88	; 0x58
 800fad4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fad8 <__smakebuf_r>:
 800fad8:	898b      	ldrh	r3, [r1, #12]
 800fada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fadc:	079d      	lsls	r5, r3, #30
 800fade:	4606      	mov	r6, r0
 800fae0:	460c      	mov	r4, r1
 800fae2:	d507      	bpl.n	800faf4 <__smakebuf_r+0x1c>
 800fae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fae8:	6023      	str	r3, [r4, #0]
 800faea:	6123      	str	r3, [r4, #16]
 800faec:	2301      	movs	r3, #1
 800faee:	6163      	str	r3, [r4, #20]
 800faf0:	b002      	add	sp, #8
 800faf2:	bd70      	pop	{r4, r5, r6, pc}
 800faf4:	ab01      	add	r3, sp, #4
 800faf6:	466a      	mov	r2, sp
 800faf8:	f7ff ffc8 	bl	800fa8c <__swhatbuf_r>
 800fafc:	9900      	ldr	r1, [sp, #0]
 800fafe:	4605      	mov	r5, r0
 800fb00:	4630      	mov	r0, r6
 800fb02:	f7ff fbbb 	bl	800f27c <_malloc_r>
 800fb06:	b948      	cbnz	r0, 800fb1c <__smakebuf_r+0x44>
 800fb08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb0c:	059a      	lsls	r2, r3, #22
 800fb0e:	d4ef      	bmi.n	800faf0 <__smakebuf_r+0x18>
 800fb10:	f023 0303 	bic.w	r3, r3, #3
 800fb14:	f043 0302 	orr.w	r3, r3, #2
 800fb18:	81a3      	strh	r3, [r4, #12]
 800fb1a:	e7e3      	b.n	800fae4 <__smakebuf_r+0xc>
 800fb1c:	4b0d      	ldr	r3, [pc, #52]	; (800fb54 <__smakebuf_r+0x7c>)
 800fb1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb20:	89a3      	ldrh	r3, [r4, #12]
 800fb22:	6020      	str	r0, [r4, #0]
 800fb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb28:	81a3      	strh	r3, [r4, #12]
 800fb2a:	9b00      	ldr	r3, [sp, #0]
 800fb2c:	6163      	str	r3, [r4, #20]
 800fb2e:	9b01      	ldr	r3, [sp, #4]
 800fb30:	6120      	str	r0, [r4, #16]
 800fb32:	b15b      	cbz	r3, 800fb4c <__smakebuf_r+0x74>
 800fb34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f000 f863 	bl	800fc04 <_isatty_r>
 800fb3e:	b128      	cbz	r0, 800fb4c <__smakebuf_r+0x74>
 800fb40:	89a3      	ldrh	r3, [r4, #12]
 800fb42:	f023 0303 	bic.w	r3, r3, #3
 800fb46:	f043 0301 	orr.w	r3, r3, #1
 800fb4a:	81a3      	strh	r3, [r4, #12]
 800fb4c:	89a0      	ldrh	r0, [r4, #12]
 800fb4e:	4305      	orrs	r5, r0
 800fb50:	81a5      	strh	r5, [r4, #12]
 800fb52:	e7cd      	b.n	800faf0 <__smakebuf_r+0x18>
 800fb54:	0800e8ad 	.word	0x0800e8ad

0800fb58 <__ascii_mbtowc>:
 800fb58:	b082      	sub	sp, #8
 800fb5a:	b901      	cbnz	r1, 800fb5e <__ascii_mbtowc+0x6>
 800fb5c:	a901      	add	r1, sp, #4
 800fb5e:	b142      	cbz	r2, 800fb72 <__ascii_mbtowc+0x1a>
 800fb60:	b14b      	cbz	r3, 800fb76 <__ascii_mbtowc+0x1e>
 800fb62:	7813      	ldrb	r3, [r2, #0]
 800fb64:	600b      	str	r3, [r1, #0]
 800fb66:	7812      	ldrb	r2, [r2, #0]
 800fb68:	1e10      	subs	r0, r2, #0
 800fb6a:	bf18      	it	ne
 800fb6c:	2001      	movne	r0, #1
 800fb6e:	b002      	add	sp, #8
 800fb70:	4770      	bx	lr
 800fb72:	4610      	mov	r0, r2
 800fb74:	e7fb      	b.n	800fb6e <__ascii_mbtowc+0x16>
 800fb76:	f06f 0001 	mvn.w	r0, #1
 800fb7a:	e7f8      	b.n	800fb6e <__ascii_mbtowc+0x16>

0800fb7c <__malloc_lock>:
 800fb7c:	4801      	ldr	r0, [pc, #4]	; (800fb84 <__malloc_lock+0x8>)
 800fb7e:	f7fe bf6c 	b.w	800ea5a <__retarget_lock_acquire_recursive>
 800fb82:	bf00      	nop
 800fb84:	24000790 	.word	0x24000790

0800fb88 <__malloc_unlock>:
 800fb88:	4801      	ldr	r0, [pc, #4]	; (800fb90 <__malloc_unlock+0x8>)
 800fb8a:	f7fe bf67 	b.w	800ea5c <__retarget_lock_release_recursive>
 800fb8e:	bf00      	nop
 800fb90:	24000790 	.word	0x24000790

0800fb94 <_read_r>:
 800fb94:	b538      	push	{r3, r4, r5, lr}
 800fb96:	4d07      	ldr	r5, [pc, #28]	; (800fbb4 <_read_r+0x20>)
 800fb98:	4604      	mov	r4, r0
 800fb9a:	4608      	mov	r0, r1
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	2200      	movs	r2, #0
 800fba0:	602a      	str	r2, [r5, #0]
 800fba2:	461a      	mov	r2, r3
 800fba4:	f7f8 fc5a 	bl	800845c <_read>
 800fba8:	1c43      	adds	r3, r0, #1
 800fbaa:	d102      	bne.n	800fbb2 <_read_r+0x1e>
 800fbac:	682b      	ldr	r3, [r5, #0]
 800fbae:	b103      	cbz	r3, 800fbb2 <_read_r+0x1e>
 800fbb0:	6023      	str	r3, [r4, #0]
 800fbb2:	bd38      	pop	{r3, r4, r5, pc}
 800fbb4:	2400079c 	.word	0x2400079c

0800fbb8 <__ascii_wctomb>:
 800fbb8:	b149      	cbz	r1, 800fbce <__ascii_wctomb+0x16>
 800fbba:	2aff      	cmp	r2, #255	; 0xff
 800fbbc:	bf85      	ittet	hi
 800fbbe:	238a      	movhi	r3, #138	; 0x8a
 800fbc0:	6003      	strhi	r3, [r0, #0]
 800fbc2:	700a      	strbls	r2, [r1, #0]
 800fbc4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fbc8:	bf98      	it	ls
 800fbca:	2001      	movls	r0, #1
 800fbcc:	4770      	bx	lr
 800fbce:	4608      	mov	r0, r1
 800fbd0:	4770      	bx	lr

0800fbd2 <abort>:
 800fbd2:	b508      	push	{r3, lr}
 800fbd4:	2006      	movs	r0, #6
 800fbd6:	f000 f84d 	bl	800fc74 <raise>
 800fbda:	2001      	movs	r0, #1
 800fbdc:	f7f8 fc34 	bl	8008448 <_exit>

0800fbe0 <_fstat_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	4d07      	ldr	r5, [pc, #28]	; (800fc00 <_fstat_r+0x20>)
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	4608      	mov	r0, r1
 800fbea:	4611      	mov	r1, r2
 800fbec:	602b      	str	r3, [r5, #0]
 800fbee:	f7f8 fc5e 	bl	80084ae <_fstat>
 800fbf2:	1c43      	adds	r3, r0, #1
 800fbf4:	d102      	bne.n	800fbfc <_fstat_r+0x1c>
 800fbf6:	682b      	ldr	r3, [r5, #0]
 800fbf8:	b103      	cbz	r3, 800fbfc <_fstat_r+0x1c>
 800fbfa:	6023      	str	r3, [r4, #0]
 800fbfc:	bd38      	pop	{r3, r4, r5, pc}
 800fbfe:	bf00      	nop
 800fc00:	2400079c 	.word	0x2400079c

0800fc04 <_isatty_r>:
 800fc04:	b538      	push	{r3, r4, r5, lr}
 800fc06:	4d06      	ldr	r5, [pc, #24]	; (800fc20 <_isatty_r+0x1c>)
 800fc08:	2300      	movs	r3, #0
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	4608      	mov	r0, r1
 800fc0e:	602b      	str	r3, [r5, #0]
 800fc10:	f7f8 fc5d 	bl	80084ce <_isatty>
 800fc14:	1c43      	adds	r3, r0, #1
 800fc16:	d102      	bne.n	800fc1e <_isatty_r+0x1a>
 800fc18:	682b      	ldr	r3, [r5, #0]
 800fc1a:	b103      	cbz	r3, 800fc1e <_isatty_r+0x1a>
 800fc1c:	6023      	str	r3, [r4, #0]
 800fc1e:	bd38      	pop	{r3, r4, r5, pc}
 800fc20:	2400079c 	.word	0x2400079c

0800fc24 <_raise_r>:
 800fc24:	291f      	cmp	r1, #31
 800fc26:	b538      	push	{r3, r4, r5, lr}
 800fc28:	4604      	mov	r4, r0
 800fc2a:	460d      	mov	r5, r1
 800fc2c:	d904      	bls.n	800fc38 <_raise_r+0x14>
 800fc2e:	2316      	movs	r3, #22
 800fc30:	6003      	str	r3, [r0, #0]
 800fc32:	f04f 30ff 	mov.w	r0, #4294967295
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc3a:	b112      	cbz	r2, 800fc42 <_raise_r+0x1e>
 800fc3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc40:	b94b      	cbnz	r3, 800fc56 <_raise_r+0x32>
 800fc42:	4620      	mov	r0, r4
 800fc44:	f000 f830 	bl	800fca8 <_getpid_r>
 800fc48:	462a      	mov	r2, r5
 800fc4a:	4601      	mov	r1, r0
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc52:	f000 b817 	b.w	800fc84 <_kill_r>
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d00a      	beq.n	800fc70 <_raise_r+0x4c>
 800fc5a:	1c59      	adds	r1, r3, #1
 800fc5c:	d103      	bne.n	800fc66 <_raise_r+0x42>
 800fc5e:	2316      	movs	r3, #22
 800fc60:	6003      	str	r3, [r0, #0]
 800fc62:	2001      	movs	r0, #1
 800fc64:	e7e7      	b.n	800fc36 <_raise_r+0x12>
 800fc66:	2400      	movs	r4, #0
 800fc68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	4798      	blx	r3
 800fc70:	2000      	movs	r0, #0
 800fc72:	e7e0      	b.n	800fc36 <_raise_r+0x12>

0800fc74 <raise>:
 800fc74:	4b02      	ldr	r3, [pc, #8]	; (800fc80 <raise+0xc>)
 800fc76:	4601      	mov	r1, r0
 800fc78:	6818      	ldr	r0, [r3, #0]
 800fc7a:	f7ff bfd3 	b.w	800fc24 <_raise_r>
 800fc7e:	bf00      	nop
 800fc80:	24000034 	.word	0x24000034

0800fc84 <_kill_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	4d07      	ldr	r5, [pc, #28]	; (800fca4 <_kill_r+0x20>)
 800fc88:	2300      	movs	r3, #0
 800fc8a:	4604      	mov	r4, r0
 800fc8c:	4608      	mov	r0, r1
 800fc8e:	4611      	mov	r1, r2
 800fc90:	602b      	str	r3, [r5, #0]
 800fc92:	f7f8 fbc9 	bl	8008428 <_kill>
 800fc96:	1c43      	adds	r3, r0, #1
 800fc98:	d102      	bne.n	800fca0 <_kill_r+0x1c>
 800fc9a:	682b      	ldr	r3, [r5, #0]
 800fc9c:	b103      	cbz	r3, 800fca0 <_kill_r+0x1c>
 800fc9e:	6023      	str	r3, [r4, #0]
 800fca0:	bd38      	pop	{r3, r4, r5, pc}
 800fca2:	bf00      	nop
 800fca4:	2400079c 	.word	0x2400079c

0800fca8 <_getpid_r>:
 800fca8:	f7f8 bbb6 	b.w	8008418 <_getpid>

0800fcac <sinf_poly>:
 800fcac:	07cb      	lsls	r3, r1, #31
 800fcae:	d412      	bmi.n	800fcd6 <sinf_poly+0x2a>
 800fcb0:	ee21 5b00 	vmul.f64	d5, d1, d0
 800fcb4:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800fcb8:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800fcbc:	eea6 7b01 	vfma.f64	d7, d6, d1
 800fcc0:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800fcc4:	ee21 1b05 	vmul.f64	d1, d1, d5
 800fcc8:	eea6 0b05 	vfma.f64	d0, d6, d5
 800fccc:	eea7 0b01 	vfma.f64	d0, d7, d1
 800fcd0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fcd4:	4770      	bx	lr
 800fcd6:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800fcda:	ee21 5b01 	vmul.f64	d5, d1, d1
 800fcde:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800fce2:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800fce6:	eea1 7b06 	vfma.f64	d7, d1, d6
 800fcea:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800fcee:	eea1 0b06 	vfma.f64	d0, d1, d6
 800fcf2:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800fcf6:	ee21 1b05 	vmul.f64	d1, d1, d5
 800fcfa:	eea5 0b06 	vfma.f64	d0, d5, d6
 800fcfe:	e7e5      	b.n	800fccc <sinf_poly+0x20>

0800fd00 <cosf>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	ee10 4a10 	vmov	r4, s0
 800fd06:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800fd0a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800fd0e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800fd12:	d21f      	bcs.n	800fd54 <cosf+0x54>
 800fd14:	ee27 0b07 	vmul.f64	d0, d7, d7
 800fd18:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800fd1c:	f0c0 8088 	bcc.w	800fe30 <cosf+0x130>
 800fd20:	ee20 4b00 	vmul.f64	d4, d0, d0
 800fd24:	4b46      	ldr	r3, [pc, #280]	; (800fe40 <cosf+0x140>)
 800fd26:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 800fd2a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800fd2e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800fd32:	eea0 6b05 	vfma.f64	d6, d0, d5
 800fd36:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 800fd3a:	eea0 7b05 	vfma.f64	d7, d0, d5
 800fd3e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800fd42:	ee20 0b04 	vmul.f64	d0, d0, d4
 800fd46:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fd4a:	eea6 7b00 	vfma.f64	d7, d6, d0
 800fd4e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800fd52:	bd38      	pop	{r3, r4, r5, pc}
 800fd54:	f240 422e 	movw	r2, #1070	; 0x42e
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d82b      	bhi.n	800fdb4 <cosf+0xb4>
 800fd5c:	4b38      	ldr	r3, [pc, #224]	; (800fe40 <cosf+0x140>)
 800fd5e:	ed93 6b08 	vldr	d6, [r3, #32]
 800fd62:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fd66:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800fd6a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800fd6e:	ee16 1a90 	vmov	r1, s13
 800fd72:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800fd76:	1609      	asrs	r1, r1, #24
 800fd78:	ee06 1a90 	vmov	s13, r1
 800fd7c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800fd80:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800fd84:	f001 0203 	and.w	r2, r1, #3
 800fd88:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fd8c:	eea5 7b46 	vfms.f64	d7, d5, d6
 800fd90:	eeb0 0b47 	vmov.f64	d0, d7
 800fd94:	ed92 7b00 	vldr	d7, [r2]
 800fd98:	ee20 1b00 	vmul.f64	d1, d0, d0
 800fd9c:	f011 0f02 	tst.w	r1, #2
 800fda0:	bf08      	it	eq
 800fda2:	4618      	moveq	r0, r3
 800fda4:	f081 0101 	eor.w	r1, r1, #1
 800fda8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdac:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fdb0:	f7ff bf7c 	b.w	800fcac <sinf_poly>
 800fdb4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800fdb8:	d236      	bcs.n	800fe28 <cosf+0x128>
 800fdba:	4a22      	ldr	r2, [pc, #136]	; (800fe44 <cosf+0x144>)
 800fdbc:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800fdc0:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800fdc4:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800fdc8:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800fdcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fdd0:	4083      	lsls	r3, r0
 800fdd2:	6a28      	ldr	r0, [r5, #32]
 800fdd4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fdd8:	fba3 1000 	umull	r1, r0, r3, r0
 800fddc:	6929      	ldr	r1, [r5, #16]
 800fdde:	435a      	muls	r2, r3
 800fde0:	fbe3 0201 	umlal	r0, r2, r3, r1
 800fde4:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800fde8:	0f8d      	lsrs	r5, r1, #30
 800fdea:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800fdee:	1a51      	subs	r1, r2, r1
 800fdf0:	f7f0 fc5c 	bl	80006ac <__aeabi_l2d>
 800fdf4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800fdf8:	4b11      	ldr	r3, [pc, #68]	; (800fe40 <cosf+0x140>)
 800fdfa:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800fe38 <cosf+0x138>
 800fdfe:	ec41 0b16 	vmov	d6, r0, r1
 800fe02:	f004 0203 	and.w	r2, r4, #3
 800fe06:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fe0a:	f014 0f02 	tst.w	r4, #2
 800fe0e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800fe12:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fe16:	ed92 0b00 	vldr	d0, [r2]
 800fe1a:	ee27 1b07 	vmul.f64	d1, d7, d7
 800fe1e:	f085 0101 	eor.w	r1, r5, #1
 800fe22:	bf08      	it	eq
 800fe24:	4618      	moveq	r0, r3
 800fe26:	e7bf      	b.n	800fda8 <cosf+0xa8>
 800fe28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe2c:	f000 b817 	b.w	800fe5e <__math_invalidf>
 800fe30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fe34:	e78d      	b.n	800fd52 <cosf+0x52>
 800fe36:	bf00      	nop
 800fe38:	54442d18 	.word	0x54442d18
 800fe3c:	3c1921fb 	.word	0x3c1921fb
 800fe40:	08011b88 	.word	0x08011b88
 800fe44:	08011b24 	.word	0x08011b24

0800fe48 <with_errnof>:
 800fe48:	b513      	push	{r0, r1, r4, lr}
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fe50:	f7fd fa70 	bl	800d334 <__errno>
 800fe54:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fe58:	6004      	str	r4, [r0, #0]
 800fe5a:	b002      	add	sp, #8
 800fe5c:	bd10      	pop	{r4, pc}

0800fe5e <__math_invalidf>:
 800fe5e:	eef0 7a40 	vmov.f32	s15, s0
 800fe62:	ee30 7a40 	vsub.f32	s14, s0, s0
 800fe66:	eef4 7a67 	vcmp.f32	s15, s15
 800fe6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800fe72:	d602      	bvs.n	800fe7a <__math_invalidf+0x1c>
 800fe74:	2021      	movs	r0, #33	; 0x21
 800fe76:	f7ff bfe7 	b.w	800fe48 <with_errnof>
 800fe7a:	4770      	bx	lr

0800fe7c <tanf>:
 800fe7c:	ee10 3a10 	vmov	r3, s0
 800fe80:	b507      	push	{r0, r1, r2, lr}
 800fe82:	4a12      	ldr	r2, [pc, #72]	; (800fecc <tanf+0x50>)
 800fe84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	dc07      	bgt.n	800fe9c <tanf+0x20>
 800fe8c:	eddf 0a10 	vldr	s1, [pc, #64]	; 800fed0 <tanf+0x54>
 800fe90:	2001      	movs	r0, #1
 800fe92:	b003      	add	sp, #12
 800fe94:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe98:	f001 b88a 	b.w	8010fb0 <__kernel_tanf>
 800fe9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fea0:	db04      	blt.n	800feac <tanf+0x30>
 800fea2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fea6:	b003      	add	sp, #12
 800fea8:	f85d fb04 	ldr.w	pc, [sp], #4
 800feac:	4668      	mov	r0, sp
 800feae:	f000 fcc9 	bl	8010844 <__ieee754_rem_pio2f>
 800feb2:	0040      	lsls	r0, r0, #1
 800feb4:	f000 0002 	and.w	r0, r0, #2
 800feb8:	eddd 0a01 	vldr	s1, [sp, #4]
 800febc:	ed9d 0a00 	vldr	s0, [sp]
 800fec0:	f1c0 0001 	rsb	r0, r0, #1
 800fec4:	f001 f874 	bl	8010fb0 <__kernel_tanf>
 800fec8:	e7ed      	b.n	800fea6 <tanf+0x2a>
 800feca:	bf00      	nop
 800fecc:	3f490fda 	.word	0x3f490fda
 800fed0:	00000000 	.word	0x00000000

0800fed4 <sinf_poly>:
 800fed4:	07cb      	lsls	r3, r1, #31
 800fed6:	d412      	bmi.n	800fefe <sinf_poly+0x2a>
 800fed8:	ee21 5b00 	vmul.f64	d5, d1, d0
 800fedc:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800fee0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800fee4:	eea6 7b01 	vfma.f64	d7, d6, d1
 800fee8:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800feec:	ee21 1b05 	vmul.f64	d1, d1, d5
 800fef0:	eea6 0b05 	vfma.f64	d0, d6, d5
 800fef4:	eea7 0b01 	vfma.f64	d0, d7, d1
 800fef8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fefc:	4770      	bx	lr
 800fefe:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800ff02:	ee21 5b01 	vmul.f64	d5, d1, d1
 800ff06:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800ff0a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800ff0e:	eea1 7b06 	vfma.f64	d7, d1, d6
 800ff12:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800ff16:	eea1 0b06 	vfma.f64	d0, d1, d6
 800ff1a:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800ff1e:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ff22:	eea5 0b06 	vfma.f64	d0, d5, d6
 800ff26:	e7e5      	b.n	800fef4 <sinf_poly+0x20>

0800ff28 <sinf>:
 800ff28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff2a:	ee10 4a10 	vmov	r4, s0
 800ff2e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ff32:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800ff36:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800ff3a:	eef0 7a40 	vmov.f32	s15, s0
 800ff3e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800ff42:	d218      	bcs.n	800ff76 <sinf+0x4e>
 800ff44:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ff48:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800ff4c:	d20a      	bcs.n	800ff64 <sinf+0x3c>
 800ff4e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800ff52:	d103      	bne.n	800ff5c <sinf+0x34>
 800ff54:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800ff58:	ed8d 1a01 	vstr	s2, [sp, #4]
 800ff5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ff60:	b003      	add	sp, #12
 800ff62:	bd30      	pop	{r4, r5, pc}
 800ff64:	483a      	ldr	r0, [pc, #232]	; (8010050 <sinf+0x128>)
 800ff66:	eeb0 0b46 	vmov.f64	d0, d6
 800ff6a:	2100      	movs	r1, #0
 800ff6c:	b003      	add	sp, #12
 800ff6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff72:	f7ff bfaf 	b.w	800fed4 <sinf_poly>
 800ff76:	f240 422e 	movw	r2, #1070	; 0x42e
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d824      	bhi.n	800ffc8 <sinf+0xa0>
 800ff7e:	4b34      	ldr	r3, [pc, #208]	; (8010050 <sinf+0x128>)
 800ff80:	ed93 7b08 	vldr	d7, [r3, #32]
 800ff84:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ff88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ff8c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ff90:	ee17 1a90 	vmov	r1, s15
 800ff94:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800ff98:	1609      	asrs	r1, r1, #24
 800ff9a:	ee07 1a90 	vmov	s15, r1
 800ff9e:	f001 0203 	and.w	r2, r1, #3
 800ffa2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ffa6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ffaa:	ed92 0b00 	vldr	d0, [r2]
 800ffae:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800ffb2:	f011 0f02 	tst.w	r1, #2
 800ffb6:	eea5 6b47 	vfms.f64	d6, d5, d7
 800ffba:	bf08      	it	eq
 800ffbc:	4618      	moveq	r0, r3
 800ffbe:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ffc2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ffc6:	e7d1      	b.n	800ff6c <sinf+0x44>
 800ffc8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800ffcc:	d237      	bcs.n	801003e <sinf+0x116>
 800ffce:	4a21      	ldr	r2, [pc, #132]	; (8010054 <sinf+0x12c>)
 800ffd0:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800ffd4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800ffd8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800ffdc:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800ffe0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ffe4:	4083      	lsls	r3, r0
 800ffe6:	6a28      	ldr	r0, [r5, #32]
 800ffe8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ffec:	fba3 1000 	umull	r1, r0, r3, r0
 800fff0:	6929      	ldr	r1, [r5, #16]
 800fff2:	435a      	muls	r2, r3
 800fff4:	fbe3 0201 	umlal	r0, r2, r3, r1
 800fff8:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800fffc:	0f8d      	lsrs	r5, r1, #30
 800fffe:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8010002:	1a51      	subs	r1, r2, r1
 8010004:	f7f0 fb52 	bl	80006ac <__aeabi_l2d>
 8010008:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801000c:	4b10      	ldr	r3, [pc, #64]	; (8010050 <sinf+0x128>)
 801000e:	f004 0203 	and.w	r2, r4, #3
 8010012:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010016:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8010048 <sinf+0x120>
 801001a:	ed92 0b00 	vldr	d0, [r2]
 801001e:	ec41 0b16 	vmov	d6, r0, r1
 8010022:	f014 0f02 	tst.w	r4, #2
 8010026:	ee26 7b07 	vmul.f64	d7, d6, d7
 801002a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801002e:	4629      	mov	r1, r5
 8010030:	bf08      	it	eq
 8010032:	4618      	moveq	r0, r3
 8010034:	ee27 1b07 	vmul.f64	d1, d7, d7
 8010038:	ee20 0b07 	vmul.f64	d0, d0, d7
 801003c:	e796      	b.n	800ff6c <sinf+0x44>
 801003e:	b003      	add	sp, #12
 8010040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010044:	f7ff bf0b 	b.w	800fe5e <__math_invalidf>
 8010048:	54442d18 	.word	0x54442d18
 801004c:	3c1921fb 	.word	0x3c1921fb
 8010050:	08011b88 	.word	0x08011b88
 8010054:	08011b24 	.word	0x08011b24

08010058 <asin>:
 8010058:	b508      	push	{r3, lr}
 801005a:	ed2d 8b04 	vpush	{d8-d9}
 801005e:	eeb0 8b40 	vmov.f64	d8, d0
 8010062:	f000 f895 	bl	8010190 <__ieee754_asin>
 8010066:	eeb4 8b48 	vcmp.f64	d8, d8
 801006a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801006e:	eeb0 9b40 	vmov.f64	d9, d0
 8010072:	d615      	bvs.n	80100a0 <asin+0x48>
 8010074:	eeb0 0b48 	vmov.f64	d0, d8
 8010078:	f001 f974 	bl	8011364 <fabs>
 801007c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010080:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010088:	dd0a      	ble.n	80100a0 <asin+0x48>
 801008a:	f7fd f953 	bl	800d334 <__errno>
 801008e:	ecbd 8b04 	vpop	{d8-d9}
 8010092:	2321      	movs	r3, #33	; 0x21
 8010094:	6003      	str	r3, [r0, #0]
 8010096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801009a:	4804      	ldr	r0, [pc, #16]	; (80100ac <asin+0x54>)
 801009c:	f001 b96c 	b.w	8011378 <nan>
 80100a0:	eeb0 0b49 	vmov.f64	d0, d9
 80100a4:	ecbd 8b04 	vpop	{d8-d9}
 80100a8:	bd08      	pop	{r3, pc}
 80100aa:	bf00      	nop
 80100ac:	08011a18 	.word	0x08011a18

080100b0 <atan2>:
 80100b0:	f000 b97e 	b.w	80103b0 <__ieee754_atan2>
 80100b4:	0000      	movs	r0, r0
	...

080100b8 <sqrt>:
 80100b8:	b508      	push	{r3, lr}
 80100ba:	ed2d 8b04 	vpush	{d8-d9}
 80100be:	eeb0 8b40 	vmov.f64	d8, d0
 80100c2:	f000 fa37 	bl	8010534 <__ieee754_sqrt>
 80100c6:	eeb4 8b48 	vcmp.f64	d8, d8
 80100ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ce:	d60c      	bvs.n	80100ea <sqrt+0x32>
 80100d0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80100f0 <sqrt+0x38>
 80100d4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80100d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100dc:	d505      	bpl.n	80100ea <sqrt+0x32>
 80100de:	f7fd f929 	bl	800d334 <__errno>
 80100e2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80100e6:	2321      	movs	r3, #33	; 0x21
 80100e8:	6003      	str	r3, [r0, #0]
 80100ea:	ecbd 8b04 	vpop	{d8-d9}
 80100ee:	bd08      	pop	{r3, pc}
	...

080100f8 <asinf>:
 80100f8:	b508      	push	{r3, lr}
 80100fa:	ed2d 8b02 	vpush	{d8}
 80100fe:	eeb0 8a40 	vmov.f32	s16, s0
 8010102:	f000 fa1b 	bl	801053c <__ieee754_asinf>
 8010106:	eeb4 8a48 	vcmp.f32	s16, s16
 801010a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801010e:	eef0 8a40 	vmov.f32	s17, s0
 8010112:	d615      	bvs.n	8010140 <asinf+0x48>
 8010114:	eeb0 0a48 	vmov.f32	s0, s16
 8010118:	f001 fa0a 	bl	8011530 <fabsf>
 801011c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010120:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010128:	dd0a      	ble.n	8010140 <asinf+0x48>
 801012a:	f7fd f903 	bl	800d334 <__errno>
 801012e:	ecbd 8b02 	vpop	{d8}
 8010132:	2321      	movs	r3, #33	; 0x21
 8010134:	6003      	str	r3, [r0, #0]
 8010136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801013a:	4804      	ldr	r0, [pc, #16]	; (801014c <asinf+0x54>)
 801013c:	f001 ba42 	b.w	80115c4 <nanf>
 8010140:	eeb0 0a68 	vmov.f32	s0, s17
 8010144:	ecbd 8b02 	vpop	{d8}
 8010148:	bd08      	pop	{r3, pc}
 801014a:	bf00      	nop
 801014c:	08011a18 	.word	0x08011a18

08010150 <atan2f>:
 8010150:	f000 bada 	b.w	8010708 <__ieee754_atan2f>

08010154 <sqrtf>:
 8010154:	b508      	push	{r3, lr}
 8010156:	ed2d 8b02 	vpush	{d8}
 801015a:	eeb0 8a40 	vmov.f32	s16, s0
 801015e:	f000 fcad 	bl	8010abc <__ieee754_sqrtf>
 8010162:	eeb4 8a48 	vcmp.f32	s16, s16
 8010166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016a:	d60c      	bvs.n	8010186 <sqrtf+0x32>
 801016c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801018c <sqrtf+0x38>
 8010170:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010178:	d505      	bpl.n	8010186 <sqrtf+0x32>
 801017a:	f7fd f8db 	bl	800d334 <__errno>
 801017e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010182:	2321      	movs	r3, #33	; 0x21
 8010184:	6003      	str	r3, [r0, #0]
 8010186:	ecbd 8b02 	vpop	{d8}
 801018a:	bd08      	pop	{r3, pc}
 801018c:	00000000 	.word	0x00000000

08010190 <__ieee754_asin>:
 8010190:	b538      	push	{r3, r4, r5, lr}
 8010192:	ee10 5a90 	vmov	r5, s1
 8010196:	4b82      	ldr	r3, [pc, #520]	; (80103a0 <__ieee754_asin+0x210>)
 8010198:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801019c:	429c      	cmp	r4, r3
 801019e:	ed2d 8b06 	vpush	{d8-d10}
 80101a2:	dd19      	ble.n	80101d8 <__ieee754_asin+0x48>
 80101a4:	ee10 3a10 	vmov	r3, s0
 80101a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80101ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80101b0:	4323      	orrs	r3, r4
 80101b2:	d10c      	bne.n	80101ce <__ieee754_asin+0x3e>
 80101b4:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8010328 <__ieee754_asin+0x198>
 80101b8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8010330 <__ieee754_asin+0x1a0>
 80101bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80101c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80101c4:	eeb0 0b47 	vmov.f64	d0, d7
 80101c8:	ecbd 8b06 	vpop	{d8-d10}
 80101cc:	bd38      	pop	{r3, r4, r5, pc}
 80101ce:	ee30 7b40 	vsub.f64	d7, d0, d0
 80101d2:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80101d6:	e7f7      	b.n	80101c8 <__ieee754_asin+0x38>
 80101d8:	4b72      	ldr	r3, [pc, #456]	; (80103a4 <__ieee754_asin+0x214>)
 80101da:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80101de:	429c      	cmp	r4, r3
 80101e0:	dc0b      	bgt.n	80101fa <__ieee754_asin+0x6a>
 80101e2:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80101e6:	da52      	bge.n	801028e <__ieee754_asin+0xfe>
 80101e8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010338 <__ieee754_asin+0x1a8>
 80101ec:	ee30 7b07 	vadd.f64	d7, d0, d7
 80101f0:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80101f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f8:	dce6      	bgt.n	80101c8 <__ieee754_asin+0x38>
 80101fa:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80101fe:	f001 f8b1 	bl	8011364 <fabs>
 8010202:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010340 <__ieee754_asin+0x1b0>
 8010206:	ee39 0b40 	vsub.f64	d0, d9, d0
 801020a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801020e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010348 <__ieee754_asin+0x1b8>
 8010212:	eeb0 0b48 	vmov.f64	d0, d8
 8010216:	eea8 6b07 	vfma.f64	d6, d8, d7
 801021a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010350 <__ieee754_asin+0x1c0>
 801021e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010222:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010358 <__ieee754_asin+0x1c8>
 8010226:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8010360 <__ieee754_asin+0x1d0>
 801022a:	eea7 6b08 	vfma.f64	d6, d7, d8
 801022e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8010368 <__ieee754_asin+0x1d8>
 8010232:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010236:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010370 <__ieee754_asin+0x1e0>
 801023a:	eea7 ab08 	vfma.f64	d10, d7, d8
 801023e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8010242:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010378 <__ieee754_asin+0x1e8>
 8010246:	eea8 7b06 	vfma.f64	d7, d8, d6
 801024a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010380 <__ieee754_asin+0x1f0>
 801024e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010252:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010388 <__ieee754_asin+0x1f8>
 8010256:	eea6 7b08 	vfma.f64	d7, d6, d8
 801025a:	eea7 9b08 	vfma.f64	d9, d7, d8
 801025e:	f000 f969 	bl	8010534 <__ieee754_sqrt>
 8010262:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8010266:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801026a:	4b4f      	ldr	r3, [pc, #316]	; (80103a8 <__ieee754_asin+0x218>)
 801026c:	429c      	cmp	r4, r3
 801026e:	dd3d      	ble.n	80102ec <__ieee754_asin+0x15c>
 8010270:	eea0 0b05 	vfma.f64	d0, d0, d5
 8010274:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8010390 <__ieee754_asin+0x200>
 8010278:	eea0 7b04 	vfma.f64	d7, d0, d4
 801027c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8010330 <__ieee754_asin+0x1a0>
 8010280:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010284:	2d00      	cmp	r5, #0
 8010286:	bfd8      	it	le
 8010288:	eeb1 0b40 	vnegle.f64	d0, d0
 801028c:	e79c      	b.n	80101c8 <__ieee754_asin+0x38>
 801028e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010340 <__ieee754_asin+0x1b0>
 8010292:	ee20 7b00 	vmul.f64	d7, d0, d0
 8010296:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010348 <__ieee754_asin+0x1b8>
 801029a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801029e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010350 <__ieee754_asin+0x1c0>
 80102a2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80102a6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010358 <__ieee754_asin+0x1c8>
 80102aa:	eea5 6b07 	vfma.f64	d6, d5, d7
 80102ae:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8010368 <__ieee754_asin+0x1d8>
 80102b2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80102b6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8010360 <__ieee754_asin+0x1d0>
 80102ba:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8010370 <__ieee754_asin+0x1e0>
 80102be:	eea5 6b07 	vfma.f64	d6, d5, d7
 80102c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80102c6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010378 <__ieee754_asin+0x1e8>
 80102ca:	eea7 5b04 	vfma.f64	d5, d7, d4
 80102ce:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8010380 <__ieee754_asin+0x1f0>
 80102d2:	eea5 4b07 	vfma.f64	d4, d5, d7
 80102d6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010388 <__ieee754_asin+0x1f8>
 80102da:	eea4 5b07 	vfma.f64	d5, d4, d7
 80102de:	eea5 9b07 	vfma.f64	d9, d5, d7
 80102e2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80102e6:	eea0 0b07 	vfma.f64	d0, d0, d7
 80102ea:	e76d      	b.n	80101c8 <__ieee754_asin+0x38>
 80102ec:	ec53 2b10 	vmov	r2, r3, d0
 80102f0:	2200      	movs	r2, #0
 80102f2:	ec43 2b16 	vmov	d6, r2, r3
 80102f6:	ee30 7b06 	vadd.f64	d7, d0, d6
 80102fa:	eea6 8b46 	vfms.f64	d8, d6, d6
 80102fe:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8010302:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8010328 <__ieee754_asin+0x198>
 8010306:	ee30 0b00 	vadd.f64	d0, d0, d0
 801030a:	eea3 7b44 	vfms.f64	d7, d3, d4
 801030e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8010312:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8010398 <__ieee754_asin+0x208>
 8010316:	eeb0 0b45 	vmov.f64	d0, d5
 801031a:	eea6 0b44 	vfms.f64	d0, d6, d4
 801031e:	ee37 0b40 	vsub.f64	d0, d7, d0
 8010322:	ee35 0b40 	vsub.f64	d0, d5, d0
 8010326:	e7ad      	b.n	8010284 <__ieee754_asin+0xf4>
 8010328:	33145c07 	.word	0x33145c07
 801032c:	3c91a626 	.word	0x3c91a626
 8010330:	54442d18 	.word	0x54442d18
 8010334:	3ff921fb 	.word	0x3ff921fb
 8010338:	8800759c 	.word	0x8800759c
 801033c:	7e37e43c 	.word	0x7e37e43c
 8010340:	0dfdf709 	.word	0x0dfdf709
 8010344:	3f023de1 	.word	0x3f023de1
 8010348:	7501b288 	.word	0x7501b288
 801034c:	3f49efe0 	.word	0x3f49efe0
 8010350:	b5688f3b 	.word	0xb5688f3b
 8010354:	bfa48228 	.word	0xbfa48228
 8010358:	0e884455 	.word	0x0e884455
 801035c:	3fc9c155 	.word	0x3fc9c155
 8010360:	55555555 	.word	0x55555555
 8010364:	3fc55555 	.word	0x3fc55555
 8010368:	03eb6f7d 	.word	0x03eb6f7d
 801036c:	bfd4d612 	.word	0xbfd4d612
 8010370:	b12e9282 	.word	0xb12e9282
 8010374:	3fb3b8c5 	.word	0x3fb3b8c5
 8010378:	1b8d0159 	.word	0x1b8d0159
 801037c:	bfe6066c 	.word	0xbfe6066c
 8010380:	9c598ac8 	.word	0x9c598ac8
 8010384:	40002ae5 	.word	0x40002ae5
 8010388:	1c8a2d4b 	.word	0x1c8a2d4b
 801038c:	c0033a27 	.word	0xc0033a27
 8010390:	33145c07 	.word	0x33145c07
 8010394:	bc91a626 	.word	0xbc91a626
 8010398:	54442d18 	.word	0x54442d18
 801039c:	3fe921fb 	.word	0x3fe921fb
 80103a0:	3fefffff 	.word	0x3fefffff
 80103a4:	3fdfffff 	.word	0x3fdfffff
 80103a8:	3fef3332 	.word	0x3fef3332
 80103ac:	00000000 	.word	0x00000000

080103b0 <__ieee754_atan2>:
 80103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b2:	eeb0 7b40 	vmov.f64	d7, d0
 80103b6:	ee11 6a10 	vmov	r6, s2
 80103ba:	ee11 0a90 	vmov	r0, s3
 80103be:	4273      	negs	r3, r6
 80103c0:	4f59      	ldr	r7, [pc, #356]	; (8010528 <__ieee754_atan2+0x178>)
 80103c2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80103c6:	4333      	orrs	r3, r6
 80103c8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80103cc:	42bb      	cmp	r3, r7
 80103ce:	d80d      	bhi.n	80103ec <__ieee754_atan2+0x3c>
 80103d0:	ee10 ca10 	vmov	ip, s0
 80103d4:	ee17 5a90 	vmov	r5, s15
 80103d8:	f1cc 0100 	rsb	r1, ip, #0
 80103dc:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80103e0:	ea41 010c 	orr.w	r1, r1, ip
 80103e4:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80103e8:	42b9      	cmp	r1, r7
 80103ea:	d904      	bls.n	80103f6 <__ieee754_atan2+0x46>
 80103ec:	ee37 7b01 	vadd.f64	d7, d7, d1
 80103f0:	eeb0 0b47 	vmov.f64	d0, d7
 80103f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103f6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80103fa:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80103fe:	4331      	orrs	r1, r6
 8010400:	d103      	bne.n	801040a <__ieee754_atan2+0x5a>
 8010402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010406:	f000 beb3 	b.w	8011170 <atan>
 801040a:	1784      	asrs	r4, r0, #30
 801040c:	f004 0402 	and.w	r4, r4, #2
 8010410:	ea53 010c 	orrs.w	r1, r3, ip
 8010414:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8010418:	d107      	bne.n	801042a <__ieee754_atan2+0x7a>
 801041a:	2c02      	cmp	r4, #2
 801041c:	d05d      	beq.n	80104da <__ieee754_atan2+0x12a>
 801041e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80104f0 <__ieee754_atan2+0x140>
 8010422:	2c03      	cmp	r4, #3
 8010424:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8010428:	e7e2      	b.n	80103f0 <__ieee754_atan2+0x40>
 801042a:	ea52 0106 	orrs.w	r1, r2, r6
 801042e:	d107      	bne.n	8010440 <__ieee754_atan2+0x90>
 8010430:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80104f8 <__ieee754_atan2+0x148>
 8010434:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8010500 <__ieee754_atan2+0x150>
 8010438:	2d00      	cmp	r5, #0
 801043a:	fe27 7b00 	vselge.f64	d7, d7, d0
 801043e:	e7d7      	b.n	80103f0 <__ieee754_atan2+0x40>
 8010440:	42ba      	cmp	r2, r7
 8010442:	d10f      	bne.n	8010464 <__ieee754_atan2+0xb4>
 8010444:	4293      	cmp	r3, r2
 8010446:	f104 34ff 	add.w	r4, r4, #4294967295
 801044a:	d107      	bne.n	801045c <__ieee754_atan2+0xac>
 801044c:	2c02      	cmp	r4, #2
 801044e:	d847      	bhi.n	80104e0 <__ieee754_atan2+0x130>
 8010450:	4b36      	ldr	r3, [pc, #216]	; (801052c <__ieee754_atan2+0x17c>)
 8010452:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010456:	ed94 7b00 	vldr	d7, [r4]
 801045a:	e7c9      	b.n	80103f0 <__ieee754_atan2+0x40>
 801045c:	2c02      	cmp	r4, #2
 801045e:	d842      	bhi.n	80104e6 <__ieee754_atan2+0x136>
 8010460:	4b33      	ldr	r3, [pc, #204]	; (8010530 <__ieee754_atan2+0x180>)
 8010462:	e7f6      	b.n	8010452 <__ieee754_atan2+0xa2>
 8010464:	42bb      	cmp	r3, r7
 8010466:	d0e3      	beq.n	8010430 <__ieee754_atan2+0x80>
 8010468:	1a9b      	subs	r3, r3, r2
 801046a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801046e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010472:	da1a      	bge.n	80104aa <__ieee754_atan2+0xfa>
 8010474:	2800      	cmp	r0, #0
 8010476:	da01      	bge.n	801047c <__ieee754_atan2+0xcc>
 8010478:	323c      	adds	r2, #60	; 0x3c
 801047a:	db19      	blt.n	80104b0 <__ieee754_atan2+0x100>
 801047c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8010480:	f000 ff70 	bl	8011364 <fabs>
 8010484:	f000 fe74 	bl	8011170 <atan>
 8010488:	eeb0 7b40 	vmov.f64	d7, d0
 801048c:	2c01      	cmp	r4, #1
 801048e:	d012      	beq.n	80104b6 <__ieee754_atan2+0x106>
 8010490:	2c02      	cmp	r4, #2
 8010492:	d019      	beq.n	80104c8 <__ieee754_atan2+0x118>
 8010494:	2c00      	cmp	r4, #0
 8010496:	d0ab      	beq.n	80103f0 <__ieee754_atan2+0x40>
 8010498:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8010508 <__ieee754_atan2+0x158>
 801049c:	ee37 7b40 	vsub.f64	d7, d7, d0
 80104a0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8010510 <__ieee754_atan2+0x160>
 80104a4:	ee37 7b40 	vsub.f64	d7, d7, d0
 80104a8:	e7a2      	b.n	80103f0 <__ieee754_atan2+0x40>
 80104aa:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80104f8 <__ieee754_atan2+0x148>
 80104ae:	e7ed      	b.n	801048c <__ieee754_atan2+0xdc>
 80104b0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8010518 <__ieee754_atan2+0x168>
 80104b4:	e7ea      	b.n	801048c <__ieee754_atan2+0xdc>
 80104b6:	ee17 1a90 	vmov	r1, s15
 80104ba:	ec53 2b17 	vmov	r2, r3, d7
 80104be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104c2:	ec43 2b17 	vmov	d7, r2, r3
 80104c6:	e793      	b.n	80103f0 <__ieee754_atan2+0x40>
 80104c8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8010508 <__ieee754_atan2+0x158>
 80104cc:	ee37 7b40 	vsub.f64	d7, d7, d0
 80104d0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8010510 <__ieee754_atan2+0x160>
 80104d4:	ee30 7b47 	vsub.f64	d7, d0, d7
 80104d8:	e78a      	b.n	80103f0 <__ieee754_atan2+0x40>
 80104da:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010510 <__ieee754_atan2+0x160>
 80104de:	e787      	b.n	80103f0 <__ieee754_atan2+0x40>
 80104e0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010520 <__ieee754_atan2+0x170>
 80104e4:	e784      	b.n	80103f0 <__ieee754_atan2+0x40>
 80104e6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8010518 <__ieee754_atan2+0x168>
 80104ea:	e781      	b.n	80103f0 <__ieee754_atan2+0x40>
 80104ec:	f3af 8000 	nop.w
 80104f0:	54442d18 	.word	0x54442d18
 80104f4:	c00921fb 	.word	0xc00921fb
 80104f8:	54442d18 	.word	0x54442d18
 80104fc:	3ff921fb 	.word	0x3ff921fb
 8010500:	54442d18 	.word	0x54442d18
 8010504:	bff921fb 	.word	0xbff921fb
 8010508:	33145c07 	.word	0x33145c07
 801050c:	3ca1a626 	.word	0x3ca1a626
 8010510:	54442d18 	.word	0x54442d18
 8010514:	400921fb 	.word	0x400921fb
	...
 8010520:	54442d18 	.word	0x54442d18
 8010524:	3fe921fb 	.word	0x3fe921fb
 8010528:	7ff00000 	.word	0x7ff00000
 801052c:	08011c68 	.word	0x08011c68
 8010530:	08011c80 	.word	0x08011c80

08010534 <__ieee754_sqrt>:
 8010534:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010538:	4770      	bx	lr
	...

0801053c <__ieee754_asinf>:
 801053c:	b538      	push	{r3, r4, r5, lr}
 801053e:	ee10 5a10 	vmov	r5, s0
 8010542:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010546:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801054a:	ed2d 8b04 	vpush	{d8-d9}
 801054e:	d10c      	bne.n	801056a <__ieee754_asinf+0x2e>
 8010550:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80106c8 <__ieee754_asinf+0x18c>
 8010554:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80106cc <__ieee754_asinf+0x190>
 8010558:	ee60 7a27 	vmul.f32	s15, s0, s15
 801055c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010560:	eeb0 0a67 	vmov.f32	s0, s15
 8010564:	ecbd 8b04 	vpop	{d8-d9}
 8010568:	bd38      	pop	{r3, r4, r5, pc}
 801056a:	dd04      	ble.n	8010576 <__ieee754_asinf+0x3a>
 801056c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010570:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010574:	e7f6      	b.n	8010564 <__ieee754_asinf+0x28>
 8010576:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801057a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801057e:	da0b      	bge.n	8010598 <__ieee754_asinf+0x5c>
 8010580:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8010584:	da52      	bge.n	801062c <__ieee754_asinf+0xf0>
 8010586:	eddf 7a52 	vldr	s15, [pc, #328]	; 80106d0 <__ieee754_asinf+0x194>
 801058a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801058e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010596:	dce5      	bgt.n	8010564 <__ieee754_asinf+0x28>
 8010598:	f000 ffca 	bl	8011530 <fabsf>
 801059c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80105a0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80105a4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80105a8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80106d4 <__ieee754_asinf+0x198>
 80105ac:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80106d8 <__ieee754_asinf+0x19c>
 80105b0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80106dc <__ieee754_asinf+0x1a0>
 80105b4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80105b8:	eddf 7a49 	vldr	s15, [pc, #292]	; 80106e0 <__ieee754_asinf+0x1a4>
 80105bc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80105c0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80106e4 <__ieee754_asinf+0x1a8>
 80105c4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80105c8:	eddf 7a47 	vldr	s15, [pc, #284]	; 80106e8 <__ieee754_asinf+0x1ac>
 80105cc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80105d0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80106ec <__ieee754_asinf+0x1b0>
 80105d4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80105d8:	eddf 7a45 	vldr	s15, [pc, #276]	; 80106f0 <__ieee754_asinf+0x1b4>
 80105dc:	eee8 7a07 	vfma.f32	s15, s16, s14
 80105e0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80106f4 <__ieee754_asinf+0x1b8>
 80105e4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80105e8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80106f8 <__ieee754_asinf+0x1bc>
 80105ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 80105f0:	eeb0 0a48 	vmov.f32	s0, s16
 80105f4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80105f8:	f000 fa60 	bl	8010abc <__ieee754_sqrtf>
 80105fc:	4b3f      	ldr	r3, [pc, #252]	; (80106fc <__ieee754_asinf+0x1c0>)
 80105fe:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010602:	429c      	cmp	r4, r3
 8010604:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8010608:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801060c:	dd3d      	ble.n	801068a <__ieee754_asinf+0x14e>
 801060e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010612:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8010700 <__ieee754_asinf+0x1c4>
 8010616:	eee0 7a26 	vfma.f32	s15, s0, s13
 801061a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80106cc <__ieee754_asinf+0x190>
 801061e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010622:	2d00      	cmp	r5, #0
 8010624:	bfd8      	it	le
 8010626:	eeb1 0a40 	vnegle.f32	s0, s0
 801062a:	e79b      	b.n	8010564 <__ieee754_asinf+0x28>
 801062c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010630:	eddf 6a28 	vldr	s13, [pc, #160]	; 80106d4 <__ieee754_asinf+0x198>
 8010634:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80106d8 <__ieee754_asinf+0x19c>
 8010638:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80106ec <__ieee754_asinf+0x1b0>
 801063c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010640:	eddf 6a27 	vldr	s13, [pc, #156]	; 80106e0 <__ieee754_asinf+0x1a4>
 8010644:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010648:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80106e4 <__ieee754_asinf+0x1a8>
 801064c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010650:	eddf 6a25 	vldr	s13, [pc, #148]	; 80106e8 <__ieee754_asinf+0x1ac>
 8010654:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010658:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80106dc <__ieee754_asinf+0x1a0>
 801065c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010660:	eddf 6a23 	vldr	s13, [pc, #140]	; 80106f0 <__ieee754_asinf+0x1b4>
 8010664:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010668:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80106f4 <__ieee754_asinf+0x1b8>
 801066c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010670:	eddf 6a21 	vldr	s13, [pc, #132]	; 80106f8 <__ieee754_asinf+0x1bc>
 8010674:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010678:	ee27 7a27 	vmul.f32	s14, s14, s15
 801067c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010680:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010684:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010688:	e76c      	b.n	8010564 <__ieee754_asinf+0x28>
 801068a:	ee10 3a10 	vmov	r3, s0
 801068e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010692:	f023 030f 	bic.w	r3, r3, #15
 8010696:	ee07 3a10 	vmov	s14, r3
 801069a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801069e:	ee70 7a07 	vadd.f32	s15, s0, s14
 80106a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80106a6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80106aa:	eddf 7a07 	vldr	s15, [pc, #28]	; 80106c8 <__ieee754_asinf+0x18c>
 80106ae:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80106b2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80106b6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8010704 <__ieee754_asinf+0x1c8>
 80106ba:	eeb0 6a40 	vmov.f32	s12, s0
 80106be:	eea7 6a66 	vfms.f32	s12, s14, s13
 80106c2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80106c6:	e7aa      	b.n	801061e <__ieee754_asinf+0xe2>
 80106c8:	b33bbd2e 	.word	0xb33bbd2e
 80106cc:	3fc90fdb 	.word	0x3fc90fdb
 80106d0:	7149f2ca 	.word	0x7149f2ca
 80106d4:	3811ef08 	.word	0x3811ef08
 80106d8:	3a4f7f04 	.word	0x3a4f7f04
 80106dc:	3e2aaaab 	.word	0x3e2aaaab
 80106e0:	bd241146 	.word	0xbd241146
 80106e4:	3e4e0aa8 	.word	0x3e4e0aa8
 80106e8:	bea6b090 	.word	0xbea6b090
 80106ec:	3d9dc62e 	.word	0x3d9dc62e
 80106f0:	bf303361 	.word	0xbf303361
 80106f4:	4001572d 	.word	0x4001572d
 80106f8:	c019d139 	.word	0xc019d139
 80106fc:	3f799999 	.word	0x3f799999
 8010700:	333bbd2e 	.word	0x333bbd2e
 8010704:	3f490fdb 	.word	0x3f490fdb

08010708 <__ieee754_atan2f>:
 8010708:	ee10 2a90 	vmov	r2, s1
 801070c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010710:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010714:	b510      	push	{r4, lr}
 8010716:	eef0 7a40 	vmov.f32	s15, s0
 801071a:	dc06      	bgt.n	801072a <__ieee754_atan2f+0x22>
 801071c:	ee10 0a10 	vmov	r0, s0
 8010720:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010724:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010728:	dd04      	ble.n	8010734 <__ieee754_atan2f+0x2c>
 801072a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801072e:	eeb0 0a67 	vmov.f32	s0, s15
 8010732:	bd10      	pop	{r4, pc}
 8010734:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010738:	d103      	bne.n	8010742 <__ieee754_atan2f+0x3a>
 801073a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801073e:	f000 be23 	b.w	8011388 <atanf>
 8010742:	1794      	asrs	r4, r2, #30
 8010744:	f004 0402 	and.w	r4, r4, #2
 8010748:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801074c:	b93b      	cbnz	r3, 801075e <__ieee754_atan2f+0x56>
 801074e:	2c02      	cmp	r4, #2
 8010750:	d05c      	beq.n	801080c <__ieee754_atan2f+0x104>
 8010752:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010820 <__ieee754_atan2f+0x118>
 8010756:	2c03      	cmp	r4, #3
 8010758:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801075c:	e7e7      	b.n	801072e <__ieee754_atan2f+0x26>
 801075e:	b939      	cbnz	r1, 8010770 <__ieee754_atan2f+0x68>
 8010760:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010824 <__ieee754_atan2f+0x11c>
 8010764:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8010828 <__ieee754_atan2f+0x120>
 8010768:	2800      	cmp	r0, #0
 801076a:	fe67 7a80 	vselge.f32	s15, s15, s0
 801076e:	e7de      	b.n	801072e <__ieee754_atan2f+0x26>
 8010770:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010774:	d110      	bne.n	8010798 <__ieee754_atan2f+0x90>
 8010776:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801077a:	f104 34ff 	add.w	r4, r4, #4294967295
 801077e:	d107      	bne.n	8010790 <__ieee754_atan2f+0x88>
 8010780:	2c02      	cmp	r4, #2
 8010782:	d846      	bhi.n	8010812 <__ieee754_atan2f+0x10a>
 8010784:	4b29      	ldr	r3, [pc, #164]	; (801082c <__ieee754_atan2f+0x124>)
 8010786:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801078a:	edd4 7a00 	vldr	s15, [r4]
 801078e:	e7ce      	b.n	801072e <__ieee754_atan2f+0x26>
 8010790:	2c02      	cmp	r4, #2
 8010792:	d841      	bhi.n	8010818 <__ieee754_atan2f+0x110>
 8010794:	4b26      	ldr	r3, [pc, #152]	; (8010830 <__ieee754_atan2f+0x128>)
 8010796:	e7f6      	b.n	8010786 <__ieee754_atan2f+0x7e>
 8010798:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801079c:	d0e0      	beq.n	8010760 <__ieee754_atan2f+0x58>
 801079e:	1a5b      	subs	r3, r3, r1
 80107a0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80107a4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80107a8:	da1a      	bge.n	80107e0 <__ieee754_atan2f+0xd8>
 80107aa:	2a00      	cmp	r2, #0
 80107ac:	da01      	bge.n	80107b2 <__ieee754_atan2f+0xaa>
 80107ae:	313c      	adds	r1, #60	; 0x3c
 80107b0:	db19      	blt.n	80107e6 <__ieee754_atan2f+0xde>
 80107b2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80107b6:	f000 febb 	bl	8011530 <fabsf>
 80107ba:	f000 fde5 	bl	8011388 <atanf>
 80107be:	eef0 7a40 	vmov.f32	s15, s0
 80107c2:	2c01      	cmp	r4, #1
 80107c4:	d012      	beq.n	80107ec <__ieee754_atan2f+0xe4>
 80107c6:	2c02      	cmp	r4, #2
 80107c8:	d017      	beq.n	80107fa <__ieee754_atan2f+0xf2>
 80107ca:	2c00      	cmp	r4, #0
 80107cc:	d0af      	beq.n	801072e <__ieee754_atan2f+0x26>
 80107ce:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010834 <__ieee754_atan2f+0x12c>
 80107d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80107d6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010838 <__ieee754_atan2f+0x130>
 80107da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80107de:	e7a6      	b.n	801072e <__ieee754_atan2f+0x26>
 80107e0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010824 <__ieee754_atan2f+0x11c>
 80107e4:	e7ed      	b.n	80107c2 <__ieee754_atan2f+0xba>
 80107e6:	eddf 7a15 	vldr	s15, [pc, #84]	; 801083c <__ieee754_atan2f+0x134>
 80107ea:	e7ea      	b.n	80107c2 <__ieee754_atan2f+0xba>
 80107ec:	ee17 3a90 	vmov	r3, s15
 80107f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80107f4:	ee07 3a90 	vmov	s15, r3
 80107f8:	e799      	b.n	801072e <__ieee754_atan2f+0x26>
 80107fa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010834 <__ieee754_atan2f+0x12c>
 80107fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010802:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010838 <__ieee754_atan2f+0x130>
 8010806:	ee70 7a67 	vsub.f32	s15, s0, s15
 801080a:	e790      	b.n	801072e <__ieee754_atan2f+0x26>
 801080c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010838 <__ieee754_atan2f+0x130>
 8010810:	e78d      	b.n	801072e <__ieee754_atan2f+0x26>
 8010812:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010840 <__ieee754_atan2f+0x138>
 8010816:	e78a      	b.n	801072e <__ieee754_atan2f+0x26>
 8010818:	eddf 7a08 	vldr	s15, [pc, #32]	; 801083c <__ieee754_atan2f+0x134>
 801081c:	e787      	b.n	801072e <__ieee754_atan2f+0x26>
 801081e:	bf00      	nop
 8010820:	c0490fdb 	.word	0xc0490fdb
 8010824:	3fc90fdb 	.word	0x3fc90fdb
 8010828:	bfc90fdb 	.word	0xbfc90fdb
 801082c:	08011c98 	.word	0x08011c98
 8010830:	08011ca4 	.word	0x08011ca4
 8010834:	33bbbd2e 	.word	0x33bbbd2e
 8010838:	40490fdb 	.word	0x40490fdb
 801083c:	00000000 	.word	0x00000000
 8010840:	3f490fdb 	.word	0x3f490fdb

08010844 <__ieee754_rem_pio2f>:
 8010844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010846:	ee10 6a10 	vmov	r6, s0
 801084a:	4b8e      	ldr	r3, [pc, #568]	; (8010a84 <__ieee754_rem_pio2f+0x240>)
 801084c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010850:	429d      	cmp	r5, r3
 8010852:	b087      	sub	sp, #28
 8010854:	eef0 7a40 	vmov.f32	s15, s0
 8010858:	4604      	mov	r4, r0
 801085a:	dc05      	bgt.n	8010868 <__ieee754_rem_pio2f+0x24>
 801085c:	2300      	movs	r3, #0
 801085e:	ed80 0a00 	vstr	s0, [r0]
 8010862:	6043      	str	r3, [r0, #4]
 8010864:	2000      	movs	r0, #0
 8010866:	e01a      	b.n	801089e <__ieee754_rem_pio2f+0x5a>
 8010868:	4b87      	ldr	r3, [pc, #540]	; (8010a88 <__ieee754_rem_pio2f+0x244>)
 801086a:	429d      	cmp	r5, r3
 801086c:	dc46      	bgt.n	80108fc <__ieee754_rem_pio2f+0xb8>
 801086e:	2e00      	cmp	r6, #0
 8010870:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8010a8c <__ieee754_rem_pio2f+0x248>
 8010874:	4b86      	ldr	r3, [pc, #536]	; (8010a90 <__ieee754_rem_pio2f+0x24c>)
 8010876:	f025 050f 	bic.w	r5, r5, #15
 801087a:	dd1f      	ble.n	80108bc <__ieee754_rem_pio2f+0x78>
 801087c:	429d      	cmp	r5, r3
 801087e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010882:	d00e      	beq.n	80108a2 <__ieee754_rem_pio2f+0x5e>
 8010884:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8010a94 <__ieee754_rem_pio2f+0x250>
 8010888:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801088c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010890:	ed80 0a00 	vstr	s0, [r0]
 8010894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010898:	2001      	movs	r0, #1
 801089a:	edc4 7a01 	vstr	s15, [r4, #4]
 801089e:	b007      	add	sp, #28
 80108a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108a2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8010a98 <__ieee754_rem_pio2f+0x254>
 80108a6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8010a9c <__ieee754_rem_pio2f+0x258>
 80108aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80108ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80108b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80108b6:	edc0 6a00 	vstr	s13, [r0]
 80108ba:	e7eb      	b.n	8010894 <__ieee754_rem_pio2f+0x50>
 80108bc:	429d      	cmp	r5, r3
 80108be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80108c2:	d00e      	beq.n	80108e2 <__ieee754_rem_pio2f+0x9e>
 80108c4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8010a94 <__ieee754_rem_pio2f+0x250>
 80108c8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80108cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80108d0:	ed80 0a00 	vstr	s0, [r0]
 80108d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108d8:	f04f 30ff 	mov.w	r0, #4294967295
 80108dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80108e0:	e7dd      	b.n	801089e <__ieee754_rem_pio2f+0x5a>
 80108e2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8010a98 <__ieee754_rem_pio2f+0x254>
 80108e6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8010a9c <__ieee754_rem_pio2f+0x258>
 80108ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80108ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 80108f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80108f6:	edc0 6a00 	vstr	s13, [r0]
 80108fa:	e7eb      	b.n	80108d4 <__ieee754_rem_pio2f+0x90>
 80108fc:	4b68      	ldr	r3, [pc, #416]	; (8010aa0 <__ieee754_rem_pio2f+0x25c>)
 80108fe:	429d      	cmp	r5, r3
 8010900:	dc72      	bgt.n	80109e8 <__ieee754_rem_pio2f+0x1a4>
 8010902:	f000 fe15 	bl	8011530 <fabsf>
 8010906:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8010aa4 <__ieee754_rem_pio2f+0x260>
 801090a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801090e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801091a:	ee17 0a90 	vmov	r0, s15
 801091e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010a8c <__ieee754_rem_pio2f+0x248>
 8010922:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010926:	281f      	cmp	r0, #31
 8010928:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8010a94 <__ieee754_rem_pio2f+0x250>
 801092c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010930:	eeb1 6a47 	vneg.f32	s12, s14
 8010934:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010938:	ee16 2a90 	vmov	r2, s13
 801093c:	dc1c      	bgt.n	8010978 <__ieee754_rem_pio2f+0x134>
 801093e:	495a      	ldr	r1, [pc, #360]	; (8010aa8 <__ieee754_rem_pio2f+0x264>)
 8010940:	1e47      	subs	r7, r0, #1
 8010942:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8010946:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801094a:	428b      	cmp	r3, r1
 801094c:	d014      	beq.n	8010978 <__ieee754_rem_pio2f+0x134>
 801094e:	6022      	str	r2, [r4, #0]
 8010950:	ed94 7a00 	vldr	s14, [r4]
 8010954:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010958:	2e00      	cmp	r6, #0
 801095a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801095e:	ed84 0a01 	vstr	s0, [r4, #4]
 8010962:	da9c      	bge.n	801089e <__ieee754_rem_pio2f+0x5a>
 8010964:	eeb1 7a47 	vneg.f32	s14, s14
 8010968:	eeb1 0a40 	vneg.f32	s0, s0
 801096c:	ed84 7a00 	vstr	s14, [r4]
 8010970:	ed84 0a01 	vstr	s0, [r4, #4]
 8010974:	4240      	negs	r0, r0
 8010976:	e792      	b.n	801089e <__ieee754_rem_pio2f+0x5a>
 8010978:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801097c:	15eb      	asrs	r3, r5, #23
 801097e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8010982:	2d08      	cmp	r5, #8
 8010984:	dde3      	ble.n	801094e <__ieee754_rem_pio2f+0x10a>
 8010986:	eddf 7a44 	vldr	s15, [pc, #272]	; 8010a98 <__ieee754_rem_pio2f+0x254>
 801098a:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010a9c <__ieee754_rem_pio2f+0x258>
 801098e:	eef0 6a40 	vmov.f32	s13, s0
 8010992:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010996:	ee30 0a66 	vsub.f32	s0, s0, s13
 801099a:	eea6 0a27 	vfma.f32	s0, s12, s15
 801099e:	eef0 7a40 	vmov.f32	s15, s0
 80109a2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80109a6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80109aa:	ee15 2a90 	vmov	r2, s11
 80109ae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80109b2:	1a5b      	subs	r3, r3, r1
 80109b4:	2b19      	cmp	r3, #25
 80109b6:	dc04      	bgt.n	80109c2 <__ieee754_rem_pio2f+0x17e>
 80109b8:	edc4 5a00 	vstr	s11, [r4]
 80109bc:	eeb0 0a66 	vmov.f32	s0, s13
 80109c0:	e7c6      	b.n	8010950 <__ieee754_rem_pio2f+0x10c>
 80109c2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8010aac <__ieee754_rem_pio2f+0x268>
 80109c6:	eeb0 0a66 	vmov.f32	s0, s13
 80109ca:	eea6 0a25 	vfma.f32	s0, s12, s11
 80109ce:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80109d2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8010ab0 <__ieee754_rem_pio2f+0x26c>
 80109d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80109da:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80109de:	ee30 7a67 	vsub.f32	s14, s0, s15
 80109e2:	ed84 7a00 	vstr	s14, [r4]
 80109e6:	e7b3      	b.n	8010950 <__ieee754_rem_pio2f+0x10c>
 80109e8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80109ec:	db06      	blt.n	80109fc <__ieee754_rem_pio2f+0x1b8>
 80109ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 80109f2:	edc0 7a01 	vstr	s15, [r0, #4]
 80109f6:	edc0 7a00 	vstr	s15, [r0]
 80109fa:	e733      	b.n	8010864 <__ieee754_rem_pio2f+0x20>
 80109fc:	15ea      	asrs	r2, r5, #23
 80109fe:	3a86      	subs	r2, #134	; 0x86
 8010a00:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010a04:	ee07 3a90 	vmov	s15, r3
 8010a08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010a0c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8010ab4 <__ieee754_rem_pio2f+0x270>
 8010a10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a18:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010a1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010a24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010a28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a2c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010a30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3c:	edcd 7a05 	vstr	s15, [sp, #20]
 8010a40:	d11e      	bne.n	8010a80 <__ieee754_rem_pio2f+0x23c>
 8010a42:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4a:	bf14      	ite	ne
 8010a4c:	2302      	movne	r3, #2
 8010a4e:	2301      	moveq	r3, #1
 8010a50:	4919      	ldr	r1, [pc, #100]	; (8010ab8 <__ieee754_rem_pio2f+0x274>)
 8010a52:	9101      	str	r1, [sp, #4]
 8010a54:	2102      	movs	r1, #2
 8010a56:	9100      	str	r1, [sp, #0]
 8010a58:	a803      	add	r0, sp, #12
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	f000 f832 	bl	8010ac4 <__kernel_rem_pio2f>
 8010a60:	2e00      	cmp	r6, #0
 8010a62:	f6bf af1c 	bge.w	801089e <__ieee754_rem_pio2f+0x5a>
 8010a66:	edd4 7a00 	vldr	s15, [r4]
 8010a6a:	eef1 7a67 	vneg.f32	s15, s15
 8010a6e:	edc4 7a00 	vstr	s15, [r4]
 8010a72:	edd4 7a01 	vldr	s15, [r4, #4]
 8010a76:	eef1 7a67 	vneg.f32	s15, s15
 8010a7a:	edc4 7a01 	vstr	s15, [r4, #4]
 8010a7e:	e779      	b.n	8010974 <__ieee754_rem_pio2f+0x130>
 8010a80:	2303      	movs	r3, #3
 8010a82:	e7e5      	b.n	8010a50 <__ieee754_rem_pio2f+0x20c>
 8010a84:	3f490fd8 	.word	0x3f490fd8
 8010a88:	4016cbe3 	.word	0x4016cbe3
 8010a8c:	3fc90f80 	.word	0x3fc90f80
 8010a90:	3fc90fd0 	.word	0x3fc90fd0
 8010a94:	37354443 	.word	0x37354443
 8010a98:	37354400 	.word	0x37354400
 8010a9c:	2e85a308 	.word	0x2e85a308
 8010aa0:	43490f80 	.word	0x43490f80
 8010aa4:	3f22f984 	.word	0x3f22f984
 8010aa8:	08011cb0 	.word	0x08011cb0
 8010aac:	2e85a300 	.word	0x2e85a300
 8010ab0:	248d3132 	.word	0x248d3132
 8010ab4:	43800000 	.word	0x43800000
 8010ab8:	08011d30 	.word	0x08011d30

08010abc <__ieee754_sqrtf>:
 8010abc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010ac0:	4770      	bx	lr
	...

08010ac4 <__kernel_rem_pio2f>:
 8010ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac8:	ed2d 8b04 	vpush	{d8-d9}
 8010acc:	b0d9      	sub	sp, #356	; 0x164
 8010ace:	4688      	mov	r8, r1
 8010ad0:	9002      	str	r0, [sp, #8]
 8010ad2:	49bb      	ldr	r1, [pc, #748]	; (8010dc0 <__kernel_rem_pio2f+0x2fc>)
 8010ad4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8010adc:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8010ae0:	1e59      	subs	r1, r3, #1
 8010ae2:	1d13      	adds	r3, r2, #4
 8010ae4:	db27      	blt.n	8010b36 <__kernel_rem_pio2f+0x72>
 8010ae6:	f1b2 0b03 	subs.w	fp, r2, #3
 8010aea:	bf48      	it	mi
 8010aec:	f102 0b04 	addmi.w	fp, r2, #4
 8010af0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8010af4:	1c45      	adds	r5, r0, #1
 8010af6:	00ec      	lsls	r4, r5, #3
 8010af8:	1a47      	subs	r7, r0, r1
 8010afa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8010dd0 <__kernel_rem_pio2f+0x30c>
 8010afe:	9403      	str	r4, [sp, #12]
 8010b00:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8010b04:	eb0a 0c01 	add.w	ip, sl, r1
 8010b08:	ae1c      	add	r6, sp, #112	; 0x70
 8010b0a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8010b0e:	2400      	movs	r4, #0
 8010b10:	4564      	cmp	r4, ip
 8010b12:	dd12      	ble.n	8010b3a <__kernel_rem_pio2f+0x76>
 8010b14:	9b01      	ldr	r3, [sp, #4]
 8010b16:	ac1c      	add	r4, sp, #112	; 0x70
 8010b18:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8010b1c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8010b20:	f04f 0c00 	mov.w	ip, #0
 8010b24:	45d4      	cmp	ip, sl
 8010b26:	dc27      	bgt.n	8010b78 <__kernel_rem_pio2f+0xb4>
 8010b28:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8010b2c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8010dd0 <__kernel_rem_pio2f+0x30c>
 8010b30:	4627      	mov	r7, r4
 8010b32:	2600      	movs	r6, #0
 8010b34:	e016      	b.n	8010b64 <__kernel_rem_pio2f+0xa0>
 8010b36:	2000      	movs	r0, #0
 8010b38:	e7dc      	b.n	8010af4 <__kernel_rem_pio2f+0x30>
 8010b3a:	42e7      	cmn	r7, r4
 8010b3c:	bf5d      	ittte	pl
 8010b3e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8010b42:	ee07 3a90 	vmovpl	s15, r3
 8010b46:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010b4a:	eef0 7a47 	vmovmi.f32	s15, s14
 8010b4e:	ece6 7a01 	vstmia	r6!, {s15}
 8010b52:	3401      	adds	r4, #1
 8010b54:	e7dc      	b.n	8010b10 <__kernel_rem_pio2f+0x4c>
 8010b56:	ecf9 6a01 	vldmia	r9!, {s13}
 8010b5a:	ed97 7a00 	vldr	s14, [r7]
 8010b5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010b62:	3601      	adds	r6, #1
 8010b64:	428e      	cmp	r6, r1
 8010b66:	f1a7 0704 	sub.w	r7, r7, #4
 8010b6a:	ddf4      	ble.n	8010b56 <__kernel_rem_pio2f+0x92>
 8010b6c:	eceb 7a01 	vstmia	fp!, {s15}
 8010b70:	f10c 0c01 	add.w	ip, ip, #1
 8010b74:	3404      	adds	r4, #4
 8010b76:	e7d5      	b.n	8010b24 <__kernel_rem_pio2f+0x60>
 8010b78:	ab08      	add	r3, sp, #32
 8010b7a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8010b7e:	eddf 8a93 	vldr	s17, [pc, #588]	; 8010dcc <__kernel_rem_pio2f+0x308>
 8010b82:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8010dc8 <__kernel_rem_pio2f+0x304>
 8010b86:	9304      	str	r3, [sp, #16]
 8010b88:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8010b8c:	4656      	mov	r6, sl
 8010b8e:	00b3      	lsls	r3, r6, #2
 8010b90:	9305      	str	r3, [sp, #20]
 8010b92:	ab58      	add	r3, sp, #352	; 0x160
 8010b94:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8010b98:	ac08      	add	r4, sp, #32
 8010b9a:	ab44      	add	r3, sp, #272	; 0x110
 8010b9c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8010ba0:	46a4      	mov	ip, r4
 8010ba2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8010ba6:	4637      	mov	r7, r6
 8010ba8:	2f00      	cmp	r7, #0
 8010baa:	f1a0 0004 	sub.w	r0, r0, #4
 8010bae:	dc4f      	bgt.n	8010c50 <__kernel_rem_pio2f+0x18c>
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8010bb6:	f000 fd0b 	bl	80115d0 <scalbnf>
 8010bba:	eeb0 8a40 	vmov.f32	s16, s0
 8010bbe:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8010bc2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010bc6:	f000 fcbb 	bl	8011540 <floorf>
 8010bca:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8010bce:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010bd2:	2d00      	cmp	r5, #0
 8010bd4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8010bd8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010bdc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8010be0:	ee17 9a90 	vmov	r9, s15
 8010be4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010be8:	dd44      	ble.n	8010c74 <__kernel_rem_pio2f+0x1b0>
 8010bea:	f106 3cff 	add.w	ip, r6, #4294967295
 8010bee:	ab08      	add	r3, sp, #32
 8010bf0:	f1c5 0e08 	rsb	lr, r5, #8
 8010bf4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8010bf8:	fa47 f00e 	asr.w	r0, r7, lr
 8010bfc:	4481      	add	r9, r0
 8010bfe:	fa00 f00e 	lsl.w	r0, r0, lr
 8010c02:	1a3f      	subs	r7, r7, r0
 8010c04:	f1c5 0007 	rsb	r0, r5, #7
 8010c08:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8010c0c:	4107      	asrs	r7, r0
 8010c0e:	2f00      	cmp	r7, #0
 8010c10:	dd3f      	ble.n	8010c92 <__kernel_rem_pio2f+0x1ce>
 8010c12:	f04f 0e00 	mov.w	lr, #0
 8010c16:	f109 0901 	add.w	r9, r9, #1
 8010c1a:	4673      	mov	r3, lr
 8010c1c:	4576      	cmp	r6, lr
 8010c1e:	dc6b      	bgt.n	8010cf8 <__kernel_rem_pio2f+0x234>
 8010c20:	2d00      	cmp	r5, #0
 8010c22:	dd04      	ble.n	8010c2e <__kernel_rem_pio2f+0x16a>
 8010c24:	2d01      	cmp	r5, #1
 8010c26:	d078      	beq.n	8010d1a <__kernel_rem_pio2f+0x256>
 8010c28:	2d02      	cmp	r5, #2
 8010c2a:	f000 8081 	beq.w	8010d30 <__kernel_rem_pio2f+0x26c>
 8010c2e:	2f02      	cmp	r7, #2
 8010c30:	d12f      	bne.n	8010c92 <__kernel_rem_pio2f+0x1ce>
 8010c32:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010c36:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010c3a:	b353      	cbz	r3, 8010c92 <__kernel_rem_pio2f+0x1ce>
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8010c42:	f000 fcc5 	bl	80115d0 <scalbnf>
 8010c46:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8010c4a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010c4e:	e020      	b.n	8010c92 <__kernel_rem_pio2f+0x1ce>
 8010c50:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010c54:	3f01      	subs	r7, #1
 8010c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c5e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010c62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010c66:	ecac 0a01 	vstmia	ip!, {s0}
 8010c6a:	ed90 0a00 	vldr	s0, [r0]
 8010c6e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010c72:	e799      	b.n	8010ba8 <__kernel_rem_pio2f+0xe4>
 8010c74:	d105      	bne.n	8010c82 <__kernel_rem_pio2f+0x1be>
 8010c76:	1e70      	subs	r0, r6, #1
 8010c78:	ab08      	add	r3, sp, #32
 8010c7a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8010c7e:	11ff      	asrs	r7, r7, #7
 8010c80:	e7c5      	b.n	8010c0e <__kernel_rem_pio2f+0x14a>
 8010c82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c86:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c8e:	da31      	bge.n	8010cf4 <__kernel_rem_pio2f+0x230>
 8010c90:	2700      	movs	r7, #0
 8010c92:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9a:	f040 809b 	bne.w	8010dd4 <__kernel_rem_pio2f+0x310>
 8010c9e:	1e74      	subs	r4, r6, #1
 8010ca0:	46a4      	mov	ip, r4
 8010ca2:	2000      	movs	r0, #0
 8010ca4:	45d4      	cmp	ip, sl
 8010ca6:	da4a      	bge.n	8010d3e <__kernel_rem_pio2f+0x27a>
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d07a      	beq.n	8010da2 <__kernel_rem_pio2f+0x2de>
 8010cac:	ab08      	add	r3, sp, #32
 8010cae:	3d08      	subs	r5, #8
 8010cb0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f000 8081 	beq.w	8010dbc <__kernel_rem_pio2f+0x2f8>
 8010cba:	4628      	mov	r0, r5
 8010cbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010cc0:	00a5      	lsls	r5, r4, #2
 8010cc2:	f000 fc85 	bl	80115d0 <scalbnf>
 8010cc6:	aa44      	add	r2, sp, #272	; 0x110
 8010cc8:	1d2b      	adds	r3, r5, #4
 8010cca:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8010dcc <__kernel_rem_pio2f+0x308>
 8010cce:	18d1      	adds	r1, r2, r3
 8010cd0:	4622      	mov	r2, r4
 8010cd2:	2a00      	cmp	r2, #0
 8010cd4:	f280 80ae 	bge.w	8010e34 <__kernel_rem_pio2f+0x370>
 8010cd8:	4622      	mov	r2, r4
 8010cda:	2a00      	cmp	r2, #0
 8010cdc:	f2c0 80cc 	blt.w	8010e78 <__kernel_rem_pio2f+0x3b4>
 8010ce0:	a944      	add	r1, sp, #272	; 0x110
 8010ce2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8010ce6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8010dc4 <__kernel_rem_pio2f+0x300>
 8010cea:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010dd0 <__kernel_rem_pio2f+0x30c>
 8010cee:	2000      	movs	r0, #0
 8010cf0:	1aa1      	subs	r1, r4, r2
 8010cf2:	e0b6      	b.n	8010e62 <__kernel_rem_pio2f+0x39e>
 8010cf4:	2702      	movs	r7, #2
 8010cf6:	e78c      	b.n	8010c12 <__kernel_rem_pio2f+0x14e>
 8010cf8:	6820      	ldr	r0, [r4, #0]
 8010cfa:	b94b      	cbnz	r3, 8010d10 <__kernel_rem_pio2f+0x24c>
 8010cfc:	b118      	cbz	r0, 8010d06 <__kernel_rem_pio2f+0x242>
 8010cfe:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8010d02:	6020      	str	r0, [r4, #0]
 8010d04:	2001      	movs	r0, #1
 8010d06:	f10e 0e01 	add.w	lr, lr, #1
 8010d0a:	3404      	adds	r4, #4
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	e785      	b.n	8010c1c <__kernel_rem_pio2f+0x158>
 8010d10:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8010d14:	6020      	str	r0, [r4, #0]
 8010d16:	4618      	mov	r0, r3
 8010d18:	e7f5      	b.n	8010d06 <__kernel_rem_pio2f+0x242>
 8010d1a:	1e74      	subs	r4, r6, #1
 8010d1c:	a808      	add	r0, sp, #32
 8010d1e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010d22:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8010d26:	f10d 0c20 	add.w	ip, sp, #32
 8010d2a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8010d2e:	e77e      	b.n	8010c2e <__kernel_rem_pio2f+0x16a>
 8010d30:	1e74      	subs	r4, r6, #1
 8010d32:	a808      	add	r0, sp, #32
 8010d34:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010d38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010d3c:	e7f3      	b.n	8010d26 <__kernel_rem_pio2f+0x262>
 8010d3e:	ab08      	add	r3, sp, #32
 8010d40:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8010d44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010d48:	4318      	orrs	r0, r3
 8010d4a:	e7ab      	b.n	8010ca4 <__kernel_rem_pio2f+0x1e0>
 8010d4c:	f10c 0c01 	add.w	ip, ip, #1
 8010d50:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8010d54:	2c00      	cmp	r4, #0
 8010d56:	d0f9      	beq.n	8010d4c <__kernel_rem_pio2f+0x288>
 8010d58:	9b05      	ldr	r3, [sp, #20]
 8010d5a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010d5e:	eb0d 0003 	add.w	r0, sp, r3
 8010d62:	9b01      	ldr	r3, [sp, #4]
 8010d64:	18f4      	adds	r4, r6, r3
 8010d66:	ab1c      	add	r3, sp, #112	; 0x70
 8010d68:	1c77      	adds	r7, r6, #1
 8010d6a:	384c      	subs	r0, #76	; 0x4c
 8010d6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d70:	4466      	add	r6, ip
 8010d72:	42be      	cmp	r6, r7
 8010d74:	f6ff af0b 	blt.w	8010b8e <__kernel_rem_pio2f+0xca>
 8010d78:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8010d7c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010d80:	ee07 3a90 	vmov	s15, r3
 8010d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d88:	f04f 0c00 	mov.w	ip, #0
 8010d8c:	ece4 7a01 	vstmia	r4!, {s15}
 8010d90:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8010dd0 <__kernel_rem_pio2f+0x30c>
 8010d94:	46a1      	mov	r9, r4
 8010d96:	458c      	cmp	ip, r1
 8010d98:	dd07      	ble.n	8010daa <__kernel_rem_pio2f+0x2e6>
 8010d9a:	ece0 7a01 	vstmia	r0!, {s15}
 8010d9e:	3701      	adds	r7, #1
 8010da0:	e7e7      	b.n	8010d72 <__kernel_rem_pio2f+0x2ae>
 8010da2:	9804      	ldr	r0, [sp, #16]
 8010da4:	f04f 0c01 	mov.w	ip, #1
 8010da8:	e7d2      	b.n	8010d50 <__kernel_rem_pio2f+0x28c>
 8010daa:	ecfe 6a01 	vldmia	lr!, {s13}
 8010dae:	ed39 7a01 	vldmdb	r9!, {s14}
 8010db2:	f10c 0c01 	add.w	ip, ip, #1
 8010db6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010dba:	e7ec      	b.n	8010d96 <__kernel_rem_pio2f+0x2d2>
 8010dbc:	3c01      	subs	r4, #1
 8010dbe:	e775      	b.n	8010cac <__kernel_rem_pio2f+0x1e8>
 8010dc0:	08012074 	.word	0x08012074
 8010dc4:	08012048 	.word	0x08012048
 8010dc8:	43800000 	.word	0x43800000
 8010dcc:	3b800000 	.word	0x3b800000
 8010dd0:	00000000 	.word	0x00000000
 8010dd4:	9b03      	ldr	r3, [sp, #12]
 8010dd6:	eeb0 0a48 	vmov.f32	s0, s16
 8010dda:	1a98      	subs	r0, r3, r2
 8010ddc:	f000 fbf8 	bl	80115d0 <scalbnf>
 8010de0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8010dc8 <__kernel_rem_pio2f+0x304>
 8010de4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dec:	db19      	blt.n	8010e22 <__kernel_rem_pio2f+0x35e>
 8010dee:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8010dcc <__kernel_rem_pio2f+0x308>
 8010df2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010df6:	aa08      	add	r2, sp, #32
 8010df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010dfc:	1c74      	adds	r4, r6, #1
 8010dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e02:	3508      	adds	r5, #8
 8010e04:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010e10:	ee10 3a10 	vmov	r3, s0
 8010e14:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010e18:	ee17 3a90 	vmov	r3, s15
 8010e1c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010e20:	e74b      	b.n	8010cba <__kernel_rem_pio2f+0x1f6>
 8010e22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010e26:	aa08      	add	r2, sp, #32
 8010e28:	ee10 3a10 	vmov	r3, s0
 8010e2c:	4634      	mov	r4, r6
 8010e2e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010e32:	e742      	b.n	8010cba <__kernel_rem_pio2f+0x1f6>
 8010e34:	a808      	add	r0, sp, #32
 8010e36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010e3a:	9001      	str	r0, [sp, #4]
 8010e3c:	ee07 0a90 	vmov	s15, r0
 8010e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e44:	3a01      	subs	r2, #1
 8010e46:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010e4a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010e4e:	ed61 7a01 	vstmdb	r1!, {s15}
 8010e52:	e73e      	b.n	8010cd2 <__kernel_rem_pio2f+0x20e>
 8010e54:	ecfc 6a01 	vldmia	ip!, {s13}
 8010e58:	ecb6 7a01 	vldmia	r6!, {s14}
 8010e5c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010e60:	3001      	adds	r0, #1
 8010e62:	4550      	cmp	r0, sl
 8010e64:	dc01      	bgt.n	8010e6a <__kernel_rem_pio2f+0x3a6>
 8010e66:	4288      	cmp	r0, r1
 8010e68:	ddf4      	ble.n	8010e54 <__kernel_rem_pio2f+0x390>
 8010e6a:	a858      	add	r0, sp, #352	; 0x160
 8010e6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010e70:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8010e74:	3a01      	subs	r2, #1
 8010e76:	e730      	b.n	8010cda <__kernel_rem_pio2f+0x216>
 8010e78:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8010e7a:	2a02      	cmp	r2, #2
 8010e7c:	dc09      	bgt.n	8010e92 <__kernel_rem_pio2f+0x3ce>
 8010e7e:	2a00      	cmp	r2, #0
 8010e80:	dc2a      	bgt.n	8010ed8 <__kernel_rem_pio2f+0x414>
 8010e82:	d043      	beq.n	8010f0c <__kernel_rem_pio2f+0x448>
 8010e84:	f009 0007 	and.w	r0, r9, #7
 8010e88:	b059      	add	sp, #356	; 0x164
 8010e8a:	ecbd 8b04 	vpop	{d8-d9}
 8010e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e92:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8010e94:	2b03      	cmp	r3, #3
 8010e96:	d1f5      	bne.n	8010e84 <__kernel_rem_pio2f+0x3c0>
 8010e98:	ab30      	add	r3, sp, #192	; 0xc0
 8010e9a:	442b      	add	r3, r5
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	4620      	mov	r0, r4
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	f1a1 0104 	sub.w	r1, r1, #4
 8010ea8:	dc51      	bgt.n	8010f4e <__kernel_rem_pio2f+0x48a>
 8010eaa:	4621      	mov	r1, r4
 8010eac:	2901      	cmp	r1, #1
 8010eae:	f1a2 0204 	sub.w	r2, r2, #4
 8010eb2:	dc5c      	bgt.n	8010f6e <__kernel_rem_pio2f+0x4aa>
 8010eb4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8010dd0 <__kernel_rem_pio2f+0x30c>
 8010eb8:	3304      	adds	r3, #4
 8010eba:	2c01      	cmp	r4, #1
 8010ebc:	dc67      	bgt.n	8010f8e <__kernel_rem_pio2f+0x4ca>
 8010ebe:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8010ec2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8010ec6:	2f00      	cmp	r7, #0
 8010ec8:	d167      	bne.n	8010f9a <__kernel_rem_pio2f+0x4d6>
 8010eca:	edc8 6a00 	vstr	s13, [r8]
 8010ece:	ed88 7a01 	vstr	s14, [r8, #4]
 8010ed2:	edc8 7a02 	vstr	s15, [r8, #8]
 8010ed6:	e7d5      	b.n	8010e84 <__kernel_rem_pio2f+0x3c0>
 8010ed8:	aa30      	add	r2, sp, #192	; 0xc0
 8010eda:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8010dd0 <__kernel_rem_pio2f+0x30c>
 8010ede:	4413      	add	r3, r2
 8010ee0:	4622      	mov	r2, r4
 8010ee2:	2a00      	cmp	r2, #0
 8010ee4:	da24      	bge.n	8010f30 <__kernel_rem_pio2f+0x46c>
 8010ee6:	b34f      	cbz	r7, 8010f3c <__kernel_rem_pio2f+0x478>
 8010ee8:	eef1 7a47 	vneg.f32	s15, s14
 8010eec:	edc8 7a00 	vstr	s15, [r8]
 8010ef0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8010ef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ef8:	aa31      	add	r2, sp, #196	; 0xc4
 8010efa:	2301      	movs	r3, #1
 8010efc:	429c      	cmp	r4, r3
 8010efe:	da20      	bge.n	8010f42 <__kernel_rem_pio2f+0x47e>
 8010f00:	b10f      	cbz	r7, 8010f06 <__kernel_rem_pio2f+0x442>
 8010f02:	eef1 7a67 	vneg.f32	s15, s15
 8010f06:	edc8 7a01 	vstr	s15, [r8, #4]
 8010f0a:	e7bb      	b.n	8010e84 <__kernel_rem_pio2f+0x3c0>
 8010f0c:	aa30      	add	r2, sp, #192	; 0xc0
 8010f0e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8010dd0 <__kernel_rem_pio2f+0x30c>
 8010f12:	4413      	add	r3, r2
 8010f14:	2c00      	cmp	r4, #0
 8010f16:	da05      	bge.n	8010f24 <__kernel_rem_pio2f+0x460>
 8010f18:	b10f      	cbz	r7, 8010f1e <__kernel_rem_pio2f+0x45a>
 8010f1a:	eef1 7a67 	vneg.f32	s15, s15
 8010f1e:	edc8 7a00 	vstr	s15, [r8]
 8010f22:	e7af      	b.n	8010e84 <__kernel_rem_pio2f+0x3c0>
 8010f24:	ed33 7a01 	vldmdb	r3!, {s14}
 8010f28:	3c01      	subs	r4, #1
 8010f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f2e:	e7f1      	b.n	8010f14 <__kernel_rem_pio2f+0x450>
 8010f30:	ed73 7a01 	vldmdb	r3!, {s15}
 8010f34:	3a01      	subs	r2, #1
 8010f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f3a:	e7d2      	b.n	8010ee2 <__kernel_rem_pio2f+0x41e>
 8010f3c:	eef0 7a47 	vmov.f32	s15, s14
 8010f40:	e7d4      	b.n	8010eec <__kernel_rem_pio2f+0x428>
 8010f42:	ecb2 7a01 	vldmia	r2!, {s14}
 8010f46:	3301      	adds	r3, #1
 8010f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f4c:	e7d6      	b.n	8010efc <__kernel_rem_pio2f+0x438>
 8010f4e:	edd1 7a00 	vldr	s15, [r1]
 8010f52:	edd1 6a01 	vldr	s13, [r1, #4]
 8010f56:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010f5a:	3801      	subs	r0, #1
 8010f5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f60:	ed81 7a00 	vstr	s14, [r1]
 8010f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f68:	edc1 7a01 	vstr	s15, [r1, #4]
 8010f6c:	e799      	b.n	8010ea2 <__kernel_rem_pio2f+0x3de>
 8010f6e:	edd2 7a00 	vldr	s15, [r2]
 8010f72:	edd2 6a01 	vldr	s13, [r2, #4]
 8010f76:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010f7a:	3901      	subs	r1, #1
 8010f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f80:	ed82 7a00 	vstr	s14, [r2]
 8010f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f88:	edc2 7a01 	vstr	s15, [r2, #4]
 8010f8c:	e78e      	b.n	8010eac <__kernel_rem_pio2f+0x3e8>
 8010f8e:	ed33 7a01 	vldmdb	r3!, {s14}
 8010f92:	3c01      	subs	r4, #1
 8010f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f98:	e78f      	b.n	8010eba <__kernel_rem_pio2f+0x3f6>
 8010f9a:	eef1 6a66 	vneg.f32	s13, s13
 8010f9e:	eeb1 7a47 	vneg.f32	s14, s14
 8010fa2:	edc8 6a00 	vstr	s13, [r8]
 8010fa6:	ed88 7a01 	vstr	s14, [r8, #4]
 8010faa:	eef1 7a67 	vneg.f32	s15, s15
 8010fae:	e790      	b.n	8010ed2 <__kernel_rem_pio2f+0x40e>

08010fb0 <__kernel_tanf>:
 8010fb0:	b508      	push	{r3, lr}
 8010fb2:	ee10 3a10 	vmov	r3, s0
 8010fb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010fba:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8010fbe:	eef0 7a40 	vmov.f32	s15, s0
 8010fc2:	da17      	bge.n	8010ff4 <__kernel_tanf+0x44>
 8010fc4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8010fc8:	ee17 1a10 	vmov	r1, s14
 8010fcc:	bb41      	cbnz	r1, 8011020 <__kernel_tanf+0x70>
 8010fce:	1c43      	adds	r3, r0, #1
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	d108      	bne.n	8010fe6 <__kernel_tanf+0x36>
 8010fd4:	f000 faac 	bl	8011530 <fabsf>
 8010fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010fdc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8010fe4:	bd08      	pop	{r3, pc}
 8010fe6:	2801      	cmp	r0, #1
 8010fe8:	d0fa      	beq.n	8010fe0 <__kernel_tanf+0x30>
 8010fea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010fee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010ff2:	e7f5      	b.n	8010fe0 <__kernel_tanf+0x30>
 8010ff4:	494c      	ldr	r1, [pc, #304]	; (8011128 <__kernel_tanf+0x178>)
 8010ff6:	428a      	cmp	r2, r1
 8010ff8:	db12      	blt.n	8011020 <__kernel_tanf+0x70>
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	bfb8      	it	lt
 8010ffe:	eef1 7a40 	vneglt.f32	s15, s0
 8011002:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801112c <__kernel_tanf+0x17c>
 8011006:	ee70 7a67 	vsub.f32	s15, s0, s15
 801100a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8011130 <__kernel_tanf+0x180>
 801100e:	bfb8      	it	lt
 8011010:	eef1 0a60 	vneglt.f32	s1, s1
 8011014:	ee70 0a60 	vsub.f32	s1, s0, s1
 8011018:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801101c:	eddf 0a45 	vldr	s1, [pc, #276]	; 8011134 <__kernel_tanf+0x184>
 8011020:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011138 <__kernel_tanf+0x188>
 8011024:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801113c <__kernel_tanf+0x18c>
 8011028:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8011140 <__kernel_tanf+0x190>
 801102c:	493e      	ldr	r1, [pc, #248]	; (8011128 <__kernel_tanf+0x178>)
 801102e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8011032:	428a      	cmp	r2, r1
 8011034:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011038:	eea7 6a25 	vfma.f32	s12, s14, s11
 801103c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8011144 <__kernel_tanf+0x194>
 8011040:	eee6 5a07 	vfma.f32	s11, s12, s14
 8011044:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8011148 <__kernel_tanf+0x198>
 8011048:	eea5 6a87 	vfma.f32	s12, s11, s14
 801104c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801114c <__kernel_tanf+0x19c>
 8011050:	eee6 5a07 	vfma.f32	s11, s12, s14
 8011054:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8011150 <__kernel_tanf+0x1a0>
 8011058:	eea5 6a87 	vfma.f32	s12, s11, s14
 801105c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8011154 <__kernel_tanf+0x1a4>
 8011060:	eee7 5a05 	vfma.f32	s11, s14, s10
 8011064:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8011158 <__kernel_tanf+0x1a8>
 8011068:	eea5 5a87 	vfma.f32	s10, s11, s14
 801106c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801115c <__kernel_tanf+0x1ac>
 8011070:	eee5 5a07 	vfma.f32	s11, s10, s14
 8011074:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8011160 <__kernel_tanf+0x1b0>
 8011078:	eea5 5a87 	vfma.f32	s10, s11, s14
 801107c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8011164 <__kernel_tanf+0x1b4>
 8011080:	eee5 5a07 	vfma.f32	s11, s10, s14
 8011084:	eeb0 7a46 	vmov.f32	s14, s12
 8011088:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801108c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8011090:	eeb0 6a60 	vmov.f32	s12, s1
 8011094:	eea7 6a05 	vfma.f32	s12, s14, s10
 8011098:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011168 <__kernel_tanf+0x1b8>
 801109c:	eee6 0a26 	vfma.f32	s1, s12, s13
 80110a0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80110a4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80110a8:	db1d      	blt.n	80110e6 <__kernel_tanf+0x136>
 80110aa:	ee06 0a90 	vmov	s13, r0
 80110ae:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80110b2:	ee27 6a07 	vmul.f32	s12, s14, s14
 80110b6:	ee37 7a00 	vadd.f32	s14, s14, s0
 80110ba:	179b      	asrs	r3, r3, #30
 80110bc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80110c0:	f003 0302 	and.w	r3, r3, #2
 80110c4:	f1c3 0301 	rsb	r3, r3, #1
 80110c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80110cc:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80110d0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80110d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80110d8:	ee07 3a90 	vmov	s15, r3
 80110dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110e0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80110e4:	e77c      	b.n	8010fe0 <__kernel_tanf+0x30>
 80110e6:	2801      	cmp	r0, #1
 80110e8:	d01b      	beq.n	8011122 <__kernel_tanf+0x172>
 80110ea:	4b20      	ldr	r3, [pc, #128]	; (801116c <__kernel_tanf+0x1bc>)
 80110ec:	ee17 2a10 	vmov	r2, s14
 80110f0:	401a      	ands	r2, r3
 80110f2:	ee06 2a10 	vmov	s12, r2
 80110f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80110fa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80110fe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011102:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8011106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801110a:	ee16 2a90 	vmov	r2, s13
 801110e:	4013      	ands	r3, r2
 8011110:	ee07 3a90 	vmov	s15, r3
 8011114:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011118:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801111c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011120:	e75e      	b.n	8010fe0 <__kernel_tanf+0x30>
 8011122:	eef0 7a47 	vmov.f32	s15, s14
 8011126:	e75b      	b.n	8010fe0 <__kernel_tanf+0x30>
 8011128:	3f2ca140 	.word	0x3f2ca140
 801112c:	3f490fda 	.word	0x3f490fda
 8011130:	33222168 	.word	0x33222168
 8011134:	00000000 	.word	0x00000000
 8011138:	b79bae5f 	.word	0xb79bae5f
 801113c:	38a3f445 	.word	0x38a3f445
 8011140:	37d95384 	.word	0x37d95384
 8011144:	3a1a26c8 	.word	0x3a1a26c8
 8011148:	3b6b6916 	.word	0x3b6b6916
 801114c:	3cb327a4 	.word	0x3cb327a4
 8011150:	3e088889 	.word	0x3e088889
 8011154:	3895c07a 	.word	0x3895c07a
 8011158:	398137b9 	.word	0x398137b9
 801115c:	3abede48 	.word	0x3abede48
 8011160:	3c11371f 	.word	0x3c11371f
 8011164:	3d5d0dd1 	.word	0x3d5d0dd1
 8011168:	3eaaaaab 	.word	0x3eaaaaab
 801116c:	fffff000 	.word	0xfffff000

08011170 <atan>:
 8011170:	b538      	push	{r3, r4, r5, lr}
 8011172:	eeb0 7b40 	vmov.f64	d7, d0
 8011176:	ee17 5a90 	vmov	r5, s15
 801117a:	4b73      	ldr	r3, [pc, #460]	; (8011348 <atan+0x1d8>)
 801117c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011180:	429c      	cmp	r4, r3
 8011182:	dd13      	ble.n	80111ac <atan+0x3c>
 8011184:	4b71      	ldr	r3, [pc, #452]	; (801134c <atan+0x1dc>)
 8011186:	429c      	cmp	r4, r3
 8011188:	dc03      	bgt.n	8011192 <atan+0x22>
 801118a:	d107      	bne.n	801119c <atan+0x2c>
 801118c:	ee10 3a10 	vmov	r3, s0
 8011190:	b123      	cbz	r3, 801119c <atan+0x2c>
 8011192:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011196:	eeb0 0b47 	vmov.f64	d0, d7
 801119a:	bd38      	pop	{r3, r4, r5, pc}
 801119c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80112d8 <atan+0x168>
 80111a0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80112e0 <atan+0x170>
 80111a4:	2d00      	cmp	r5, #0
 80111a6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80111aa:	e7f4      	b.n	8011196 <atan+0x26>
 80111ac:	4b68      	ldr	r3, [pc, #416]	; (8011350 <atan+0x1e0>)
 80111ae:	429c      	cmp	r4, r3
 80111b0:	dc11      	bgt.n	80111d6 <atan+0x66>
 80111b2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80111b6:	429c      	cmp	r4, r3
 80111b8:	dc0a      	bgt.n	80111d0 <atan+0x60>
 80111ba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80111be:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80112e8 <atan+0x178>
 80111c2:	ee30 6b06 	vadd.f64	d6, d0, d6
 80111c6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80111ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ce:	dce2      	bgt.n	8011196 <atan+0x26>
 80111d0:	f04f 33ff 	mov.w	r3, #4294967295
 80111d4:	e013      	b.n	80111fe <atan+0x8e>
 80111d6:	f000 f8c5 	bl	8011364 <fabs>
 80111da:	4b5e      	ldr	r3, [pc, #376]	; (8011354 <atan+0x1e4>)
 80111dc:	429c      	cmp	r4, r3
 80111de:	dc4f      	bgt.n	8011280 <atan+0x110>
 80111e0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80111e4:	429c      	cmp	r4, r3
 80111e6:	dc41      	bgt.n	801126c <atan+0xfc>
 80111e8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80111ec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80111f0:	2300      	movs	r3, #0
 80111f2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80111f6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80111fa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80111fe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80112f0 <atan+0x180>
 8011202:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011206:	ee24 5b04 	vmul.f64	d5, d4, d4
 801120a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80112f8 <atan+0x188>
 801120e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011212:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011300 <atan+0x190>
 8011216:	eea3 6b05 	vfma.f64	d6, d3, d5
 801121a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011308 <atan+0x198>
 801121e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011222:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011310 <atan+0x1a0>
 8011226:	eea3 6b05 	vfma.f64	d6, d3, d5
 801122a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011318 <atan+0x1a8>
 801122e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011320 <atan+0x1b0>
 8011232:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011236:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011328 <atan+0x1b8>
 801123a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801123e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011330 <atan+0x1c0>
 8011242:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011246:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011338 <atan+0x1c8>
 801124a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801124e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011340 <atan+0x1d0>
 8011252:	1c5a      	adds	r2, r3, #1
 8011254:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011258:	ee26 6b05 	vmul.f64	d6, d6, d5
 801125c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011260:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011264:	d121      	bne.n	80112aa <atan+0x13a>
 8011266:	ee37 7b46 	vsub.f64	d7, d7, d6
 801126a:	e794      	b.n	8011196 <atan+0x26>
 801126c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011270:	2301      	movs	r3, #1
 8011272:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011276:	ee30 0b07 	vadd.f64	d0, d0, d7
 801127a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801127e:	e7be      	b.n	80111fe <atan+0x8e>
 8011280:	4b35      	ldr	r3, [pc, #212]	; (8011358 <atan+0x1e8>)
 8011282:	429c      	cmp	r4, r3
 8011284:	da0b      	bge.n	801129e <atan+0x12e>
 8011286:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801128a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801128e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8011292:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011296:	2302      	movs	r3, #2
 8011298:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801129c:	e7af      	b.n	80111fe <atan+0x8e>
 801129e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80112a2:	2303      	movs	r3, #3
 80112a4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80112a8:	e7a9      	b.n	80111fe <atan+0x8e>
 80112aa:	4a2c      	ldr	r2, [pc, #176]	; (801135c <atan+0x1ec>)
 80112ac:	492c      	ldr	r1, [pc, #176]	; (8011360 <atan+0x1f0>)
 80112ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80112b2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80112b6:	ed93 5b00 	vldr	d5, [r3]
 80112ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 80112be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80112c2:	ed92 6b00 	vldr	d6, [r2]
 80112c6:	2d00      	cmp	r5, #0
 80112c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80112cc:	bfb8      	it	lt
 80112ce:	eeb1 7b47 	vneglt.f64	d7, d7
 80112d2:	e760      	b.n	8011196 <atan+0x26>
 80112d4:	f3af 8000 	nop.w
 80112d8:	54442d18 	.word	0x54442d18
 80112dc:	3ff921fb 	.word	0x3ff921fb
 80112e0:	54442d18 	.word	0x54442d18
 80112e4:	bff921fb 	.word	0xbff921fb
 80112e8:	8800759c 	.word	0x8800759c
 80112ec:	7e37e43c 	.word	0x7e37e43c
 80112f0:	e322da11 	.word	0xe322da11
 80112f4:	3f90ad3a 	.word	0x3f90ad3a
 80112f8:	24760deb 	.word	0x24760deb
 80112fc:	3fa97b4b 	.word	0x3fa97b4b
 8011300:	a0d03d51 	.word	0xa0d03d51
 8011304:	3fb10d66 	.word	0x3fb10d66
 8011308:	c54c206e 	.word	0xc54c206e
 801130c:	3fb745cd 	.word	0x3fb745cd
 8011310:	920083ff 	.word	0x920083ff
 8011314:	3fc24924 	.word	0x3fc24924
 8011318:	5555550d 	.word	0x5555550d
 801131c:	3fd55555 	.word	0x3fd55555
 8011320:	52defd9a 	.word	0x52defd9a
 8011324:	bfadde2d 	.word	0xbfadde2d
 8011328:	2c6a6c2f 	.word	0x2c6a6c2f
 801132c:	bfa2b444 	.word	0xbfa2b444
 8011330:	af749a6d 	.word	0xaf749a6d
 8011334:	bfb3b0f2 	.word	0xbfb3b0f2
 8011338:	fe231671 	.word	0xfe231671
 801133c:	bfbc71c6 	.word	0xbfbc71c6
 8011340:	9998ebc4 	.word	0x9998ebc4
 8011344:	bfc99999 	.word	0xbfc99999
 8011348:	440fffff 	.word	0x440fffff
 801134c:	7ff00000 	.word	0x7ff00000
 8011350:	3fdbffff 	.word	0x3fdbffff
 8011354:	3ff2ffff 	.word	0x3ff2ffff
 8011358:	40038000 	.word	0x40038000
 801135c:	08012080 	.word	0x08012080
 8011360:	080120a0 	.word	0x080120a0

08011364 <fabs>:
 8011364:	ec51 0b10 	vmov	r0, r1, d0
 8011368:	ee10 2a10 	vmov	r2, s0
 801136c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011370:	ec43 2b10 	vmov	d0, r2, r3
 8011374:	4770      	bx	lr
	...

08011378 <nan>:
 8011378:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011380 <nan+0x8>
 801137c:	4770      	bx	lr
 801137e:	bf00      	nop
 8011380:	00000000 	.word	0x00000000
 8011384:	7ff80000 	.word	0x7ff80000

08011388 <atanf>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	ee10 5a10 	vmov	r5, s0
 801138e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011392:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011396:	eef0 7a40 	vmov.f32	s15, s0
 801139a:	db0f      	blt.n	80113bc <atanf+0x34>
 801139c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80113a0:	dd04      	ble.n	80113ac <atanf+0x24>
 80113a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80113a6:	eeb0 0a67 	vmov.f32	s0, s15
 80113aa:	bd38      	pop	{r3, r4, r5, pc}
 80113ac:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80114e4 <atanf+0x15c>
 80113b0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80114e8 <atanf+0x160>
 80113b4:	2d00      	cmp	r5, #0
 80113b6:	fe77 7a80 	vselgt.f32	s15, s15, s0
 80113ba:	e7f4      	b.n	80113a6 <atanf+0x1e>
 80113bc:	4b4b      	ldr	r3, [pc, #300]	; (80114ec <atanf+0x164>)
 80113be:	429c      	cmp	r4, r3
 80113c0:	dc10      	bgt.n	80113e4 <atanf+0x5c>
 80113c2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80113c6:	da0a      	bge.n	80113de <atanf+0x56>
 80113c8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80114f0 <atanf+0x168>
 80113cc:	ee30 7a07 	vadd.f32	s14, s0, s14
 80113d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113d4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80113d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113dc:	dce3      	bgt.n	80113a6 <atanf+0x1e>
 80113de:	f04f 33ff 	mov.w	r3, #4294967295
 80113e2:	e013      	b.n	801140c <atanf+0x84>
 80113e4:	f000 f8a4 	bl	8011530 <fabsf>
 80113e8:	4b42      	ldr	r3, [pc, #264]	; (80114f4 <atanf+0x16c>)
 80113ea:	429c      	cmp	r4, r3
 80113ec:	dc4f      	bgt.n	801148e <atanf+0x106>
 80113ee:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80113f2:	429c      	cmp	r4, r3
 80113f4:	dc41      	bgt.n	801147a <atanf+0xf2>
 80113f6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80113fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80113fe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011402:	2300      	movs	r3, #0
 8011404:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011408:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801140c:	1c5a      	adds	r2, r3, #1
 801140e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011412:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80114f8 <atanf+0x170>
 8011416:	eddf 5a39 	vldr	s11, [pc, #228]	; 80114fc <atanf+0x174>
 801141a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8011500 <atanf+0x178>
 801141e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011422:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011426:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011504 <atanf+0x17c>
 801142a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801142e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8011508 <atanf+0x180>
 8011432:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011436:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801150c <atanf+0x184>
 801143a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801143e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011510 <atanf+0x188>
 8011442:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011446:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011514 <atanf+0x18c>
 801144a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801144e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011518 <atanf+0x190>
 8011452:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011456:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801151c <atanf+0x194>
 801145a:	eea7 5a26 	vfma.f32	s10, s14, s13
 801145e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8011520 <atanf+0x198>
 8011462:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011466:	ee27 7a26 	vmul.f32	s14, s14, s13
 801146a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801146e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011472:	d121      	bne.n	80114b8 <atanf+0x130>
 8011474:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011478:	e795      	b.n	80113a6 <atanf+0x1e>
 801147a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801147e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011482:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011486:	2301      	movs	r3, #1
 8011488:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801148c:	e7be      	b.n	801140c <atanf+0x84>
 801148e:	4b25      	ldr	r3, [pc, #148]	; (8011524 <atanf+0x19c>)
 8011490:	429c      	cmp	r4, r3
 8011492:	dc0b      	bgt.n	80114ac <atanf+0x124>
 8011494:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801149c:	eea0 7a27 	vfma.f32	s14, s0, s15
 80114a0:	2302      	movs	r3, #2
 80114a2:	ee70 6a67 	vsub.f32	s13, s0, s15
 80114a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114aa:	e7af      	b.n	801140c <atanf+0x84>
 80114ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80114b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80114b4:	2303      	movs	r3, #3
 80114b6:	e7a9      	b.n	801140c <atanf+0x84>
 80114b8:	4a1b      	ldr	r2, [pc, #108]	; (8011528 <atanf+0x1a0>)
 80114ba:	491c      	ldr	r1, [pc, #112]	; (801152c <atanf+0x1a4>)
 80114bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80114c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80114c4:	ed93 0a00 	vldr	s0, [r3]
 80114c8:	ee37 7a40 	vsub.f32	s14, s14, s0
 80114cc:	ed92 0a00 	vldr	s0, [r2]
 80114d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114d4:	2d00      	cmp	r5, #0
 80114d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80114da:	bfb8      	it	lt
 80114dc:	eef1 7a67 	vneglt.f32	s15, s15
 80114e0:	e761      	b.n	80113a6 <atanf+0x1e>
 80114e2:	bf00      	nop
 80114e4:	3fc90fdb 	.word	0x3fc90fdb
 80114e8:	bfc90fdb 	.word	0xbfc90fdb
 80114ec:	3edfffff 	.word	0x3edfffff
 80114f0:	7149f2ca 	.word	0x7149f2ca
 80114f4:	3f97ffff 	.word	0x3f97ffff
 80114f8:	3c8569d7 	.word	0x3c8569d7
 80114fc:	3d4bda59 	.word	0x3d4bda59
 8011500:	bd6ef16b 	.word	0xbd6ef16b
 8011504:	3d886b35 	.word	0x3d886b35
 8011508:	3dba2e6e 	.word	0x3dba2e6e
 801150c:	3e124925 	.word	0x3e124925
 8011510:	3eaaaaab 	.word	0x3eaaaaab
 8011514:	bd15a221 	.word	0xbd15a221
 8011518:	bd9d8795 	.word	0xbd9d8795
 801151c:	bde38e38 	.word	0xbde38e38
 8011520:	be4ccccd 	.word	0xbe4ccccd
 8011524:	401bffff 	.word	0x401bffff
 8011528:	080120c0 	.word	0x080120c0
 801152c:	080120d0 	.word	0x080120d0

08011530 <fabsf>:
 8011530:	ee10 3a10 	vmov	r3, s0
 8011534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011538:	ee00 3a10 	vmov	s0, r3
 801153c:	4770      	bx	lr
	...

08011540 <floorf>:
 8011540:	ee10 3a10 	vmov	r3, s0
 8011544:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011548:	3a7f      	subs	r2, #127	; 0x7f
 801154a:	2a16      	cmp	r2, #22
 801154c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011550:	dc2a      	bgt.n	80115a8 <floorf+0x68>
 8011552:	2a00      	cmp	r2, #0
 8011554:	da11      	bge.n	801157a <floorf+0x3a>
 8011556:	eddf 7a18 	vldr	s15, [pc, #96]	; 80115b8 <floorf+0x78>
 801155a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801155e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011566:	dd05      	ble.n	8011574 <floorf+0x34>
 8011568:	2b00      	cmp	r3, #0
 801156a:	da23      	bge.n	80115b4 <floorf+0x74>
 801156c:	4a13      	ldr	r2, [pc, #76]	; (80115bc <floorf+0x7c>)
 801156e:	2900      	cmp	r1, #0
 8011570:	bf18      	it	ne
 8011572:	4613      	movne	r3, r2
 8011574:	ee00 3a10 	vmov	s0, r3
 8011578:	4770      	bx	lr
 801157a:	4911      	ldr	r1, [pc, #68]	; (80115c0 <floorf+0x80>)
 801157c:	4111      	asrs	r1, r2
 801157e:	420b      	tst	r3, r1
 8011580:	d0fa      	beq.n	8011578 <floorf+0x38>
 8011582:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80115b8 <floorf+0x78>
 8011586:	ee30 0a27 	vadd.f32	s0, s0, s15
 801158a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011592:	ddef      	ble.n	8011574 <floorf+0x34>
 8011594:	2b00      	cmp	r3, #0
 8011596:	bfbe      	ittt	lt
 8011598:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801159c:	fa40 f202 	asrlt.w	r2, r0, r2
 80115a0:	189b      	addlt	r3, r3, r2
 80115a2:	ea23 0301 	bic.w	r3, r3, r1
 80115a6:	e7e5      	b.n	8011574 <floorf+0x34>
 80115a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80115ac:	d3e4      	bcc.n	8011578 <floorf+0x38>
 80115ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80115b2:	4770      	bx	lr
 80115b4:	2300      	movs	r3, #0
 80115b6:	e7dd      	b.n	8011574 <floorf+0x34>
 80115b8:	7149f2ca 	.word	0x7149f2ca
 80115bc:	bf800000 	.word	0xbf800000
 80115c0:	007fffff 	.word	0x007fffff

080115c4 <nanf>:
 80115c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80115cc <nanf+0x8>
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop
 80115cc:	7fc00000 	.word	0x7fc00000

080115d0 <scalbnf>:
 80115d0:	ee10 3a10 	vmov	r3, s0
 80115d4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80115d8:	d024      	beq.n	8011624 <scalbnf+0x54>
 80115da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80115de:	d302      	bcc.n	80115e6 <scalbnf+0x16>
 80115e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80115e4:	4770      	bx	lr
 80115e6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80115ea:	d121      	bne.n	8011630 <scalbnf+0x60>
 80115ec:	4b29      	ldr	r3, [pc, #164]	; (8011694 <scalbnf+0xc4>)
 80115ee:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8011698 <scalbnf+0xc8>
 80115f2:	4298      	cmp	r0, r3
 80115f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80115f8:	db15      	blt.n	8011626 <scalbnf+0x56>
 80115fa:	ee10 3a10 	vmov	r3, s0
 80115fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011602:	3a19      	subs	r2, #25
 8011604:	4402      	add	r2, r0
 8011606:	2afe      	cmp	r2, #254	; 0xfe
 8011608:	dd14      	ble.n	8011634 <scalbnf+0x64>
 801160a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801169c <scalbnf+0xcc>
 801160e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80116a0 <scalbnf+0xd0>
 8011612:	ee10 3a10 	vmov	r3, s0
 8011616:	eeb0 7a67 	vmov.f32	s14, s15
 801161a:	2b00      	cmp	r3, #0
 801161c:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8011620:	ee27 0a27 	vmul.f32	s0, s14, s15
 8011624:	4770      	bx	lr
 8011626:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80116a4 <scalbnf+0xd4>
 801162a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801162e:	4770      	bx	lr
 8011630:	0dd2      	lsrs	r2, r2, #23
 8011632:	e7e7      	b.n	8011604 <scalbnf+0x34>
 8011634:	2a00      	cmp	r2, #0
 8011636:	dd06      	ble.n	8011646 <scalbnf+0x76>
 8011638:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801163c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011640:	ee00 3a10 	vmov	s0, r3
 8011644:	4770      	bx	lr
 8011646:	f112 0f16 	cmn.w	r2, #22
 801164a:	da19      	bge.n	8011680 <scalbnf+0xb0>
 801164c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011650:	4298      	cmp	r0, r3
 8011652:	ee10 3a10 	vmov	r3, s0
 8011656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801165a:	dd09      	ble.n	8011670 <scalbnf+0xa0>
 801165c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801169c <scalbnf+0xcc>
 8011660:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80116a0 <scalbnf+0xd0>
 8011664:	eef0 7a40 	vmov.f32	s15, s0
 8011668:	2b00      	cmp	r3, #0
 801166a:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801166e:	e7dc      	b.n	801162a <scalbnf+0x5a>
 8011670:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80116a4 <scalbnf+0xd4>
 8011674:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80116a8 <scalbnf+0xd8>
 8011678:	eef0 7a40 	vmov.f32	s15, s0
 801167c:	2b00      	cmp	r3, #0
 801167e:	e7f4      	b.n	801166a <scalbnf+0x9a>
 8011680:	3219      	adds	r2, #25
 8011682:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011686:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801168a:	eddf 7a08 	vldr	s15, [pc, #32]	; 80116ac <scalbnf+0xdc>
 801168e:	ee07 3a10 	vmov	s14, r3
 8011692:	e7c5      	b.n	8011620 <scalbnf+0x50>
 8011694:	ffff3cb0 	.word	0xffff3cb0
 8011698:	4c000000 	.word	0x4c000000
 801169c:	7149f2ca 	.word	0x7149f2ca
 80116a0:	f149f2ca 	.word	0xf149f2ca
 80116a4:	0da24260 	.word	0x0da24260
 80116a8:	8da24260 	.word	0x8da24260
 80116ac:	33000000 	.word	0x33000000

080116b0 <_init>:
 80116b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116b2:	bf00      	nop
 80116b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116b6:	bc08      	pop	{r3}
 80116b8:	469e      	mov	lr, r3
 80116ba:	4770      	bx	lr

080116bc <_fini>:
 80116bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116be:	bf00      	nop
 80116c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116c2:	bc08      	pop	{r3}
 80116c4:	469e      	mov	lr, r3
 80116c6:	4770      	bx	lr
