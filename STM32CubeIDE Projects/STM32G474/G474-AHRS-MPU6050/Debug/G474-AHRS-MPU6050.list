
G474-AHRS-MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011594  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08011778  08011778  00021778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012150  08012150  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08012150  08012150  00022150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012158  08012158  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012158  08012158  00022158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801215c  0801215c  0002215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08012160  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000208  08012364  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08012364  00030594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b739  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f9  00000000  00000000  0004b96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0004f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  000508d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002967f  00000000  00000000  00051c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001caa6  00000000  00000000  0007b30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102aed  00000000  00000000  00097db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019a8a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007704  00000000  00000000  0019a8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801175c 	.word	0x0801175c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0801175c 	.word	0x0801175c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	; 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	3a01      	subs	r2, #1
 8000d92:	bf28      	it	cs
 8000d94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d98:	d2ed      	bcs.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b9aa 	b.w	8001260 <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f83c 	bl	8000f90 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_d2lz>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	2200      	movs	r2, #0
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f7ff fdfd 	bl	8000b2c <__aeabi_dcmplt>
 8000f32:	b928      	cbnz	r0, 8000f40 <__aeabi_d2lz+0x1c>
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f3c:	f000 b80a 	b.w	8000f54 <__aeabi_d2ulz>
 8000f40:	4620      	mov	r0, r4
 8000f42:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f46:	f000 f805 	bl	8000f54 <__aeabi_d2ulz>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_d2ulz>:
 8000f54:	b5d0      	push	{r4, r6, r7, lr}
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__aeabi_d2ulz+0x34>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	f7ff fb73 	bl	8000648 <__aeabi_dmul>
 8000f62:	f7ff fe49 	bl	8000bf8 <__aeabi_d2uiz>
 8000f66:	4604      	mov	r4, r0
 8000f68:	f7ff faf4 	bl	8000554 <__aeabi_ui2d>
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <__aeabi_d2ulz+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f7ff fb6a 	bl	8000648 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4630      	mov	r0, r6
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f7ff f9ac 	bl	80002d8 <__aeabi_dsub>
 8000f80:	f7ff fe3a 	bl	8000bf8 <__aeabi_d2uiz>
 8000f84:	4621      	mov	r1, r4
 8000f86:	bdd0      	pop	{r4, r6, r7, pc}
 8000f88:	3df00000 	.word	0x3df00000
 8000f8c:	41f00000 	.word	0x41f00000

08000f90 <__udivmoddi4>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	9d08      	ldr	r5, [sp, #32]
 8000f96:	4604      	mov	r4, r0
 8000f98:	468e      	mov	lr, r1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d14d      	bne.n	800103a <__udivmoddi4+0xaa>
 8000f9e:	428a      	cmp	r2, r1
 8000fa0:	4694      	mov	ip, r2
 8000fa2:	d969      	bls.n	8001078 <__udivmoddi4+0xe8>
 8000fa4:	fab2 f282 	clz	r2, r2
 8000fa8:	b152      	cbz	r2, 8000fc0 <__udivmoddi4+0x30>
 8000faa:	fa01 f302 	lsl.w	r3, r1, r2
 8000fae:	f1c2 0120 	rsb	r1, r2, #32
 8000fb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000fb6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fba:	ea41 0e03 	orr.w	lr, r1, r3
 8000fbe:	4094      	lsls	r4, r2
 8000fc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fc4:	0c21      	lsrs	r1, r4, #16
 8000fc6:	fbbe f6f8 	udiv	r6, lr, r8
 8000fca:	fa1f f78c 	uxth.w	r7, ip
 8000fce:	fb08 e316 	mls	r3, r8, r6, lr
 8000fd2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fd6:	fb06 f107 	mul.w	r1, r6, r7
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x64>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000fe6:	f080 811f 	bcs.w	8001228 <__udivmoddi4+0x298>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 811c 	bls.w	8001228 <__udivmoddi4+0x298>
 8000ff0:	3e02      	subs	r6, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1a5b      	subs	r3, r3, r1
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ffc:	fb08 3310 	mls	r3, r8, r0, r3
 8001000:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001004:	fb00 f707 	mul.w	r7, r0, r7
 8001008:	42a7      	cmp	r7, r4
 800100a:	d90a      	bls.n	8001022 <__udivmoddi4+0x92>
 800100c:	eb1c 0404 	adds.w	r4, ip, r4
 8001010:	f100 33ff 	add.w	r3, r0, #4294967295
 8001014:	f080 810a 	bcs.w	800122c <__udivmoddi4+0x29c>
 8001018:	42a7      	cmp	r7, r4
 800101a:	f240 8107 	bls.w	800122c <__udivmoddi4+0x29c>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001026:	1be4      	subs	r4, r4, r7
 8001028:	2600      	movs	r6, #0
 800102a:	b11d      	cbz	r5, 8001034 <__udivmoddi4+0xa4>
 800102c:	40d4      	lsrs	r4, r2
 800102e:	2300      	movs	r3, #0
 8001030:	e9c5 4300 	strd	r4, r3, [r5]
 8001034:	4631      	mov	r1, r6
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d909      	bls.n	8001052 <__udivmoddi4+0xc2>
 800103e:	2d00      	cmp	r5, #0
 8001040:	f000 80ef 	beq.w	8001222 <__udivmoddi4+0x292>
 8001044:	2600      	movs	r6, #0
 8001046:	e9c5 0100 	strd	r0, r1, [r5]
 800104a:	4630      	mov	r0, r6
 800104c:	4631      	mov	r1, r6
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	fab3 f683 	clz	r6, r3
 8001056:	2e00      	cmp	r6, #0
 8001058:	d14a      	bne.n	80010f0 <__udivmoddi4+0x160>
 800105a:	428b      	cmp	r3, r1
 800105c:	d302      	bcc.n	8001064 <__udivmoddi4+0xd4>
 800105e:	4282      	cmp	r2, r0
 8001060:	f200 80f9 	bhi.w	8001256 <__udivmoddi4+0x2c6>
 8001064:	1a84      	subs	r4, r0, r2
 8001066:	eb61 0303 	sbc.w	r3, r1, r3
 800106a:	2001      	movs	r0, #1
 800106c:	469e      	mov	lr, r3
 800106e:	2d00      	cmp	r5, #0
 8001070:	d0e0      	beq.n	8001034 <__udivmoddi4+0xa4>
 8001072:	e9c5 4e00 	strd	r4, lr, [r5]
 8001076:	e7dd      	b.n	8001034 <__udivmoddi4+0xa4>
 8001078:	b902      	cbnz	r2, 800107c <__udivmoddi4+0xec>
 800107a:	deff      	udf	#255	; 0xff
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	2a00      	cmp	r2, #0
 8001082:	f040 8092 	bne.w	80011aa <__udivmoddi4+0x21a>
 8001086:	eba1 010c 	sub.w	r1, r1, ip
 800108a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800108e:	fa1f fe8c 	uxth.w	lr, ip
 8001092:	2601      	movs	r6, #1
 8001094:	0c20      	lsrs	r0, r4, #16
 8001096:	fbb1 f3f7 	udiv	r3, r1, r7
 800109a:	fb07 1113 	mls	r1, r7, r3, r1
 800109e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010a2:	fb0e f003 	mul.w	r0, lr, r3
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x12c>
 80010aa:	eb1c 0101 	adds.w	r1, ip, r1
 80010ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x12a>
 80010b4:	4288      	cmp	r0, r1
 80010b6:	f200 80cb 	bhi.w	8001250 <__udivmoddi4+0x2c0>
 80010ba:	4643      	mov	r3, r8
 80010bc:	1a09      	subs	r1, r1, r0
 80010be:	b2a4      	uxth	r4, r4
 80010c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80010c4:	fb07 1110 	mls	r1, r7, r0, r1
 80010c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010cc:	fb0e fe00 	mul.w	lr, lr, r0
 80010d0:	45a6      	cmp	lr, r4
 80010d2:	d908      	bls.n	80010e6 <__udivmoddi4+0x156>
 80010d4:	eb1c 0404 	adds.w	r4, ip, r4
 80010d8:	f100 31ff 	add.w	r1, r0, #4294967295
 80010dc:	d202      	bcs.n	80010e4 <__udivmoddi4+0x154>
 80010de:	45a6      	cmp	lr, r4
 80010e0:	f200 80bb 	bhi.w	800125a <__udivmoddi4+0x2ca>
 80010e4:	4608      	mov	r0, r1
 80010e6:	eba4 040e 	sub.w	r4, r4, lr
 80010ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010ee:	e79c      	b.n	800102a <__udivmoddi4+0x9a>
 80010f0:	f1c6 0720 	rsb	r7, r6, #32
 80010f4:	40b3      	lsls	r3, r6
 80010f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80010fe:	fa20 f407 	lsr.w	r4, r0, r7
 8001102:	fa01 f306 	lsl.w	r3, r1, r6
 8001106:	431c      	orrs	r4, r3
 8001108:	40f9      	lsrs	r1, r7
 800110a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800110e:	fa00 f306 	lsl.w	r3, r0, r6
 8001112:	fbb1 f8f9 	udiv	r8, r1, r9
 8001116:	0c20      	lsrs	r0, r4, #16
 8001118:	fa1f fe8c 	uxth.w	lr, ip
 800111c:	fb09 1118 	mls	r1, r9, r8, r1
 8001120:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001124:	fb08 f00e 	mul.w	r0, r8, lr
 8001128:	4288      	cmp	r0, r1
 800112a:	fa02 f206 	lsl.w	r2, r2, r6
 800112e:	d90b      	bls.n	8001148 <__udivmoddi4+0x1b8>
 8001130:	eb1c 0101 	adds.w	r1, ip, r1
 8001134:	f108 3aff 	add.w	sl, r8, #4294967295
 8001138:	f080 8088 	bcs.w	800124c <__udivmoddi4+0x2bc>
 800113c:	4288      	cmp	r0, r1
 800113e:	f240 8085 	bls.w	800124c <__udivmoddi4+0x2bc>
 8001142:	f1a8 0802 	sub.w	r8, r8, #2
 8001146:	4461      	add	r1, ip
 8001148:	1a09      	subs	r1, r1, r0
 800114a:	b2a4      	uxth	r4, r4
 800114c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001150:	fb09 1110 	mls	r1, r9, r0, r1
 8001154:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001158:	fb00 fe0e 	mul.w	lr, r0, lr
 800115c:	458e      	cmp	lr, r1
 800115e:	d908      	bls.n	8001172 <__udivmoddi4+0x1e2>
 8001160:	eb1c 0101 	adds.w	r1, ip, r1
 8001164:	f100 34ff 	add.w	r4, r0, #4294967295
 8001168:	d26c      	bcs.n	8001244 <__udivmoddi4+0x2b4>
 800116a:	458e      	cmp	lr, r1
 800116c:	d96a      	bls.n	8001244 <__udivmoddi4+0x2b4>
 800116e:	3802      	subs	r0, #2
 8001170:	4461      	add	r1, ip
 8001172:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001176:	fba0 9402 	umull	r9, r4, r0, r2
 800117a:	eba1 010e 	sub.w	r1, r1, lr
 800117e:	42a1      	cmp	r1, r4
 8001180:	46c8      	mov	r8, r9
 8001182:	46a6      	mov	lr, r4
 8001184:	d356      	bcc.n	8001234 <__udivmoddi4+0x2a4>
 8001186:	d053      	beq.n	8001230 <__udivmoddi4+0x2a0>
 8001188:	b15d      	cbz	r5, 80011a2 <__udivmoddi4+0x212>
 800118a:	ebb3 0208 	subs.w	r2, r3, r8
 800118e:	eb61 010e 	sbc.w	r1, r1, lr
 8001192:	fa01 f707 	lsl.w	r7, r1, r7
 8001196:	fa22 f306 	lsr.w	r3, r2, r6
 800119a:	40f1      	lsrs	r1, r6
 800119c:	431f      	orrs	r7, r3
 800119e:	e9c5 7100 	strd	r7, r1, [r5]
 80011a2:	2600      	movs	r6, #0
 80011a4:	4631      	mov	r1, r6
 80011a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011aa:	f1c2 0320 	rsb	r3, r2, #32
 80011ae:	40d8      	lsrs	r0, r3
 80011b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b4:	fa21 f303 	lsr.w	r3, r1, r3
 80011b8:	4091      	lsls	r1, r2
 80011ba:	4301      	orrs	r1, r0
 80011bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011c0:	fa1f fe8c 	uxth.w	lr, ip
 80011c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80011c8:	fb07 3610 	mls	r6, r7, r0, r3
 80011cc:	0c0b      	lsrs	r3, r1, #16
 80011ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011d2:	fb00 f60e 	mul.w	r6, r0, lr
 80011d6:	429e      	cmp	r6, r3
 80011d8:	fa04 f402 	lsl.w	r4, r4, r2
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x260>
 80011de:	eb1c 0303 	adds.w	r3, ip, r3
 80011e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80011e6:	d22f      	bcs.n	8001248 <__udivmoddi4+0x2b8>
 80011e8:	429e      	cmp	r6, r3
 80011ea:	d92d      	bls.n	8001248 <__udivmoddi4+0x2b8>
 80011ec:	3802      	subs	r0, #2
 80011ee:	4463      	add	r3, ip
 80011f0:	1b9b      	subs	r3, r3, r6
 80011f2:	b289      	uxth	r1, r1
 80011f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80011f8:	fb07 3316 	mls	r3, r7, r6, r3
 80011fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001200:	fb06 f30e 	mul.w	r3, r6, lr
 8001204:	428b      	cmp	r3, r1
 8001206:	d908      	bls.n	800121a <__udivmoddi4+0x28a>
 8001208:	eb1c 0101 	adds.w	r1, ip, r1
 800120c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001210:	d216      	bcs.n	8001240 <__udivmoddi4+0x2b0>
 8001212:	428b      	cmp	r3, r1
 8001214:	d914      	bls.n	8001240 <__udivmoddi4+0x2b0>
 8001216:	3e02      	subs	r6, #2
 8001218:	4461      	add	r1, ip
 800121a:	1ac9      	subs	r1, r1, r3
 800121c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001220:	e738      	b.n	8001094 <__udivmoddi4+0x104>
 8001222:	462e      	mov	r6, r5
 8001224:	4628      	mov	r0, r5
 8001226:	e705      	b.n	8001034 <__udivmoddi4+0xa4>
 8001228:	4606      	mov	r6, r0
 800122a:	e6e3      	b.n	8000ff4 <__udivmoddi4+0x64>
 800122c:	4618      	mov	r0, r3
 800122e:	e6f8      	b.n	8001022 <__udivmoddi4+0x92>
 8001230:	454b      	cmp	r3, r9
 8001232:	d2a9      	bcs.n	8001188 <__udivmoddi4+0x1f8>
 8001234:	ebb9 0802 	subs.w	r8, r9, r2
 8001238:	eb64 0e0c 	sbc.w	lr, r4, ip
 800123c:	3801      	subs	r0, #1
 800123e:	e7a3      	b.n	8001188 <__udivmoddi4+0x1f8>
 8001240:	4646      	mov	r6, r8
 8001242:	e7ea      	b.n	800121a <__udivmoddi4+0x28a>
 8001244:	4620      	mov	r0, r4
 8001246:	e794      	b.n	8001172 <__udivmoddi4+0x1e2>
 8001248:	4640      	mov	r0, r8
 800124a:	e7d1      	b.n	80011f0 <__udivmoddi4+0x260>
 800124c:	46d0      	mov	r8, sl
 800124e:	e77b      	b.n	8001148 <__udivmoddi4+0x1b8>
 8001250:	3b02      	subs	r3, #2
 8001252:	4461      	add	r1, ip
 8001254:	e732      	b.n	80010bc <__udivmoddi4+0x12c>
 8001256:	4630      	mov	r0, r6
 8001258:	e709      	b.n	800106e <__udivmoddi4+0xde>
 800125a:	4464      	add	r4, ip
 800125c:	3802      	subs	r0, #2
 800125e:	e742      	b.n	80010e6 <__udivmoddi4+0x156>

08001260 <__aeabi_idiv0>:
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8001264:	b480      	push	{r7}
 8001266:	b08b      	sub	sp, #44	; 0x2c
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <FusionAhrsInitialise+0x74>)
 8001282:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <FusionAhrsInitialise+0x78>)
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80012ca:	bf00      	nop
 80012cc:	372c      	adds	r7, #44	; 0x2c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	7f7fffff 	.word	0x7f7fffff
 80012dc:	41200000 	.word	0x41200000

080012e0 <FusionAhrsSetMagneticField>:
 * @brief Sets the minimum and maximum valid magnetic field magnitudes in uT.
 * @param fusionAhrs AHRS algorithm structure.
 * @param minimumMagneticField Minimum valid magnetic field magnitude.
 * @param maximumMagneticField Maximum valid magnetic field magnitude.
 */
void FusionAhrsSetMagneticField(FusionAhrs * const fusionAhrs, const float minimumMagneticField, const float maximumMagneticField) {
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012ec:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionAhrs->minimumMagneticFieldSquared = minimumMagneticField * minimumMagneticField;
 80012f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	edc3 7a01 	vstr	s15, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = maximumMagneticField * maximumMagneticField;
 80012fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001302:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8001318:	b490      	push	{r4, r7}
 800131a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800131e:	af00      	add	r7, sp, #0
 8001320:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001324:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001328:	6018      	str	r0, [r3, #0]
 800132a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800132e:	f5a3 6181 	sub.w	r1, r3, #1032	; 0x408
 8001332:	eeb0 5a61 	vmov.f32	s10, s3
 8001336:	eef0 5a42 	vmov.f32	s11, s4
 800133a:	eeb0 6a62 	vmov.f32	s12, s5
 800133e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001342:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8001346:	eef0 6a43 	vmov.f32	s13, s6
 800134a:	eeb0 7a63 	vmov.f32	s14, s7
 800134e:	eef0 7a44 	vmov.f32	s15, s8
 8001352:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001356:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800135a:	f507 6085 	add.w	r0, r7, #1064	; 0x428
 800135e:	f2a0 4024 	subw	r0, r0, #1060	; 0x424
 8001362:	edc0 4a00 	vstr	s9, [r0]
 8001366:	ed81 0a00 	vstr	s0, [r1]
 800136a:	edc1 0a01 	vstr	s1, [r1, #4]
 800136e:	ed81 1a02 	vstr	s2, [r1, #8]
 8001372:	ed82 5a00 	vstr	s10, [r2]
 8001376:	edc2 5a01 	vstr	s11, [r2, #4]
 800137a:	ed82 6a02 	vstr	s12, [r2, #8]
 800137e:	edc3 6a00 	vstr	s13, [r3]
 8001382:	ed83 7a01 	vstr	s14, [r3, #4]
 8001386:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 800138a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800138e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800139c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 80013b4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013b8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d116      	bne.n	80013f8 <FusionAhrsUpdate+0xe0>
 80013ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013ce:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80013d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d10b      	bne.n	80013f8 <FusionAhrsUpdate+0xe0>
 80013e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013e4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80013e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	f000 85b4 	beq.w	8001f60 <FusionAhrsUpdate+0xc48>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 80013f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013fc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	ed93 7a04 	vldr	s14, [r3, #16]
 8001406:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800140a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	edd3 7a06 	vldr	s15, [r3, #24]
 8001414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001418:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800141c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	edd3 6a03 	vldr	s13, [r3, #12]
 8001426:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800142a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	edd3 7a05 	vldr	s15, [r3, #20]
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 800143c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001440:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001444:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8001448:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800144c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	ed93 7a03 	vldr	s14, [r3, #12]
 8001456:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800145a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	edd3 7a04 	vldr	s15, [r3, #16]
 8001464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001468:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800146c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	edd3 6a05 	vldr	s13, [r3, #20]
 8001476:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800147a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	edd3 7a06 	vldr	s15, [r3, #24]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 800148c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001490:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001494:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8001498:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800149c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80014a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014aa:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014c4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	edd3 6a06 	vldr	s13, [r3, #24]
 80014ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014d2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 80014e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014e8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80014ec:	edc3 7a02 	vstr	s15, [r3, #8]
 80014f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014f4:	f5a3 7167 	sub.w	r1, r3, #924	; 0x39c
 80014f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014fc:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8001500:	460b      	mov	r3, r1
 8001502:	ca07      	ldmia	r2, {r0, r1, r2}
 8001504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001508:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800150c:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 8001510:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001514:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8001518:	460b      	mov	r3, r1
 800151a:	ca07      	ldmia	r2, {r0, r1, r2}
 800151c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001520:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001524:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001530:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800153c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001540:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001544:	edd3 6a01 	vldr	s13, [r3, #4]
 8001548:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800154c:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001550:	edd3 7a01 	vldr	s15, [r3, #4]
 8001554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001560:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001564:	edd3 6a02 	vldr	s13, [r3, #8]
 8001568:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800156c:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001570:	edd3 7a02 	vldr	s15, [r3, #8]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001580:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001584:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001594:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001598:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 800159c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015a0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80015a4:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80015ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015b6:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80015ba:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80015bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015c0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	105a      	asrs	r2, r3, #1
 80015c8:	4bd1      	ldr	r3, [pc, #836]	; (8001910 <FusionAhrsUpdate+0x5f8>)
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80015d0:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 80015d4:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80015d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015e0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80015e4:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80015e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015ea:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001602:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001616:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800161a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800162a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800162e:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001632:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001636:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800163a:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800163c:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001646:	f5a3 716f 	sub.w	r1, r3, #956	; 0x3bc
 800164a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800164e:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8001652:	460b      	mov	r3, r1
 8001654:	ca07      	ldmia	r2, {r0, r1, r2}
 8001656:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800165a:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001664:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001666:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800166a:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001682:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001686:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800168a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800168e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001692:	ed93 7a01 	vldr	s14, [r3, #4]
 8001696:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016a6:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80016aa:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80016ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016b2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80016b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ba:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016ca:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80016ce:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016d6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 80016da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016de:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 80016e2:	460b      	mov	r3, r1
 80016e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016ee:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80016f2:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80016f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80016fc:	bf00      	nop
 80016fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001702:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001706:	461c      	mov	r4, r3
 8001708:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800170c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001714:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001718:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 800171c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001720:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001724:	460b      	mov	r3, r1
 8001726:	ca07      	ldmia	r2, {r0, r1, r2}
 8001728:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800172c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001730:	f5a3 7175 	sub.w	r1, r3, #980	; 0x3d4
 8001734:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001738:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 800173c:	460b      	mov	r3, r1
 800173e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001744:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001748:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800174c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001750:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001754:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001758:	edd3 7a02 	vldr	s15, [r3, #8]
 800175c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001760:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001764:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001768:	edd3 6a02 	vldr	s13, [r3, #8]
 800176c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001770:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001774:	edd3 7a01 	vldr	s15, [r3, #4]
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001780:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001784:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001788:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 800178c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001790:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001794:	ed93 7a02 	vldr	s14, [r3, #8]
 8001798:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800179c:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017ac:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80017b0:	edd3 6a00 	vldr	s13, [r3]
 80017b4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017b8:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80017bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017cc:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80017d0:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80017d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017d8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017e4:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80017e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017f4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80017f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80017fc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001800:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001810:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001814:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001818:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800181c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001820:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 8001824:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001828:	f5a3 727b 	sub.w	r2, r3, #1004	; 0x3ec
 800182c:	460b      	mov	r3, r1
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001834:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001838:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 800183c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001840:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001844:	460b      	mov	r3, r1
 8001846:	ca07      	ldmia	r2, {r0, r1, r2}
 8001848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800184c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001850:	f5a3 717e 	sub.w	r1, r3, #1016	; 0x3f8
 8001854:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001858:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 800185c:	460b      	mov	r3, r1
 800185e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001860:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001864:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001868:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001874:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001884:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001888:	edd3 6a01 	vldr	s13, [r3, #4]
 800188c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001890:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001894:	edd3 7a01 	vldr	s15, [r3, #4]
 8001898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018a4:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80018a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80018ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018b0:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80018b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 80018c0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018c4:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 80018c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018cc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	f100 833c 	bmi.w	8001f62 <FusionAhrsUpdate+0xc4a>
 80018ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018ee:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	f300 832b 	bgt.w	8001f62 <FusionAhrsUpdate+0xc4a>
 800190c:	e002      	b.n	8001914 <FusionAhrsUpdate+0x5fc>
 800190e:	bf00      	nop
 8001910:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001914:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001918:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001922:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001926:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001938:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001942:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001946:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001958:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800195c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001960:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001964:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001968:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001972:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001976:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001988:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800198c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001990:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	edd3 6a05 	vldr	s13, [r3, #20]
 800199a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800199e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80019b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019b4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80019b8:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 80019bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019c0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	ed93 7a05 	vldr	s14, [r3, #20]
 80019ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ce:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80019d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019e0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80019ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ee:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80019f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fc:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001a00:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a04:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001a08:	edc3 7a02 	vstr	s15, [r3, #8]
 8001a0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a10:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8001a14:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a18:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a24:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a28:	f5a3 713e 	sub.w	r1, r3, #760	; 0x2f8
 8001a2c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a30:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 8001a34:	460b      	mov	r3, r1
 8001a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001a3c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a40:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001a44:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a48:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a4c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a58:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a5c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001a60:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a64:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a68:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a7c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001a80:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001a84:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a88:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001a8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a90:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a94:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001aa4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001aa8:	edd3 6a00 	vldr	s13, [r3]
 8001aac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ab0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001ab4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ac4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001ac8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001acc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ad0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001ad4:	ed93 7a00 	vldr	s14, [r3]
 8001ad8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001adc:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001ae0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001aec:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001af0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001af4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001af8:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b08:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b0c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001b10:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001b14:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b18:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8001b1c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b26:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b2a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b2e:	461c      	mov	r4, r3
 8001b30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b3c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b40:	f5a3 7147 	sub.w	r1, r3, #796	; 0x31c
 8001b44:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b48:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b54:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b58:	f5a3 714a 	sub.w	r1, r3, #808	; 0x328
 8001b5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b60:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001b64:	460b      	mov	r3, r1
 8001b66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001b6c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b70:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b7c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b88:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b8c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001b90:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b94:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b98:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001b9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bac:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001bb0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bb4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bb8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001bcc:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001bd0:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001be4:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001be8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bec:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001bf0:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001bf8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c02:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001c06:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001c08:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c0c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	105a      	asrs	r2, r3, #1
 8001c14:	4bd0      	ldr	r3, [pc, #832]	; (8001f58 <FusionAhrsUpdate+0xc40>)
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8001c1c:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8001c20:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001c22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c2c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c30:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001c32:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c36:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c3a:	ed93 7a00 	vldr	s14, [r3]
 8001c3e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c4e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c66:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c72:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c76:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001c7e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c82:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c86:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001c88:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c92:	f5a3 714f 	sub.w	r1, r3, #828	; 0x33c
 8001c96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c9a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ca2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ca6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8001cb0:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001cb2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cb6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cce:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001cd2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001cd6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cda:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001cde:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ce2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cf2:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001cf6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001cfa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cfe:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001d02:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d06:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d16:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001d1a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001d1e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d22:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8001d26:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d30:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001d34:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8001d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001d3e:	bf00      	nop
 8001d40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d44:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d48:	461c      	mov	r4, r3
 8001d4a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001d4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d5a:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8001d5e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d62:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001d66:	460b      	mov	r3, r1
 8001d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d6e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d72:	f5a3 7155 	sub.w	r1, r3, #852	; 0x354
 8001d76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d7a:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001d86:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d8a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001d8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d92:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d96:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001da6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001daa:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001db2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001db6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dc6:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001dca:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001dce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dd2:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001dd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dde:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dee:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001df2:	edd3 6a00 	vldr	s13, [r3]
 8001df6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dfa:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001dfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e0e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001e12:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001e16:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e1a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e26:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001e2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e32:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e36:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001e3a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e3e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e42:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e56:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001e5a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001e5e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e62:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8001e66:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001e6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e70:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e78:	461c      	mov	r4, r3
 8001e7a:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001e7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e86:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e8a:	f5a3 7161 	sub.w	r1, r3, #900	; 0x384
 8001e8e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e92:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001e96:	460b      	mov	r3, r1
 8001e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e9e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ea2:	f5a3 715e 	sub.w	r1, r3, #888	; 0x378
 8001ea6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eaa:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8001eae:	460b      	mov	r3, r1
 8001eb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001eb6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eba:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ec6:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ed6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001eda:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001ede:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ee2:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001ee6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eee:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001ef2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001efe:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001f02:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001f06:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f0a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001f0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f12:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f16:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001f1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f26:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001f2a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001f2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f32:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8001f36:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001f3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f44:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f48:	461c      	mov	r4, r3
 8001f4a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001f4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f56:	e004      	b.n	8001f62 <FusionAhrsUpdate+0xc4a>
 8001f58:	5f3759df 	.word	0x5f3759df
 8001f5c:	3c8efa35 	.word	0x3c8efa35
            break;
 8001f60:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001f62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f66:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	d107      	bne.n	8001f8a <FusionAhrsUpdate+0xc72>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 8001f7a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f7e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 8001f8a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f8e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8001f9a:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001f9c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fa0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001faa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fae:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	dd2f      	ble.n	8002022 <FusionAhrsUpdate+0xd0a>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001fc2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fc6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001fd0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fd4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fe2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fe6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fea:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff6:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001ffa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002002:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002006:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8002010:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002014:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8002020:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8002022:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8001f5c <FusionAhrsUpdate+0xc44>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8002026:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002032:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8002036:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800203a:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 800203e:	460b      	mov	r3, r1
 8002040:	ca07      	ldmia	r2, {r0, r1, r2}
 8002042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002046:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 800204a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800204e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002062:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002066:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800206a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800206e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002072:	ed93 7a01 	vldr	s14, [r3, #4]
 8002076:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002082:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002086:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800208a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800208e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002092:	ed93 7a02 	vldr	s14, [r3, #8]
 8002096:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020a6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80020aa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020ae:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80020b2:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80020b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020c4:	461c      	mov	r4, r3
 80020c6:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80020ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020d6:	f5a3 71dc 	sub.w	r1, r3, #440	; 0x1b8
 80020da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020de:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80020e2:	460b      	mov	r3, r1
 80020e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020ea:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 80020f4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8002104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002108:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800210c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002110:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8002114:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002118:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800211c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002120:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800212c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002130:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8002134:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002138:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800213c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002140:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800214c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002150:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002154:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002158:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800215c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002160:	ca07      	ldmia	r2, {r0, r1, r2}
 8002162:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002166:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800216a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800216e:	461c      	mov	r4, r3
 8002170:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002174:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800217c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002180:	f5a3 71ee 	sub.w	r1, r3, #476	; 0x1dc
 8002184:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002188:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800218c:	460b      	mov	r3, r1
 800218e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002190:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002194:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002198:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 800219c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021a0:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 80021a4:	460b      	mov	r3, r1
 80021a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80021ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021d0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80021d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80021e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021f8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80021fc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002200:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002204:	ed93 7a02 	vldr	s14, [r3, #8]
 8002208:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800220c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002210:	edd3 7a02 	vldr	s15, [r3, #8]
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800221c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002220:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002224:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002228:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800222c:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8002230:	ca07      	ldmia	r2, {r0, r1, r2}
 8002232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002236:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800223a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800223e:	461c      	mov	r4, r3
 8002240:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8002244:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800224c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002250:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8002254:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002258:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800225c:	460b      	mov	r3, r1
 800225e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002268:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8002272:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002276:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800227a:	ed93 7a00 	vldr	s14, [r3]
 800227e:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800228a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800228e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8002292:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002296:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800229a:	ed93 7a01 	vldr	s14, [r3, #4]
 800229e:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022aa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80022ae:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80022b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022b6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80022ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80022be:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022ca:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80022ce:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80022d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022d6:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80022da:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80022de:	ca07      	ldmia	r2, {r0, r1, r2}
 80022e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ec:	461c      	mov	r4, r3
 80022ee:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80022f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022fe:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8002302:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002306:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4614      	mov	r4, r2
 800230e:	330c      	adds	r3, #12
 8002310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002316:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800231a:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 800231e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002322:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8002326:	460b      	mov	r3, r1
 8002328:	ca07      	ldmia	r2, {r0, r1, r2}
 800232a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 800232e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002332:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002336:	edd3 7a01 	vldr	s15, [r3, #4]
 800233a:	eeb1 7a67 	vneg.f32	s14, s15
 800233e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002342:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002352:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002356:	edd3 6a02 	vldr	s13, [r3, #8]
 800235a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800235e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002362:	edd3 7a01 	vldr	s15, [r3, #4]
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800236e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002372:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002376:	edd3 6a03 	vldr	s13, [r3, #12]
 800237a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800237e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002382:	edd3 7a02 	vldr	s15, [r3, #8]
 8002386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002392:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002396:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 800239a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800239e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023ba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023be:	edd3 6a02 	vldr	s13, [r3, #8]
 80023c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023c6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80023ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023da:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023de:	edd3 6a03 	vldr	s13, [r3, #12]
 80023e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80023ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023fa:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80023fe:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8002402:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002406:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002412:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002416:	edd3 7a01 	vldr	s15, [r3, #4]
 800241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002422:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002426:	edd3 6a01 	vldr	s13, [r3, #4]
 800242a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800242e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002432:	edd3 7a02 	vldr	s15, [r3, #8]
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002442:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002446:	edd3 6a03 	vldr	s13, [r3, #12]
 800244a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800244e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002462:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002466:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 800246a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800246e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002472:	ed93 7a00 	vldr	s14, [r3]
 8002476:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800247a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800247e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002486:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800248a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800248e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002492:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002496:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800249a:	edd3 7a01 	vldr	s15, [r3, #4]
 800249e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024aa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80024ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80024b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024ca:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80024ce:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80024d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024d6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80024da:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 80024de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024ec:	461c      	mov	r4, r3
 80024ee:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80024f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024fc:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8002500:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002504:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4614      	mov	r4, r2
 800250c:	330c      	adds	r3, #12
 800250e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002514:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002518:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 800251c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002520:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002524:	4614      	mov	r4, r2
 8002526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 800252c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002530:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002534:	ed93 7a00 	vldr	s14, [r3]
 8002538:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800253c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002548:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800254c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002550:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8002554:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002558:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800255c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002560:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002564:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002568:	edd3 7a01 	vldr	s15, [r3, #4]
 800256c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002570:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002574:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002578:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 800257c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002584:	ed93 7a02 	vldr	s14, [r3, #8]
 8002588:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800258c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002590:	edd3 7a02 	vldr	s15, [r3, #8]
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800259c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025a0:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 80025a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80025ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80025b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025b4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80025b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025c4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025c8:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80025cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025d0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025d4:	f507 7466 	add.w	r4, r7, #920	; 0x398
 80025d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025de:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80025e6:	461c      	mov	r4, r3
 80025e8:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80025ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 80025f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025f6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8002600:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002604:	f103 040c 	add.w	r4, r3, #12
 8002608:	4613      	mov	r3, r2
 800260a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002610:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002614:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8002618:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800261c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4614      	mov	r4, r2
 8002624:	330c      	adds	r3, #12
 8002626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800262c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002630:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002634:	ed93 7a00 	vldr	s14, [r3]
 8002638:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800263c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800264c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002650:	edd3 6a01 	vldr	s13, [r3, #4]
 8002654:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002658:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800265c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002668:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800266c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002670:	edd3 6a02 	vldr	s13, [r3, #8]
 8002674:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002678:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800267c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002688:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800268c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002690:	edd3 6a03 	vldr	s13, [r3, #12]
 8002694:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002698:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800269c:	edd3 7a03 	vldr	s15, [r3, #12]
 80026a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a8:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 80026ac:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 80026b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b8:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 80026bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026c0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80026c4:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 80026c8:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80026ca:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026d4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80026d8:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80026da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026de:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	105a      	asrs	r2, r3, #1
 80026e6:	4bcc      	ldr	r3, [pc, #816]	; (8002a18 <FusionAhrsUpdate+0x1700>)
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80026ee:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80026f2:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80026f4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026fe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002702:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8002704:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002708:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800270c:	ed93 7a00 	vldr	s14, [r3]
 8002710:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8002714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002718:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800271c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800272c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002730:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002734:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002740:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002744:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002748:	edc3 7a00 	vstr	s15, [r3]
    return y;
 800274c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002750:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002754:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002756:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 800275a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800275e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002762:	ed93 7a00 	vldr	s14, [r3]
 8002766:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002772:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8002776:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 800277a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800277e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002782:	ed93 7a01 	vldr	s14, [r3, #4]
 8002786:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002792:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8002796:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 800279a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800279e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80027a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80027a6:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027b2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80027b6:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 80027ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027be:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80027c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80027c6:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80027d6:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 80027da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027de:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80027e2:	f507 7462 	add.w	r4, r7, #904	; 0x388
 80027e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027f0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80027f4:	461c      	mov	r4, r3
 80027f6:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80027fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8002800:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002804:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800280e:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 8002812:	f103 040c 	add.w	r4, r3, #12
 8002816:	4613      	mov	r3, r2
 8002818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800281a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 800281e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002822:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	ed93 7a04 	vldr	s14, [r3, #16]
 800282c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002830:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	edd3 7a06 	vldr	s15, [r3, #24]
 800283a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002842:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	edd3 6a03 	vldr	s13, [r3, #12]
 800284c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002850:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	edd3 7a05 	vldr	s15, [r3, #20]
 800285a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002862:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8002866:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800286a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800286e:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8002872:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002876:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002880:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002884:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	edd3 7a04 	vldr	s15, [r3, #16]
 800288e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002892:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002896:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	edd3 6a05 	vldr	s13, [r3, #20]
 80028a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028a4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 80028ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028c2:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 80028c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028ca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80028d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028d8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	edd3 7a03 	vldr	s15, [r3, #12]
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028f2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80028fc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002900:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	edd3 7a06 	vldr	s15, [r3, #24]
 800290a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800290e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002912:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8002916:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800291a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800291e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002922:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002926:	f5a3 712f 	sub.w	r1, r3, #700	; 0x2bc
 800292a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800292e:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8002932:	460b      	mov	r3, r1
 8002934:	ca07      	ldmia	r2, {r0, r1, r2}
 8002936:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800293a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800293e:	f5a3 712c 	sub.w	r1, r3, #688	; 0x2b0
 8002942:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002946:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800294a:	460b      	mov	r3, r1
 800294c:	ca07      	ldmia	r2, {r0, r1, r2}
 800294e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002952:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002956:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002962:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002972:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002976:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800297a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800297e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002982:	ed93 7a01 	vldr	s14, [r3, #4]
 8002986:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800298a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800298e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002996:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800299a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800299e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80029a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029a6:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80029aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80029ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029b2:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 80029b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029c2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80029c6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80029ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029ce:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 80029d2:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80029d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80029d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029e0:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029e4:	461c      	mov	r4, r3
 80029e6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80029ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 80029f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029f6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8002a00:	f5a2 7232 	sub.w	r2, r2, #712	; 0x2c8
 8002a04:	331c      	adds	r3, #28
 8002a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8002a0c:	bf00      	nop
 8002a0e:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc90      	pop	{r4, r7}
 8002a16:	4770      	bx	lr
 8002a18:	5f3759df 	.word	0x5f3759df

08002a1c <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	61f8      	str	r0, [r7, #28]
 8002a24:	eeb0 5a40 	vmov.f32	s10, s0
 8002a28:	eef0 5a60 	vmov.f32	s11, s1
 8002a2c:	eeb0 6a41 	vmov.f32	s12, s2
 8002a30:	eef0 6a61 	vmov.f32	s13, s3
 8002a34:	eeb0 7a42 	vmov.f32	s14, s4
 8002a38:	eef0 7a62 	vmov.f32	s15, s5
 8002a3c:	ed87 3a00 	vstr	s6, [r7]
 8002a40:	ed87 5a04 	vstr	s10, [r7, #16]
 8002a44:	edc7 5a05 	vstr	s11, [r7, #20]
 8002a48:	ed87 6a06 	vstr	s12, [r7, #24]
 8002a4c:	edc7 6a01 	vstr	s13, [r7, #4]
 8002a50:	ed87 7a02 	vstr	s14, [r7, #8]
 8002a54:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6a:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002a6e:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002a72:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8002a76:	ed97 5a01 	vldr	s10, [r7, #4]
 8002a7a:	edd7 5a02 	vldr	s11, [r7, #8]
 8002a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a82:	edd7 6a04 	vldr	s13, [r7, #16]
 8002a86:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a8e:	edd7 4a00 	vldr	s9, [r7]
 8002a92:	eef0 1a45 	vmov.f32	s3, s10
 8002a96:	eeb0 2a65 	vmov.f32	s4, s11
 8002a9a:	eef0 2a46 	vmov.f32	s5, s12
 8002a9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002aa2:	eef0 0a47 	vmov.f32	s1, s14
 8002aa6:	eeb0 1a67 	vmov.f32	s2, s15
 8002aaa:	69f8      	ldr	r0, [r7, #28]
 8002aac:	f7fe fc34 	bl	8001318 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 8002ab0:	69f8      	ldr	r0, [r7, #28]
 8002ab2:	f000 f862 	bl	8002b7a <FusionAhrsIsInitialising>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 8002ac4:	e00d      	b.n	8002ae2 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002ad0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002aec <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 8002ad4:	69f8      	ldr	r0, [r7, #28]
 8002ad6:	f000 f869 	bl	8002bac <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002ae2:	bf00      	nop
 8002ae4:	3730      	adds	r7, #48	; 0x30
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	00000000 	.word	0x00000000

08002af0 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8002af0:	b490      	push	{r4, r7}
 8002af2:	b096      	sub	sp, #88	; 0x58
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6178      	str	r0, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002afe:	330c      	adds	r3, #12
 8002b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 8002b0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b0e:	eef1 7a67 	vneg.f32	s15, s15
 8002b12:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 8002b16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002b1a:	eef1 7a67 	vneg.f32	s15, s15
 8002b1e:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8002b22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b26:	eef1 7a67 	vneg.f32	s15, s15
 8002b2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 8002b2e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002b32:	f107 0318 	add.w	r3, r7, #24
 8002b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b3c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8002b4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b52:	ee06 0a10 	vmov	s12, r0
 8002b56:	ee06 1a90 	vmov	s13, r1
 8002b5a:	ee07 2a10 	vmov	s14, r2
 8002b5e:	ee07 3a90 	vmov	s15, r3
}
 8002b62:	eeb0 0a46 	vmov.f32	s0, s12
 8002b66:	eef0 0a66 	vmov.f32	s1, s13
 8002b6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002b6e:	eef0 1a67 	vmov.f32	s3, s15
 8002b72:	3758      	adds	r7, #88	; 0x58
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc90      	pop	{r4, r7}
 8002b78:	4770      	bx	lr

08002b7a <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	bfcc      	ite	gt
 8002b98:	2301      	movgt	r3, #1
 8002b9a:	2300      	movle	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b0af      	sub	sp, #188	; 0xbc
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	ed87 0a00 	vstr	s0, [r7]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002bc6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002bca:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002bd6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be2:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002be6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf2:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002bf6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c02:	eeb0 0a67 	vmov.f32	s0, s15
 8002c06:	f00c fa0d 	bl	800f024 <sqrtf>
 8002c0a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c16:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8002c1a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002c1e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8002c2a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002c2e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8002c3a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002c3e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8002c4a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002c4e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 8002c5a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c68:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002c6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 040c 	add.w	r4, r3, #12
 8002c7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	ed93 7a03 	vldr	s14, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cbe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	edd3 6a04 	vldr	s13, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd6:	eef0 0a67 	vmov.f32	s1, s15
 8002cda:	eeb0 0a46 	vmov.f32	s0, s12
 8002cde:	f00c f99f 	bl	800f020 <atan2f>
 8002ce2:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 8002cec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002cf0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002e90 <FusionAhrsSetYaw+0x2e4>
 8002cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 8002cf8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d08:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 8002d0c:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002d10:	f00b ffd2 	bl	800ecb8 <cosf>
 8002d14:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 8002d18:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 8002d2a:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002d2e:	f00c f807 	bl	800ed40 <sinf>
 8002d32:	eef0 7a40 	vmov.f32	s15, s0
 8002d36:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 8002d3a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8002d3e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002d52:	330c      	adds	r3, #12
 8002d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 8002d5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d5e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d66:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002d6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d76:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002d7a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d86:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002d8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d96:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 8002d9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002daa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002dba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002dca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd6:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 8002dda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002dde:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002dea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002dfa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e06:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002e0a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e16:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 8002e1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e26:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002e2a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e36:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002e3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e46:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002e4a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e56:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 8002e5a:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e68:	f107 0418 	add.w	r4, r7, #24
 8002e6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f103 040c 	add.w	r4, r3, #12
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 8002e86:	bf00      	nop
 8002e88:	37bc      	adds	r7, #188	; 0xbc
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	3c8efa35 	.word	0x3c8efa35
 8002e94:	00000000 	.word	0x00000000

08002e98 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ea4:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd fb6d 	bl	8000598 <__aeabi_f2d>
 8002ebe:	a312      	add	r3, pc, #72	; (adr r3, 8002f08 <FusionBiasInitialise+0x70>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fbc0 	bl	8000648 <__aeabi_dmul>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7fd feb2 	bl	8000c38 <__aeabi_d2f>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	f3af 8000 	nop.w
 8002f08:	8c0eff43 	.word	0x8c0eff43
 8002f0c:	3fc015bf 	.word	0x3fc015bf

08002f10 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8002f10:	b490      	push	{r4, r7}
 8002f12:	b0b4      	sub	sp, #208	; 0xd0
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	61f8      	str	r0, [r7, #28]
 8002f18:	eef0 6a40 	vmov.f32	s13, s0
 8002f1c:	eeb0 7a60 	vmov.f32	s14, s1
 8002f20:	eef0 7a41 	vmov.f32	s15, s2
 8002f24:	edc7 6a04 	vstr	s13, [r7, #16]
 8002f28:	ed87 7a05 	vstr	s14, [r7, #20]
 8002f2c:	edc7 7a06 	vstr	s15, [r7, #24]
 8002f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f34:	f107 0210 	add.w	r2, r7, #16
 8002f38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f44:	3210      	adds	r2, #16
 8002f46:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002f4c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002f5c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f60:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002f6c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f70:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8002f7c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002f80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002f84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f94:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f9c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fae:	dc17      	bgt.n	8002fe0 <FusionBiasUpdate+0xd0>
 8002fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb4:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	dc0b      	bgt.n	8002fe0 <FusionBiasUpdate+0xd0>
 8002fc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fcc:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	dd0b      	ble.n	8002ff8 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002fe8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fec:	f107 0210 	add.w	r2, r7, #16
 8002ff0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ff6:	e08f      	b.n	8003118 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ffe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	d512      	bpl.n	8003032 <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	edd3 7a01 	vldr	s15, [r3, #4]
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 8003022:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003026:	f107 0210 	add.w	r2, r7, #16
 800302a:	ca07      	ldmia	r2, {r0, r1, r2}
 800302c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003030:	e072      	b.n	8003118 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	689c      	ldr	r4, [r3, #8]
 8003036:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800303a:	f107 0210 	add.w	r2, r7, #16
 800303e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003044:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8003048:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800304c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003054:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8003058:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800305c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003064:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8003068:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800306c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003074:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8003078:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800307c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003080:	ca07      	ldmia	r2, {r0, r1, r2}
 8003082:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003086:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800308a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800308e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800309a:	3210      	adds	r2, #16
 800309c:	ca07      	ldmia	r2, {r0, r1, r2}
 800309e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030a6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80030aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80030ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80030b0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80030b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80030c0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80030c4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80030d0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80030d4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80030d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030dc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 80030e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80030e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80030ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030f2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80030f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80030f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3310      	adds	r3, #16
 8003100:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003104:	ca07      	ldmia	r2, {r0, r1, r2}
 8003106:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 800310a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800310e:	f107 0210 	add.w	r2, r7, #16
 8003112:	ca07      	ldmia	r2, {r0, r1, r2}
 8003114:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003118:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800311c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003124:	ee06 1a90 	vmov	s13, r1
 8003128:	ee07 2a10 	vmov	s14, r2
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eeb0 0a66 	vmov.f32	s0, s13
 8003134:	eef0 0a47 	vmov.f32	s1, s14
 8003138:	eeb0 1a67 	vmov.f32	s2, s15
 800313c:	37d0      	adds	r7, #208	; 0xd0
 800313e:	46bd      	mov	sp, r7
 8003140:	bc90      	pop	{r4, r7}
 8003142:	4770      	bx	lr

08003144 <initFusionAHRS>:
};

//


void initFusionAHRS(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float sample_S){
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	ed87 0a00 	vstr	s0, [r7]

	DataStruct->samplePeriod = sample_S;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	60da      	str	r2, [r3, #12]
	
	// Initialise gyroscope bias correction algorithm
    FusionBiasInitialise(fusionBias, 0.5f, DataStruct->samplePeriod); // stationary threshold = 0.5 degrees per second
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003160:	eef0 0a67 	vmov.f32	s1, s15
 8003164:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff fe95 	bl	8002e98 <FusionBiasInitialise>

    // Initialise AHRS algorithm
    FusionAhrsInitialise(fusionAhrs, 0.5f); // gain = 0.5
 800316e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	f7fe f876 	bl	8001264 <FusionAhrsInitialise>

    // Set optional magnetic field limits
    FusionAhrsSetMagneticField(fusionAhrs, 20.0f, 70.0f); // valid magnetic field range = 20 uT to 70 uT
 8003178:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003190 <initFusionAHRS+0x4c>
 800317c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003180:	68b8      	ldr	r0, [r7, #8]
 8003182:	f7fe f8ad 	bl	80012e0 <FusionAhrsSetMagneticField>
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	428c0000 	.word	0x428c0000

08003194 <getFusionAHRS_6DoF>:
	DataStruct->YAW = eulerAngles.angle.yaw;
	DataStruct->PITCH = eulerAngles.angle.pitch;
	DataStruct->ROLL = eulerAngles.angle.roll;
}

void getFusionAHRS_6DoF(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float accX, float accY, float accZ, float gyrX, float gyrY, float gyrZ) {
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 800319a:	af00      	add	r7, sp, #0
 800319c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031a0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80031a4:	6018      	str	r0, [r3, #0]
 80031a6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031aa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80031ae:	6019      	str	r1, [r3, #0]
 80031b0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031b4:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031be:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80031c2:	ed83 0a00 	vstr	s0, [r3]
 80031c6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031ca:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80031ce:	edc3 0a00 	vstr	s1, [r3]
 80031d2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031d6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80031da:	ed83 1a00 	vstr	s2, [r3]
 80031de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031e2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80031e6:	edc3 1a00 	vstr	s3, [r3]
 80031ea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031ee:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80031f2:	ed83 2a00 	vstr	s4, [r3]
 80031f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031fa:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80031fe:	edc3 2a00 	vstr	s5, [r3]
	
	// Calibrate gyroscope
	FusionVector3 uncalibratedGyroscope = {
 8003202:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003206:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8003210:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003214:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800321e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003222:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
		.axis.x = gyrX, /* replace this value with actual gyroscope x axis measurement in lsb */
		.axis.y = gyrY, /* replace this value with actual gyroscope y axis measurement in lsb */
		.axis.z = gyrZ, /* replace this value with actual gyroscope z axis measurement in lsb */
	};
	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 800322c:	4bed      	ldr	r3, [pc, #948]	; (80035e4 <getFusionAHRS_6DoF+0x450>)
 800322e:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8003232:	461d      	mov	r5, r3
 8003234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800326e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003272:	461c      	mov	r4, r3
 8003274:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003278:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800327c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003280:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003284:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003288:	461d      	mov	r5, r3
 800328a:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 800328e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800329e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032a2:	4ad1      	ldr	r2, [pc, #836]	; (80035e8 <getFusionAHRS_6DoF+0x454>)
 80032a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ae:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 80032b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032b6:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80032ba:	460b      	mov	r3, r1
 80032bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80032be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032c6:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 80032ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ce:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80032d2:	460b      	mov	r3, r1
 80032d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032de:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 80032e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032e6:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80032ea:	460b      	mov	r3, r1
 80032ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80032ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80032f2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032fa:	ed93 7a00 	vldr	s14, [r3]
 80032fe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003302:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003312:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003316:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800331a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800331e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003322:	ed93 7a01 	vldr	s14, [r3, #4]
 8003326:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800332a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800332e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003336:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800333a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800333e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003342:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003346:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800334a:	ed93 7a02 	vldr	s14, [r3, #8]
 800334e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003352:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003356:	edd3 7a02 	vldr	s15, [r3, #8]
 800335a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003362:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003366:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800336a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800336e:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8003372:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003376:	ca07      	ldmia	r2, {r0, r1, r2}
 8003378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800337c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003380:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8003384:	ca07      	ldmia	r2, {r0, r1, r2}
 8003386:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800338a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800338e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003392:	461c      	mov	r4, r3
 8003394:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800339c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033a0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033a4:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 80033a8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033ac:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80033b0:	460b      	mov	r3, r1
 80033b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80033b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 80033b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033c0:	ed93 7a00 	vldr	s14, [r3]
 80033c4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033d8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033dc:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80033e0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80033ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003400:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003404:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003408:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800340c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003410:	ed93 7a02 	vldr	s14, [r3, #8]
 8003414:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003418:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800341c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003424:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003428:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800342c:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003430:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003434:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8003438:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800343c:	ca07      	ldmia	r2, {r0, r1, r2}
 800343e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003442:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8003446:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800344a:	ca07      	ldmia	r2, {r0, r1, r2}
 800344c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003450:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003454:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8003458:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800345c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003460:	4614      	mov	r4, r2
 8003462:	461d      	mov	r5, r3
 8003464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800346a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	6023      	str	r3, [r4, #0]
 8003470:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003474:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003478:	461c      	mov	r4, r3
 800347a:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800347e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003486:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800348a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800348e:	ed93 7a00 	vldr	s14, [r3]
 8003492:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003496:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034a6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80034aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80034ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80034ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034c6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80034ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80034ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80034da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034ea:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80034ee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034f2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80034f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80034fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800350a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800350e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003512:	edd3 6a04 	vldr	s13, [r3, #16]
 8003516:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800351a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800351e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800352a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800352e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003532:	edd3 6a05 	vldr	s13, [r3, #20]
 8003536:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800353a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800353e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800354e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003552:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003556:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800355a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800355e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003562:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003566:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003572:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003576:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800357a:	edd3 6a07 	vldr	s13, [r3, #28]
 800357e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003582:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003586:	edd3 7a01 	vldr	s15, [r3, #4]
 800358a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003592:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003596:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800359a:	edd3 6a08 	vldr	s13, [r3, #32]
 800359e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80035aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035ba:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80035be:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035c2:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80035c6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80035ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80035cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035d0:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80035d4:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 80035d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80035da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 80035de:	bf00      	nop
 80035e0:	e004      	b.n	80035ec <getFusionAHRS_6DoF+0x458>
 80035e2:	bf00      	nop
 80035e4:	08011778 	.word	0x08011778
 80035e8:	20000000 	.word	0x20000000
 80035ec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80035f0:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80035f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80035f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Calibrate accelerometer
	FusionVector3 uncalibratedAccelerometer = {
 80035fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003602:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8003606:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003612:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003616:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800361a:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003626:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800362a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800362e:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	609a      	str	r2, [r3, #8]
		.axis.x = accX, /* replace this value with actual accelerometer x axis measurement in lsb */
		.axis.y = accY, /* replace this value with actual accelerometer y axis measurement in lsb */
		.axis.z = accZ, /* replace this value with actual accelerometer z axis measurement in lsb */
	};
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 8003636:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800363a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800363e:	4aed      	ldr	r2, [pc, #948]	; (80039f4 <getFusionAHRS_6DoF+0x860>)
 8003640:	461c      	mov	r4, r3
 8003642:	4615      	mov	r5, r2
 8003644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003654:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003662:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003670:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800367e:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8003682:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003686:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800368a:	460b      	mov	r3, r1
 800368c:	ca07      	ldmia	r2, {r0, r1, r2}
 800368e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003692:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003696:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 800369a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800369e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036a2:	4614      	mov	r4, r2
 80036a4:	461d      	mov	r5, r3
 80036a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ae:	682b      	ldr	r3, [r5, #0]
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036b6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80036ba:	4acf      	ldr	r2, [pc, #828]	; (80039f8 <getFusionAHRS_6DoF+0x864>)
 80036bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80036be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036c6:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 80036ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036ce:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80036d2:	460b      	mov	r3, r1
 80036d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80036d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036de:	f5a3 7106 	sub.w	r1, r3, #536	; 0x218
 80036e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036e6:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80036ea:	460b      	mov	r3, r1
 80036ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80036ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036f2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036f6:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 80036fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036fe:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8003702:	460b      	mov	r3, r1
 8003704:	ca07      	ldmia	r2, {r0, r1, r2}
 8003706:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 800370a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800370e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003712:	ed93 7a00 	vldr	s14, [r3]
 8003716:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800371a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003726:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800372a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800372e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8003732:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003736:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800373a:	ed93 7a01 	vldr	s14, [r3, #4]
 800373e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003742:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003746:	edd3 7a01 	vldr	s15, [r3, #4]
 800374a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003752:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003756:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800375a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800375e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003762:	ed93 7a02 	vldr	s14, [r3, #8]
 8003766:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800376a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800376e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003776:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800377a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800377e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003782:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003786:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800378a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800378e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003794:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003798:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800379c:	ca07      	ldmia	r2, {r0, r1, r2}
 800379e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037a2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037a6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80037aa:	461c      	mov	r4, r3
 80037ac:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80037b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037bc:	f5a3 710c 	sub.w	r1, r3, #560	; 0x230
 80037c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037c4:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80037c8:	460b      	mov	r3, r1
 80037ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80037cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 80037d0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037d4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80037d8:	ed93 7a00 	vldr	s14, [r3]
 80037dc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037e0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037f0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80037f4:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80037f8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037fc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003800:	ed93 7a01 	vldr	s14, [r3, #4]
 8003804:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003808:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800380c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003814:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003818:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800381c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003820:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003824:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003828:	ed93 7a02 	vldr	s14, [r3, #8]
 800382c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003830:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8003834:	edd3 7a02 	vldr	s15, [r3, #8]
 8003838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003840:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8003844:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003848:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800384c:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8003850:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8003854:	ca07      	ldmia	r2, {r0, r1, r2}
 8003856:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800385a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800385e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8003862:	ca07      	ldmia	r2, {r0, r1, r2}
 8003864:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003868:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800386c:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8003870:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003874:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003878:	4614      	mov	r4, r2
 800387a:	461d      	mov	r5, r3
 800387c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800387e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800388c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003890:	461c      	mov	r4, r3
 8003892:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003896:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800389a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800389e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038a2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80038a6:	ed93 7a00 	vldr	s14, [r3]
 80038aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038ae:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038be:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80038c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80038c6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038ca:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80038ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80038d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038de:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80038e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80038e6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038ea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80038ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80038f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003902:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003906:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800390a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800390e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003912:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003916:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003922:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003926:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800392a:	edd3 6a04 	vldr	s13, [r3, #16]
 800392e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003932:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003936:	edd3 7a01 	vldr	s15, [r3, #4]
 800393a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003942:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003946:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800394a:	edd3 6a05 	vldr	s13, [r3, #20]
 800394e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003952:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003956:	edd3 7a02 	vldr	s15, [r3, #8]
 800395a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800395e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003962:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003966:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800396a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800396e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003972:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003976:	ed93 7a06 	vldr	s14, [r3, #24]
 800397a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800397e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800398a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800398e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003992:	edd3 6a07 	vldr	s13, [r3, #28]
 8003996:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800399a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800399e:	edd3 7a01 	vldr	s15, [r3, #4]
 80039a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039ae:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80039b2:	edd3 6a08 	vldr	s13, [r3, #32]
 80039b6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039ba:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80039be:	edd3 7a02 	vldr	s15, [r3, #8]
 80039c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039ce:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80039d2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80039d6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039da:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80039de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80039e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80039e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039e8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80039ec:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80039f0:	e006      	b.n	8003a00 <getFusionAHRS_6DoF+0x86c>
 80039f2:	bf00      	nop
 80039f4:	08011778 	.word	0x08011778
 80039f8:	2000000c 	.word	0x2000000c
 80039fc:	42652ee0 	.word	0x42652ee0
 8003a00:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a06:	bf00      	nop
 8003a08:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a10:	461c      	mov	r4, r3
 8003a12:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8003a16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Update gyroscope bias correction algorithm
	calibratedGyroscope = FusionBiasUpdate(fusionBias, calibratedGyroscope);
 8003a1e:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 8003a22:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 8003a26:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8003a2a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a2e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003a32:	eeb0 0a66 	vmov.f32	s0, s13
 8003a36:	eef0 0a47 	vmov.f32	s1, s14
 8003a3a:	eeb0 1a67 	vmov.f32	s2, s15
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	f7ff fa66 	bl	8002f10 <FusionBiasUpdate>
 8003a44:	eef0 6a40 	vmov.f32	s13, s0
 8003a48:	eeb0 7a60 	vmov.f32	s14, s1
 8003a4c:	eef0 7a41 	vmov.f32	s15, s2
 8003a50:	edc7 6a87 	vstr	s13, [r7, #540]	; 0x21c
 8003a54:	ed87 7a88 	vstr	s14, [r7, #544]	; 0x220
 8003a58:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224

	// Update AHRS algorithm
	FusionAhrsUpdateWithoutMagnetometer(fusionAhrs, calibratedGyroscope, calibratedAccelerometer, DataStruct->samplePeriod);
 8003a5c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a60:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	edd3 4a03 	vldr	s9, [r3, #12]
 8003a6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a72:	ed93 5a00 	vldr	s10, [r3]
 8003a76:	edd3 5a01 	vldr	s11, [r3, #4]
 8003a7a:	ed93 6a02 	vldr	s12, [r3, #8]
 8003a7e:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 8003a82:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 8003a86:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8003a8a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a8e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003a92:	eeb0 3a64 	vmov.f32	s6, s9
 8003a96:	eef0 1a45 	vmov.f32	s3, s10
 8003a9a:	eeb0 2a65 	vmov.f32	s4, s11
 8003a9e:	eef0 2a46 	vmov.f32	s5, s12
 8003aa2:	eeb0 0a66 	vmov.f32	s0, s13
 8003aa6:	eef0 0a47 	vmov.f32	s1, s14
 8003aaa:	eeb0 1a67 	vmov.f32	s2, s15
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	f7fe ffb4 	bl	8002a1c <FusionAhrsUpdateWithoutMagnetometer>

	// Get Euler angles
	FusionEulerAngles eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(fusionAhrs));
 8003ab4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ab8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f7ff f817 	bl	8002af0 <FusionAhrsGetQuaternion>
 8003ac2:	eeb0 6a40 	vmov.f32	s12, s0
 8003ac6:	eef0 6a60 	vmov.f32	s13, s1
 8003aca:	eeb0 7a41 	vmov.f32	s14, s2
 8003ace:	eef0 7a61 	vmov.f32	s15, s3
 8003ad2:	ed87 6a8d 	vstr	s12, [r7, #564]	; 0x234
 8003ad6:	edc7 6a8e 	vstr	s13, [r7, #568]	; 0x238
 8003ada:	ed87 7a8f 	vstr	s14, [r7, #572]	; 0x23c
 8003ade:	edc7 7a90 	vstr	s15, [r7, #576]	; 0x240
 8003ae2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ae6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003aea:	461c      	mov	r4, r3
 8003aec:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003af0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8003af6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003afa:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003afe:	ed93 7a00 	vldr	s14, [r3]
 8003b02:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b06:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b1a:	edc7 7abb 	vstr	s15, [r7, #748]	; 0x2ec
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003b1e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b22:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b26:	ed93 7a02 	vldr	s14, [r3, #8]
 8003b2a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b2e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b32:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b3a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b3e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b42:	edd3 6a00 	vldr	s13, [r3]
 8003b46:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b4a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b56:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b5a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b5e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b62:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b66:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b6a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b76:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 8003b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7e:	eef0 0a67 	vmov.f32	s1, s15
 8003b82:	eeb0 0a66 	vmov.f32	s0, s13
 8003b86:	f00b fa4b 	bl	800f020 <atan2f>
 8003b8a:	eef0 7a40 	vmov.f32	s15, s0
 8003b8e:	edc7 7aba 	vstr	s15, [r7, #744]	; 0x2e8
    return radians * (180.0f / (float) M_PI);
 8003b92:	edd7 7aba 	vldr	s15, [r7, #744]	; 0x2e8
 8003b96:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 80039fc <getFusionAHRS_6DoF+0x868>
 8003b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003b9e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ba2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003ba6:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003baa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bae:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003bb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003bb6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bba:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003bbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bca:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003bce:	edd3 6a00 	vldr	s13, [r3]
 8003bd2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bd6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bea:	eeb0 0a67 	vmov.f32	s0, s15
 8003bee:	f00b f9eb 	bl	800efc8 <asinf>
 8003bf2:	eef0 7a40 	vmov.f32	s15, s0
 8003bf6:	eef1 7a67 	vneg.f32	s15, s15
 8003bfa:	edc7 7ab9 	vstr	s15, [r7, #740]	; 0x2e4
    return radians * (180.0f / (float) M_PI);
 8003bfe:	edd7 7ab9 	vldr	s15, [r7, #740]	; 0x2e4
 8003c02:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80039fc <getFusionAHRS_6DoF+0x868>
 8003c06:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003c0a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c0e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c12:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003c16:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c1a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c26:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c32:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c36:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c3a:	edd3 6a00 	vldr	s13, [r3]
 8003c3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c42:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c46:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003c52:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c56:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c5e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c62:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c6e:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 8003c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c76:	eef0 0a67 	vmov.f32	s1, s15
 8003c7a:	eeb0 0a66 	vmov.f32	s0, s13
 8003c7e:	f00b f9cf 	bl	800f020 <atan2f>
 8003c82:	eef0 7a40 	vmov.f32	s15, s0
 8003c86:	edc7 7ab8 	vstr	s15, [r7, #736]	; 0x2e0
    return radians * (180.0f / (float) M_PI);
 8003c8a:	edd7 7ab8 	vldr	s15, [r7, #736]	; 0x2e0
 8003c8e:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 80039fc <getFusionAHRS_6DoF+0x868>
 8003c92:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003c96:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c9a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c9e:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8003ca2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ca6:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8003caa:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003cae:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cb4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cb8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cbc:	461c      	mov	r4, r3
 8003cbe:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	// Write Euler Angles into data structs
	DataStruct->YAW = eulerAngles.angle.yaw;
 8003cca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cce:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cd8:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	601a      	str	r2, [r3, #0]
	DataStruct->PITCH = eulerAngles.angle.pitch;
 8003ce0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ce4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cee:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
	DataStruct->ROLL = eulerAngles.angle.roll;
 8003cf6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cfa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003d04:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bdb0      	pop	{r4, r5, r7, pc}
 8003d16:	bf00      	nop

08003d18 <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole_t *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	460b      	mov	r3, r1
 8003d22:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d26:	edc7 0a00 	vstr	s1, [r7]
 8003d2a:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 8003d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d30:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003dec <LPFTwoPole_Init+0xd4>
 8003d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d38:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d141      	bne.n	8003dc6 <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 8003d42:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d46:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003df0 <LPFTwoPole_Init+0xd8>
 8003d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d56:	edd7 7a00 	vldr	s15, [r7]
 8003d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5e:	edd7 7a00 	vldr	s15, [r7]
 8003d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 8003d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d70:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003df4 <LPFTwoPole_Init+0xdc>
 8003d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d78:	edd7 7a00 	vldr	s15, [r7]
 8003d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 8003da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003da4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003df4 <LPFTwoPole_Init+0xdc>
 8003da8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dac:	edd7 7a00 	vldr	s15, [r7]
 8003db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dbc:	eef1 7a67 	vneg.f32	s15, s15
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40c90fdb 	.word	0x40c90fdb
 8003df0:	3fcfa0f9 	.word	0x3fcfa0f9
 8003df4:	400d2f1b 	.word	0x400d2f1b

08003df8 <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole_t *lpf, float val) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	ed93 7a04 	vldr	s14, [r3, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e20:	edd7 7a00 	vldr	s15, [r7]
 8003e24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	ed93 6a05 	vldr	s12, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e3e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003e42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	ee07 3a90 	vmov	s15, r3
}
 8003e58:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <NotchFilterInit>:
#include "NotchFilter.h"

void NotchFilterInit(NotchFilter_t *filt, float centerFreHz, float notchWidth_Hz, float sampleTime_s)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	ed2d 8b02 	vpush	{d8}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e78:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e7c:	ed87 1a00 	vstr	s2, [r7]
	float w0_rps = 2.0f * M_PI * centerFreHz;
 8003e80:	68b8      	ldr	r0, [r7, #8]
 8003e82:	f7fc fb89 	bl	8000598 <__aeabi_f2d>
 8003e86:	a33c      	add	r3, pc, #240	; (adr r3, 8003f78 <NotchFilterInit+0x110>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f7fc fbdc 	bl	8000648 <__aeabi_dmul>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	f7fc fece 	bl	8000c38 <__aeabi_d2f>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	61bb      	str	r3, [r7, #24]
	float ww_rps = 2.0f * M_PI * notchWidth_Hz;
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fc fb79 	bl	8000598 <__aeabi_f2d>
 8003ea6:	a334      	add	r3, pc, #208	; (adr r3, 8003f78 <NotchFilterInit+0x110>)
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f7fc fbcc 	bl	8000648 <__aeabi_dmul>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f7fc febe 	bl	8000c38 <__aeabi_d2f>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	617b      	str	r3, [r7, #20]
	
	float w0_pw_rps = (2.0f / sampleTime_s) * tanf(0.5f * w0_rps * sampleTime_s);
 8003ec0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ec4:	edd7 7a00 	vldr	s15, [r7]
 8003ec8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ed0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ed4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ed8:	edd7 7a00 	vldr	s15, [r7]
 8003edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee4:	f00a ff72 	bl	800edcc <tanf>
 8003ee8:	eef0 7a40 	vmov.f32	s15, s0
 8003eec:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003ef0:	edc7 7a04 	vstr	s15, [r7, #16]
	
	filt->alpha = 4.0f + ((w0_pw_rps * w0_pw_rps) * (sampleTime_s * sampleTime_s));
 8003ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ef8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003efc:	edd7 7a00 	vldr	s15, [r7]
 8003f00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f08:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	edc3 7a00 	vstr	s15, [r3]
	filt->beta = 2.0f + (ww_rps  * sampleTime_s);
 8003f16:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f1a:	edd7 7a00 	vldr	s15, [r7]
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	edc3 7a01 	vstr	s15, [r3, #4]
	
	for (int n = 0; n<3; n++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e013      	b.n	8003f5e <NotchFilterInit+0xf6>
	{
		filt->x[n] = 0.0f;
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	3304      	adds	r3, #4
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
	for (int n = 0; n<3; n++)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	dde8      	ble.n	8003f36 <NotchFilterInit+0xce>
	}
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	ecbd 8b02 	vpop	{d8}
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	f3af 8000 	nop.w
 8003f78:	54442d18 	.word	0x54442d18
 8003f7c:	401921fb 	.word	0x401921fb

08003f80 <NotchFilter_Update>:

float NotchFilter_Update(NotchFilter_t *filt, float data)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	ed87 0a00 	vstr	s0, [r7]
	filt->x[2] = filt->x[1];
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	611a      	str	r2, [r3, #16]
	filt->x[1] = filt->x[0];
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]
	
	filt->y[2] = filt->y[1];
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	61da      	str	r2, [r3, #28]
	filt->y[1] = filt->y[0];
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
	
	filt->x[0] = data;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	609a      	str	r2, [r3, #8]
	
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	ed93 7a00 	vldr	s14, [r3]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	edd3 7a00 	vldr	s15, [r3]
 8003fc8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003fcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003fd0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	edd3 6a00 	vldr	s13, [r3]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff2:	ee37 7a27 	vadd.f32	s14, s14, s15
			   - (2.0f * ((filt->alpha - 8.0f)) * filt->y[1] + (filt->alpha - filt->beta) *filt->y[2]))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	edd3 7a00 	vldr	s15, [r3]
 8003ffc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004004:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	edd3 7a06 	vldr	s15, [r3, #24]
 800400e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	ed93 6a00 	vldr	s12, [r3]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	edd3 7a01 	vldr	s15, [r3, #4]
 800401e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	edd3 7a07 	vldr	s15, [r3, #28]
 8004028:	ee66 7a27 	vmul.f32	s15, s12, s15
 800402c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004030:	ee77 6a67 	vsub.f32	s13, s14, s15
			   / (filt->alpha + filt->beta);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	ed93 7a00 	vldr	s14, [r3]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004040:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004044:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	edc3 7a05 	vstr	s15, [r3, #20]
			   
	return filt->y[0];
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	ee07 3a90 	vmov	s15, r3
}
 8004056:	eeb0 0a67 	vmov.f32	s0, s15
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406a:	f107 0314 	add.w	r3, r7, #20
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	4b39      	ldr	r3, [pc, #228]	; (8004160 <MX_GPIO_Init+0xfc>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	4a38      	ldr	r2, [pc, #224]	; (8004160 <MX_GPIO_Init+0xfc>)
 8004080:	f043 0304 	orr.w	r3, r3, #4
 8004084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004086:	4b36      	ldr	r3, [pc, #216]	; (8004160 <MX_GPIO_Init+0xfc>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <MX_GPIO_Init+0xfc>)
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	4a32      	ldr	r2, [pc, #200]	; (8004160 <MX_GPIO_Init+0xfc>)
 8004098:	f043 0320 	orr.w	r3, r3, #32
 800409c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800409e:	4b30      	ldr	r3, [pc, #192]	; (8004160 <MX_GPIO_Init+0xfc>)
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <MX_GPIO_Init+0xfc>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	4a2c      	ldr	r2, [pc, #176]	; (8004160 <MX_GPIO_Init+0xfc>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b6:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <MX_GPIO_Init+0xfc>)
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c2:	4b27      	ldr	r3, [pc, #156]	; (8004160 <MX_GPIO_Init+0xfc>)
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	4a26      	ldr	r2, [pc, #152]	; (8004160 <MX_GPIO_Init+0xfc>)
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ce:	4b24      	ldr	r3, [pc, #144]	; (8004160 <MX_GPIO_Init+0xfc>)
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	607b      	str	r3, [r7, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80040da:	2200      	movs	r2, #0
 80040dc:	2120      	movs	r1, #32
 80040de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040e2:	f003 f885 	bl	80071f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80040e6:	2200      	movs	r2, #0
 80040e8:	2110      	movs	r1, #16
 80040ea:	481e      	ldr	r0, [pc, #120]	; (8004164 <MX_GPIO_Init+0x100>)
 80040ec:	f003 f880 	bl	80071f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80040f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80040f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80040fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	4619      	mov	r1, r3
 8004106:	4818      	ldr	r0, [pc, #96]	; (8004168 <MX_GPIO_Init+0x104>)
 8004108:	f002 fef0 	bl	8006eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800410c:	2320      	movs	r3, #32
 800410e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004110:	2301      	movs	r3, #1
 8004112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004118:	2300      	movs	r3, #0
 800411a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800411c:	f107 0314 	add.w	r3, r7, #20
 8004120:	4619      	mov	r1, r3
 8004122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004126:	f002 fee1 	bl	8006eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800412a:	2310      	movs	r3, #16
 800412c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412e:	2301      	movs	r3, #1
 8004130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800413a:	f107 0314 	add.w	r3, r7, #20
 800413e:	4619      	mov	r1, r3
 8004140:	4808      	ldr	r0, [pc, #32]	; (8004164 <MX_GPIO_Init+0x100>)
 8004142:	f002 fed3 	bl	8006eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	2028      	movs	r0, #40	; 0x28
 800414c:	f002 fea6 	bl	8006e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004150:	2028      	movs	r0, #40	; 0x28
 8004152:	f002 febd 	bl	8006ed0 <HAL_NVIC_EnableIRQ>

}
 8004156:	bf00      	nop
 8004158:	3728      	adds	r7, #40	; 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
 8004164:	48000400 	.word	0x48000400
 8004168:	48000800 	.word	0x48000800

0800416c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004170:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <MX_I2C1_Init+0x80>)
 8004172:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <MX_I2C1_Init+0x84>)
 8004174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802172;
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <MX_I2C1_Init+0x80>)
 8004178:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <MX_I2C1_Init+0x88>)
 800417a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800417c:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <MX_I2C1_Init+0x80>)
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <MX_I2C1_Init+0x80>)
 8004184:	2201      	movs	r2, #1
 8004186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004188:	4b18      	ldr	r3, [pc, #96]	; (80041ec <MX_I2C1_Init+0x80>)
 800418a:	2200      	movs	r2, #0
 800418c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <MX_I2C1_Init+0x80>)
 8004190:	2200      	movs	r2, #0
 8004192:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <MX_I2C1_Init+0x80>)
 8004196:	2200      	movs	r2, #0
 8004198:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <MX_I2C1_Init+0x80>)
 800419c:	2200      	movs	r2, #0
 800419e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041a0:	4b12      	ldr	r3, [pc, #72]	; (80041ec <MX_I2C1_Init+0x80>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041a6:	4811      	ldr	r0, [pc, #68]	; (80041ec <MX_I2C1_Init+0x80>)
 80041a8:	f003 f85d 	bl	8007266 <HAL_I2C_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041b2:	f000 fb6d 	bl	8004890 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041b6:	2100      	movs	r1, #0
 80041b8:	480c      	ldr	r0, [pc, #48]	; (80041ec <MX_I2C1_Init+0x80>)
 80041ba:	f003 fdb7 	bl	8007d2c <HAL_I2CEx_ConfigAnalogFilter>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80041c4:	f000 fb64 	bl	8004890 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80041c8:	2100      	movs	r1, #0
 80041ca:	4808      	ldr	r0, [pc, #32]	; (80041ec <MX_I2C1_Init+0x80>)
 80041cc:	f003 fdf9 	bl	8007dc2 <HAL_I2CEx_ConfigDigitalFilter>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80041d6:	f000 fb5b 	bl	8004890 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <MX_I2C1_Init+0x8c>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a06      	ldr	r2, [pc, #24]	; (80041f8 <MX_I2C1_Init+0x8c>)
 80041e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000224 	.word	0x20000224
 80041f0:	40005400 	.word	0x40005400
 80041f4:	00802172 	.word	0x00802172
 80041f8:	40010000 	.word	0x40010000

080041fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b09e      	sub	sp, #120	; 0x78
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004204:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004214:	f107 0310 	add.w	r3, r7, #16
 8004218:	2254      	movs	r2, #84	; 0x54
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f006 f8b9 	bl	800a394 <memset>
  if(i2cHandle->Instance==I2C1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_I2C_MspInit+0xa8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d136      	bne.n	800429a <HAL_I2C_MspInit+0x9e>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004230:	2300      	movs	r3, #0
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004234:	f107 0310 	add.w	r3, r7, #16
 8004238:	4618      	mov	r0, r3
 800423a:	f004 fc29 	bl	8008a90 <HAL_RCCEx_PeriphCLKConfig>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004244:	f000 fb24 	bl	8004890 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <HAL_I2C_MspInit+0xac>)
 800424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424c:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <HAL_I2C_MspInit+0xac>)
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004254:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <HAL_I2C_MspInit+0xac>)
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004260:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004264:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004266:	2312      	movs	r3, #18
 8004268:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	2300      	movs	r3, #0
 800426c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426e:	2300      	movs	r3, #0
 8004270:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004272:	2304      	movs	r3, #4
 8004274:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004276:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800427a:	4619      	mov	r1, r3
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <HAL_I2C_MspInit+0xb0>)
 800427e:	f002 fe35 	bl	8006eec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_I2C_MspInit+0xac>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <HAL_I2C_MspInit+0xac>)
 8004288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_I2C_MspInit+0xac>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800429a:	bf00      	nop
 800429c:	3778      	adds	r7, #120	; 0x78
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40005400 	.word	0x40005400
 80042a8:	40021000 	.word	0x40021000
 80042ac:	48000400 	.word	0x48000400

080042b0 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <DWT_Init+0x28>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <DWT_Init+0x28>)
 80042ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042be:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <DWT_Init+0x2c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a05      	ldr	r2, [pc, #20]	; (80042dc <DWT_Init+0x2c>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	6013      	str	r3, [r2, #0]
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000edf0 	.word	0xe000edf0
 80042dc:	e0001000 	.word	0xe0001000

080042e0 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint64_t micros(void){
 80042e0:	b4b0      	push	{r4, r5, r7}
 80042e2:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <micros+0x2c>)
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <micros+0x30>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4909      	ldr	r1, [pc, #36]	; (8004314 <micros+0x34>)
 80042ee:	fba1 1303 	umull	r1, r3, r1, r3
 80042f2:	0c9b      	lsrs	r3, r3, #18
 80042f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f8:	2200      	movs	r2, #0
 80042fa:	461c      	mov	r4, r3
 80042fc:	4615      	mov	r5, r2
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
}
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	bcb0      	pop	{r4, r5, r7}
 800430a:	4770      	bx	lr
 800430c:	e0001000 	.word	0xe0001000
 8004310:	20000024 	.word	0x20000024
 8004314:	431bde83 	.word	0x431bde83

08004318 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	b29a      	uxth	r2, r3
 8004328:	f04f 33ff 	mov.w	r3, #4294967295
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	4804      	ldr	r0, [pc, #16]	; (8004340 <_write+0x28>)
 8004330:	f005 f9bc 	bl	80096ac <HAL_UART_Transmit>
	return len;
 8004334:	687b      	ldr	r3, [r7, #4]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200004f0 	.word	0x200004f0
 8004344:	00000000 	.word	0x00000000

08004348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	ed2d 8b04 	vpush	{d8-d9}
 8004350:	b087      	sub	sp, #28
 8004352:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004354:	f002 fc91 	bl	8006c7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004358:	f000 fa3e 	bl	80047d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800435c:	f7ff fe82 	bl	8004064 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8004360:	f002 fbc0 	bl	8006ae4 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8004364:	f7ff ff02 	bl	800416c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8004368:	f7ff ffa2 	bl	80042b0 <DWT_Init>

  //Init filter with predefined settings
  LPFTwoPole_Init(&LPF_accel_x, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 800436c:	4bcc      	ldr	r3, [pc, #816]	; (80046a0 <main+0x358>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	eef0 0a67 	vmov.f32	s1, s15
 8004376:	ed9f 0acb 	vldr	s0, [pc, #812]	; 80046a4 <main+0x35c>
 800437a:	2101      	movs	r1, #1
 800437c:	48ca      	ldr	r0, [pc, #808]	; (80046a8 <main+0x360>)
 800437e:	f7ff fccb 	bl	8003d18 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_y, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8004382:	4bc7      	ldr	r3, [pc, #796]	; (80046a0 <main+0x358>)
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	eef0 0a67 	vmov.f32	s1, s15
 800438c:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 80046a4 <main+0x35c>
 8004390:	2101      	movs	r1, #1
 8004392:	48c6      	ldr	r0, [pc, #792]	; (80046ac <main+0x364>)
 8004394:	f7ff fcc0 	bl	8003d18 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_z, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8004398:	4bc1      	ldr	r3, [pc, #772]	; (80046a0 <main+0x358>)
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	eef0 0a67 	vmov.f32	s1, s15
 80043a2:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 80046a4 <main+0x35c>
 80043a6:	2101      	movs	r1, #1
 80043a8:	48c1      	ldr	r0, [pc, #772]	; (80046b0 <main+0x368>)
 80043aa:	f7ff fcb5 	bl	8003d18 <LPFTwoPole_Init>

  LPFTwoPole_Init(&LPF_gyro_x, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 80043ae:	4bbc      	ldr	r3, [pc, #752]	; (80046a0 <main+0x358>)
 80043b0:	edd3 7a00 	vldr	s15, [r3]
 80043b4:	eef0 0a67 	vmov.f32	s1, s15
 80043b8:	ed9f 0abe 	vldr	s0, [pc, #760]	; 80046b4 <main+0x36c>
 80043bc:	2101      	movs	r1, #1
 80043be:	48be      	ldr	r0, [pc, #760]	; (80046b8 <main+0x370>)
 80043c0:	f7ff fcaa 	bl	8003d18 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_y, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 80043c4:	4bb6      	ldr	r3, [pc, #728]	; (80046a0 <main+0x358>)
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	eef0 0a67 	vmov.f32	s1, s15
 80043ce:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80046b4 <main+0x36c>
 80043d2:	2101      	movs	r1, #1
 80043d4:	48b9      	ldr	r0, [pc, #740]	; (80046bc <main+0x374>)
 80043d6:	f7ff fc9f 	bl	8003d18 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_z, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 80043da:	4bb1      	ldr	r3, [pc, #708]	; (80046a0 <main+0x358>)
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	eef0 0a67 	vmov.f32	s1, s15
 80043e4:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80046b4 <main+0x36c>
 80043e8:	2101      	movs	r1, #1
 80043ea:	48b5      	ldr	r0, [pc, #724]	; (80046c0 <main+0x378>)
 80043ec:	f7ff fc94 	bl	8003d18 <LPFTwoPole_Init>

  NotchFilterInit(&NF_gyro_x, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 80043f0:	4bab      	ldr	r3, [pc, #684]	; (80046a0 <main+0x358>)
 80043f2:	edd3 7a00 	vldr	s15, [r3]
 80043f6:	eeb0 1a67 	vmov.f32	s2, s15
 80043fa:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80043fe:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80046c4 <main+0x37c>
 8004402:	48b1      	ldr	r0, [pc, #708]	; (80046c8 <main+0x380>)
 8004404:	f7ff fd30 	bl	8003e68 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_y, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8004408:	4ba5      	ldr	r3, [pc, #660]	; (80046a0 <main+0x358>)
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	eeb0 1a67 	vmov.f32	s2, s15
 8004412:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004416:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80046c4 <main+0x37c>
 800441a:	48ac      	ldr	r0, [pc, #688]	; (80046cc <main+0x384>)
 800441c:	f7ff fd24 	bl	8003e68 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_z, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8004420:	4b9f      	ldr	r3, [pc, #636]	; (80046a0 <main+0x358>)
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	eeb0 1a67 	vmov.f32	s2, s15
 800442a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800442e:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 80046c4 <main+0x37c>
 8004432:	48a7      	ldr	r0, [pc, #668]	; (80046d0 <main+0x388>)
 8004434:	f7ff fd18 	bl	8003e68 <NotchFilterInit>

  //Init state estimators
  quaternionInit(&quaternion_t, sample_time_us_f32);
 8004438:	4ba6      	ldr	r3, [pc, #664]	; (80046d4 <main+0x38c>)
 800443a:	edd3 7a00 	vldr	s15, [r3]
 800443e:	eeb0 0a67 	vmov.f32	s0, s15
 8004442:	48a5      	ldr	r0, [pc, #660]	; (80046d8 <main+0x390>)
 8004444:	f001 fda4 	bl	8005f90 <quaternionInit>
  initFusionAHRS(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, sample_time_sec_f32);
 8004448:	4b95      	ldr	r3, [pc, #596]	; (80046a0 <main+0x358>)
 800444a:	edd3 7a00 	vldr	s15, [r3]
 800444e:	eeb0 0a67 	vmov.f32	s0, s15
 8004452:	4aa2      	ldr	r2, [pc, #648]	; (80046dc <main+0x394>)
 8004454:	49a2      	ldr	r1, [pc, #648]	; (80046e0 <main+0x398>)
 8004456:	48a3      	ldr	r0, [pc, #652]	; (80046e4 <main+0x39c>)
 8004458:	f7fe fe74 	bl	8003144 <initFusionAHRS>

  //Init sensors
	while (MPU6050_Init(&hi2c1, &imu_t));
 800445c:	bf00      	nop
 800445e:	49a2      	ldr	r1, [pc, #648]	; (80046e8 <main+0x3a0>)
 8004460:	48a2      	ldr	r0, [pc, #648]	; (80046ec <main+0x3a4>)
 8004462:	f000 fa1b 	bl	800489c <MPU6050_Init>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f8      	bne.n	800445e <main+0x116>

	if (imu_t.CALIBRATIN_OK_u8 == TRUE)
 800446c:	4b9e      	ldr	r3, [pc, #632]	; (80046e8 <main+0x3a0>)
 800446e:	7e1b      	ldrb	r3, [r3, #24]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d105      	bne.n	8004480 <main+0x138>
	{
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8004474:	2201      	movs	r2, #1
 8004476:	2120      	movs	r1, #32
 8004478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800447c:	f002 feb8 	bl	80071f0 <HAL_GPIO_WritePin>
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	//Get system time in us
	timer_u64 = micros();
 8004480:	f7ff ff2e 	bl	80042e0 <micros>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4999      	ldr	r1, [pc, #612]	; (80046f0 <main+0x3a8>)
 800448a:	e9c1 2300 	strd	r2, r3, [r1]

	if ( ((timer_u64 - lastTime_u64) >= sample_time_us_f32) && (imu_t.CALIBRATIN_OK_u8 == TRUE) )
 800448e:	4b98      	ldr	r3, [pc, #608]	; (80046f0 <main+0x3a8>)
 8004490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004494:	4b97      	ldr	r3, [pc, #604]	; (80046f4 <main+0x3ac>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	1a84      	subs	r4, r0, r2
 800449c:	eb61 0503 	sbc.w	r5, r1, r3
 80044a0:	4620      	mov	r0, r4
 80044a2:	4629      	mov	r1, r5
 80044a4:	f7fc fce0 	bl	8000e68 <__aeabi_ul2f>
 80044a8:	ee07 0a10 	vmov	s14, r0
 80044ac:	4b89      	ldr	r3, [pc, #548]	; (80046d4 <main+0x38c>)
 80044ae:	edd3 7a00 	vldr	s15, [r3]
 80044b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ba:	f2c0 8158 	blt.w	800476e <main+0x426>
 80044be:	4b8a      	ldr	r3, [pc, #552]	; (80046e8 <main+0x3a0>)
 80044c0:	7e1b      	ldrb	r3, [r3, #24]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f040 8153 	bne.w	800476e <main+0x426>
	{
		lastTime_u64 = micros();
 80044c8:	f7ff ff0a 	bl	80042e0 <micros>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4988      	ldr	r1, [pc, #544]	; (80046f4 <main+0x3ac>)
 80044d2:	e9c1 2300 	strd	r2, r3, [r1]

		//Read MPU6050 sensor data
		readMPU6050(&hi2c1, &imu_t);
 80044d6:	4984      	ldr	r1, [pc, #528]	; (80046e8 <main+0x3a0>)
 80044d8:	4884      	ldr	r0, [pc, #528]	; (80046ec <main+0x3a4>)
 80044da:	f000 fa21 	bl	8004920 <readMPU6050>

		//Get accelerometer data in "g" and run LPF
		accelLowPassFiltered_f32[0] = (LPFTwoPole_Update(&LPF_accel_x, imu_t.MPU6050_Accel_f32[0]));
 80044de:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <main+0x3a0>)
 80044e0:	edd3 7a00 	vldr	s15, [r3]
 80044e4:	eeb0 0a67 	vmov.f32	s0, s15
 80044e8:	486f      	ldr	r0, [pc, #444]	; (80046a8 <main+0x360>)
 80044ea:	f7ff fc85 	bl	8003df8 <LPFTwoPole_Update>
 80044ee:	eef0 7a40 	vmov.f32	s15, s0
 80044f2:	4b81      	ldr	r3, [pc, #516]	; (80046f8 <main+0x3b0>)
 80044f4:	edc3 7a00 	vstr	s15, [r3]
		accelLowPassFiltered_f32[1] = (LPFTwoPole_Update(&LPF_accel_y, imu_t.MPU6050_Accel_f32[1]));
 80044f8:	4b7b      	ldr	r3, [pc, #492]	; (80046e8 <main+0x3a0>)
 80044fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80044fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004502:	486a      	ldr	r0, [pc, #424]	; (80046ac <main+0x364>)
 8004504:	f7ff fc78 	bl	8003df8 <LPFTwoPole_Update>
 8004508:	eef0 7a40 	vmov.f32	s15, s0
 800450c:	4b7a      	ldr	r3, [pc, #488]	; (80046f8 <main+0x3b0>)
 800450e:	edc3 7a01 	vstr	s15, [r3, #4]
		accelLowPassFiltered_f32[2] = (LPFTwoPole_Update(&LPF_accel_z, imu_t.MPU6050_Accel_f32[2]));
 8004512:	4b75      	ldr	r3, [pc, #468]	; (80046e8 <main+0x3a0>)
 8004514:	edd3 7a02 	vldr	s15, [r3, #8]
 8004518:	eeb0 0a67 	vmov.f32	s0, s15
 800451c:	4864      	ldr	r0, [pc, #400]	; (80046b0 <main+0x368>)
 800451e:	f7ff fc6b 	bl	8003df8 <LPFTwoPole_Update>
 8004522:	eef0 7a40 	vmov.f32	s15, s0
 8004526:	4b74      	ldr	r3, [pc, #464]	; (80046f8 <main+0x3b0>)
 8004528:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get gyro data in "deg/s" and run LPF
		gyroLowPassFiltered_f32[0] = NotchFilter_Update(&NF_gyro_x, imu_t.MPU6050_Gyro_f32[0]);
 800452c:	4b6e      	ldr	r3, [pc, #440]	; (80046e8 <main+0x3a0>)
 800452e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004532:	eeb0 0a67 	vmov.f32	s0, s15
 8004536:	4864      	ldr	r0, [pc, #400]	; (80046c8 <main+0x380>)
 8004538:	f7ff fd22 	bl	8003f80 <NotchFilter_Update>
 800453c:	eef0 7a40 	vmov.f32	s15, s0
 8004540:	4b6e      	ldr	r3, [pc, #440]	; (80046fc <main+0x3b4>)
 8004542:	edc3 7a00 	vstr	s15, [r3]
		gyroLowPassFiltered_f32[1] = NotchFilter_Update(&NF_gyro_y, imu_t.MPU6050_Gyro_f32[1]);
 8004546:	4b68      	ldr	r3, [pc, #416]	; (80046e8 <main+0x3a0>)
 8004548:	edd3 7a04 	vldr	s15, [r3, #16]
 800454c:	eeb0 0a67 	vmov.f32	s0, s15
 8004550:	485e      	ldr	r0, [pc, #376]	; (80046cc <main+0x384>)
 8004552:	f7ff fd15 	bl	8003f80 <NotchFilter_Update>
 8004556:	eef0 7a40 	vmov.f32	s15, s0
 800455a:	4b68      	ldr	r3, [pc, #416]	; (80046fc <main+0x3b4>)
 800455c:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroLowPassFiltered_f32[2] = NotchFilter_Update(&NF_gyro_z, imu_t.MPU6050_Gyro_f32[2]);
 8004560:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <main+0x3a0>)
 8004562:	edd3 7a05 	vldr	s15, [r3, #20]
 8004566:	eeb0 0a67 	vmov.f32	s0, s15
 800456a:	4859      	ldr	r0, [pc, #356]	; (80046d0 <main+0x388>)
 800456c:	f7ff fd08 	bl	8003f80 <NotchFilter_Update>
 8004570:	eef0 7a40 	vmov.f32	s15, s0
 8004574:	4b61      	ldr	r3, [pc, #388]	; (80046fc <main+0x3b4>)
 8004576:	edc3 7a02 	vstr	s15, [r3, #8]

		//Put gyro data into Notch Filter to flat-out any data in specific frequency band
		gyroNotchFiltered_f32[0] = (LPFTwoPole_Update(&LPF_gyro_x, gyroLowPassFiltered_f32[0]));
 800457a:	4b60      	ldr	r3, [pc, #384]	; (80046fc <main+0x3b4>)
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	eeb0 0a67 	vmov.f32	s0, s15
 8004584:	484c      	ldr	r0, [pc, #304]	; (80046b8 <main+0x370>)
 8004586:	f7ff fc37 	bl	8003df8 <LPFTwoPole_Update>
 800458a:	eef0 7a40 	vmov.f32	s15, s0
 800458e:	4b5c      	ldr	r3, [pc, #368]	; (8004700 <main+0x3b8>)
 8004590:	edc3 7a00 	vstr	s15, [r3]
		gyroNotchFiltered_f32[1] = (LPFTwoPole_Update(&LPF_gyro_y, gyroLowPassFiltered_f32[1]));
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <main+0x3b4>)
 8004596:	edd3 7a01 	vldr	s15, [r3, #4]
 800459a:	eeb0 0a67 	vmov.f32	s0, s15
 800459e:	4847      	ldr	r0, [pc, #284]	; (80046bc <main+0x374>)
 80045a0:	f7ff fc2a 	bl	8003df8 <LPFTwoPole_Update>
 80045a4:	eef0 7a40 	vmov.f32	s15, s0
 80045a8:	4b55      	ldr	r3, [pc, #340]	; (8004700 <main+0x3b8>)
 80045aa:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroNotchFiltered_f32[2] = (LPFTwoPole_Update(&LPF_gyro_z, gyroLowPassFiltered_f32[2]));
 80045ae:	4b53      	ldr	r3, [pc, #332]	; (80046fc <main+0x3b4>)
 80045b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80045b4:	eeb0 0a67 	vmov.f32	s0, s15
 80045b8:	4841      	ldr	r0, [pc, #260]	; (80046c0 <main+0x378>)
 80045ba:	f7ff fc1d 	bl	8003df8 <LPFTwoPole_Update>
 80045be:	eef0 7a40 	vmov.f32	s15, s0
 80045c2:	4b4f      	ldr	r3, [pc, #316]	; (8004700 <main+0x3b8>)
 80045c4:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get state estimations, using quaternion and fusion-quaternion based estimators
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 80045c8:	4b4b      	ldr	r3, [pc, #300]	; (80046f8 <main+0x3b0>)
 80045ca:	ed93 8a00 	vldr	s16, [r3]
 80045ce:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <main+0x3b0>)
 80045d0:	edd3 8a01 	vldr	s17, [r3, #4]
 80045d4:	4b48      	ldr	r3, [pc, #288]	; (80046f8 <main+0x3b0>)
 80045d6:	ed93 9a02 	vldr	s18, [r3, #8]
				gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 80045da:	4b49      	ldr	r3, [pc, #292]	; (8004700 <main+0x3b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fb ffda 	bl	8000598 <__aeabi_f2d>
 80045e4:	a32c      	add	r3, pc, #176	; (adr r3, 8004698 <main+0x350>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f7fc f82d 	bl	8000648 <__aeabi_dmul>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	f7fc fb1f 	bl	8000c38 <__aeabi_d2f>
 80045fa:	4606      	mov	r6, r0
				gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 80045fc:	4b40      	ldr	r3, [pc, #256]	; (8004700 <main+0x3b8>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ffc9 	bl	8000598 <__aeabi_f2d>
 8004606:	a324      	add	r3, pc, #144	; (adr r3, 8004698 <main+0x350>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fc f81c 	bl	8000648 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	f7fc fb0e 	bl	8000c38 <__aeabi_d2f>
 800461c:	4680      	mov	r8, r0
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 800461e:	4b38      	ldr	r3, [pc, #224]	; (8004700 <main+0x3b8>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fb ffb8 	bl	8000598 <__aeabi_f2d>
 8004628:	a31b      	add	r3, pc, #108	; (adr r3, 8004698 <main+0x350>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f7fc f80b 	bl	8000648 <__aeabi_dmul>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	f7fc fafd 	bl	8000c38 <__aeabi_d2f>
 800463e:	4603      	mov	r3, r0
 8004640:	ee02 3a90 	vmov	s5, r3
 8004644:	ee02 8a10 	vmov	s4, r8
 8004648:	ee01 6a90 	vmov	s3, r6
 800464c:	eeb0 1a49 	vmov.f32	s2, s18
 8004650:	eef0 0a68 	vmov.f32	s1, s17
 8004654:	eeb0 0a48 	vmov.f32	s0, s16
 8004658:	481f      	ldr	r0, [pc, #124]	; (80046d8 <main+0x390>)
 800465a:	f001 fcf3 	bl	8006044 <quaternionUpdate>

		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <main+0x3b0>)
 8004660:	ed93 8a00 	vldr	s16, [r3]
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <main+0x3b0>)
 8004666:	edd3 8a01 	vldr	s17, [r3, #4]
 800466a:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <main+0x3b0>)
 800466c:	ed93 9a02 	vldr	s18, [r3, #8]
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8004670:	4b23      	ldr	r3, [pc, #140]	; (8004700 <main+0x3b8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7fb ff8f 	bl	8000598 <__aeabi_f2d>
 800467a:	a307      	add	r3, pc, #28	; (adr r3, 8004698 <main+0x350>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fb ffe2 	bl	8000648 <__aeabi_dmul>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	f7fc fad4 	bl	8000c38 <__aeabi_d2f>
 8004690:	4606      	mov	r6, r0
 8004692:	e037      	b.n	8004704 <main+0x3bc>
 8004694:	f3af 8000 	nop.w
 8004698:	a2529d39 	.word	0xa2529d39
 800469c:	3f91df46 	.word	0x3f91df46
 80046a0:	20000018 	.word	0x20000018
 80046a4:	43820000 	.word	0x43820000
 80046a8:	20000378 	.word	0x20000378
 80046ac:	20000390 	.word	0x20000390
 80046b0:	200003a8 	.word	0x200003a8
 80046b4:	43800000 	.word	0x43800000
 80046b8:	200003c0 	.word	0x200003c0
 80046bc:	200003d8 	.word	0x200003d8
 80046c0:	200003f0 	.word	0x200003f0
 80046c4:	42940000 	.word	0x42940000
 80046c8:	20000318 	.word	0x20000318
 80046cc:	20000338 	.word	0x20000338
 80046d0:	20000358 	.word	0x20000358
 80046d4:	2000001c 	.word	0x2000001c
 80046d8:	2000028c 	.word	0x2000028c
 80046dc:	20000308 	.word	0x20000308
 80046e0:	200002d8 	.word	0x200002d8
 80046e4:	200002bc 	.word	0x200002bc
 80046e8:	20000270 	.word	0x20000270
 80046ec:	20000224 	.word	0x20000224
 80046f0:	20000430 	.word	0x20000430
 80046f4:	20000438 	.word	0x20000438
 80046f8:	20000408 	.word	0x20000408
 80046fc:	20000414 	.word	0x20000414
 8004700:	20000420 	.word	0x20000420
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8004704:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <main+0x478>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4618      	mov	r0, r3
 800470a:	f7fb ff45 	bl	8000598 <__aeabi_f2d>
 800470e:	a32a      	add	r3, pc, #168	; (adr r3, 80047b8 <main+0x470>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb ff98 	bl	8000648 <__aeabi_dmul>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f7fc fa8a 	bl	8000c38 <__aeabi_d2f>
 8004724:	4680      	mov	r8, r0
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8004726:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <main+0x478>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fb ff34 	bl	8000598 <__aeabi_f2d>
 8004730:	a321      	add	r3, pc, #132	; (adr r3, 80047b8 <main+0x470>)
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f7fb ff87 	bl	8000648 <__aeabi_dmul>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	f7fc fa79 	bl	8000c38 <__aeabi_d2f>
 8004746:	4603      	mov	r3, r0
 8004748:	ee02 3a90 	vmov	s5, r3
 800474c:	ee02 8a10 	vmov	s4, r8
 8004750:	ee01 6a90 	vmov	s3, r6
 8004754:	eeb0 1a49 	vmov.f32	s2, s18
 8004758:	eef0 0a68 	vmov.f32	s1, s17
 800475c:	eeb0 0a48 	vmov.f32	s0, s16
 8004760:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <main+0x47c>)
 8004762:	4919      	ldr	r1, [pc, #100]	; (80047c8 <main+0x480>)
 8004764:	4819      	ldr	r0, [pc, #100]	; (80047cc <main+0x484>)
 8004766:	f7fe fd15 	bl	8003194 <getFusionAHRS_6DoF>

		newData_u8 = TRUE; //Set newData to high for activate UART printer
 800476a:	2301      	movs	r3, #1
 800476c:	71fb      	strb	r3, [r7, #7]

	}//end of timer if

	if(newData_u8)
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f43f ae85 	beq.w	8004480 <main+0x138>
	{
		printf("%f, %f, %f\r\n",
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <main+0x488>)
 8004778:	699b      	ldr	r3, [r3, #24]
		printf("%f, %f, %f\r\n",
 800477a:	4618      	mov	r0, r3
 800477c:	f7fb ff0c 	bl	8000598 <__aeabi_f2d>
 8004780:	4682      	mov	sl, r0
 8004782:	468b      	mov	fp, r1
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8004784:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <main+0x488>)
 8004786:	695b      	ldr	r3, [r3, #20]
		printf("%f, %f, %f\r\n",
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb ff05 	bl	8000598 <__aeabi_f2d>
 800478e:	4680      	mov	r8, r0
 8004790:	4689      	mov	r9, r1
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <main+0x488>)
 8004794:	69db      	ldr	r3, [r3, #28]
		printf("%f, %f, %f\r\n",
 8004796:	4618      	mov	r0, r3
 8004798:	f7fb fefe 	bl	8000598 <__aeabi_f2d>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047a4:	e9cd 8900 	strd	r8, r9, [sp]
 80047a8:	4652      	mov	r2, sl
 80047aa:	465b      	mov	r3, fp
 80047ac:	4809      	ldr	r0, [pc, #36]	; (80047d4 <main+0x48c>)
 80047ae:	f006 fc73 	bl	800b098 <iprintf>
//				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL);
		newData_u8 = FALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	71fb      	strb	r3, [r7, #7]
	timer_u64 = micros();
 80047b6:	e663      	b.n	8004480 <main+0x138>
 80047b8:	a2529d39 	.word	0xa2529d39
 80047bc:	3f91df46 	.word	0x3f91df46
 80047c0:	20000420 	.word	0x20000420
 80047c4:	20000308 	.word	0x20000308
 80047c8:	200002d8 	.word	0x200002d8
 80047cc:	200002bc 	.word	0x200002bc
 80047d0:	2000028c 	.word	0x2000028c
 80047d4:	0801179c 	.word	0x0801179c

080047d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b094      	sub	sp, #80	; 0x50
 80047dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047de:	f107 0318 	add.w	r3, r7, #24
 80047e2:	2238      	movs	r2, #56	; 0x38
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f005 fdd4 	bl	800a394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047ec:	1d3b      	adds	r3, r7, #4
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80047fa:	2000      	movs	r0, #0
 80047fc:	f003 fb2e 	bl	8007e5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004800:	2301      	movs	r3, #1
 8004802:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004808:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800480a:	2302      	movs	r3, #2
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800480e:	2303      	movs	r3, #3
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8004812:	2306      	movs	r3, #6
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004816:	2355      	movs	r3, #85	; 0x55
 8004818:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800481a:	2302      	movs	r3, #2
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800481e:	2302      	movs	r3, #2
 8004820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004822:	2302      	movs	r3, #2
 8004824:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004826:	f107 0318 	add.w	r3, r7, #24
 800482a:	4618      	mov	r0, r3
 800482c:	f003 fbca 	bl	8007fc4 <HAL_RCC_OscConfig>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004836:	f000 f82b 	bl	8004890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800483a:	230f      	movs	r3, #15
 800483c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800483e:	2303      	movs	r3, #3
 8004840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	2104      	movs	r1, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f003 fece 	bl	80085f4 <HAL_RCC_ClockConfig>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800485e:	f000 f817 	bl	8004890 <Error_Handler>
  }
}
 8004862:	bf00      	nop
 8004864:	3750      	adds	r7, #80	; 0x50
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800487e:	f002 fa15 	bl	8006cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40013400 	.word	0x40013400

08004890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004894:	b672      	cpsid	i
}
 8004896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004898:	e7fe      	b.n	8004898 <Error_Handler+0x8>
	...

0800489c <MPU6050_Init>:
float aRes_MPU6050, gRes_MPU6050;      // scale resolutions per LSB for the sensors
float gyroBias_MPU6050[3] = {0, 0, 0}, accelBias_MPU6050[3] = {0, 0, 0};      // Bias corrections for gyro and accelerometer
float SelfTest_MPU6050[12];    // holds results of gyro and accelerometer self test

// Main Init function
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct){
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af04      	add	r7, sp, #16
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]

	// Init user variables
	DataStruct->CALIBRATIN_OK_u8 = 0;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2200      	movs	r2, #0
 80048aa:	761a      	strb	r2, [r3, #24]

	uint8_t readData;

	//read MPU6050 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, WHO_AM_I_MPU6050, 1, &readData, 1, i2c_timeout);
 80048ac:	2364      	movs	r3, #100	; 0x64
 80048ae:	9302      	str	r3, [sp, #8]
 80048b0:	2301      	movs	r3, #1
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	f107 030f 	add.w	r3, r7, #15
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	2301      	movs	r3, #1
 80048bc:	2275      	movs	r2, #117	; 0x75
 80048be:	21d0      	movs	r1, #208	; 0xd0
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f002 fe73 	bl	80075ac <HAL_I2C_Mem_Read>

	if (readData == 104) {
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b68      	cmp	r3, #104	; 0x68
 80048ca:	d11d      	bne.n	8004908 <MPU6050_Init+0x6c>

		//Start by performing self test and reporting values
		MPU6050SelfTest(I2Cx, SelfTest_MPU6050);
 80048cc:	4911      	ldr	r1, [pc, #68]	; (8004914 <MPU6050_Init+0x78>)
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fe82 	bl	80055d8 <MPU6050SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU6050(I2Cx, DataStruct, gyroBias_MPU6050, accelBias_MPU6050);
 80048d4:	4b10      	ldr	r3, [pc, #64]	; (8004918 <MPU6050_Init+0x7c>)
 80048d6:	4a11      	ldr	r2, [pc, #68]	; (800491c <MPU6050_Init+0x80>)
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa52 	bl	8004d84 <calibrateMPU6050>
		HAL_Delay(1000);
 80048e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048e4:	f002 fa00 	bl	8006ce8 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU6050(I2Cx);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f903 	bl	8004af4 <initMPU6050>
		HAL_Delay(1000);
 80048ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048f2:	f002 f9f9 	bl	8006ce8 <HAL_Delay>

		getMPU6050Ares();
 80048f6:	f000 f899 	bl	8004a2c <getMPU6050Ares>
		getMPU6050Gres();
 80048fa:	f000 f8c7 	bl	8004a8c <getMPU6050Gres>

		HAL_Delay(100);
 80048fe:	2064      	movs	r0, #100	; 0x64
 8004900:	f002 f9f2 	bl	8006ce8 <HAL_Delay>

		return 0;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <MPU6050_Init+0x6e>
	}
	return 1; // Loop forever if communication doesn't happen
 8004908:	2301      	movs	r3, #1
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000470 	.word	0x20000470
 8004918:	20000464 	.word	0x20000464
 800491c:	20000458 	.word	0x20000458

08004920 <readMPU6050>:

// Data read function
void readMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af04      	add	r7, sp, #16
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]

	uint8_t Data;
	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 800492a:	2364      	movs	r3, #100	; 0x64
 800492c:	9302      	str	r3, [sp, #8]
 800492e:	2301      	movs	r3, #1
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	f107 030f 	add.w	r3, r7, #15
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2301      	movs	r3, #1
 800493a:	223a      	movs	r2, #58	; 0x3a
 800493c:	21d0      	movs	r1, #208	; 0xd0
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f002 fe34 	bl	80075ac <HAL_I2C_Mem_Read>

	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d061      	beq.n	8004a12 <readMPU6050+0xf2>

		readMPU6050AccelData(I2Cx, accelRaw_MPU6050);  // Read the accelerometer x/y/z adc values
 800494e:	4933      	ldr	r1, [pc, #204]	; (8004a1c <readMPU6050+0xfc>)
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9b1 	bl	8004cb8 <readMPU6050AccelData>
		readMPU6050GyroData(I2Cx, gyroRaw_MPU6050);  // Read the gyro x/y/z adc values
 8004956:	4932      	ldr	r1, [pc, #200]	; (8004a20 <readMPU6050+0x100>)
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9e0 	bl	8004d1e <readMPU6050GyroData>

		// Now we'll calculate the accleration value into actual g's
		DataStruct->MPU6050_Accel_f32[0] = (float)accelRaw_MPU6050[0]*aRes_MPU6050; //- accelBias_MPU6050[0];  // get actual g value, this depends on scale being set
 800495e:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <readMPU6050+0xfc>)
 8004960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004964:	ee07 3a90 	vmov	s15, r3
 8004968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800496c:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <readMPU6050+0x104>)
 800496e:	edd3 7a00 	vldr	s15, [r3]
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	edc3 7a00 	vstr	s15, [r3]
		DataStruct->MPU6050_Accel_f32[1] = (float)accelRaw_MPU6050[1]*aRes_MPU6050; //- accelBias_MPU6050[1];
 800497c:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <readMPU6050+0xfc>)
 800497e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800498a:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <readMPU6050+0x104>)
 800498c:	edd3 7a00 	vldr	s15, [r3]
 8004990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	edc3 7a01 	vstr	s15, [r3, #4]
		DataStruct->MPU6050_Accel_f32[2] = (float)accelRaw_MPU6050[2]*aRes_MPU6050; //- accelBias_MPU6050[2];
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <readMPU6050+0xfc>)
 800499c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <readMPU6050+0x104>)
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	edc3 7a02 	vstr	s15, [r3, #8]

		// Calculate the gyro value into actual degrees per second
		DataStruct->MPU6050_Gyro_f32[0] = (float)gyroRaw_MPU6050[0]*gRes_MPU6050; //- gyroBias_MPU6050[0]; // get actual gyro value, this depends on scale being set
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <readMPU6050+0x100>)
 80049ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049c6:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <readMPU6050+0x108>)
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	edc3 7a03 	vstr	s15, [r3, #12]
		DataStruct->MPU6050_Gyro_f32[1] = (float)gyroRaw_MPU6050[1]*gRes_MPU6050; //- gyroBias_MPU6050[1];
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <readMPU6050+0x100>)
 80049d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e4:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <readMPU6050+0x108>)
 80049e6:	edd3 7a00 	vldr	s15, [r3]
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	edc3 7a04 	vstr	s15, [r3, #16]
		DataStruct->MPU6050_Gyro_f32[2] = (float)gyroRaw_MPU6050[2]*gRes_MPU6050; //- gyroBias_MPU6050[2];
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <readMPU6050+0x100>)
 80049f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <readMPU6050+0x108>)
 8004a04:	edd3 7a00 	vldr	s15, [r3]
 8004a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	edc3 7a05 	vstr	s15, [r3, #20]
	}
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000440 	.word	0x20000440
 8004a20:	20000448 	.word	0x20000448
 8004a24:	20000450 	.word	0x20000450
 8004a28:	20000454 	.word	0x20000454

08004a2c <getMPU6050Ares>:

// Accelerometer resolution scale calculator function
void getMPU6050Ares() {
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  switch (Ascale_MPU6050)
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <getMPU6050Ares+0x58>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d81f      	bhi.n	8004a78 <getMPU6050Ares+0x4c>
 8004a38:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <getMPU6050Ares+0x14>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a5b 	.word	0x08004a5b
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	08004a6f 	.word	0x08004a6f
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes_MPU6050 = 2.0/32768.0;
 8004a50:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <getMPU6050Ares+0x5c>)
 8004a52:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8004a56:	601a      	str	r2, [r3, #0]
          break;
 8004a58:	e00e      	b.n	8004a78 <getMPU6050Ares+0x4c>
    case AFS_4G:
          aRes_MPU6050 = 4.0/32768.0;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <getMPU6050Ares+0x5c>)
 8004a5c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8004a60:	601a      	str	r2, [r3, #0]
          break;
 8004a62:	e009      	b.n	8004a78 <getMPU6050Ares+0x4c>
    case AFS_8G:
          aRes_MPU6050 = 8.0/32768.0;
 8004a64:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <getMPU6050Ares+0x5c>)
 8004a66:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8004a6a:	601a      	str	r2, [r3, #0]
          break;
 8004a6c:	e004      	b.n	8004a78 <getMPU6050Ares+0x4c>
    case AFS_16G:
          aRes_MPU6050 = 16.0/32768.0;
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <getMPU6050Ares+0x5c>)
 8004a70:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8004a74:	601a      	str	r2, [r3, #0]
          break;
 8004a76:	bf00      	nop
  }
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000021 	.word	0x20000021
 8004a88:	20000450 	.word	0x20000450

08004a8c <getMPU6050Gres>:

// Gyro resolution scale calculator function
void getMPU6050Gres() {
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  switch (Gscale_MPU6050)
 8004a90:	4b12      	ldr	r3, [pc, #72]	; (8004adc <getMPU6050Gres+0x50>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d81b      	bhi.n	8004ad0 <getMPU6050Gres+0x44>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <getMPU6050Gres+0x14>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ab9 	.word	0x08004ab9
 8004aa8:	08004ac1 	.word	0x08004ac1
 8004aac:	08004ac9 	.word	0x08004ac9
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes_MPU6050 = 250.0/32768.0;
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <getMPU6050Gres+0x54>)
 8004ab2:	4a0c      	ldr	r2, [pc, #48]	; (8004ae4 <getMPU6050Gres+0x58>)
 8004ab4:	601a      	str	r2, [r3, #0]
          break;
 8004ab6:	e00b      	b.n	8004ad0 <getMPU6050Gres+0x44>
    case GFS_500DPS:
          gRes_MPU6050 = 500.0/32768.0;
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <getMPU6050Gres+0x54>)
 8004aba:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <getMPU6050Gres+0x5c>)
 8004abc:	601a      	str	r2, [r3, #0]
          break;
 8004abe:	e007      	b.n	8004ad0 <getMPU6050Gres+0x44>
    case GFS_1000DPS:
          gRes_MPU6050 = 1000.0/32768.0;
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <getMPU6050Gres+0x54>)
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <getMPU6050Gres+0x60>)
 8004ac4:	601a      	str	r2, [r3, #0]
          break;
 8004ac6:	e003      	b.n	8004ad0 <getMPU6050Gres+0x44>
    case GFS_2000DPS:
          gRes_MPU6050 = 2000.0/32768.0;
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <getMPU6050Gres+0x54>)
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <getMPU6050Gres+0x64>)
 8004acc:	601a      	str	r2, [r3, #0]
          break;
 8004ace:	bf00      	nop
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000020 	.word	0x20000020
 8004ae0:	20000454 	.word	0x20000454
 8004ae4:	3bfa0000 	.word	0x3bfa0000
 8004ae8:	3c7a0000 	.word	0x3c7a0000
 8004aec:	3cfa0000 	.word	0x3cfa0000
 8004af0:	3d7a0000 	.word	0x3d7a0000

08004af4 <initMPU6050>:

void initMPU6050(I2C_HandleTypeDef *I2Cx){
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af04      	add	r7, sp, #16
 8004afa:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004b00:	2364      	movs	r3, #100	; 0x64
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	2301      	movs	r3, #1
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	f107 030e 	add.w	r3, r7, #14
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	2301      	movs	r3, #1
 8004b10:	226b      	movs	r2, #107	; 0x6b
 8004b12:	21d0      	movs	r1, #208	; 0xd0
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f002 fc35 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b1a:	2064      	movs	r0, #100	; 0x64
 8004b1c:	f002 f8e4 	bl	8006ce8 <HAL_Delay>

	writeData = 0x01;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004b24:	2364      	movs	r3, #100	; 0x64
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	2301      	movs	r3, #1
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	f107 030e 	add.w	r3, r7, #14
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	2301      	movs	r3, #1
 8004b34:	226b      	movs	r2, #107	; 0x6b
 8004b36:	21d0      	movs	r1, #208	; 0xd0
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f002 fc23 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b3e:	2064      	movs	r0, #100	; 0x64
 8004b40:	f002 f8d2 	bl	8006ce8 <HAL_Delay>

	writeData = 0x03;
 8004b44:	2303      	movs	r3, #3
 8004b46:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8004b48:	2364      	movs	r3, #100	; 0x64
 8004b4a:	9302      	str	r3, [sp, #8]
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	f107 030e 	add.w	r3, r7, #14
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	2301      	movs	r3, #1
 8004b58:	221a      	movs	r2, #26
 8004b5a:	21d0      	movs	r1, #208	; 0xd0
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f002 fc11 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b62:	2064      	movs	r0, #100	; 0x64
 8004b64:	f002 f8c0 	bl	8006ce8 <HAL_Delay>

	writeData = 0; //0x07; 0x04
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8004b6c:	2364      	movs	r3, #100	; 0x64
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	2301      	movs	r3, #1
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	f107 030e 	add.w	r3, r7, #14
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	2219      	movs	r2, #25
 8004b7e:	21d0      	movs	r1, #208	; 0xd0
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f002 fbff 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b86:	2064      	movs	r0, #100	; 0x64
 8004b88:	f002 f8ae 	bl	8006ce8 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8004b8c:	2364      	movs	r3, #100	; 0x64
 8004b8e:	9302      	str	r3, [sp, #8]
 8004b90:	2301      	movs	r3, #1
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	f107 030f 	add.w	r3, r7, #15
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	221b      	movs	r2, #27
 8004b9e:	21d0      	movs	r1, #208	; 0xd0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f002 fd03 	bl	80075ac <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	f023 0303 	bic.w	r3, r3, #3
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	f023 0318 	bic.w	r3, r3, #24
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale_MPU6050 << 3; // Set full scale range for the gyro
 8004bba:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <initMPU6050+0x1bc>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	b25a      	sxtb	r2, r3
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	b25b      	sxtb	r3, r3
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	b25b      	sxtb	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8004bce:	2064      	movs	r0, #100	; 0x64
 8004bd0:	f002 f88a 	bl	8006ce8 <HAL_Delay>

	writeData = readData;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004bd8:	2364      	movs	r3, #100	; 0x64
 8004bda:	9302      	str	r3, [sp, #8]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	f107 030e 	add.w	r3, r7, #14
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	221b      	movs	r2, #27
 8004bea:	21d0      	movs	r1, #208	; 0xd0
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f002 fbc9 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004bf2:	2064      	movs	r0, #100	; 0x64
 8004bf4:	f002 f878 	bl	8006ce8 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8004bf8:	2364      	movs	r3, #100	; 0x64
 8004bfa:	9302      	str	r3, [sp, #8]
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	f107 030f 	add.w	r3, r7, #15
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	2301      	movs	r3, #1
 8004c08:	221c      	movs	r2, #28
 8004c0a:	21d0      	movs	r1, #208	; 0xd0
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f002 fccd 	bl	80075ac <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	f023 0318 	bic.w	r3, r3, #24
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale_MPU6050 << 3; // Set full scale range for the accelerometer
 8004c1c:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <initMPU6050+0x1c0>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	b25a      	sxtb	r2, r3
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004c34:	2364      	movs	r3, #100	; 0x64
 8004c36:	9302      	str	r3, [sp, #8]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	f107 030e 	add.w	r3, r7, #14
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2301      	movs	r3, #1
 8004c44:	221c      	movs	r2, #28
 8004c46:	21d0      	movs	r1, #208	; 0xd0
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f002 fb9b 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004c4e:	2064      	movs	r0, #100	; 0x64
 8004c50:	f002 f84a 	bl	8006ce8 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8004c54:	2364      	movs	r3, #100	; 0x64
 8004c56:	9302      	str	r3, [sp, #8]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	f107 030f 	add.w	r3, r7, #15
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2301      	movs	r3, #1
 8004c64:	221d      	movs	r2, #29
 8004c66:	21d0      	movs	r1, #208	; 0xd0
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f002 fc9f 	bl	80075ac <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	f023 030f 	bic.w	r3, r3, #15
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	f043 0303 	orr.w	r3, r3, #3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8004c86:	2364      	movs	r3, #100	; 0x64
 8004c88:	9302      	str	r3, [sp, #8]
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	f107 030e 	add.w	r3, r7, #14
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2301      	movs	r3, #1
 8004c96:	221d      	movs	r2, #29
 8004c98:	21d0      	movs	r1, #208	; 0xd0
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f002 fb72 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004ca0:	2064      	movs	r0, #100	; 0x64
 8004ca2:	f002 f821 	bl	8006ce8 <HAL_Delay>
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000020 	.word	0x20000020
 8004cb4:	20000021 	.word	0x20000021

08004cb8 <readMPU6050AccelData>:

//read raw Accelerometer values from registers
void readMPU6050AccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af04      	add	r7, sp, #16
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8004cc2:	2364      	movs	r3, #100	; 0x64
 8004cc4:	9302      	str	r3, [sp, #8]
 8004cc6:	2306      	movs	r3, #6
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	f107 0308 	add.w	r3, r7, #8
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	223b      	movs	r2, #59	; 0x3b
 8004cd4:	21d0      	movs	r1, #208	; 0xd0
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f002 fc68 	bl	80075ac <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004cdc:	7a3b      	ldrb	r3, [r7, #8]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	b21a      	sxth	r2, r3
 8004ce2:	7a7b      	ldrb	r3, [r7, #9]
 8004ce4:	b21b      	sxth	r3, r3
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	b21a      	sxth	r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8004cee:	7abb      	ldrb	r3, [r7, #10]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	b219      	sxth	r1, r3
 8004cf4:	7afb      	ldrb	r3, [r7, #11]
 8004cf6:	b21a      	sxth	r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	b212      	sxth	r2, r2
 8004d00:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8004d02:	7b3b      	ldrb	r3, [r7, #12]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	b219      	sxth	r1, r3
 8004d08:	7b7b      	ldrb	r3, [r7, #13]
 8004d0a:	b21a      	sxth	r2, r3
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	430a      	orrs	r2, r1
 8004d12:	b212      	sxth	r2, r2
 8004d14:	801a      	strh	r2, [r3, #0]
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <readMPU6050GyroData>:

//read raw Gyro values from registers
void readMPU6050GyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b088      	sub	sp, #32
 8004d22:	af04      	add	r7, sp, #16
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8004d28:	2364      	movs	r3, #100	; 0x64
 8004d2a:	9302      	str	r3, [sp, #8]
 8004d2c:	2306      	movs	r3, #6
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	f107 0308 	add.w	r3, r7, #8
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2301      	movs	r3, #1
 8004d38:	2243      	movs	r2, #67	; 0x43
 8004d3a:	21d0      	movs	r1, #208	; 0xd0
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f002 fc35 	bl	80075ac <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004d42:	7a3b      	ldrb	r3, [r7, #8]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	b21a      	sxth	r2, r3
 8004d48:	7a7b      	ldrb	r3, [r7, #9]
 8004d4a:	b21b      	sxth	r3, r3
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	b21a      	sxth	r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8004d54:	7abb      	ldrb	r3, [r7, #10]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	b219      	sxth	r1, r3
 8004d5a:	7afb      	ldrb	r3, [r7, #11]
 8004d5c:	b21a      	sxth	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	3302      	adds	r3, #2
 8004d62:	430a      	orrs	r2, r1
 8004d64:	b212      	sxth	r2, r2
 8004d66:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8004d68:	7b3b      	ldrb	r3, [r7, #12]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	b219      	sxth	r1, r3
 8004d6e:	7b7b      	ldrb	r3, [r7, #13]
 8004d70:	b21a      	sxth	r2, r3
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	3304      	adds	r3, #4
 8004d76:	430a      	orrs	r2, r1
 8004d78:	b212      	sxth	r2, r2
 8004d7a:	801a      	strh	r2, [r3, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <calibrateMPU6050>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct, float * dest1, float * dest2){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b09e      	sub	sp, #120	; 0x78
 8004d88:	af04      	add	r7, sp, #16
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8004d92:	2300      	movs	r3, #0
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d96:	2300      	movs	r3, #0
 8004d98:	643b      	str	r3, [r7, #64]	; 0x40
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9e:	2300      	movs	r3, #0
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30
 8004da2:	2300      	movs	r3, #0
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
 8004da6:	2300      	movs	r3, #0
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8004db0:	2364      	movs	r3, #100	; 0x64
 8004db2:	9302      	str	r3, [sp, #8]
 8004db4:	2301      	movs	r3, #1
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	226b      	movs	r2, #107	; 0x6b
 8004dc2:	21d0      	movs	r1, #208	; 0xd0
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f002 fadd 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004dca:	2064      	movs	r0, #100	; 0x64
 8004dcc:	f001 ff8c 	bl	8006ce8 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004dd6:	2364      	movs	r3, #100	; 0x64
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	2301      	movs	r3, #1
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2301      	movs	r3, #1
 8004de6:	226b      	movs	r2, #107	; 0x6b
 8004de8:	21d0      	movs	r1, #208	; 0xd0
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f002 faca 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8004df6:	2364      	movs	r3, #100	; 0x64
 8004df8:	9302      	str	r3, [sp, #8]
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2301      	movs	r3, #1
 8004e06:	226c      	movs	r2, #108	; 0x6c
 8004e08:	21d0      	movs	r1, #208	; 0xd0
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f002 faba 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8004e10:	20c8      	movs	r0, #200	; 0xc8
 8004e12:	f001 ff69 	bl	8006ce8 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8004e16:	2300      	movs	r3, #0
 8004e18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8004e1c:	2364      	movs	r3, #100	; 0x64
 8004e1e:	9302      	str	r3, [sp, #8]
 8004e20:	2301      	movs	r3, #1
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2238      	movs	r2, #56	; 0x38
 8004e2e:	21d0      	movs	r1, #208	; 0xd0
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f002 faa7 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8004e3c:	2364      	movs	r3, #100	; 0x64
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	2301      	movs	r3, #1
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	2223      	movs	r2, #35	; 0x23
 8004e4e:	21d0      	movs	r1, #208	; 0xd0
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f002 fa97 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8004e5c:	2364      	movs	r3, #100	; 0x64
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	2301      	movs	r3, #1
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	226b      	movs	r2, #107	; 0x6b
 8004e6e:	21d0      	movs	r1, #208	; 0xd0
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f002 fa87 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8004e7c:	2364      	movs	r3, #100	; 0x64
 8004e7e:	9302      	str	r3, [sp, #8]
 8004e80:	2301      	movs	r3, #1
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	2224      	movs	r2, #36	; 0x24
 8004e8e:	21d0      	movs	r1, #208	; 0xd0
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f002 fa77 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8004e9c:	2364      	movs	r3, #100	; 0x64
 8004e9e:	9302      	str	r3, [sp, #8]
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	226a      	movs	r2, #106	; 0x6a
 8004eae:	21d0      	movs	r1, #208	; 0xd0
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f002 fa67 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8004ebc:	2364      	movs	r3, #100	; 0x64
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2301      	movs	r3, #1
 8004ecc:	226a      	movs	r2, #106	; 0x6a
 8004ece:	21d0      	movs	r1, #208	; 0xd0
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f002 fa57 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8004ed6:	200f      	movs	r0, #15
 8004ed8:	f001 ff06 	bl	8006ce8 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8004ee2:	2364      	movs	r3, #100	; 0x64
 8004ee4:	9302      	str	r3, [sp, #8]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	221a      	movs	r2, #26
 8004ef4:	21d0      	movs	r1, #208	; 0xd0
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f002 fa44 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8004f02:	2364      	movs	r3, #100	; 0x64
 8004f04:	9302      	str	r3, [sp, #8]
 8004f06:	2301      	movs	r3, #1
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2301      	movs	r3, #1
 8004f12:	2219      	movs	r2, #25
 8004f14:	21d0      	movs	r1, #208	; 0xd0
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f002 fa34 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8004f22:	2364      	movs	r3, #100	; 0x64
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	2301      	movs	r3, #1
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	2301      	movs	r3, #1
 8004f32:	221b      	movs	r2, #27
 8004f34:	21d0      	movs	r1, #208	; 0xd0
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f002 fa24 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8004f42:	2364      	movs	r3, #100	; 0x64
 8004f44:	9302      	str	r3, [sp, #8]
 8004f46:	2301      	movs	r3, #1
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2301      	movs	r3, #1
 8004f52:	221c      	movs	r2, #28
 8004f54:	21d0      	movs	r1, #208	; 0xd0
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f002 fa14 	bl	8007384 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8004f5c:	2383      	movs	r3, #131	; 0x83
 8004f5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8004f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8004f6a:	2340      	movs	r3, #64	; 0x40
 8004f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8004f70:	2364      	movs	r3, #100	; 0x64
 8004f72:	9302      	str	r3, [sp, #8]
 8004f74:	2301      	movs	r3, #1
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	2301      	movs	r3, #1
 8004f80:	226a      	movs	r2, #106	; 0x6a
 8004f82:	21d0      	movs	r1, #208	; 0xd0
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f002 f9fd 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8004f8a:	2378      	movs	r3, #120	; 0x78
 8004f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8004f90:	2364      	movs	r3, #100	; 0x64
 8004f92:	9302      	str	r3, [sp, #8]
 8004f94:	2301      	movs	r3, #1
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	2223      	movs	r2, #35	; 0x23
 8004fa2:	21d0      	movs	r1, #208	; 0xd0
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f002 f9ed 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8004faa:	2028      	movs	r0, #40	; 0x28
 8004fac:	f001 fe9c 	bl	8006ce8 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8004fb6:	2364      	movs	r3, #100	; 0x64
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	2301      	movs	r3, #1
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	2223      	movs	r2, #35	; 0x23
 8004fc8:	21d0      	movs	r1, #208	; 0xd0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f002 f9da 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8004fd0:	2364      	movs	r3, #100	; 0x64
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2301      	movs	r3, #1
 8004fe0:	2272      	movs	r2, #114	; 0x72
 8004fe2:	21d0      	movs	r1, #208	; 0xd0
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f002 fae1 	bl	80075ac <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8004fea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	b21a      	sxth	r2, r3
 8004ff2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004ff6:	b21b      	sxth	r3, r3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	b21b      	sxth	r3, r3
 8004ffc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8005000:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005004:	4a5a      	ldr	r2, [pc, #360]	; (8005170 <calibrateMPU6050+0x3ec>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	08db      	lsrs	r3, r3, #3
 800500c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8005010:	2300      	movs	r3, #0
 8005012:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005016:	e077      	b.n	8005108 <calibrateMPU6050+0x384>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8005018:	2300      	movs	r3, #0
 800501a:	833b      	strh	r3, [r7, #24]
 800501c:	2300      	movs	r3, #0
 800501e:	837b      	strh	r3, [r7, #26]
 8005020:	2300      	movs	r3, #0
 8005022:	83bb      	strh	r3, [r7, #28]
 8005024:	2300      	movs	r3, #0
 8005026:	823b      	strh	r3, [r7, #16]
 8005028:	2300      	movs	r3, #0
 800502a:	827b      	strh	r3, [r7, #18]
 800502c:	2300      	movs	r3, #0
 800502e:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8005030:	2364      	movs	r3, #100	; 0x64
 8005032:	9302      	str	r3, [sp, #8]
 8005034:	230c      	movs	r3, #12
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2301      	movs	r3, #1
 8005040:	2274      	movs	r2, #116	; 0x74
 8005042:	21d0      	movs	r1, #208	; 0xd0
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f002 fab1 	bl	80075ac <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 800504a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	b21a      	sxth	r2, r3
 8005052:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005056:	b21b      	sxth	r3, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	b21b      	sxth	r3, r3
 800505c:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 800505e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	b21a      	sxth	r2, r3
 8005066:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800506a:	b21b      	sxth	r3, r3
 800506c:	4313      	orrs	r3, r2
 800506e:	b21b      	sxth	r3, r3
 8005070:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8005072:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	b21a      	sxth	r2, r3
 800507a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800507e:	b21b      	sxth	r3, r3
 8005080:	4313      	orrs	r3, r2
 8005082:	b21b      	sxth	r3, r3
 8005084:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8005086:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	b21a      	sxth	r2, r3
 800508e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005092:	b21b      	sxth	r3, r3
 8005094:	4313      	orrs	r3, r2
 8005096:	b21b      	sxth	r3, r3
 8005098:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 800509a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	b21a      	sxth	r2, r3
 80050a2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80050a6:	b21b      	sxth	r3, r3
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b21b      	sxth	r3, r3
 80050ac:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 80050ae:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	b21a      	sxth	r2, r3
 80050b6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80050ba:	b21b      	sxth	r3, r3
 80050bc:	4313      	orrs	r3, r2
 80050be:	b21b      	sxth	r3, r3
 80050c0:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80050c8:	4413      	add	r3, r2
 80050ca:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80050d2:	4413      	add	r3, r2
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80050e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 80050ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80050f0:	4413      	add	r3, r2
 80050f2:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 80050f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 80050fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005102:	3301      	adds	r3, #1
 8005104:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005108:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800510c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005110:	429a      	cmp	r2, r3
 8005112:	d381      	bcc.n	8005018 <calibrateMPU6050+0x294>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8005114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005116:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800511a:	fb92 f3f3 	sdiv	r3, r2, r3
 800511e:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8005120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005122:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005126:	fb92 f3f3 	sdiv	r3, r2, r3
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 800512c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005132:	fb92 f3f3 	sdiv	r3, r2, r3
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8005138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800513a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800513e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005142:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8005144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005146:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800514a:	fb92 f3f3 	sdiv	r3, r2, r3
 800514e:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8005150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005152:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005156:	fb92 f3f3 	sdiv	r3, r2, r3
 800515a:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	2b00      	cmp	r3, #0
 8005160:	dd08      	ble.n	8005174 <calibrateMPU6050+0x3f0>
 8005162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005164:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	63bb      	str	r3, [r7, #56]	; 0x38
 800516c:	e007      	b.n	800517e <calibrateMPU6050+0x3fa>
 800516e:	bf00      	nop
 8005170:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8005174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005176:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800517a:	4413      	add	r3, r2
 800517c:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005180:	425b      	negs	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	da00      	bge.n	8005188 <calibrateMPU6050+0x404>
 8005186:	3303      	adds	r3, #3
 8005188:	109b      	asrs	r3, r3, #2
 800518a:	121b      	asrs	r3, r3, #8
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8005192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005194:	425b      	negs	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	da00      	bge.n	800519c <calibrateMPU6050+0x418>
 800519a:	3303      	adds	r3, #3
 800519c:	109b      	asrs	r3, r3, #2
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80051a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a6:	425b      	negs	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da00      	bge.n	80051ae <calibrateMPU6050+0x42a>
 80051ac:	3303      	adds	r3, #3
 80051ae:	109b      	asrs	r3, r3, #2
 80051b0:	121b      	asrs	r3, r3, #8
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 80051b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ba:	425b      	negs	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	da00      	bge.n	80051c2 <calibrateMPU6050+0x43e>
 80051c0:	3303      	adds	r3, #3
 80051c2:	109b      	asrs	r3, r3, #2
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80051ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051cc:	425b      	negs	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da00      	bge.n	80051d4 <calibrateMPU6050+0x450>
 80051d2:	3303      	adds	r3, #3
 80051d4:	109b      	asrs	r3, r3, #2
 80051d6:	121b      	asrs	r3, r3, #8
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 80051de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e0:	425b      	negs	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	da00      	bge.n	80051e8 <calibrateMPU6050+0x464>
 80051e6:	3303      	adds	r3, #3
 80051e8:	109b      	asrs	r3, r3, #2
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 80051f0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80051f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80051f8:	2364      	movs	r3, #100	; 0x64
 80051fa:	9302      	str	r3, [sp, #8]
 80051fc:	2301      	movs	r3, #1
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2301      	movs	r3, #1
 8005208:	2213      	movs	r2, #19
 800520a:	21d0      	movs	r1, #208	; 0xd0
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f002 f8b9 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8005212:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800521a:	2364      	movs	r3, #100	; 0x64
 800521c:	9302      	str	r3, [sp, #8]
 800521e:	2301      	movs	r3, #1
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2301      	movs	r3, #1
 800522a:	2214      	movs	r2, #20
 800522c:	21d0      	movs	r1, #208	; 0xd0
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f002 f8a8 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8005234:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800523c:	2364      	movs	r3, #100	; 0x64
 800523e:	9302      	str	r3, [sp, #8]
 8005240:	2301      	movs	r3, #1
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2301      	movs	r3, #1
 800524c:	2215      	movs	r2, #21
 800524e:	21d0      	movs	r1, #208	; 0xd0
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f002 f897 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8005256:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800525a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800525e:	2364      	movs	r3, #100	; 0x64
 8005260:	9302      	str	r3, [sp, #8]
 8005262:	2301      	movs	r3, #1
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	2301      	movs	r3, #1
 800526e:	2216      	movs	r2, #22
 8005270:	21d0      	movs	r1, #208	; 0xd0
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f002 f886 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8005278:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800527c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005280:	2364      	movs	r3, #100	; 0x64
 8005282:	9302      	str	r3, [sp, #8]
 8005284:	2301      	movs	r3, #1
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	2301      	movs	r3, #1
 8005290:	2217      	movs	r2, #23
 8005292:	21d0      	movs	r1, #208	; 0xd0
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f002 f875 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 800529a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800529e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80052a2:	2364      	movs	r3, #100	; 0x64
 80052a4:	9302      	str	r3, [sp, #8]
 80052a6:	2301      	movs	r3, #1
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	2301      	movs	r3, #1
 80052b2:	2218      	movs	r2, #24
 80052b4:	21d0      	movs	r1, #208	; 0xd0
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f002 f864 	bl	8007384 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80052bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80052dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3304      	adds	r3, #4
 80052f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fa:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80052fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005308:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3308      	adds	r3, #8
 8005318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800531c:	edc3 7a00 	vstr	s15, [r3]

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8005320:	2300      	movs	r3, #0
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	2300      	movs	r3, #0
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28
 8005328:	2300      	movs	r3, #0
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 800532c:	2364      	movs	r3, #100	; 0x64
 800532e:	9302      	str	r3, [sp, #8]
 8005330:	2302      	movs	r3, #2
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	2301      	movs	r3, #1
 800533c:	2277      	movs	r2, #119	; 0x77
 800533e:	21d0      	movs	r1, #208	; 0xd0
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f002 f933 	bl	80075ac <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8005346:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8005350:	4313      	orrs	r3, r2
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8005354:	2364      	movs	r3, #100	; 0x64
 8005356:	9302      	str	r3, [sp, #8]
 8005358:	2302      	movs	r3, #2
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	2301      	movs	r3, #1
 8005364:	227a      	movs	r2, #122	; 0x7a
 8005366:	21d0      	movs	r1, #208	; 0xd0
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f002 f91f 	bl	80075ac <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800536e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8005378:	4313      	orrs	r3, r2
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 800537c:	2364      	movs	r3, #100	; 0x64
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	2302      	movs	r3, #2
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	2301      	movs	r3, #1
 800538c:	227d      	movs	r2, #125	; 0x7d
 800538e:	21d0      	movs	r1, #208	; 0xd0
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f002 f90b 	bl	80075ac <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8005396:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80053a0:	4313      	orrs	r3, r2
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 80053a4:	2301      	movs	r3, #1
 80053a6:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 80053a8:	4a8a      	ldr	r2, [pc, #552]	; (80055d4 <calibrateMPU6050+0x850>)
 80053aa:	f107 0320 	add.w	r3, r7, #32
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	4611      	mov	r1, r2
 80053b2:	8019      	strh	r1, [r3, #0]
 80053b4:	3302      	adds	r3, #2
 80053b6:	0c12      	lsrs	r2, r2, #16
 80053b8:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 80053ba:	2300      	movs	r3, #0
 80053bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80053c0:	e017      	b.n	80053f2 <calibrateMPU6050+0x66e>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 80053c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	3368      	adds	r3, #104	; 0x68
 80053ca:	443b      	add	r3, r7
 80053cc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d006      	beq.n	80053e8 <calibrateMPU6050+0x664>
 80053da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80053de:	3368      	adds	r3, #104	; 0x68
 80053e0:	443b      	add	r3, r7
 80053e2:	2201      	movs	r2, #1
 80053e4:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 80053e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80053ec:	3301      	adds	r3, #1
 80053ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80053f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d9e3      	bls.n	80053c2 <calibrateMPU6050+0x63e>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80053fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da00      	bge.n	8005404 <calibrateMPU6050+0x680>
 8005402:	3307      	adds	r3, #7
 8005404:	10db      	asrs	r3, r3, #3
 8005406:	425b      	negs	r3, r3
 8005408:	4413      	add	r3, r2
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 800540c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	2b00      	cmp	r3, #0
 8005412:	da00      	bge.n	8005416 <calibrateMPU6050+0x692>
 8005414:	3307      	adds	r3, #7
 8005416:	10db      	asrs	r3, r3, #3
 8005418:	425b      	negs	r3, r3
 800541a:	4413      	add	r3, r2
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 800541e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	2b00      	cmp	r3, #0
 8005424:	da00      	bge.n	8005428 <calibrateMPU6050+0x6a4>
 8005426:	3307      	adds	r3, #7
 8005428:	10db      	asrs	r3, r3, #3
 800542a:	425b      	negs	r3, r3
 800542c:	4413      	add	r3, r2
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	121b      	asrs	r3, r3, #8
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005442:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8005446:	f897 3020 	ldrb.w	r3, [r7, #32]
 800544a:	4313      	orrs	r3, r2
 800544c:	b2db      	uxtb	r3, r3
 800544e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	121b      	asrs	r3, r3, #8
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005464:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005468:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800546c:	4313      	orrs	r3, r2
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	121b      	asrs	r3, r3, #8
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005486:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800548a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800548e:	4313      	orrs	r3, r2
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8005496:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800549a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800549e:	2364      	movs	r3, #100	; 0x64
 80054a0:	9302      	str	r3, [sp, #8]
 80054a2:	2301      	movs	r3, #1
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	2301      	movs	r3, #1
 80054ae:	2277      	movs	r2, #119	; 0x77
 80054b0:	21d0      	movs	r1, #208	; 0xd0
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f001 ff66 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 80054b8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80054bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80054c0:	2364      	movs	r3, #100	; 0x64
 80054c2:	9302      	str	r3, [sp, #8]
 80054c4:	2301      	movs	r3, #1
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2301      	movs	r3, #1
 80054d0:	2278      	movs	r2, #120	; 0x78
 80054d2:	21d0      	movs	r1, #208	; 0xd0
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f001 ff55 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80054da:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80054de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80054e2:	2364      	movs	r3, #100	; 0x64
 80054e4:	9302      	str	r3, [sp, #8]
 80054e6:	2301      	movs	r3, #1
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	2301      	movs	r3, #1
 80054f2:	227a      	movs	r2, #122	; 0x7a
 80054f4:	21d0      	movs	r1, #208	; 0xd0
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f001 ff44 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80054fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005504:	2364      	movs	r3, #100	; 0x64
 8005506:	9302      	str	r3, [sp, #8]
 8005508:	2301      	movs	r3, #1
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	2301      	movs	r3, #1
 8005514:	227b      	movs	r2, #123	; 0x7b
 8005516:	21d0      	movs	r1, #208	; 0xd0
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f001 ff33 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 800551e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005522:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005526:	2364      	movs	r3, #100	; 0x64
 8005528:	9302      	str	r3, [sp, #8]
 800552a:	2301      	movs	r3, #1
 800552c:	9301      	str	r3, [sp, #4]
 800552e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2301      	movs	r3, #1
 8005536:	227d      	movs	r2, #125	; 0x7d
 8005538:	21d0      	movs	r1, #208	; 0xd0
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f001 ff22 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8005540:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005548:	2364      	movs	r3, #100	; 0x64
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	2301      	movs	r3, #1
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	2301      	movs	r3, #1
 8005558:	227e      	movs	r2, #126	; 0x7e
 800555a:	21d0      	movs	r1, #208	; 0xd0
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f001 ff11 	bl	8007384 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	ee07 3a90 	vmov	s15, r3
 8005568:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800556c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800558c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005590:	ee07 3a90 	vmov	s15, r3
 8005594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	3304      	adds	r3, #4
 800559c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a0:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80055ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c2:	edc3 7a00 	vstr	s15, [r3]
	
	DataStruct->CALIBRATIN_OK_u8 = TRUE;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2201      	movs	r2, #1
 80055ca:	761a      	strb	r2, [r3, #24]
}
 80055cc:	bf00      	nop
 80055ce:	3768      	adds	r7, #104	; 0x68
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	080117ac 	.word	0x080117ac

080055d8 <MPU6050SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU6050SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80055d8:	b5b0      	push	{r4, r5, r7, lr}
 80055da:	b0a2      	sub	sp, #136	; 0x88
 80055dc:	af04      	add	r7, sp, #16
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 80055e2:	4a9b      	ldr	r2, [pc, #620]	; (8005850 <MPU6050SelfTest+0x278>)
 80055e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055ec:	6018      	str	r0, [r3, #0]
 80055ee:	3304      	adds	r3, #4
 80055f0:	8019      	strh	r1, [r3, #0]
	uint8_t SelfTest_MPU6050[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80055f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	609a      	str	r2, [r3, #8]
 80055fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	609a      	str	r2, [r3, #8]
 800560a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	605a      	str	r2, [r3, #4]
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	f107 0320 	add.w	r3, r7, #32
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	writeData = 0x00;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 800562e:	2364      	movs	r3, #100	; 0x64
 8005630:	9302      	str	r3, [sp, #8]
 8005632:	2301      	movs	r3, #1
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	2301      	movs	r3, #1
 800563e:	2219      	movs	r2, #25
 8005640:	21d0      	movs	r1, #208	; 0xd0
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fe9e 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8005648:	2302      	movs	r3, #2
 800564a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800564e:	2364      	movs	r3, #100	; 0x64
 8005650:	9302      	str	r3, [sp, #8]
 8005652:	2301      	movs	r3, #1
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	2301      	movs	r3, #1
 800565e:	221a      	movs	r2, #26
 8005660:	21d0      	movs	r1, #208	; 0xd0
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fe8e 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8005668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8005674:	2364      	movs	r3, #100	; 0x64
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	2301      	movs	r3, #1
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	2301      	movs	r3, #1
 8005684:	221b      	movs	r2, #27
 8005686:	21d0      	movs	r1, #208	; 0xd0
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 fe7b 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 800568e:	2302      	movs	r3, #2
 8005690:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8005694:	2364      	movs	r3, #100	; 0x64
 8005696:	9302      	str	r3, [sp, #8]
 8005698:	2301      	movs	r3, #1
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	2301      	movs	r3, #1
 80056a4:	221d      	movs	r2, #29
 80056a6:	21d0      	movs	r1, #208	; 0xd0
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 fe6b 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80056ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 80056ba:	2364      	movs	r3, #100	; 0x64
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	2301      	movs	r3, #1
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2301      	movs	r3, #1
 80056ca:	221c      	movs	r2, #28
 80056cc:	21d0      	movs	r1, #208	; 0xd0
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 fe58 	bl	8007384 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80056d4:	2300      	movs	r3, #0
 80056d6:	677b      	str	r3, [r7, #116]	; 0x74
 80056d8:	e064      	b.n	80057a4 <MPU6050SelfTest+0x1cc>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80056da:	2364      	movs	r3, #100	; 0x64
 80056dc:	9302      	str	r3, [sp, #8]
 80056de:	2306      	movs	r3, #6
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2301      	movs	r3, #1
 80056ea:	223b      	movs	r2, #59	; 0x3b
 80056ec:	21d0      	movs	r1, #208	; 0xd0
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 ff5c 	bl	80075ac <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80056fa:	0212      	lsls	r2, r2, #8
 80056fc:	b211      	sxth	r1, r2
 80056fe:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8005702:	b212      	sxth	r2, r2
 8005704:	430a      	orrs	r2, r1
 8005706:	b212      	sxth	r2, r2
 8005708:	4413      	add	r3, r2
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8005712:	0212      	lsls	r2, r2, #8
 8005714:	b211      	sxth	r1, r2
 8005716:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800571a:	b212      	sxth	r2, r2
 800571c:	430a      	orrs	r2, r1
 800571e:	b212      	sxth	r2, r2
 8005720:	4413      	add	r3, r2
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005726:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800572a:	0212      	lsls	r2, r2, #8
 800572c:	b211      	sxth	r1, r2
 800572e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005732:	b212      	sxth	r2, r2
 8005734:	430a      	orrs	r2, r1
 8005736:	b212      	sxth	r2, r2
 8005738:	4413      	add	r3, r2
 800573a:	643b      	str	r3, [r7, #64]	; 0x40

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800573c:	2364      	movs	r3, #100	; 0x64
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	2306      	movs	r3, #6
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	2301      	movs	r3, #1
 800574c:	2243      	movs	r2, #67	; 0x43
 800574e:	21d0      	movs	r1, #208	; 0xd0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 ff2b 	bl	80075ac <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005758:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800575c:	0212      	lsls	r2, r2, #8
 800575e:	b211      	sxth	r1, r2
 8005760:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8005764:	b212      	sxth	r2, r2
 8005766:	430a      	orrs	r2, r1
 8005768:	b212      	sxth	r2, r2
 800576a:	4413      	add	r3, r2
 800576c:	647b      	str	r3, [r7, #68]	; 0x44
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800576e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005770:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8005774:	0212      	lsls	r2, r2, #8
 8005776:	b211      	sxth	r1, r2
 8005778:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800577c:	b212      	sxth	r2, r2
 800577e:	430a      	orrs	r2, r1
 8005780:	b212      	sxth	r2, r2
 8005782:	4413      	add	r3, r2
 8005784:	64bb      	str	r3, [r7, #72]	; 0x48
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005788:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800578c:	0212      	lsls	r2, r2, #8
 800578e:	b211      	sxth	r1, r2
 8005790:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005794:	b212      	sxth	r2, r2
 8005796:	430a      	orrs	r2, r1
 8005798:	b212      	sxth	r2, r2
 800579a:	4413      	add	r3, r2
 800579c:	64fb      	str	r3, [r7, #76]	; 0x4c
	for( int ii = 0; ii < 200; ii++) {
 800579e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a0:	3301      	adds	r3, #1
 80057a2:	677b      	str	r3, [r7, #116]	; 0x74
 80057a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a6:	2bc7      	cmp	r3, #199	; 0xc7
 80057a8:	dd97      	ble.n	80056da <MPU6050SelfTest+0x102>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 80057aa:	2300      	movs	r3, #0
 80057ac:	673b      	str	r3, [r7, #112]	; 0x70
 80057ae:	e026      	b.n	80057fe <MPU6050SelfTest+0x226>
		aAvg[ii] /= 200;
 80057b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	3378      	adds	r3, #120	; 0x78
 80057b6:	443b      	add	r3, r7
 80057b8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80057bc:	4a25      	ldr	r2, [pc, #148]	; (8005854 <MPU6050SelfTest+0x27c>)
 80057be:	fb82 1203 	smull	r1, r2, r2, r3
 80057c2:	1192      	asrs	r2, r2, #6
 80057c4:	17db      	asrs	r3, r3, #31
 80057c6:	1ad2      	subs	r2, r2, r3
 80057c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	3378      	adds	r3, #120	; 0x78
 80057ce:	443b      	add	r3, r7
 80057d0:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 80057d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	3378      	adds	r3, #120	; 0x78
 80057da:	443b      	add	r3, r7
 80057dc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80057e0:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <MPU6050SelfTest+0x27c>)
 80057e2:	fb82 1203 	smull	r1, r2, r2, r3
 80057e6:	1192      	asrs	r2, r2, #6
 80057e8:	17db      	asrs	r3, r3, #31
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	3378      	adds	r3, #120	; 0x78
 80057f2:	443b      	add	r3, r7
 80057f4:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 80057f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057fa:	3301      	adds	r3, #1
 80057fc:	673b      	str	r3, [r7, #112]	; 0x70
 80057fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005800:	2b02      	cmp	r3, #2
 8005802:	ddd5      	ble.n	80057b0 <MPU6050SelfTest+0x1d8>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8005804:	23e0      	movs	r3, #224	; 0xe0
 8005806:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 800580a:	2364      	movs	r3, #100	; 0x64
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	2301      	movs	r3, #1
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2301      	movs	r3, #1
 800581a:	221c      	movs	r2, #28
 800581c:	21d0      	movs	r1, #208	; 0xd0
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 fdb0 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8005824:	23e0      	movs	r3, #224	; 0xe0
 8005826:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 800582a:	2364      	movs	r3, #100	; 0x64
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	2301      	movs	r3, #1
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2301      	movs	r3, #1
 800583a:	221b      	movs	r2, #27
 800583c:	21d0      	movs	r1, #208	; 0xd0
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 fda0 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8005844:	2019      	movs	r0, #25
 8005846:	f001 fa4f 	bl	8006ce8 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 800584a:	2300      	movs	r3, #0
 800584c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800584e:	e068      	b.n	8005922 <MPU6050SelfTest+0x34a>
 8005850:	080117b0 	.word	0x080117b0
 8005854:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8005858:	2364      	movs	r3, #100	; 0x64
 800585a:	9302      	str	r3, [sp, #8]
 800585c:	2306      	movs	r3, #6
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	2301      	movs	r3, #1
 8005868:	223b      	movs	r2, #59	; 0x3b
 800586a:	21d0      	movs	r1, #208	; 0xd0
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 fe9d 	bl	80075ac <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8005878:	0212      	lsls	r2, r2, #8
 800587a:	b211      	sxth	r1, r2
 800587c:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8005880:	b212      	sxth	r2, r2
 8005882:	430a      	orrs	r2, r1
 8005884:	b212      	sxth	r2, r2
 8005886:	4413      	add	r3, r2
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8005890:	0212      	lsls	r2, r2, #8
 8005892:	b211      	sxth	r1, r2
 8005894:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8005898:	b212      	sxth	r2, r2
 800589a:	430a      	orrs	r2, r1
 800589c:	b212      	sxth	r2, r2
 800589e:	4413      	add	r3, r2
 80058a0:	633b      	str	r3, [r7, #48]	; 0x30
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80058a8:	0212      	lsls	r2, r2, #8
 80058aa:	b211      	sxth	r1, r2
 80058ac:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80058b0:	b212      	sxth	r2, r2
 80058b2:	430a      	orrs	r2, r1
 80058b4:	b212      	sxth	r2, r2
 80058b6:	4413      	add	r3, r2
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80058ba:	2364      	movs	r3, #100	; 0x64
 80058bc:	9302      	str	r3, [sp, #8]
 80058be:	2306      	movs	r3, #6
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2301      	movs	r3, #1
 80058ca:	2243      	movs	r2, #67	; 0x43
 80058cc:	21d0      	movs	r1, #208	; 0xd0
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f001 fe6c 	bl	80075ac <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80058da:	0212      	lsls	r2, r2, #8
 80058dc:	b211      	sxth	r1, r2
 80058de:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80058e2:	b212      	sxth	r2, r2
 80058e4:	430a      	orrs	r2, r1
 80058e6:	b212      	sxth	r2, r2
 80058e8:	4413      	add	r3, r2
 80058ea:	623b      	str	r3, [r7, #32]
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 80058f2:	0212      	lsls	r2, r2, #8
 80058f4:	b211      	sxth	r1, r2
 80058f6:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80058fa:	b212      	sxth	r2, r2
 80058fc:	430a      	orrs	r2, r1
 80058fe:	b212      	sxth	r2, r2
 8005900:	4413      	add	r3, r2
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800590a:	0212      	lsls	r2, r2, #8
 800590c:	b211      	sxth	r1, r2
 800590e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005912:	b212      	sxth	r2, r2
 8005914:	430a      	orrs	r2, r1
 8005916:	b212      	sxth	r2, r2
 8005918:	4413      	add	r3, r2
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
	for( int ii = 0; ii < 200; ii++) {
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	3301      	adds	r3, #1
 8005920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	2bc7      	cmp	r3, #199	; 0xc7
 8005926:	dd97      	ble.n	8005858 <MPU6050SelfTest+0x280>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 8005928:	2300      	movs	r3, #0
 800592a:	66bb      	str	r3, [r7, #104]	; 0x68
 800592c:	e026      	b.n	800597c <MPU6050SelfTest+0x3a4>
		aSTAvg[ii] /= 200;
 800592e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	3378      	adds	r3, #120	; 0x78
 8005934:	443b      	add	r3, r7
 8005936:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800593a:	4ae1      	ldr	r2, [pc, #900]	; (8005cc0 <MPU6050SelfTest+0x6e8>)
 800593c:	fb82 1203 	smull	r1, r2, r2, r3
 8005940:	1192      	asrs	r2, r2, #6
 8005942:	17db      	asrs	r3, r3, #31
 8005944:	1ad2      	subs	r2, r2, r3
 8005946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	3378      	adds	r3, #120	; 0x78
 800594c:	443b      	add	r3, r7
 800594e:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8005952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	3378      	adds	r3, #120	; 0x78
 8005958:	443b      	add	r3, r7
 800595a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800595e:	4ad8      	ldr	r2, [pc, #864]	; (8005cc0 <MPU6050SelfTest+0x6e8>)
 8005960:	fb82 1203 	smull	r1, r2, r2, r3
 8005964:	1192      	asrs	r2, r2, #6
 8005966:	17db      	asrs	r3, r3, #31
 8005968:	1ad2      	subs	r2, r2, r3
 800596a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	3378      	adds	r3, #120	; 0x78
 8005970:	443b      	add	r3, r7
 8005972:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 8005976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005978:	3301      	adds	r3, #1
 800597a:	66bb      	str	r3, [r7, #104]	; 0x68
 800597c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800597e:	2b02      	cmp	r3, #2
 8005980:	ddd5      	ble.n	800592e <MPU6050SelfTest+0x356>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005988:	2364      	movs	r3, #100	; 0x64
 800598a:	9302      	str	r3, [sp, #8]
 800598c:	2301      	movs	r3, #1
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	2301      	movs	r3, #1
 8005998:	221c      	movs	r2, #28
 800599a:	21d0      	movs	r1, #208	; 0xd0
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fcf1 	bl	8007384 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80059a8:	2364      	movs	r3, #100	; 0x64
 80059aa:	9302      	str	r3, [sp, #8]
 80059ac:	2301      	movs	r3, #1
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	2301      	movs	r3, #1
 80059b8:	221b      	movs	r2, #27
 80059ba:	21d0      	movs	r1, #208	; 0xd0
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fce1 	bl	8007384 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80059c2:	2019      	movs	r0, #25
 80059c4:	f001 f990 	bl	8006ce8 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_ACCEL, 1, &SelfTest_MPU6050[0], 1, i2c_timeout);// X-axis accel self-test results
 80059c8:	2364      	movs	r3, #100	; 0x64
 80059ca:	9302      	str	r3, [sp, #8]
 80059cc:	2301      	movs	r3, #1
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2301      	movs	r3, #1
 80059d8:	220d      	movs	r2, #13
 80059da:	21d0      	movs	r1, #208	; 0xd0
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 fde5 	bl	80075ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_ACCEL, 1, &SelfTest_MPU6050[1], 1, i2c_timeout);// Y-axis accel self-test results
 80059e2:	2364      	movs	r3, #100	; 0x64
 80059e4:	9302      	str	r3, [sp, #8]
 80059e6:	2301      	movs	r3, #1
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80059ee:	3301      	adds	r3, #1
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	220e      	movs	r2, #14
 80059f6:	21d0      	movs	r1, #208	; 0xd0
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fdd7 	bl	80075ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_ACCEL, 1, &SelfTest_MPU6050[2], 1, i2c_timeout);// Z-axis accel self-test results
 80059fe:	2364      	movs	r3, #100	; 0x64
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	2301      	movs	r3, #1
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2301      	movs	r3, #1
 8005a10:	220f      	movs	r2, #15
 8005a12:	21d0      	movs	r1, #208	; 0xd0
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 fdc9 	bl	80075ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_GYRO, 1, &SelfTest_MPU6050[3], 1, i2c_timeout);// X-axis gyro self-test results
 8005a1a:	2364      	movs	r3, #100	; 0x64
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	2301      	movs	r3, #1
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a26:	3303      	adds	r3, #3
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	21d0      	movs	r1, #208	; 0xd0
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fdbb 	bl	80075ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_GYRO, 1, &SelfTest_MPU6050[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8005a36:	2364      	movs	r3, #100	; 0x64
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a42:	3304      	adds	r3, #4
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	2301      	movs	r3, #1
 8005a48:	2201      	movs	r2, #1
 8005a4a:	21d0      	movs	r1, #208	; 0xd0
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 fdad 	bl	80075ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_GYRO, 1, &SelfTest_MPU6050[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8005a52:	2364      	movs	r3, #100	; 0x64
 8005a54:	9302      	str	r3, [sp, #8]
 8005a56:	2301      	movs	r3, #1
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a5e:	3305      	adds	r3, #5
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	2301      	movs	r3, #1
 8005a64:	2202      	movs	r2, #2
 8005a66:	21d0      	movs	r1, #208	; 0xd0
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 fd9f 	bl	80075ac <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[0] - 1.0) )); // FT[Xa] factory trim calculation
 8005a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a72:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a82:	ee17 0a90 	vmov	r0, s15
 8005a86:	f7fa fd87 	bl	8000598 <__aeabi_f2d>
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9a:	ee17 0a90 	vmov	r0, s15
 8005a9e:	f7fa fd7b 	bl	8000598 <__aeabi_f2d>
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	4b87      	ldr	r3, [pc, #540]	; (8005cc4 <MPU6050SelfTest+0x6ec>)
 8005aa8:	f7fa fc16 	bl	80002d8 <__aeabi_dsub>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	ec43 2b17 	vmov	d7, r2, r3
 8005ab4:	eeb0 1a47 	vmov.f32	s2, s14
 8005ab8:	eef0 1a67 	vmov.f32	s3, s15
 8005abc:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8005cb8 <MPU6050SelfTest+0x6e0>
 8005ac0:	f009 f9e6 	bl	800ee90 <pow>
 8005ac4:	ec53 2b10 	vmov	r2, r3, d0
 8005ac8:	4620      	mov	r0, r4
 8005aca:	4629      	mov	r1, r5
 8005acc:	f7fa fdbc 	bl	8000648 <__aeabi_dmul>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f7fb f8ae 	bl	8000c38 <__aeabi_d2f>
 8005adc:	4603      	mov	r3, r0
 8005ade:	60bb      	str	r3, [r7, #8]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[1] - 1.0) )); // FT[Ya] factory trim calculation
 8005ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ae4:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af4:	ee17 0a90 	vmov	r0, s15
 8005af8:	f7fa fd4e 	bl	8000598 <__aeabi_f2d>
 8005afc:	4604      	mov	r4, r0
 8005afe:	460d      	mov	r5, r1
 8005b00:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0c:	ee17 0a90 	vmov	r0, s15
 8005b10:	f7fa fd42 	bl	8000598 <__aeabi_f2d>
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	4b6a      	ldr	r3, [pc, #424]	; (8005cc4 <MPU6050SelfTest+0x6ec>)
 8005b1a:	f7fa fbdd 	bl	80002d8 <__aeabi_dsub>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	ec43 2b17 	vmov	d7, r2, r3
 8005b26:	eeb0 1a47 	vmov.f32	s2, s14
 8005b2a:	eef0 1a67 	vmov.f32	s3, s15
 8005b2e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8005cb8 <MPU6050SelfTest+0x6e0>
 8005b32:	f009 f9ad 	bl	800ee90 <pow>
 8005b36:	ec53 2b10 	vmov	r2, r3, d0
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f7fa fd83 	bl	8000648 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fb f875 	bl	8000c38 <__aeabi_d2f>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	60fb      	str	r3, [r7, #12]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[2] - 1.0) )); // FT[Za] factory trim calculation
 8005b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b56:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b66:	ee17 0a90 	vmov	r0, s15
 8005b6a:	f7fa fd15 	bl	8000598 <__aeabi_f2d>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	ee17 0a90 	vmov	r0, s15
 8005b82:	f7fa fd09 	bl	8000598 <__aeabi_f2d>
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	4b4e      	ldr	r3, [pc, #312]	; (8005cc4 <MPU6050SelfTest+0x6ec>)
 8005b8c:	f7fa fba4 	bl	80002d8 <__aeabi_dsub>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	ec43 2b17 	vmov	d7, r2, r3
 8005b98:	eeb0 1a47 	vmov.f32	s2, s14
 8005b9c:	eef0 1a67 	vmov.f32	s3, s15
 8005ba0:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8005cb8 <MPU6050SelfTest+0x6e0>
 8005ba4:	f009 f974 	bl	800ee90 <pow>
 8005ba8:	ec53 2b10 	vmov	r2, r3, d0
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7fa fd4a 	bl	8000648 <__aeabi_dmul>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f7fb f83c 	bl	8000c38 <__aeabi_d2f>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	613b      	str	r3, [r7, #16]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[3] - 1.0) )); // FT[Xg] factory trim calculation
 8005bc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bc8:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	ee07 3a90 	vmov	s15, r3
 8005bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd8:	ee17 0a90 	vmov	r0, s15
 8005bdc:	f7fa fcdc 	bl	8000598 <__aeabi_f2d>
 8005be0:	4604      	mov	r4, r0
 8005be2:	460d      	mov	r5, r1
 8005be4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005be8:	ee07 3a90 	vmov	s15, r3
 8005bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf0:	ee17 0a90 	vmov	r0, s15
 8005bf4:	f7fa fcd0 	bl	8000598 <__aeabi_f2d>
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <MPU6050SelfTest+0x6ec>)
 8005bfe:	f7fa fb6b 	bl	80002d8 <__aeabi_dsub>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	ec43 2b17 	vmov	d7, r2, r3
 8005c0a:	eeb0 1a47 	vmov.f32	s2, s14
 8005c0e:	eef0 1a67 	vmov.f32	s3, s15
 8005c12:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8005cb8 <MPU6050SelfTest+0x6e0>
 8005c16:	f009 f93b 	bl	800ee90 <pow>
 8005c1a:	ec53 2b10 	vmov	r2, r3, d0
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	f7fa fd11 	bl	8000648 <__aeabi_dmul>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f7fb f803 	bl	8000c38 <__aeabi_d2f>
 8005c32:	4603      	mov	r3, r0
 8005c34:	617b      	str	r3, [r7, #20]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[4] - 1.0) )); // FT[Yg] factory trim calculation
 8005c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c3a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c4a:	ee17 0a90 	vmov	r0, s15
 8005c4e:	f7fa fca3 	bl	8000598 <__aeabi_f2d>
 8005c52:	4604      	mov	r4, r0
 8005c54:	460d      	mov	r5, r1
 8005c56:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	ee17 0a90 	vmov	r0, s15
 8005c66:	f7fa fc97 	bl	8000598 <__aeabi_f2d>
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <MPU6050SelfTest+0x6ec>)
 8005c70:	f7fa fb32 	bl	80002d8 <__aeabi_dsub>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	ec43 2b17 	vmov	d7, r2, r3
 8005c7c:	eeb0 1a47 	vmov.f32	s2, s14
 8005c80:	eef0 1a67 	vmov.f32	s3, s15
 8005c84:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8005cb8 <MPU6050SelfTest+0x6e0>
 8005c88:	f009 f902 	bl	800ee90 <pow>
 8005c8c:	ec53 2b10 	vmov	r2, r3, d0
 8005c90:	4620      	mov	r0, r4
 8005c92:	4629      	mov	r1, r5
 8005c94:	f7fa fcd8 	bl	8000648 <__aeabi_dmul>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f7fa ffca 	bl	8000c38 <__aeabi_d2f>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	61bb      	str	r3, [r7, #24]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[5] - 1.0) )); // FT[Zg] factory trim calculation
 8005ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cac:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	e008      	b.n	8005cc8 <MPU6050SelfTest+0x6f0>
 8005cb6:	bf00      	nop
 8005cb8:	c28f5c29 	.word	0xc28f5c29
 8005cbc:	3ff028f5 	.word	0x3ff028f5
 8005cc0:	51eb851f 	.word	0x51eb851f
 8005cc4:	3ff00000 	.word	0x3ff00000
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cd0:	ee17 0a90 	vmov	r0, s15
 8005cd4:	f7fa fc60 	bl	8000598 <__aeabi_f2d>
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce8:	ee17 0a90 	vmov	r0, s15
 8005cec:	f7fa fc54 	bl	8000598 <__aeabi_f2d>
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	4ba4      	ldr	r3, [pc, #656]	; (8005f88 <MPU6050SelfTest+0x9b0>)
 8005cf6:	f7fa faef 	bl	80002d8 <__aeabi_dsub>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	ec43 2b17 	vmov	d7, r2, r3
 8005d02:	eeb0 1a47 	vmov.f32	s2, s14
 8005d06:	eef0 1a67 	vmov.f32	s3, s15
 8005d0a:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8005f80 <MPU6050SelfTest+0x9a8>
 8005d0e:	f009 f8bf 	bl	800ee90 <pow>
 8005d12:	ec53 2b10 	vmov	r2, r3, d0
 8005d16:	4620      	mov	r0, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7fa fc95 	bl	8000648 <__aeabi_dmul>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	f7fa ff87 	bl	8000c38 <__aeabi_d2f>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	61fb      	str	r3, [r7, #28]

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8005d2e:	2300      	movs	r3, #0
 8005d30:	667b      	str	r3, [r7, #100]	; 0x64
 8005d32:	e088      	b.n	8005e46 <MPU6050SelfTest+0x86e>
		destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	3378      	adds	r3, #120	; 0x78
 8005d3a:	443b      	add	r3, r7
 8005d3c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	3378      	adds	r3, #120	; 0x78
 8005d46:	443b      	add	r3, r7
 8005d48:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d56:	ee17 0a90 	vmov	r0, s15
 8005d5a:	f7fa fc1d 	bl	8000598 <__aeabi_f2d>
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	4b8a      	ldr	r3, [pc, #552]	; (8005f8c <MPU6050SelfTest+0x9b4>)
 8005d64:	f7fa fc70 	bl	8000648 <__aeabi_dmul>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	461d      	mov	r5, r3
 8005d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	3378      	adds	r3, #120	; 0x78
 8005d76:	443b      	add	r3, r7
 8005d78:	3b70      	subs	r3, #112	; 0x70
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fa fc0b 	bl	8000598 <__aeabi_f2d>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f7fa fd87 	bl	800089c <__aeabi_ddiv>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	4b7c      	ldr	r3, [pc, #496]	; (8005f8c <MPU6050SelfTest+0x9b4>)
 8005d9c:	f7fa fa9c 	bl	80002d8 <__aeabi_dsub>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4610      	mov	r0, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	18d4      	adds	r4, r2, r3
 8005db0:	f7fa ff42 	bl	8000c38 <__aeabi_d2f>
 8005db4:	4603      	mov	r3, r0
 8005db6:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	3378      	adds	r3, #120	; 0x78
 8005dbe:	443b      	add	r3, r7
 8005dc0:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	3378      	adds	r3, #120	; 0x78
 8005dca:	443b      	add	r3, r7
 8005dcc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dda:	ee17 0a90 	vmov	r0, s15
 8005dde:	f7fa fbdb 	bl	8000598 <__aeabi_f2d>
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	4b69      	ldr	r3, [pc, #420]	; (8005f8c <MPU6050SelfTest+0x9b4>)
 8005de8:	f7fa fc2e 	bl	8000648 <__aeabi_dmul>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	461d      	mov	r5, r3
 8005df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df6:	3303      	adds	r3, #3
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	3378      	adds	r3, #120	; 0x78
 8005dfc:	443b      	add	r3, r7
 8005dfe:	3b70      	subs	r3, #112	; 0x70
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fa fbc8 	bl	8000598 <__aeabi_f2d>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	f7fa fd44 	bl	800089c <__aeabi_ddiv>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	4b5a      	ldr	r3, [pc, #360]	; (8005f8c <MPU6050SelfTest+0x9b4>)
 8005e22:	f7fa fa59 	bl	80002d8 <__aeabi_dsub>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e30:	3303      	adds	r3, #3
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	18d4      	adds	r4, r2, r3
 8005e38:	f7fa fefe 	bl	8000c38 <__aeabi_d2f>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8005e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e42:	3301      	adds	r3, #1
 8005e44:	667b      	str	r3, [r7, #100]	; 0x64
 8005e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	f77f af73 	ble.w	8005d34 <MPU6050SelfTest+0x75c>
	}

   for (int i = 0; i < 3; i++) {
 8005e4e:	2300      	movs	r3, #0
 8005e50:	663b      	str	r3, [r7, #96]	; 0x60
 8005e52:	e089      	b.n	8005f68 <MPU6050SelfTest+0x990>
     destination[i+3]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	3378      	adds	r3, #120	; 0x78
 8005e5a:	443b      	add	r3, r7
 8005e5c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	3378      	adds	r3, #120	; 0x78
 8005e66:	443b      	add	r3, r7
 8005e68:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e76:	ee17 0a90 	vmov	r0, s15
 8005e7a:	f7fa fb8d 	bl	8000598 <__aeabi_f2d>
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	4b42      	ldr	r3, [pc, #264]	; (8005f8c <MPU6050SelfTest+0x9b4>)
 8005e84:	f7fa fbe0 	bl	8000648 <__aeabi_dmul>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	461d      	mov	r5, r3
 8005e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	3378      	adds	r3, #120	; 0x78
 8005e96:	443b      	add	r3, r7
 8005e98:	3b70      	subs	r3, #112	; 0x70
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fa fb7b 	bl	8000598 <__aeabi_f2d>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	f7fa fcf7 	bl	800089c <__aeabi_ddiv>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	4b34      	ldr	r3, [pc, #208]	; (8005f8c <MPU6050SelfTest+0x9b4>)
 8005ebc:	f7fa fa0c 	bl	80002d8 <__aeabi_dsub>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eca:	3303      	adds	r3, #3
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	18d4      	adds	r4, r2, r3
 8005ed2:	f7fa feb1 	bl	8000c38 <__aeabi_d2f>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	6023      	str	r3, [r4, #0]
     destination[i+6] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	3378      	adds	r3, #120	; 0x78
 8005ee0:	443b      	add	r3, r7
 8005ee2:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	3378      	adds	r3, #120	; 0x78
 8005eec:	443b      	add	r3, r7
 8005eee:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005efc:	ee17 0a90 	vmov	r0, s15
 8005f00:	f7fa fb4a 	bl	8000598 <__aeabi_f2d>
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	4b20      	ldr	r3, [pc, #128]	; (8005f8c <MPU6050SelfTest+0x9b4>)
 8005f0a:	f7fa fb9d 	bl	8000648 <__aeabi_dmul>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4614      	mov	r4, r2
 8005f14:	461d      	mov	r5, r3
 8005f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f18:	3303      	adds	r3, #3
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	3378      	adds	r3, #120	; 0x78
 8005f1e:	443b      	add	r3, r7
 8005f20:	3b70      	subs	r3, #112	; 0x70
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fa fb37 	bl	8000598 <__aeabi_f2d>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7fa fcb3 	bl	800089c <__aeabi_ddiv>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <MPU6050SelfTest+0x9b4>)
 8005f44:	f7fa f9c8 	bl	80002d8 <__aeabi_dsub>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f52:	3306      	adds	r3, #6
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	18d4      	adds	r4, r2, r3
 8005f5a:	f7fa fe6d 	bl	8000c38 <__aeabi_d2f>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8005f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f64:	3301      	adds	r3, #1
 8005f66:	663b      	str	r3, [r7, #96]	; 0x60
 8005f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	f77f af72 	ble.w	8005e54 <MPU6050SelfTest+0x87c>
   }
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	3778      	adds	r7, #120	; 0x78
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bdb0      	pop	{r4, r5, r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	f3af 8000 	nop.w
 8005f80:	c28f5c29 	.word	0xc28f5c29
 8005f84:	3ff028f5 	.word	0x3ff028f5
 8005f88:	3ff00000 	.word	0x3ff00000
 8005f8c:	40590000 	.word	0x40590000

08005f90 <quaternionInit>:
#include "quaternion.h"

float a12, a22, a31, a32, a33;

void quaternionInit(Quaternion_t *DataStruct, float sampleTimeMicros)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	ed87 0a00 	vstr	s0, [r7]
	DataStruct->GyroMeasError = M_PI * (40.0f / 180.0f);		// gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a26      	ldr	r2, [pc, #152]	; (8006038 <quaternionInit+0xa8>)
 8005fa0:	601a      	str	r2, [r3, #0]
	DataStruct->beta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasError;		// compute beta
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fa faf6 	bl	8000598 <__aeabi_f2d>
 8005fac:	a320      	add	r3, pc, #128	; (adr r3, 8006030 <quaternionInit+0xa0>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa fb49 	bl	8000648 <__aeabi_dmul>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4610      	mov	r0, r2
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	f7fa fe3b 	bl	8000c38 <__aeabi_d2f>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	605a      	str	r2, [r3, #4]
	DataStruct->GyroMeasDrift = M_PI * (2.0f / 180.0f);		// gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <quaternionInit+0xac>)
 8005fcc:	609a      	str	r2, [r3, #8]
	DataStruct->zeta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasDrift;		// compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fa fae0 	bl	8000598 <__aeabi_f2d>
 8005fd8:	a315      	add	r3, pc, #84	; (adr r3, 8006030 <quaternionInit+0xa0>)
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f7fa fb33 	bl	8000648 <__aeabi_dmul>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f7fa fe25 	bl	8000c38 <__aeabi_d2f>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60da      	str	r2, [r3, #12]

	DataStruct->deltat = sampleTimeMicros / 1000000.0f;
 8005ff4:	ed97 7a00 	vldr	s14, [r7]
 8005ff8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8006040 <quaternionInit+0xb0>
 8005ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	edc3 7a04 	vstr	s15, [r3, #16]

	DataStruct->q[0] = 1.0f;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800600c:	621a      	str	r2, [r3, #32]
	DataStruct->q[1] = 0.0f;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->q[2] = 0.0f;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	629a      	str	r2, [r3, #40]	; 0x28
	DataStruct->q[3] = 0.0f;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	e8584caa 	.word	0xe8584caa
 8006034:	3febb67a 	.word	0x3febb67a
 8006038:	3f32b8c2 	.word	0x3f32b8c2
 800603c:	3d0efa35 	.word	0x3d0efa35
 8006040:	49742400 	.word	0x49742400

08006044 <quaternionUpdate>:

void quaternionUpdate(Quaternion_t *DataStruct, float ax, float ay, float az, float gyrox, float gyroy, float gyroz)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b0a6      	sub	sp, #152	; 0x98
 8006048:	af00      	add	r7, sp, #0
 800604a:	61f8      	str	r0, [r7, #28]
 800604c:	ed87 0a06 	vstr	s0, [r7, #24]
 8006050:	edc7 0a05 	vstr	s1, [r7, #20]
 8006054:	ed87 1a04 	vstr	s2, [r7, #16]
 8006058:	edc7 1a03 	vstr	s3, [r7, #12]
 800605c:	ed87 2a02 	vstr	s4, [r7, #8]
 8006060:	edc7 2a01 	vstr	s5, [r7, #4]
    float q1 = DataStruct->q[0], q2 = DataStruct->q[1], q3 = DataStruct->q[2], q4 = DataStruct->q[3];         // short name local variable for readability
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
    float qDot1, qDot2, qDot3, qDot4;
    float hatDot1, hatDot2, hatDot3, hatDot4;

    // Auxiliary variables to avoid repeated arithmetic
    float _halfq1 = 0.5f * q1;
 8006084:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006088:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800608c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006090:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float _halfq2 = 0.5f * q2;
 8006094:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006098:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800609c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float _halfq3 = 0.5f * q3;
 80060a4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80060a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float _halfq4 = 0.5f * q4;
 80060b4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80060b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060c0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    float _2q1 = 2.0f * q1;
 80060c4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80060c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060cc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float _2q2 = 2.0f * q2;
 80060d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80060d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060d8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float _2q3 = 2.0f * q3;
 80060dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80060e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060e4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float _2q4 = 2.0f * q4;
 80060e8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80060ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060f0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    // Normalise accelerometer measurement
    norm = sqrt(ax * ax + ay * ay + az * az);
 80060f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80060f8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80060fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006100:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006108:	edd7 7a04 	vldr	s15, [r7, #16]
 800610c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006114:	ee17 0a90 	vmov	r0, s15
 8006118:	f7fa fa3e 	bl	8000598 <__aeabi_f2d>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	ec43 2b10 	vmov	d0, r2, r3
 8006124:	f008 ff24 	bl	800ef70 <sqrt>
 8006128:	ec53 2b10 	vmov	r2, r3, d0
 800612c:	4610      	mov	r0, r2
 800612e:	4619      	mov	r1, r3
 8006130:	f7fa fd82 	bl	8000c38 <__aeabi_d2f>
 8006134:	4603      	mov	r3, r0
 8006136:	667b      	str	r3, [r7, #100]	; 0x64
    if (norm == 0.0f) return; // handle NaN
 8006138:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800613c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	f000 821e 	beq.w	8006584 <quaternionUpdate+0x540>
    norm = 1.0f/norm;
 8006148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006154:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    ax *= norm;
 8006158:	ed97 7a06 	vldr	s14, [r7, #24]
 800615c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006164:	edc7 7a06 	vstr	s15, [r7, #24]
    ay *= norm;
 8006168:	ed97 7a05 	vldr	s14, [r7, #20]
 800616c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006174:	edc7 7a05 	vstr	s15, [r7, #20]
    az *= norm;
 8006178:	ed97 7a04 	vldr	s14, [r7, #16]
 800617c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006184:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute the objective function and Jacobian
    f1 = _2q2 * q4 - _2q1 * q3 - ax;
 8006188:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800618c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006194:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8006198:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800619c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80061a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ac:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    f2 = _2q1 * q2 + _2q3 * q4 - ay;
 80061b0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80061b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80061b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061bc:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80061c0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80061c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80061d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061d4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 80061d8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80061dc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80061e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061ec:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80061f0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80061f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8006200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006204:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    J_11or24 = _2q3;
 8006208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620a:	657b      	str	r3, [r7, #84]	; 0x54
    J_12or23 = _2q4;
 800620c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800620e:	653b      	str	r3, [r7, #80]	; 0x50
    J_13or22 = _2q1;
 8006210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_14or21 = _2q2;
 8006214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006216:	64bb      	str	r3, [r7, #72]	; 0x48
    J_32 = 2.0f * J_14or21;
 8006218:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800621c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006220:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    J_33 = 2.0f * J_11or24;
 8006224:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006228:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800622c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    // Compute the gradient (matrix multiplication)
    hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 8006230:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006234:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800623c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8006240:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800624c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 8006250:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006254:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800625c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006260:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800626c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8006270:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800627c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 8006280:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006284:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800628c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8006290:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006298:	ee37 7a67 	vsub.f32	s14, s14, s15
 800629c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80062a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80062a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 80062b0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80062b4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80062b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062bc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80062c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80062c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062cc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Normalize the gradient
    norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 80062d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80062d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80062d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80062dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80062e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80062e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80062ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80062f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80062f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062fc:	ee17 0a90 	vmov	r0, s15
 8006300:	f7fa f94a 	bl	8000598 <__aeabi_f2d>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	ec43 2b10 	vmov	d0, r2, r3
 800630c:	f008 fe30 	bl	800ef70 <sqrt>
 8006310:	ec53 2b10 	vmov	r2, r3, d0
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	f7fa fc8e 	bl	8000c38 <__aeabi_d2f>
 800631c:	4603      	mov	r3, r0
 800631e:	667b      	str	r3, [r7, #100]	; 0x64
    hatDot1 /= norm;
 8006320:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8006324:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800632c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hatDot2 /= norm;
 8006330:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8006334:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800633c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    hatDot3 /= norm;
 8006340:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006344:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800634c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    hatDot4 /= norm;
 8006350:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8006354:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Compute the quaternion derivative
    qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 8006360:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006364:	eeb1 7a67 	vneg.f32	s14, s15
 8006368:	edd7 7a03 	vldr	s15, [r7, #12]
 800636c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006370:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8006374:	edd7 7a02 	vldr	s15, [r7, #8]
 8006378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800637c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006380:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8006384:	edd7 7a01 	vldr	s15, [r7, #4]
 8006388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800638c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006390:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 8006394:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8006398:	edd7 7a03 	vldr	s15, [r7, #12]
 800639c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063a0:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80063a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80063a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063b0:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80063b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80063b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 80063c4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80063c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80063cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063d0:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80063d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80063d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063e0:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80063e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80063e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 80063f4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80063f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80063fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006400:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8006404:	edd7 7a02 	vldr	s15, [r7, #8]
 8006408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800640c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006410:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8006414:	edd7 7a03 	vldr	s15, [r7, #12]
 8006418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800641c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006420:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute then integrate estimated quaternion derivative
    q1 += (qDot1 -(DataStruct->beta * hatDot1)) * DataStruct->deltat;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	ed93 7a01 	vldr	s14, [r3, #4]
 800642a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800642e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006432:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006436:	ee37 7a67 	vsub.f32	s14, s14, s15
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006444:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8006448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800644c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    q2 += (qDot2 -(DataStruct->beta * hatDot2)) * DataStruct->deltat;
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	ed93 7a01 	vldr	s14, [r3, #4]
 8006456:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006462:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	edd3 7a04 	vldr	s15, [r3, #16]
 800646c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006470:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8006474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006478:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    q3 += (qDot3 -(DataStruct->beta * hatDot3)) * DataStruct->deltat;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006482:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800648e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	edd3 7a04 	vldr	s15, [r3, #16]
 8006498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80064a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    q4 += (qDot4 -(DataStruct->beta * hatDot4)) * DataStruct->deltat;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80064ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80064ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80064c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80064cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064d0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    // Normalize the quaternion
    norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80064d4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80064d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80064dc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80064e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064e8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80064ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064f4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80064f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006500:	ee17 0a90 	vmov	r0, s15
 8006504:	f7fa f848 	bl	8000598 <__aeabi_f2d>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	ec43 2b10 	vmov	d0, r2, r3
 8006510:	f008 fd2e 	bl	800ef70 <sqrt>
 8006514:	ec53 2b10 	vmov	r2, r3, d0
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	f7fa fb8c 	bl	8000c38 <__aeabi_d2f>
 8006520:	4603      	mov	r3, r0
 8006522:	667b      	str	r3, [r7, #100]	; 0x64
    norm = 1.0f/norm;
 8006524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006528:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800652c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006530:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    DataStruct->q[0] = q1 * norm;
 8006534:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8006538:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800653c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	edc3 7a08 	vstr	s15, [r3, #32]
    DataStruct->q[1] = q2 * norm;
 8006546:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800654a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    DataStruct->q[2] = q3 * norm;
 8006558:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800655c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    DataStruct->q[3] = q4 * norm;
 800656a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800656e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    quaternionEulerUpdate(DataStruct);
 800657c:	69f8      	ldr	r0, [r7, #28]
 800657e:	f000 f807 	bl	8006590 <quaternionEulerUpdate>
 8006582:	e000      	b.n	8006586 <quaternionUpdate+0x542>
    if (norm == 0.0f) return; // handle NaN
 8006584:	bf00      	nop
}
 8006586:	3798      	adds	r7, #152	; 0x98
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	0000      	movs	r0, r0
	...

08006590 <quaternionEulerUpdate>:

void quaternionEulerUpdate(Quaternion_t *DataStruct)
{
 8006590:	b5b0      	push	{r4, r5, r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80065a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	edd3 6a08 	vldr	s13, [r3, #32]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80065b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065c0:	ee17 0a90 	vmov	r0, s15
 80065c4:	f7f9 ffe8 	bl	8000598 <__aeabi_f2d>
 80065c8:	4604      	mov	r4, r0
 80065ca:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] + DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] - DataStruct->q[3] * DataStruct->q[3]);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80065d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80065e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80065fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006614:	ee77 7a67 	vsub.f32	s15, s14, s15
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8006618:	ee17 0a90 	vmov	r0, s15
 800661c:	f7f9 ffbc 	bl	8000598 <__aeabi_f2d>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	ec43 2b11 	vmov	d1, r2, r3
 8006628:	ec45 4b10 	vmov	d0, r4, r5
 800662c:	f008 fc2e 	bl	800ee8c <atan2>
 8006630:	ec53 2b10 	vmov	r2, r3, d0
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	f7fa fafe 	bl	8000c38 <__aeabi_d2f>
 800663c:	4602      	mov	r2, r0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	619a      	str	r2, [r3, #24]
	DataStruct->pitch = -asin(2.0f * (DataStruct->q[1] * DataStruct->q[3] - DataStruct->q[0] * DataStruct->q[2]));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800664e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	edd3 6a08 	vldr	s13, [r3, #32]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800665e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006666:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800666a:	ee17 0a90 	vmov	r0, s15
 800666e:	f7f9 ff93 	bl	8000598 <__aeabi_f2d>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	ec43 2b10 	vmov	d0, r2, r3
 800667a:	f008 fbd3 	bl	800ee24 <asin>
 800667e:	ec53 2b10 	vmov	r2, r3, d0
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	f7fa fad7 	bl	8000c38 <__aeabi_d2f>
 800668a:	4603      	mov	r3, r0
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eef1 7a67 	vneg.f32	s15, s15
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	ed93 7a08 	vldr	s14, [r3, #32]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80066a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80066b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066c2:	ee17 0a90 	vmov	r0, s15
 80066c6:	f7f9 ff67 	bl	8000598 <__aeabi_f2d>
 80066ca:	4604      	mov	r4, r0
 80066cc:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] - DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] + DataStruct->q[3] * DataStruct->q[3]);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80066da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80066ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80066fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006716:	ee77 7a27 	vadd.f32	s15, s14, s15
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 800671a:	ee17 0a90 	vmov	r0, s15
 800671e:	f7f9 ff3b 	bl	8000598 <__aeabi_f2d>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	ec43 2b11 	vmov	d1, r2, r3
 800672a:	ec45 4b10 	vmov	d0, r4, r5
 800672e:	f008 fbad 	bl	800ee8c <atan2>
 8006732:	ec53 2b10 	vmov	r2, r3, d0
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f7fa fa7d 	bl	8000c38 <__aeabi_d2f>
 800673e:	4602      	mov	r2, r0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	61da      	str	r2, [r3, #28]
	DataStruct->pitch *= 180.0f / M_PI;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	4618      	mov	r0, r3
 800674a:	f7f9 ff25 	bl	8000598 <__aeabi_f2d>
 800674e:	a31c      	add	r3, pc, #112	; (adr r3, 80067c0 <quaternionEulerUpdate+0x230>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 ff78 	bl	8000648 <__aeabi_dmul>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4610      	mov	r0, r2
 800675e:	4619      	mov	r1, r3
 8006760:	f7fa fa6a 	bl	8000c38 <__aeabi_d2f>
 8006764:	4602      	mov	r2, r0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	615a      	str	r2, [r3, #20]
	DataStruct->yaw   *= 180.0f / M_PI;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	4618      	mov	r0, r3
 8006770:	f7f9 ff12 	bl	8000598 <__aeabi_f2d>
 8006774:	a312      	add	r3, pc, #72	; (adr r3, 80067c0 <quaternionEulerUpdate+0x230>)
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f7f9 ff65 	bl	8000648 <__aeabi_dmul>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4610      	mov	r0, r2
 8006784:	4619      	mov	r1, r3
 8006786:	f7fa fa57 	bl	8000c38 <__aeabi_d2f>
 800678a:	4602      	mov	r2, r0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	619a      	str	r2, [r3, #24]
	DataStruct->roll  *= 180.0f / M_PI;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	4618      	mov	r0, r3
 8006796:	f7f9 feff 	bl	8000598 <__aeabi_f2d>
 800679a:	a309      	add	r3, pc, #36	; (adr r3, 80067c0 <quaternionEulerUpdate+0x230>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f7f9 ff52 	bl	8000648 <__aeabi_dmul>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4610      	mov	r0, r2
 80067aa:	4619      	mov	r1, r3
 80067ac:	f7fa fa44 	bl	8000c38 <__aeabi_d2f>
 80067b0:	4602      	mov	r2, r0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	61da      	str	r2, [r3, #28]
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bdb0      	pop	{r4, r5, r7, pc}
 80067be:	bf00      	nop
 80067c0:	1a63c1f8 	.word	0x1a63c1f8
 80067c4:	404ca5dc 	.word	0x404ca5dc

080067c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ce:	4b0f      	ldr	r3, [pc, #60]	; (800680c <HAL_MspInit+0x44>)
 80067d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d2:	4a0e      	ldr	r2, [pc, #56]	; (800680c <HAL_MspInit+0x44>)
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	6613      	str	r3, [r2, #96]	; 0x60
 80067da:	4b0c      	ldr	r3, [pc, #48]	; (800680c <HAL_MspInit+0x44>)
 80067dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <HAL_MspInit+0x44>)
 80067e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ea:	4a08      	ldr	r2, [pc, #32]	; (800680c <HAL_MspInit+0x44>)
 80067ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f0:	6593      	str	r3, [r2, #88]	; 0x58
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <HAL_MspInit+0x44>)
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80067fe:	f001 fbd1 	bl	8007fa4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000

08006810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	; 0x30
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8006826:	4b2d      	ldr	r3, [pc, #180]	; (80068dc <HAL_InitTick+0xcc>)
 8006828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682a:	4a2c      	ldr	r2, [pc, #176]	; (80068dc <HAL_InitTick+0xcc>)
 800682c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006830:	6613      	str	r3, [r2, #96]	; 0x60
 8006832:	4b2a      	ldr	r3, [pc, #168]	; (80068dc <HAL_InitTick+0xcc>)
 8006834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800683e:	f107 020c 	add.w	r2, r7, #12
 8006842:	f107 0310 	add.w	r3, r7, #16
 8006846:	4611      	mov	r1, r2
 8006848:	4618      	mov	r0, r3
 800684a:	f002 f8a9 	bl	80089a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800684e:	f002 f891 	bl	8008974 <HAL_RCC_GetPCLK2Freq>
 8006852:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <HAL_InitTick+0xd0>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	0c9b      	lsrs	r3, r3, #18
 800685e:	3b01      	subs	r3, #1
 8006860:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8006862:	4b20      	ldr	r3, [pc, #128]	; (80068e4 <HAL_InitTick+0xd4>)
 8006864:	4a20      	ldr	r2, [pc, #128]	; (80068e8 <HAL_InitTick+0xd8>)
 8006866:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8006868:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <HAL_InitTick+0xd4>)
 800686a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800686e:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <HAL_InitTick+0xd4>)
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8006876:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <HAL_InitTick+0xd4>)
 8006878:	2200      	movs	r2, #0
 800687a:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800687c:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <HAL_InitTick+0xd4>)
 800687e:	2200      	movs	r2, #0
 8006880:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim8);
 8006882:	4818      	ldr	r0, [pc, #96]	; (80068e4 <HAL_InitTick+0xd4>)
 8006884:	f002 fb52 	bl	8008f2c <HAL_TIM_Base_Init>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800688e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11b      	bne.n	80068ce <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8006896:	4813      	ldr	r0, [pc, #76]	; (80068e4 <HAL_InitTick+0xd4>)
 8006898:	f002 fbaa 	bl	8008ff0 <HAL_TIM_Base_Start_IT>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80068a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d111      	bne.n	80068ce <HAL_InitTick+0xbe>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80068aa:	202c      	movs	r0, #44	; 0x2c
 80068ac:	f000 fb10 	bl	8006ed0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	d808      	bhi.n	80068c8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 80068b6:	2200      	movs	r2, #0
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	202c      	movs	r0, #44	; 0x2c
 80068bc:	f000 faee 	bl	8006e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <HAL_InitTick+0xdc>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e002      	b.n	80068ce <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80068ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3730      	adds	r7, #48	; 0x30
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40021000 	.word	0x40021000
 80068e0:	431bde83 	.word	0x431bde83
 80068e4:	200004a0 	.word	0x200004a0
 80068e8:	40013400 	.word	0x40013400
 80068ec:	20000028 	.word	0x20000028

080068f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80068f4:	e7fe      	b.n	80068f4 <NMI_Handler+0x4>

080068f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068f6:	b480      	push	{r7}
 80068f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068fa:	e7fe      	b.n	80068fa <HardFault_Handler+0x4>

080068fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006900:	e7fe      	b.n	8006900 <MemManage_Handler+0x4>

08006902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006902:	b480      	push	{r7}
 8006904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006906:	e7fe      	b.n	8006906 <BusFault_Handler+0x4>

08006908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800690c:	e7fe      	b.n	800690c <UsageFault_Handler+0x4>

0800690e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800690e:	b480      	push	{r7}
 8006910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006912:	bf00      	nop
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800692a:	b480      	push	{r7}
 800692c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800692e:	bf00      	nop
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800694a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800694e:	f000 fc67 	bl	8007220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006952:	bf00      	nop
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800695c:	4802      	ldr	r0, [pc, #8]	; (8006968 <TIM8_UP_IRQHandler+0x10>)
 800695e:	f002 fbbf 	bl	80090e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8006962:	bf00      	nop
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	200004a0 	.word	0x200004a0

0800696c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
	return 1;
 8006970:	2301      	movs	r3, #1
}
 8006972:	4618      	mov	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <_kill>:

int _kill(int pid, int sig)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006986:	f003 fcdb 	bl	800a340 <__errno>
 800698a:	4603      	mov	r3, r0
 800698c:	2216      	movs	r2, #22
 800698e:	601a      	str	r2, [r3, #0]
	return -1;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_exit>:

void _exit (int status)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80069a4:	f04f 31ff 	mov.w	r1, #4294967295
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff ffe7 	bl	800697c <_kill>
	while (1) {}		/* Make sure we hang here */
 80069ae:	e7fe      	b.n	80069ae <_exit+0x12>

080069b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e00a      	b.n	80069d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80069c2:	f3af 8000 	nop.w
 80069c6:	4601      	mov	r1, r0
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	60ba      	str	r2, [r7, #8]
 80069ce:	b2ca      	uxtb	r2, r1
 80069d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	3301      	adds	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	dbf0      	blt.n	80069c2 <_read+0x12>
	}

return len;
 80069e0:	687b      	ldr	r3, [r7, #4]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
	return -1;
 80069f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a12:	605a      	str	r2, [r3, #4]
	return 0;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <_isatty>:

int _isatty(int file)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
	return 1;
 8006a2a:	2301      	movs	r3, #1
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
	return 0;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a5c:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <_sbrk+0x5c>)
 8006a5e:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <_sbrk+0x60>)
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a68:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <_sbrk+0x64>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a70:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <_sbrk+0x64>)
 8006a72:	4a12      	ldr	r2, [pc, #72]	; (8006abc <_sbrk+0x68>)
 8006a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a76:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <_sbrk+0x64>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d207      	bcs.n	8006a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a84:	f003 fc5c 	bl	800a340 <__errno>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	220c      	movs	r2, #12
 8006a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a92:	e009      	b.n	8006aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a94:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <_sbrk+0x64>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <_sbrk+0x64>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	4a05      	ldr	r2, [pc, #20]	; (8006ab8 <_sbrk+0x64>)
 8006aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20020000 	.word	0x20020000
 8006ab4:	00000400 	.word	0x00000400
 8006ab8:	200004ec 	.word	0x200004ec
 8006abc:	20000598 	.word	0x20000598

08006ac0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <SystemInit+0x20>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	4a05      	ldr	r2, [pc, #20]	; (8006ae0 <SystemInit+0x20>)
 8006acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	e000ed00 	.word	0xe000ed00

08006ae4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006ae8:	4b21      	ldr	r3, [pc, #132]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006aea:	4a22      	ldr	r2, [pc, #136]	; (8006b74 <MX_LPUART1_UART_Init+0x90>)
 8006aec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8006aee:	4b20      	ldr	r3, [pc, #128]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006af0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006af4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006af6:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006afc:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006b02:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006b08:	4b19      	ldr	r3, [pc, #100]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b0a:	220c      	movs	r2, #12
 8006b0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b0e:	4b18      	ldr	r3, [pc, #96]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b14:	4b16      	ldr	r3, [pc, #88]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b1a:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b20:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006b26:	4812      	ldr	r0, [pc, #72]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b28:	f002 fd70 	bl	800960c <HAL_UART_Init>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8006b32:	f7fd fead 	bl	8004890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b36:	2100      	movs	r1, #0
 8006b38:	480d      	ldr	r0, [pc, #52]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b3a:	f003 fb37 	bl	800a1ac <HAL_UARTEx_SetTxFifoThreshold>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8006b44:	f7fd fea4 	bl	8004890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4809      	ldr	r0, [pc, #36]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b4c:	f003 fb6c 	bl	800a228 <HAL_UARTEx_SetRxFifoThreshold>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8006b56:	f7fd fe9b 	bl	8004890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006b5a:	4805      	ldr	r0, [pc, #20]	; (8006b70 <MX_LPUART1_UART_Init+0x8c>)
 8006b5c:	f003 faed 	bl	800a13a <HAL_UARTEx_DisableFifoMode>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8006b66:	f7fd fe93 	bl	8004890 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	200004f0 	.word	0x200004f0
 8006b74:	40008000 	.word	0x40008000

08006b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b09e      	sub	sp, #120	; 0x78
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	605a      	str	r2, [r3, #4]
 8006b8a:	609a      	str	r2, [r3, #8]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b90:	f107 0310 	add.w	r3, r7, #16
 8006b94:	2254      	movs	r2, #84	; 0x54
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f003 fbfb 	bl	800a394 <memset>
  if(uartHandle->Instance==LPUART1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <HAL_UART_MspInit+0xa8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d136      	bne.n	8006c16 <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006ba8:	2320      	movs	r3, #32
 8006baa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006bac:	2300      	movs	r3, #0
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006bb0:	f107 0310 	add.w	r3, r7, #16
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 ff6b 	bl	8008a90 <HAL_RCCEx_PeriphCLKConfig>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006bc0:	f7fd fe66 	bl	8004890 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006bc4:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <HAL_UART_MspInit+0xac>)
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc8:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <HAL_UART_MspInit+0xac>)
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	65d3      	str	r3, [r2, #92]	; 0x5c
 8006bd0:	4b14      	ldr	r3, [pc, #80]	; (8006c24 <HAL_UART_MspInit+0xac>)
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bdc:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <HAL_UART_MspInit+0xac>)
 8006bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be0:	4a10      	ldr	r2, [pc, #64]	; (8006c24 <HAL_UART_MspInit+0xac>)
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006be8:	4b0e      	ldr	r3, [pc, #56]	; (8006c24 <HAL_UART_MspInit+0xac>)
 8006bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c00:	2300      	movs	r3, #0
 8006c02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8006c04:	230c      	movs	r3, #12
 8006c06:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c12:	f000 f96b 	bl	8006eec <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8006c16:	bf00      	nop
 8006c18:	3778      	adds	r7, #120	; 0x78
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40008000 	.word	0x40008000
 8006c24:	40021000 	.word	0x40021000

08006c28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006c28:	480d      	ldr	r0, [pc, #52]	; (8006c60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006c2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c2c:	480d      	ldr	r0, [pc, #52]	; (8006c64 <LoopForever+0x6>)
  ldr r1, =_edata
 8006c2e:	490e      	ldr	r1, [pc, #56]	; (8006c68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006c30:	4a0e      	ldr	r2, [pc, #56]	; (8006c6c <LoopForever+0xe>)
  movs r3, #0
 8006c32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006c34:	e002      	b.n	8006c3c <LoopCopyDataInit>

08006c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c3a:	3304      	adds	r3, #4

08006c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c40:	d3f9      	bcc.n	8006c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c42:	4a0b      	ldr	r2, [pc, #44]	; (8006c70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006c44:	4c0b      	ldr	r4, [pc, #44]	; (8006c74 <LoopForever+0x16>)
  movs r3, #0
 8006c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c48:	e001      	b.n	8006c4e <LoopFillZerobss>

08006c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c4c:	3204      	adds	r2, #4

08006c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c50:	d3fb      	bcc.n	8006c4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006c52:	f7ff ff35 	bl	8006ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c56:	f003 fb79 	bl	800a34c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006c5a:	f7fd fb75 	bl	8004348 <main>

08006c5e <LoopForever>:

LoopForever:
    b LoopForever
 8006c5e:	e7fe      	b.n	8006c5e <LoopForever>
  ldr   r0, =_estack
 8006c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c68:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8006c6c:	08012160 	.word	0x08012160
  ldr r2, =_sbss
 8006c70:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8006c74:	20000594 	.word	0x20000594

08006c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c78:	e7fe      	b.n	8006c78 <ADC1_2_IRQHandler>

08006c7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c84:	2003      	movs	r0, #3
 8006c86:	f000 f8fe 	bl	8006e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c8a:	200f      	movs	r0, #15
 8006c8c:	f7ff fdc0 	bl	8006810 <HAL_InitTick>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	71fb      	strb	r3, [r7, #7]
 8006c9a:	e001      	b.n	8006ca0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006c9c:	f7ff fd94 	bl	80067c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006ca0:	79fb      	ldrb	r3, [r7, #7]

}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <HAL_IncTick+0x1c>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <HAL_IncTick+0x20>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4413      	add	r3, r2
 8006cba:	4a03      	ldr	r2, [pc, #12]	; (8006cc8 <HAL_IncTick+0x1c>)
 8006cbc:	6013      	str	r3, [r2, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000580 	.word	0x20000580
 8006ccc:	2000002c 	.word	0x2000002c

08006cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8006cd4:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <HAL_GetTick+0x14>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000580 	.word	0x20000580

08006ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cf0:	f7ff ffee 	bl	8006cd0 <HAL_GetTick>
 8006cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d004      	beq.n	8006d0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <HAL_Delay+0x40>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d0c:	bf00      	nop
 8006d0e:	f7ff ffdf 	bl	8006cd0 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d8f7      	bhi.n	8006d0e <HAL_Delay+0x26>
  {
  }
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	2000002c 	.word	0x2000002c

08006d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <__NVIC_SetPriorityGrouping+0x44>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d5e:	4a04      	ldr	r2, [pc, #16]	; (8006d70 <__NVIC_SetPriorityGrouping+0x44>)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	60d3      	str	r3, [r2, #12]
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	e000ed00 	.word	0xe000ed00

08006d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d78:	4b04      	ldr	r3, [pc, #16]	; (8006d8c <__NVIC_GetPriorityGrouping+0x18>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	f003 0307 	and.w	r3, r3, #7
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	e000ed00 	.word	0xe000ed00

08006d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	db0b      	blt.n	8006dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	f003 021f 	and.w	r2, r3, #31
 8006da8:	4907      	ldr	r1, [pc, #28]	; (8006dc8 <__NVIC_EnableIRQ+0x38>)
 8006daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	2001      	movs	r0, #1
 8006db2:	fa00 f202 	lsl.w	r2, r0, r2
 8006db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	e000e100 	.word	0xe000e100

08006dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	db0a      	blt.n	8006df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	490c      	ldr	r1, [pc, #48]	; (8006e18 <__NVIC_SetPriority+0x4c>)
 8006de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dea:	0112      	lsls	r2, r2, #4
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	440b      	add	r3, r1
 8006df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006df4:	e00a      	b.n	8006e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	4908      	ldr	r1, [pc, #32]	; (8006e1c <__NVIC_SetPriority+0x50>)
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	3b04      	subs	r3, #4
 8006e04:	0112      	lsls	r2, r2, #4
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	440b      	add	r3, r1
 8006e0a:	761a      	strb	r2, [r3, #24]
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	e000e100 	.word	0xe000e100
 8006e1c:	e000ed00 	.word	0xe000ed00

08006e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b089      	sub	sp, #36	; 0x24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	f1c3 0307 	rsb	r3, r3, #7
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	bf28      	it	cs
 8006e3e:	2304      	movcs	r3, #4
 8006e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	3304      	adds	r3, #4
 8006e46:	2b06      	cmp	r3, #6
 8006e48:	d902      	bls.n	8006e50 <NVIC_EncodePriority+0x30>
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	3b03      	subs	r3, #3
 8006e4e:	e000      	b.n	8006e52 <NVIC_EncodePriority+0x32>
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5e:	43da      	mvns	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	401a      	ands	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e68:	f04f 31ff 	mov.w	r1, #4294967295
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e72:	43d9      	mvns	r1, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e78:	4313      	orrs	r3, r2
         );
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3724      	adds	r7, #36	; 0x24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff ff4c 	bl	8006d2c <__NVIC_SetPriorityGrouping>
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006eaa:	f7ff ff63 	bl	8006d74 <__NVIC_GetPriorityGrouping>
 8006eae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	6978      	ldr	r0, [r7, #20]
 8006eb6:	f7ff ffb3 	bl	8006e20 <NVIC_EncodePriority>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff ff82 	bl	8006dcc <__NVIC_SetPriority>
}
 8006ec8:	bf00      	nop
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff ff56 	bl	8006d90 <__NVIC_EnableIRQ>
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006efa:	e15a      	b.n	80071b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	2101      	movs	r1, #1
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	fa01 f303 	lsl.w	r3, r1, r3
 8006f08:	4013      	ands	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 814c 	beq.w	80071ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d005      	beq.n	8006f2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d130      	bne.n	8006f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	2203      	movs	r2, #3
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4013      	ands	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f62:	2201      	movs	r2, #1
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	43db      	mvns	r3, r3
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	091b      	lsrs	r3, r3, #4
 8006f78:	f003 0201 	and.w	r2, r3, #1
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d017      	beq.n	8006fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	2203      	movs	r2, #3
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	43db      	mvns	r3, r3
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d123      	bne.n	800701e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	08da      	lsrs	r2, r3, #3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3208      	adds	r2, #8
 8006fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	220f      	movs	r2, #15
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	691a      	ldr	r2, [r3, #16]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	08da      	lsrs	r2, r3, #3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3208      	adds	r2, #8
 8007018:	6939      	ldr	r1, [r7, #16]
 800701a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	2203      	movs	r2, #3
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	43db      	mvns	r3, r3
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4013      	ands	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f003 0203 	and.w	r2, r3, #3
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80a6 	beq.w	80071ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007060:	4b5b      	ldr	r3, [pc, #364]	; (80071d0 <HAL_GPIO_Init+0x2e4>)
 8007062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007064:	4a5a      	ldr	r2, [pc, #360]	; (80071d0 <HAL_GPIO_Init+0x2e4>)
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	6613      	str	r3, [r2, #96]	; 0x60
 800706c:	4b58      	ldr	r3, [pc, #352]	; (80071d0 <HAL_GPIO_Init+0x2e4>)
 800706e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007078:	4a56      	ldr	r2, [pc, #344]	; (80071d4 <HAL_GPIO_Init+0x2e8>)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	089b      	lsrs	r3, r3, #2
 800707e:	3302      	adds	r3, #2
 8007080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	220f      	movs	r2, #15
 8007090:	fa02 f303 	lsl.w	r3, r2, r3
 8007094:	43db      	mvns	r3, r3
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4013      	ands	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80070a2:	d01f      	beq.n	80070e4 <HAL_GPIO_Init+0x1f8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a4c      	ldr	r2, [pc, #304]	; (80071d8 <HAL_GPIO_Init+0x2ec>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d019      	beq.n	80070e0 <HAL_GPIO_Init+0x1f4>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a4b      	ldr	r2, [pc, #300]	; (80071dc <HAL_GPIO_Init+0x2f0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d013      	beq.n	80070dc <HAL_GPIO_Init+0x1f0>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a4a      	ldr	r2, [pc, #296]	; (80071e0 <HAL_GPIO_Init+0x2f4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00d      	beq.n	80070d8 <HAL_GPIO_Init+0x1ec>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a49      	ldr	r2, [pc, #292]	; (80071e4 <HAL_GPIO_Init+0x2f8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d007      	beq.n	80070d4 <HAL_GPIO_Init+0x1e8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a48      	ldr	r2, [pc, #288]	; (80071e8 <HAL_GPIO_Init+0x2fc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d101      	bne.n	80070d0 <HAL_GPIO_Init+0x1e4>
 80070cc:	2305      	movs	r3, #5
 80070ce:	e00a      	b.n	80070e6 <HAL_GPIO_Init+0x1fa>
 80070d0:	2306      	movs	r3, #6
 80070d2:	e008      	b.n	80070e6 <HAL_GPIO_Init+0x1fa>
 80070d4:	2304      	movs	r3, #4
 80070d6:	e006      	b.n	80070e6 <HAL_GPIO_Init+0x1fa>
 80070d8:	2303      	movs	r3, #3
 80070da:	e004      	b.n	80070e6 <HAL_GPIO_Init+0x1fa>
 80070dc:	2302      	movs	r3, #2
 80070de:	e002      	b.n	80070e6 <HAL_GPIO_Init+0x1fa>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e000      	b.n	80070e6 <HAL_GPIO_Init+0x1fa>
 80070e4:	2300      	movs	r3, #0
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	f002 0203 	and.w	r2, r2, #3
 80070ec:	0092      	lsls	r2, r2, #2
 80070ee:	4093      	lsls	r3, r2
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070f6:	4937      	ldr	r1, [pc, #220]	; (80071d4 <HAL_GPIO_Init+0x2e8>)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	089b      	lsrs	r3, r3, #2
 80070fc:	3302      	adds	r3, #2
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007104:	4b39      	ldr	r3, [pc, #228]	; (80071ec <HAL_GPIO_Init+0x300>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	43db      	mvns	r3, r3
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4013      	ands	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007128:	4a30      	ldr	r2, [pc, #192]	; (80071ec <HAL_GPIO_Init+0x300>)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800712e:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <HAL_GPIO_Init+0x300>)
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	43db      	mvns	r3, r3
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4013      	ands	r3, r2
 800713c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007152:	4a26      	ldr	r2, [pc, #152]	; (80071ec <HAL_GPIO_Init+0x300>)
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007158:	4b24      	ldr	r3, [pc, #144]	; (80071ec <HAL_GPIO_Init+0x300>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	43db      	mvns	r3, r3
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4013      	ands	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <HAL_GPIO_Init+0x300>)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007182:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <HAL_GPIO_Init+0x300>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	43db      	mvns	r3, r3
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4013      	ands	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80071a6:	4a11      	ldr	r2, [pc, #68]	; (80071ec <HAL_GPIO_Init+0x300>)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3301      	adds	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	fa22 f303 	lsr.w	r3, r2, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f47f ae9d 	bne.w	8006efc <HAL_GPIO_Init+0x10>
  }
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40021000 	.word	0x40021000
 80071d4:	40010000 	.word	0x40010000
 80071d8:	48000400 	.word	0x48000400
 80071dc:	48000800 	.word	0x48000800
 80071e0:	48000c00 	.word	0x48000c00
 80071e4:	48001000 	.word	0x48001000
 80071e8:	48001400 	.word	0x48001400
 80071ec:	40010400 	.word	0x40010400

080071f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	807b      	strh	r3, [r7, #2]
 80071fc:	4613      	mov	r3, r2
 80071fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007200:	787b      	ldrb	r3, [r7, #1]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007206:	887a      	ldrh	r2, [r7, #2]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800720c:	e002      	b.n	8007214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800720e:	887a      	ldrh	r2, [r7, #2]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800722a:	4b08      	ldr	r3, [pc, #32]	; (800724c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800722c:	695a      	ldr	r2, [r3, #20]
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d006      	beq.n	8007244 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007236:	4a05      	ldr	r2, [pc, #20]	; (800724c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f806 	bl	8007250 <HAL_GPIO_EXTI_Callback>
  }
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40010400 	.word	0x40010400

08007250 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e081      	b.n	800737c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fc ffb5 	bl	80041fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2224      	movs	r2, #36	; 0x24
 8007296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0201 	bic.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072dc:	609a      	str	r2, [r3, #8]
 80072de:	e006      	b.n	80072ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80072ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d104      	bne.n	8007300 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800730e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007312:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007322:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69d9      	ldr	r1, [r3, #28]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0201 	orr.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af02      	add	r7, sp, #8
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	4608      	mov	r0, r1
 800738e:	4611      	mov	r1, r2
 8007390:	461a      	mov	r2, r3
 8007392:	4603      	mov	r3, r0
 8007394:	817b      	strh	r3, [r7, #10]
 8007396:	460b      	mov	r3, r1
 8007398:	813b      	strh	r3, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	f040 80f9 	bne.w	800759e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_I2C_Mem_Write+0x34>
 80073b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d105      	bne.n	80073c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e0ed      	b.n	80075a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <HAL_I2C_Mem_Write+0x4e>
 80073ce:	2302      	movs	r3, #2
 80073d0:	e0e6      	b.n	80075a0 <HAL_I2C_Mem_Write+0x21c>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073da:	f7ff fc79 	bl	8006cd0 <HAL_GetTick>
 80073de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	2319      	movs	r3, #25
 80073e6:	2201      	movs	r2, #1
 80073e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fac3 	bl	8007978 <I2C_WaitOnFlagUntilTimeout>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0d1      	b.n	80075a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2221      	movs	r2, #33	; 0x21
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2240      	movs	r2, #64	; 0x40
 8007408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a3a      	ldr	r2, [r7, #32]
 8007416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800741c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007424:	88f8      	ldrh	r0, [r7, #6]
 8007426:	893a      	ldrh	r2, [r7, #8]
 8007428:	8979      	ldrh	r1, [r7, #10]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	4603      	mov	r3, r0
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f9d3 	bl	80077e0 <I2C_RequestMemoryWrite>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0a9      	b.n	80075a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007450:	b29b      	uxth	r3, r3
 8007452:	2bff      	cmp	r3, #255	; 0xff
 8007454:	d90e      	bls.n	8007474 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	22ff      	movs	r2, #255	; 0xff
 800745a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007460:	b2da      	uxtb	r2, r3
 8007462:	8979      	ldrh	r1, [r7, #10]
 8007464:	2300      	movs	r3, #0
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fc2b 	bl	8007cc8 <I2C_TransferConfig>
 8007472:	e00f      	b.n	8007494 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007482:	b2da      	uxtb	r2, r3
 8007484:	8979      	ldrh	r1, [r7, #10]
 8007486:	2300      	movs	r3, #0
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 fc1a 	bl	8007cc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 faad 	bl	80079f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e07b      	b.n	80075a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	781a      	ldrb	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d034      	beq.n	800754c <HAL_I2C_Mem_Write+0x1c8>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d130      	bne.n	800754c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	2200      	movs	r2, #0
 80074f2:	2180      	movs	r1, #128	; 0x80
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fa3f 	bl	8007978 <I2C_WaitOnFlagUntilTimeout>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e04d      	b.n	80075a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	2bff      	cmp	r3, #255	; 0xff
 800750c:	d90e      	bls.n	800752c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	22ff      	movs	r2, #255	; 0xff
 8007512:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007518:	b2da      	uxtb	r2, r3
 800751a:	8979      	ldrh	r1, [r7, #10]
 800751c:	2300      	movs	r3, #0
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 fbcf 	bl	8007cc8 <I2C_TransferConfig>
 800752a:	e00f      	b.n	800754c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753a:	b2da      	uxtb	r2, r3
 800753c:	8979      	ldrh	r1, [r7, #10]
 800753e:	2300      	movs	r3, #0
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fbbe 	bl	8007cc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d19e      	bne.n	8007494 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fa8c 	bl	8007a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e01a      	b.n	80075a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2220      	movs	r2, #32
 8007570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6859      	ldr	r1, [r3, #4]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <HAL_I2C_Mem_Write+0x224>)
 800757e:	400b      	ands	r3, r1
 8007580:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	e000      	b.n	80075a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	fe00e800 	.word	0xfe00e800

080075ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	4608      	mov	r0, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	461a      	mov	r2, r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	817b      	strh	r3, [r7, #10]
 80075be:	460b      	mov	r3, r1
 80075c0:	813b      	strh	r3, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	f040 80fd 	bne.w	80077ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_I2C_Mem_Read+0x34>
 80075da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d105      	bne.n	80075ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e0f1      	b.n	80077d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_I2C_Mem_Read+0x4e>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e0ea      	b.n	80077d0 <HAL_I2C_Mem_Read+0x224>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007602:	f7ff fb65 	bl	8006cd0 <HAL_GetTick>
 8007606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2319      	movs	r3, #25
 800760e:	2201      	movs	r2, #1
 8007610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f9af 	bl	8007978 <I2C_WaitOnFlagUntilTimeout>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e0d5      	b.n	80077d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2222      	movs	r2, #34	; 0x22
 8007628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2240      	movs	r2, #64	; 0x40
 8007630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a3a      	ldr	r2, [r7, #32]
 800763e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800764c:	88f8      	ldrh	r0, [r7, #6]
 800764e:	893a      	ldrh	r2, [r7, #8]
 8007650:	8979      	ldrh	r1, [r7, #10]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	4603      	mov	r3, r0
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f913 	bl	8007888 <I2C_RequestMemoryRead>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0ad      	b.n	80077d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007678:	b29b      	uxth	r3, r3
 800767a:	2bff      	cmp	r3, #255	; 0xff
 800767c:	d90e      	bls.n	800769c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007688:	b2da      	uxtb	r2, r3
 800768a:	8979      	ldrh	r1, [r7, #10]
 800768c:	4b52      	ldr	r3, [pc, #328]	; (80077d8 <HAL_I2C_Mem_Read+0x22c>)
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fb17 	bl	8007cc8 <I2C_TransferConfig>
 800769a:	e00f      	b.n	80076bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	8979      	ldrh	r1, [r7, #10]
 80076ae:	4b4a      	ldr	r3, [pc, #296]	; (80077d8 <HAL_I2C_Mem_Read+0x22c>)
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fb06 	bl	8007cc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	2200      	movs	r2, #0
 80076c4:	2104      	movs	r1, #4
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f956 	bl	8007978 <I2C_WaitOnFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e07c      	b.n	80077d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d034      	beq.n	800777c <HAL_I2C_Mem_Read+0x1d0>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007716:	2b00      	cmp	r3, #0
 8007718:	d130      	bne.n	800777c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	2200      	movs	r2, #0
 8007722:	2180      	movs	r1, #128	; 0x80
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f927 	bl	8007978 <I2C_WaitOnFlagUntilTimeout>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e04d      	b.n	80077d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007738:	b29b      	uxth	r3, r3
 800773a:	2bff      	cmp	r3, #255	; 0xff
 800773c:	d90e      	bls.n	800775c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	22ff      	movs	r2, #255	; 0xff
 8007742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007748:	b2da      	uxtb	r2, r3
 800774a:	8979      	ldrh	r1, [r7, #10]
 800774c:	2300      	movs	r3, #0
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fab7 	bl	8007cc8 <I2C_TransferConfig>
 800775a:	e00f      	b.n	800777c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776a:	b2da      	uxtb	r2, r3
 800776c:	8979      	ldrh	r1, [r7, #10]
 800776e:	2300      	movs	r3, #0
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 faa6 	bl	8007cc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d19a      	bne.n	80076bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f974 	bl	8007a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e01a      	b.n	80077d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2220      	movs	r2, #32
 80077a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6859      	ldr	r1, [r3, #4]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <HAL_I2C_Mem_Read+0x230>)
 80077ae:	400b      	ands	r3, r1
 80077b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	e000      	b.n	80077d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	80002400 	.word	0x80002400
 80077dc:	fe00e800 	.word	0xfe00e800

080077e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	4608      	mov	r0, r1
 80077ea:	4611      	mov	r1, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	817b      	strh	r3, [r7, #10]
 80077f2:	460b      	mov	r3, r1
 80077f4:	813b      	strh	r3, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	8979      	ldrh	r1, [r7, #10]
 8007800:	4b20      	ldr	r3, [pc, #128]	; (8007884 <I2C_RequestMemoryWrite+0xa4>)
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fa5d 	bl	8007cc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	69b9      	ldr	r1, [r7, #24]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f8f0 	bl	80079f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e02c      	b.n	800787c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d105      	bne.n	8007834 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007828:	893b      	ldrh	r3, [r7, #8]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	629a      	str	r2, [r3, #40]	; 0x28
 8007832:	e015      	b.n	8007860 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007834:	893b      	ldrh	r3, [r7, #8]
 8007836:	0a1b      	lsrs	r3, r3, #8
 8007838:	b29b      	uxth	r3, r3
 800783a:	b2da      	uxtb	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	69b9      	ldr	r1, [r7, #24]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f8d6 	bl	80079f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e012      	b.n	800787c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2200      	movs	r2, #0
 8007868:	2180      	movs	r1, #128	; 0x80
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f884 	bl	8007978 <I2C_WaitOnFlagUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	80002000 	.word	0x80002000

08007888 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	461a      	mov	r2, r3
 8007896:	4603      	mov	r3, r0
 8007898:	817b      	strh	r3, [r7, #10]
 800789a:	460b      	mov	r3, r1
 800789c:	813b      	strh	r3, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	8979      	ldrh	r1, [r7, #10]
 80078a8:	4b20      	ldr	r3, [pc, #128]	; (800792c <I2C_RequestMemoryRead+0xa4>)
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	2300      	movs	r3, #0
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 fa0a 	bl	8007cc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	69b9      	ldr	r1, [r7, #24]
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f89d 	bl	80079f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e02c      	b.n	8007922 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078c8:	88fb      	ldrh	r3, [r7, #6]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d105      	bne.n	80078da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078ce:	893b      	ldrh	r3, [r7, #8]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	629a      	str	r2, [r3, #40]	; 0x28
 80078d8:	e015      	b.n	8007906 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80078da:	893b      	ldrh	r3, [r7, #8]
 80078dc:	0a1b      	lsrs	r3, r3, #8
 80078de:	b29b      	uxth	r3, r3
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	69b9      	ldr	r1, [r7, #24]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f883 	bl	80079f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e012      	b.n	8007922 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078fc:	893b      	ldrh	r3, [r7, #8]
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2200      	movs	r2, #0
 800790e:	2140      	movs	r1, #64	; 0x40
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f831 	bl	8007978 <I2C_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	80002000 	.word	0x80002000

08007930 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b02      	cmp	r3, #2
 8007944:	d103      	bne.n	800794e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b01      	cmp	r3, #1
 800795a:	d007      	beq.n	800796c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	619a      	str	r2, [r3, #24]
  }
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	4613      	mov	r3, r2
 8007986:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007988:	e022      	b.n	80079d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d01e      	beq.n	80079d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007992:	f7ff f99d 	bl	8006cd0 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d302      	bcc.n	80079a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d113      	bne.n	80079d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ac:	f043 0220 	orr.w	r2, r3, #32
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e00f      	b.n	80079f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	4013      	ands	r3, r2
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	429a      	cmp	r2, r3
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d0cd      	beq.n	800798a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a04:	e02c      	b.n	8007a60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f870 	bl	8007af0 <I2C_IsErrorOccurred>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e02a      	b.n	8007a70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d01e      	beq.n	8007a60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a22:	f7ff f955 	bl	8006cd0 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d302      	bcc.n	8007a38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d113      	bne.n	8007a60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3c:	f043 0220 	orr.w	r2, r3, #32
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e007      	b.n	8007a70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d1cb      	bne.n	8007a06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a84:	e028      	b.n	8007ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f830 	bl	8007af0 <I2C_IsErrorOccurred>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e026      	b.n	8007ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a9a:	f7ff f919 	bl	8006cd0 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d302      	bcc.n	8007ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d113      	bne.n	8007ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab4:	f043 0220 	orr.w	r2, r3, #32
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e007      	b.n	8007ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	d1cf      	bne.n	8007a86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	; 0x28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d075      	beq.n	8007c08 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2210      	movs	r2, #16
 8007b22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b24:	e056      	b.n	8007bd4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d052      	beq.n	8007bd4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b2e:	f7ff f8cf 	bl	8006cd0 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d302      	bcc.n	8007b44 <I2C_IsErrorOccurred+0x54>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d147      	bne.n	8007bd4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b66:	d12e      	bne.n	8007bc6 <I2C_IsErrorOccurred+0xd6>
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b6e:	d02a      	beq.n	8007bc6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007b70:	7cfb      	ldrb	r3, [r7, #19]
 8007b72:	2b20      	cmp	r3, #32
 8007b74:	d027      	beq.n	8007bc6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b84:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b86:	f7ff f8a3 	bl	8006cd0 <HAL_GetTick>
 8007b8a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b8c:	e01b      	b.n	8007bc6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b8e:	f7ff f89f 	bl	8006cd0 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b19      	cmp	r3, #25
 8007b9a:	d914      	bls.n	8007bc6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba0:	f043 0220 	orr.w	r2, r3, #32
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d1dc      	bne.n	8007b8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d003      	beq.n	8007bea <I2C_IsErrorOccurred+0xfa>
 8007be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d09d      	beq.n	8007b26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f043 0304 	orr.w	r3, r3, #4
 8007c00:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	f043 0301 	orr.w	r3, r3, #1
 8007c20:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00b      	beq.n	8007c54 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	f043 0308 	orr.w	r3, r3, #8
 8007c42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	f043 0302 	orr.w	r3, r3, #2
 8007c64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01c      	beq.n	8007cb8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff fe56 	bl	8007930 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6859      	ldr	r1, [r3, #4]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <I2C_IsErrorOccurred+0x1d4>)
 8007c90:	400b      	ands	r3, r1
 8007c92:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3728      	adds	r7, #40	; 0x28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	fe00e800 	.word	0xfe00e800

08007cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	607b      	str	r3, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	817b      	strh	r3, [r7, #10]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cda:	897b      	ldrh	r3, [r7, #10]
 8007cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ce0:	7a7b      	ldrb	r3, [r7, #9]
 8007ce2:	041b      	lsls	r3, r3, #16
 8007ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ce8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cf6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	0d5b      	lsrs	r3, r3, #21
 8007d02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007d06:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <I2C_TransferConfig+0x60>)
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	43db      	mvns	r3, r3
 8007d0c:	ea02 0103 	and.w	r1, r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	03ff63ff 	.word	0x03ff63ff

08007d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d138      	bne.n	8007db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e032      	b.n	8007db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2224      	movs	r2, #36	; 0x24
 8007d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6819      	ldr	r1, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	e000      	b.n	8007db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007db4:	2302      	movs	r3, #2
  }
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	d139      	bne.n	8007e4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e033      	b.n	8007e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2224      	movs	r2, #36	; 0x24
 8007df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	e000      	b.n	8007e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e4c:	2302      	movs	r3, #2
  }
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
	...

08007e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d141      	bne.n	8007eee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e6a:	4b4b      	ldr	r3, [pc, #300]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e76:	d131      	bne.n	8007edc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e78:	4b47      	ldr	r3, [pc, #284]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e7e:	4a46      	ldr	r2, [pc, #280]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e88:	4b43      	ldr	r3, [pc, #268]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e90:	4a41      	ldr	r2, [pc, #260]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e98:	4b40      	ldr	r3, [pc, #256]	; (8007f9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2232      	movs	r2, #50	; 0x32
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ea2:	4a3f      	ldr	r2, [pc, #252]	; (8007fa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea8:	0c9b      	lsrs	r3, r3, #18
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007eae:	e002      	b.n	8007eb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007eb6:	4b38      	ldr	r3, [pc, #224]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec2:	d102      	bne.n	8007eca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f2      	bne.n	8007eb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007eca:	4b33      	ldr	r3, [pc, #204]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed6:	d158      	bne.n	8007f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e057      	b.n	8007f8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007edc:	4b2e      	ldr	r3, [pc, #184]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ee2:	4a2d      	ldr	r2, [pc, #180]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007eec:	e04d      	b.n	8007f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef4:	d141      	bne.n	8007f7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ef6:	4b28      	ldr	r3, [pc, #160]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f02:	d131      	bne.n	8007f68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f04:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f0a:	4a23      	ldr	r2, [pc, #140]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f14:	4b20      	ldr	r3, [pc, #128]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f1c:	4a1e      	ldr	r2, [pc, #120]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f24:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2232      	movs	r2, #50	; 0x32
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	0c9b      	lsrs	r3, r3, #18
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f3a:	e002      	b.n	8007f42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f42:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4e:	d102      	bne.n	8007f56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1f2      	bne.n	8007f3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f56:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f62:	d112      	bne.n	8007f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e011      	b.n	8007f8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f68:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f6e:	4a0a      	ldr	r2, [pc, #40]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007f78:	e007      	b.n	8007f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f7a:	4b07      	ldr	r3, [pc, #28]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f82:	4a05      	ldr	r2, [pc, #20]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	40007000 	.word	0x40007000
 8007f9c:	20000024 	.word	0x20000024
 8007fa0:	431bde83 	.word	0x431bde83

08007fa4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	4a04      	ldr	r2, [pc, #16]	; (8007fc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fb2:	6093      	str	r3, [r2, #8]
}
 8007fb4:	bf00      	nop
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	40007000 	.word	0x40007000

08007fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e306      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d075      	beq.n	80080ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe2:	4b97      	ldr	r3, [pc, #604]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 030c 	and.w	r3, r3, #12
 8007fea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fec:	4b94      	ldr	r3, [pc, #592]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b0c      	cmp	r3, #12
 8007ffa:	d102      	bne.n	8008002 <HAL_RCC_OscConfig+0x3e>
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d002      	beq.n	8008008 <HAL_RCC_OscConfig+0x44>
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d10b      	bne.n	8008020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008008:	4b8d      	ldr	r3, [pc, #564]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d05b      	beq.n	80080cc <HAL_RCC_OscConfig+0x108>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d157      	bne.n	80080cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e2e1      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008028:	d106      	bne.n	8008038 <HAL_RCC_OscConfig+0x74>
 800802a:	4b85      	ldr	r3, [pc, #532]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a84      	ldr	r2, [pc, #528]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	e01d      	b.n	8008074 <HAL_RCC_OscConfig+0xb0>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008040:	d10c      	bne.n	800805c <HAL_RCC_OscConfig+0x98>
 8008042:	4b7f      	ldr	r3, [pc, #508]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a7e      	ldr	r2, [pc, #504]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	4b7c      	ldr	r3, [pc, #496]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a7b      	ldr	r2, [pc, #492]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	e00b      	b.n	8008074 <HAL_RCC_OscConfig+0xb0>
 800805c:	4b78      	ldr	r3, [pc, #480]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a77      	ldr	r2, [pc, #476]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	4b75      	ldr	r3, [pc, #468]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a74      	ldr	r2, [pc, #464]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800806e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d013      	beq.n	80080a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807c:	f7fe fe28 	bl	8006cd0 <HAL_GetTick>
 8008080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008084:	f7fe fe24 	bl	8006cd0 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b64      	cmp	r3, #100	; 0x64
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e2a6      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008096:	4b6a      	ldr	r3, [pc, #424]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <HAL_RCC_OscConfig+0xc0>
 80080a2:	e014      	b.n	80080ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a4:	f7fe fe14 	bl	8006cd0 <HAL_GetTick>
 80080a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080ac:	f7fe fe10 	bl	8006cd0 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b64      	cmp	r3, #100	; 0x64
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e292      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080be:	4b60      	ldr	r3, [pc, #384]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f0      	bne.n	80080ac <HAL_RCC_OscConfig+0xe8>
 80080ca:	e000      	b.n	80080ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d075      	beq.n	80081c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080da:	4b59      	ldr	r3, [pc, #356]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 030c 	and.w	r3, r3, #12
 80080e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080e4:	4b56      	ldr	r3, [pc, #344]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b0c      	cmp	r3, #12
 80080f2:	d102      	bne.n	80080fa <HAL_RCC_OscConfig+0x136>
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d002      	beq.n	8008100 <HAL_RCC_OscConfig+0x13c>
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d11f      	bne.n	8008140 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008100:	4b4f      	ldr	r3, [pc, #316]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <HAL_RCC_OscConfig+0x154>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e265      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008118:	4b49      	ldr	r3, [pc, #292]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	061b      	lsls	r3, r3, #24
 8008126:	4946      	ldr	r1, [pc, #280]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008128:	4313      	orrs	r3, r2
 800812a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800812c:	4b45      	ldr	r3, [pc, #276]	; (8008244 <HAL_RCC_OscConfig+0x280>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fb6d 	bl	8006810 <HAL_InitTick>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d043      	beq.n	80081c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e251      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d023      	beq.n	8008190 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008148:	4b3d      	ldr	r3, [pc, #244]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a3c      	ldr	r2, [pc, #240]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800814e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008154:	f7fe fdbc 	bl	8006cd0 <HAL_GetTick>
 8008158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800815a:	e008      	b.n	800816e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800815c:	f7fe fdb8 	bl	8006cd0 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d901      	bls.n	800816e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e23a      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800816e:	4b34      	ldr	r3, [pc, #208]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0f0      	beq.n	800815c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800817a:	4b31      	ldr	r3, [pc, #196]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	061b      	lsls	r3, r3, #24
 8008188:	492d      	ldr	r1, [pc, #180]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800818a:	4313      	orrs	r3, r2
 800818c:	604b      	str	r3, [r1, #4]
 800818e:	e01a      	b.n	80081c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008190:	4b2b      	ldr	r3, [pc, #172]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a2a      	ldr	r2, [pc, #168]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008196:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800819a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819c:	f7fe fd98 	bl	8006cd0 <HAL_GetTick>
 80081a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081a2:	e008      	b.n	80081b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081a4:	f7fe fd94 	bl	8006cd0 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e216      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081b6:	4b22      	ldr	r3, [pc, #136]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f0      	bne.n	80081a4 <HAL_RCC_OscConfig+0x1e0>
 80081c2:	e000      	b.n	80081c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0308 	and.w	r3, r3, #8
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d041      	beq.n	8008256 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01c      	beq.n	8008214 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081da:	4b19      	ldr	r3, [pc, #100]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 80081dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e0:	4a17      	ldr	r2, [pc, #92]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 80081e2:	f043 0301 	orr.w	r3, r3, #1
 80081e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ea:	f7fe fd71 	bl	8006cd0 <HAL_GetTick>
 80081ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081f0:	e008      	b.n	8008204 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081f2:	f7fe fd6d 	bl	8006cd0 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d901      	bls.n	8008204 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e1ef      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0ef      	beq.n	80081f2 <HAL_RCC_OscConfig+0x22e>
 8008212:	e020      	b.n	8008256 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 8008216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800821a:	4a09      	ldr	r2, [pc, #36]	; (8008240 <HAL_RCC_OscConfig+0x27c>)
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008224:	f7fe fd54 	bl	8006cd0 <HAL_GetTick>
 8008228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800822a:	e00d      	b.n	8008248 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800822c:	f7fe fd50 	bl	8006cd0 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d906      	bls.n	8008248 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e1d2      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
 800823e:	bf00      	nop
 8008240:	40021000 	.word	0x40021000
 8008244:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008248:	4b8c      	ldr	r3, [pc, #560]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 800824a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1ea      	bne.n	800822c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 80a6 	beq.w	80083b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008264:	2300      	movs	r3, #0
 8008266:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008268:	4b84      	ldr	r3, [pc, #528]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 800826a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_RCC_OscConfig+0x2b4>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <HAL_RCC_OscConfig+0x2b6>
 8008278:	2300      	movs	r3, #0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00d      	beq.n	800829a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800827e:	4b7f      	ldr	r3, [pc, #508]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008282:	4a7e      	ldr	r2, [pc, #504]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008288:	6593      	str	r3, [r2, #88]	; 0x58
 800828a:	4b7c      	ldr	r3, [pc, #496]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 800828c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008296:	2301      	movs	r3, #1
 8008298:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800829a:	4b79      	ldr	r3, [pc, #484]	; (8008480 <HAL_RCC_OscConfig+0x4bc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d118      	bne.n	80082d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082a6:	4b76      	ldr	r3, [pc, #472]	; (8008480 <HAL_RCC_OscConfig+0x4bc>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a75      	ldr	r2, [pc, #468]	; (8008480 <HAL_RCC_OscConfig+0x4bc>)
 80082ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082b2:	f7fe fd0d 	bl	8006cd0 <HAL_GetTick>
 80082b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082b8:	e008      	b.n	80082cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082ba:	f7fe fd09 	bl	8006cd0 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e18b      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082cc:	4b6c      	ldr	r3, [pc, #432]	; (8008480 <HAL_RCC_OscConfig+0x4bc>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0f0      	beq.n	80082ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d108      	bne.n	80082f2 <HAL_RCC_OscConfig+0x32e>
 80082e0:	4b66      	ldr	r3, [pc, #408]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	4a65      	ldr	r2, [pc, #404]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082f0:	e024      	b.n	800833c <HAL_RCC_OscConfig+0x378>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b05      	cmp	r3, #5
 80082f8:	d110      	bne.n	800831c <HAL_RCC_OscConfig+0x358>
 80082fa:	4b60      	ldr	r3, [pc, #384]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 80082fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008300:	4a5e      	ldr	r2, [pc, #376]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008302:	f043 0304 	orr.w	r3, r3, #4
 8008306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800830a:	4b5c      	ldr	r3, [pc, #368]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 800830c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008310:	4a5a      	ldr	r2, [pc, #360]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800831a:	e00f      	b.n	800833c <HAL_RCC_OscConfig+0x378>
 800831c:	4b57      	ldr	r3, [pc, #348]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 800831e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008322:	4a56      	ldr	r2, [pc, #344]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008324:	f023 0301 	bic.w	r3, r3, #1
 8008328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800832c:	4b53      	ldr	r3, [pc, #332]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008332:	4a52      	ldr	r2, [pc, #328]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008334:	f023 0304 	bic.w	r3, r3, #4
 8008338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d016      	beq.n	8008372 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008344:	f7fe fcc4 	bl	8006cd0 <HAL_GetTick>
 8008348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800834a:	e00a      	b.n	8008362 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800834c:	f7fe fcc0 	bl	8006cd0 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	f241 3288 	movw	r2, #5000	; 0x1388
 800835a:	4293      	cmp	r3, r2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e140      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008362:	4b46      	ldr	r3, [pc, #280]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0ed      	beq.n	800834c <HAL_RCC_OscConfig+0x388>
 8008370:	e015      	b.n	800839e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008372:	f7fe fcad 	bl	8006cd0 <HAL_GetTick>
 8008376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008378:	e00a      	b.n	8008390 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800837a:	f7fe fca9 	bl	8006cd0 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	f241 3288 	movw	r2, #5000	; 0x1388
 8008388:	4293      	cmp	r3, r2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e129      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008390:	4b3a      	ldr	r3, [pc, #232]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1ed      	bne.n	800837a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800839e:	7ffb      	ldrb	r3, [r7, #31]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d105      	bne.n	80083b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083a4:	4b35      	ldr	r3, [pc, #212]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 80083a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a8:	4a34      	ldr	r2, [pc, #208]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 80083aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d03c      	beq.n	8008436 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01c      	beq.n	80083fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083c4:	4b2d      	ldr	r3, [pc, #180]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 80083c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083ca:	4a2c      	ldr	r2, [pc, #176]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 80083cc:	f043 0301 	orr.w	r3, r3, #1
 80083d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083d4:	f7fe fc7c 	bl	8006cd0 <HAL_GetTick>
 80083d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083da:	e008      	b.n	80083ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083dc:	f7fe fc78 	bl	8006cd0 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e0fa      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083ee:	4b23      	ldr	r3, [pc, #140]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 80083f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0ef      	beq.n	80083dc <HAL_RCC_OscConfig+0x418>
 80083fc:	e01b      	b.n	8008436 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083fe:	4b1f      	ldr	r3, [pc, #124]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008400:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008404:	4a1d      	ldr	r2, [pc, #116]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008406:	f023 0301 	bic.w	r3, r3, #1
 800840a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800840e:	f7fe fc5f 	bl	8006cd0 <HAL_GetTick>
 8008412:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008414:	e008      	b.n	8008428 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008416:	f7fe fc5b 	bl	8006cd0 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e0dd      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008428:	4b14      	ldr	r3, [pc, #80]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 800842a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1ef      	bne.n	8008416 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80d1 	beq.w	80085e2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008440:	4b0e      	ldr	r3, [pc, #56]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 030c 	and.w	r3, r3, #12
 8008448:	2b0c      	cmp	r3, #12
 800844a:	f000 808b 	beq.w	8008564 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d15e      	bne.n	8008514 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008456:	4b09      	ldr	r3, [pc, #36]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a08      	ldr	r2, [pc, #32]	; (800847c <HAL_RCC_OscConfig+0x4b8>)
 800845c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008462:	f7fe fc35 	bl	8006cd0 <HAL_GetTick>
 8008466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008468:	e00c      	b.n	8008484 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800846a:	f7fe fc31 	bl	8006cd0 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	2b02      	cmp	r3, #2
 8008476:	d905      	bls.n	8008484 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e0b3      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
 800847c:	40021000 	.word	0x40021000
 8008480:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008484:	4b59      	ldr	r3, [pc, #356]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1ec      	bne.n	800846a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008490:	4b56      	ldr	r3, [pc, #344]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	4b56      	ldr	r3, [pc, #344]	; (80085f0 <HAL_RCC_OscConfig+0x62c>)
 8008496:	4013      	ands	r3, r2
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6a11      	ldr	r1, [r2, #32]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084a0:	3a01      	subs	r2, #1
 80084a2:	0112      	lsls	r2, r2, #4
 80084a4:	4311      	orrs	r1, r2
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80084aa:	0212      	lsls	r2, r2, #8
 80084ac:	4311      	orrs	r1, r2
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80084b2:	0852      	lsrs	r2, r2, #1
 80084b4:	3a01      	subs	r2, #1
 80084b6:	0552      	lsls	r2, r2, #21
 80084b8:	4311      	orrs	r1, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084be:	0852      	lsrs	r2, r2, #1
 80084c0:	3a01      	subs	r2, #1
 80084c2:	0652      	lsls	r2, r2, #25
 80084c4:	4311      	orrs	r1, r2
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80084ca:	06d2      	lsls	r2, r2, #27
 80084cc:	430a      	orrs	r2, r1
 80084ce:	4947      	ldr	r1, [pc, #284]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084d4:	4b45      	ldr	r3, [pc, #276]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a44      	ldr	r2, [pc, #272]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 80084da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084e0:	4b42      	ldr	r3, [pc, #264]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	4a41      	ldr	r2, [pc, #260]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 80084e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fe fbf0 	bl	8006cd0 <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084f4:	f7fe fbec 	bl	8006cd0 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e06e      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008506:	4b39      	ldr	r3, [pc, #228]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0f0      	beq.n	80084f4 <HAL_RCC_OscConfig+0x530>
 8008512:	e066      	b.n	80085e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008514:	4b35      	ldr	r3, [pc, #212]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a34      	ldr	r2, [pc, #208]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 800851a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800851e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008520:	4b32      	ldr	r3, [pc, #200]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	4a31      	ldr	r2, [pc, #196]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800852c:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	4a2e      	ldr	r2, [pc, #184]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008532:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800853a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800853c:	f7fe fbc8 	bl	8006cd0 <HAL_GetTick>
 8008540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008542:	e008      	b.n	8008556 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008544:	f7fe fbc4 	bl	8006cd0 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	2b02      	cmp	r3, #2
 8008550:	d901      	bls.n	8008556 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e046      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008556:	4b25      	ldr	r3, [pc, #148]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1f0      	bne.n	8008544 <HAL_RCC_OscConfig+0x580>
 8008562:	e03e      	b.n	80085e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e039      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008570:	4b1e      	ldr	r3, [pc, #120]	; (80085ec <HAL_RCC_OscConfig+0x628>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f003 0203 	and.w	r2, r3, #3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	429a      	cmp	r2, r3
 8008582:	d12c      	bne.n	80085de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	3b01      	subs	r3, #1
 8008590:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008592:	429a      	cmp	r2, r3
 8008594:	d123      	bne.n	80085de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d11b      	bne.n	80085de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d113      	bne.n	80085de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	085b      	lsrs	r3, r3, #1
 80085c2:	3b01      	subs	r3, #1
 80085c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d109      	bne.n	80085de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	3b01      	subs	r3, #1
 80085d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085da:	429a      	cmp	r2, r3
 80085dc:	d001      	beq.n	80085e2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e000      	b.n	80085e4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40021000 	.word	0x40021000
 80085f0:	019f800c 	.word	0x019f800c

080085f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80085fe:	2300      	movs	r3, #0
 8008600:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e11e      	b.n	800884a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800860c:	4b91      	ldr	r3, [pc, #580]	; (8008854 <HAL_RCC_ClockConfig+0x260>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d910      	bls.n	800863c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800861a:	4b8e      	ldr	r3, [pc, #568]	; (8008854 <HAL_RCC_ClockConfig+0x260>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f023 020f 	bic.w	r2, r3, #15
 8008622:	498c      	ldr	r1, [pc, #560]	; (8008854 <HAL_RCC_ClockConfig+0x260>)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	4313      	orrs	r3, r2
 8008628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800862a:	4b8a      	ldr	r3, [pc, #552]	; (8008854 <HAL_RCC_ClockConfig+0x260>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d001      	beq.n	800863c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e106      	b.n	800884a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d073      	beq.n	8008730 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b03      	cmp	r3, #3
 800864e:	d129      	bne.n	80086a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008650:	4b81      	ldr	r3, [pc, #516]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e0f4      	b.n	800884a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008660:	f000 f9d0 	bl	8008a04 <RCC_GetSysClockFreqFromPLLSource>
 8008664:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4a7c      	ldr	r2, [pc, #496]	; (800885c <HAL_RCC_ClockConfig+0x268>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d93f      	bls.n	80086ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800866e:	4b7a      	ldr	r3, [pc, #488]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008682:	2b00      	cmp	r3, #0
 8008684:	d033      	beq.n	80086ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800868a:	2b00      	cmp	r3, #0
 800868c:	d12f      	bne.n	80086ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800868e:	4b72      	ldr	r3, [pc, #456]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008696:	4a70      	ldr	r2, [pc, #448]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800869e:	2380      	movs	r3, #128	; 0x80
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	e024      	b.n	80086ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d107      	bne.n	80086bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086ac:	4b6a      	ldr	r3, [pc, #424]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d109      	bne.n	80086cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e0c6      	b.n	800884a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086bc:	4b66      	ldr	r3, [pc, #408]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e0be      	b.n	800884a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80086cc:	f000 f8ce 	bl	800886c <HAL_RCC_GetSysClockFreq>
 80086d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4a61      	ldr	r2, [pc, #388]	; (800885c <HAL_RCC_ClockConfig+0x268>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d909      	bls.n	80086ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80086da:	4b5f      	ldr	r3, [pc, #380]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086e2:	4a5d      	ldr	r2, [pc, #372]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 80086e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80086ea:	2380      	movs	r3, #128	; 0x80
 80086ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086ee:	4b5a      	ldr	r3, [pc, #360]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f023 0203 	bic.w	r2, r3, #3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	4957      	ldr	r1, [pc, #348]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008700:	f7fe fae6 	bl	8006cd0 <HAL_GetTick>
 8008704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008706:	e00a      	b.n	800871e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008708:	f7fe fae2 	bl	8006cd0 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	f241 3288 	movw	r2, #5000	; 0x1388
 8008716:	4293      	cmp	r3, r2
 8008718:	d901      	bls.n	800871e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e095      	b.n	800884a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800871e:	4b4e      	ldr	r3, [pc, #312]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 020c 	and.w	r2, r3, #12
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	429a      	cmp	r2, r3
 800872e:	d1eb      	bne.n	8008708 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d023      	beq.n	8008784 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d005      	beq.n	8008754 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008748:	4b43      	ldr	r3, [pc, #268]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	4a42      	ldr	r2, [pc, #264]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 800874e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008752:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008760:	4b3d      	ldr	r3, [pc, #244]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008768:	4a3b      	ldr	r2, [pc, #236]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 800876a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800876e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008770:	4b39      	ldr	r3, [pc, #228]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	4936      	ldr	r1, [pc, #216]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 800877e:	4313      	orrs	r3, r2
 8008780:	608b      	str	r3, [r1, #8]
 8008782:	e008      	b.n	8008796 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d105      	bne.n	8008796 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800878a:	4b33      	ldr	r3, [pc, #204]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4a32      	ldr	r2, [pc, #200]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008794:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008796:	4b2f      	ldr	r3, [pc, #188]	; (8008854 <HAL_RCC_ClockConfig+0x260>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d21d      	bcs.n	80087e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087a4:	4b2b      	ldr	r3, [pc, #172]	; (8008854 <HAL_RCC_ClockConfig+0x260>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f023 020f 	bic.w	r2, r3, #15
 80087ac:	4929      	ldr	r1, [pc, #164]	; (8008854 <HAL_RCC_ClockConfig+0x260>)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80087b4:	f7fe fa8c 	bl	8006cd0 <HAL_GetTick>
 80087b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ba:	e00a      	b.n	80087d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087bc:	f7fe fa88 	bl	8006cd0 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e03b      	b.n	800884a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087d2:	4b20      	ldr	r3, [pc, #128]	; (8008854 <HAL_RCC_ClockConfig+0x260>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 030f 	and.w	r3, r3, #15
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d1ed      	bne.n	80087bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d008      	beq.n	80087fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087ec:	4b1a      	ldr	r3, [pc, #104]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	4917      	ldr	r1, [pc, #92]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800880a:	4b13      	ldr	r3, [pc, #76]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	490f      	ldr	r1, [pc, #60]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 800881a:	4313      	orrs	r3, r2
 800881c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800881e:	f000 f825 	bl	800886c <HAL_RCC_GetSysClockFreq>
 8008822:	4602      	mov	r2, r0
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <HAL_RCC_ClockConfig+0x264>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	091b      	lsrs	r3, r3, #4
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	490c      	ldr	r1, [pc, #48]	; (8008860 <HAL_RCC_ClockConfig+0x26c>)
 8008830:	5ccb      	ldrb	r3, [r1, r3]
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	fa22 f303 	lsr.w	r3, r2, r3
 800883a:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <HAL_RCC_ClockConfig+0x270>)
 800883c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <HAL_RCC_ClockConfig+0x274>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f7fd ffe4 	bl	8006810 <HAL_InitTick>
 8008848:	4603      	mov	r3, r0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	40022000 	.word	0x40022000
 8008858:	40021000 	.word	0x40021000
 800885c:	04c4b400 	.word	0x04c4b400
 8008860:	080117b8 	.word	0x080117b8
 8008864:	20000024 	.word	0x20000024
 8008868:	20000028 	.word	0x20000028

0800886c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008872:	4b2c      	ldr	r3, [pc, #176]	; (8008924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 030c 	and.w	r3, r3, #12
 800887a:	2b04      	cmp	r3, #4
 800887c:	d102      	bne.n	8008884 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800887e:	4b2a      	ldr	r3, [pc, #168]	; (8008928 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	e047      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008884:	4b27      	ldr	r3, [pc, #156]	; (8008924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f003 030c 	and.w	r3, r3, #12
 800888c:	2b08      	cmp	r3, #8
 800888e:	d102      	bne.n	8008896 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008890:	4b26      	ldr	r3, [pc, #152]	; (800892c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	e03e      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008896:	4b23      	ldr	r3, [pc, #140]	; (8008924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 030c 	and.w	r3, r3, #12
 800889e:	2b0c      	cmp	r3, #12
 80088a0:	d136      	bne.n	8008910 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80088a2:	4b20      	ldr	r3, [pc, #128]	; (8008924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088ac:	4b1d      	ldr	r3, [pc, #116]	; (8008924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	091b      	lsrs	r3, r3, #4
 80088b2:	f003 030f 	and.w	r3, r3, #15
 80088b6:	3301      	adds	r3, #1
 80088b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d10c      	bne.n	80088da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088c0:	4a1a      	ldr	r2, [pc, #104]	; (800892c <HAL_RCC_GetSysClockFreq+0xc0>)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c8:	4a16      	ldr	r2, [pc, #88]	; (8008924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088ca:	68d2      	ldr	r2, [r2, #12]
 80088cc:	0a12      	lsrs	r2, r2, #8
 80088ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088d2:	fb02 f303 	mul.w	r3, r2, r3
 80088d6:	617b      	str	r3, [r7, #20]
      break;
 80088d8:	e00c      	b.n	80088f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088da:	4a13      	ldr	r2, [pc, #76]	; (8008928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e2:	4a10      	ldr	r2, [pc, #64]	; (8008924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088e4:	68d2      	ldr	r2, [r2, #12]
 80088e6:	0a12      	lsrs	r2, r2, #8
 80088e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088ec:	fb02 f303 	mul.w	r3, r2, r3
 80088f0:	617b      	str	r3, [r7, #20]
      break;
 80088f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088f4:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	0e5b      	lsrs	r3, r3, #25
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	3301      	adds	r3, #1
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	fbb2 f3f3 	udiv	r3, r2, r3
 800890c:	613b      	str	r3, [r7, #16]
 800890e:	e001      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008914:	693b      	ldr	r3, [r7, #16]
}
 8008916:	4618      	mov	r0, r3
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40021000 	.word	0x40021000
 8008928:	00f42400 	.word	0x00f42400
 800892c:	016e3600 	.word	0x016e3600

08008930 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008930:	b480      	push	{r7}
 8008932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008934:	4b03      	ldr	r3, [pc, #12]	; (8008944 <HAL_RCC_GetHCLKFreq+0x14>)
 8008936:	681b      	ldr	r3, [r3, #0]
}
 8008938:	4618      	mov	r0, r3
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000024 	.word	0x20000024

08008948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800894c:	f7ff fff0 	bl	8008930 <HAL_RCC_GetHCLKFreq>
 8008950:	4602      	mov	r2, r0
 8008952:	4b06      	ldr	r3, [pc, #24]	; (800896c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	4904      	ldr	r1, [pc, #16]	; (8008970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800895e:	5ccb      	ldrb	r3, [r1, r3]
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008968:	4618      	mov	r0, r3
 800896a:	bd80      	pop	{r7, pc}
 800896c:	40021000 	.word	0x40021000
 8008970:	080117c8 	.word	0x080117c8

08008974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008978:	f7ff ffda 	bl	8008930 <HAL_RCC_GetHCLKFreq>
 800897c:	4602      	mov	r2, r0
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	0adb      	lsrs	r3, r3, #11
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	4904      	ldr	r1, [pc, #16]	; (800899c <HAL_RCC_GetPCLK2Freq+0x28>)
 800898a:	5ccb      	ldrb	r3, [r1, r3]
 800898c:	f003 031f 	and.w	r3, r3, #31
 8008990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008994:	4618      	mov	r0, r3
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40021000 	.word	0x40021000
 800899c:	080117c8 	.word	0x080117c8

080089a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	220f      	movs	r2, #15
 80089ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80089b0:	4b12      	ldr	r3, [pc, #72]	; (80089fc <HAL_RCC_GetClockConfig+0x5c>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 0203 	and.w	r2, r3, #3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80089bc:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <HAL_RCC_GetClockConfig+0x5c>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80089c8:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <HAL_RCC_GetClockConfig+0x5c>)
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80089d4:	4b09      	ldr	r3, [pc, #36]	; (80089fc <HAL_RCC_GetClockConfig+0x5c>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	08db      	lsrs	r3, r3, #3
 80089da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80089e2:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <HAL_RCC_GetClockConfig+0x60>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 020f 	and.w	r2, r3, #15
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	40021000 	.word	0x40021000
 8008a00:	40022000 	.word	0x40022000

08008a04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008a0a:	4b1e      	ldr	r3, [pc, #120]	; (8008a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f003 0303 	and.w	r3, r3, #3
 8008a12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008a14:	4b1b      	ldr	r3, [pc, #108]	; (8008a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	091b      	lsrs	r3, r3, #4
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	3301      	adds	r3, #1
 8008a20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d10c      	bne.n	8008a42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a28:	4a17      	ldr	r2, [pc, #92]	; (8008a88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a30:	4a14      	ldr	r2, [pc, #80]	; (8008a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a32:	68d2      	ldr	r2, [r2, #12]
 8008a34:	0a12      	lsrs	r2, r2, #8
 8008a36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008a3a:	fb02 f303 	mul.w	r3, r2, r3
 8008a3e:	617b      	str	r3, [r7, #20]
    break;
 8008a40:	e00c      	b.n	8008a5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a42:	4a12      	ldr	r2, [pc, #72]	; (8008a8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4a:	4a0e      	ldr	r2, [pc, #56]	; (8008a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a4c:	68d2      	ldr	r2, [r2, #12]
 8008a4e:	0a12      	lsrs	r2, r2, #8
 8008a50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008a54:	fb02 f303 	mul.w	r3, r2, r3
 8008a58:	617b      	str	r3, [r7, #20]
    break;
 8008a5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	0e5b      	lsrs	r3, r3, #25
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	3301      	adds	r3, #1
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008a76:	687b      	ldr	r3, [r7, #4]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	371c      	adds	r7, #28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	40021000 	.word	0x40021000
 8008a88:	016e3600 	.word	0x016e3600
 8008a8c:	00f42400 	.word	0x00f42400

08008a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a98:	2300      	movs	r3, #0
 8008a9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 8098 	beq.w	8008bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ab2:	4b43      	ldr	r3, [pc, #268]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10d      	bne.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008abe:	4b40      	ldr	r3, [pc, #256]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac2:	4a3f      	ldr	r2, [pc, #252]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8008aca:	4b3d      	ldr	r3, [pc, #244]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad2:	60bb      	str	r3, [r7, #8]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ada:	4b3a      	ldr	r3, [pc, #232]	; (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a39      	ldr	r2, [pc, #228]	; (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ae6:	f7fe f8f3 	bl	8006cd0 <HAL_GetTick>
 8008aea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aec:	e009      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aee:	f7fe f8ef 	bl	8006cd0 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d902      	bls.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	74fb      	strb	r3, [r7, #19]
        break;
 8008b00:	e005      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b02:	4b30      	ldr	r3, [pc, #192]	; (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0ef      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008b0e:	7cfb      	ldrb	r3, [r7, #19]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d159      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b14:	4b2a      	ldr	r3, [pc, #168]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01e      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d019      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b30:	4b23      	ldr	r3, [pc, #140]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b3c:	4b20      	ldr	r3, [pc, #128]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b42:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b4c:	4b1c      	ldr	r3, [pc, #112]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b52:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008b5c:	4a18      	ldr	r2, [pc, #96]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d016      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6e:	f7fe f8af 	bl	8006cd0 <HAL_GetTick>
 8008b72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b74:	e00b      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b76:	f7fe f8ab 	bl	8006cd0 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d902      	bls.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	74fb      	strb	r3, [r7, #19]
            break;
 8008b8c:	e006      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0ec      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008b9c:	7cfb      	ldrb	r3, [r7, #19]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ba2:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb0:	4903      	ldr	r1, [pc, #12]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008bb8:	e008      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008bba:	7cfb      	ldrb	r3, [r7, #19]
 8008bbc:	74bb      	strb	r3, [r7, #18]
 8008bbe:	e005      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008bc0:	40021000 	.word	0x40021000
 8008bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc8:	7cfb      	ldrb	r3, [r7, #19]
 8008bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bcc:	7c7b      	ldrb	r3, [r7, #17]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d105      	bne.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bd2:	4ba7      	ldr	r3, [pc, #668]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd6:	4aa6      	ldr	r2, [pc, #664]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008bea:	4ba1      	ldr	r3, [pc, #644]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf0:	f023 0203 	bic.w	r2, r3, #3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	499d      	ldr	r1, [pc, #628]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00a      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c0c:	4b98      	ldr	r3, [pc, #608]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c12:	f023 020c 	bic.w	r2, r3, #12
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	4995      	ldr	r1, [pc, #596]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00a      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c2e:	4b90      	ldr	r3, [pc, #576]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	498c      	ldr	r1, [pc, #560]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00a      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008c50:	4b87      	ldr	r3, [pc, #540]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	4984      	ldr	r1, [pc, #528]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0310 	and.w	r3, r3, #16
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008c72:	4b7f      	ldr	r3, [pc, #508]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	497b      	ldr	r1, [pc, #492]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c94:	4b76      	ldr	r3, [pc, #472]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	4973      	ldr	r1, [pc, #460]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008cb6:	4b6e      	ldr	r3, [pc, #440]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	496a      	ldr	r1, [pc, #424]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008cd8:	4b65      	ldr	r3, [pc, #404]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	4962      	ldr	r1, [pc, #392]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008cfa:	4b5d      	ldr	r3, [pc, #372]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	4959      	ldr	r1, [pc, #356]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00a      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d1c:	4b54      	ldr	r3, [pc, #336]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d22:	f023 0203 	bic.w	r2, r3, #3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	4951      	ldr	r1, [pc, #324]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00a      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d3e:	4b4c      	ldr	r3, [pc, #304]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	4948      	ldr	r1, [pc, #288]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d015      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d60:	4b43      	ldr	r3, [pc, #268]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	4940      	ldr	r1, [pc, #256]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d7e:	d105      	bne.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d80:	4b3b      	ldr	r3, [pc, #236]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	4a3a      	ldr	r2, [pc, #232]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d015      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d98:	4b35      	ldr	r3, [pc, #212]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da6:	4932      	ldr	r1, [pc, #200]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db6:	d105      	bne.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008db8:	4b2d      	ldr	r3, [pc, #180]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	4a2c      	ldr	r2, [pc, #176]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dc2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d015      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dd0:	4b27      	ldr	r3, [pc, #156]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dde:	4924      	ldr	r1, [pc, #144]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008dee:	d105      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008df0:	4b1f      	ldr	r3, [pc, #124]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dfa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d015      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e08:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e16:	4916      	ldr	r1, [pc, #88]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e26:	d105      	bne.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e28:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d019      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	4908      	ldr	r1, [pc, #32]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e5e:	d109      	bne.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e60:	4b03      	ldr	r3, [pc, #12]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	4a02      	ldr	r2, [pc, #8]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e6a:	60d3      	str	r3, [r2, #12]
 8008e6c:	e002      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008e6e:	bf00      	nop
 8008e70:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d015      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008e80:	4b29      	ldr	r3, [pc, #164]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8e:	4926      	ldr	r1, [pc, #152]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e9e:	d105      	bne.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ea0:	4b21      	ldr	r3, [pc, #132]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	4a20      	ldr	r2, [pc, #128]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eaa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d015      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008eb8:	4b1b      	ldr	r3, [pc, #108]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ebe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec6:	4918      	ldr	r1, [pc, #96]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed6:	d105      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ed8:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	4a12      	ldr	r2, [pc, #72]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d015      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ef0:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ef6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008efe:	490a      	ldr	r1, [pc, #40]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f0e:	d105      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f10:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	4a04      	ldr	r2, [pc, #16]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008f1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	40021000 	.word	0x40021000

08008f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e049      	b.n	8008fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f841 	bl	8008fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f000 fa60 	bl	8009430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	d001      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e054      	b.n	80090b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a26      	ldr	r2, [pc, #152]	; (80090c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d022      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009032:	d01d      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a22      	ldr	r2, [pc, #136]	; (80090c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d018      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a21      	ldr	r2, [pc, #132]	; (80090c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1f      	ldr	r2, [pc, #124]	; (80090cc <HAL_TIM_Base_Start_IT+0xdc>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00e      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1e      	ldr	r2, [pc, #120]	; (80090d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d009      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1c      	ldr	r2, [pc, #112]	; (80090d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d004      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1b      	ldr	r2, [pc, #108]	; (80090d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d115      	bne.n	800909c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	4b19      	ldr	r3, [pc, #100]	; (80090dc <HAL_TIM_Base_Start_IT+0xec>)
 8009078:	4013      	ands	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b06      	cmp	r3, #6
 8009080:	d015      	beq.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009088:	d011      	beq.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0201 	orr.w	r2, r2, #1
 8009098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909a:	e008      	b.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	e000      	b.n	80090b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40012c00 	.word	0x40012c00
 80090c4:	40000400 	.word	0x40000400
 80090c8:	40000800 	.word	0x40000800
 80090cc:	40000c00 	.word	0x40000c00
 80090d0:	40013400 	.word	0x40013400
 80090d4:	40014000 	.word	0x40014000
 80090d8:	40015000 	.word	0x40015000
 80090dc:	00010007 	.word	0x00010007

080090e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d122      	bne.n	800913c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b02      	cmp	r3, #2
 8009102:	d11b      	bne.n	800913c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0202 	mvn.w	r2, #2
 800910c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f965 	bl	80093f2 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f957 	bl	80093de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f968 	bl	8009406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	f003 0304 	and.w	r3, r3, #4
 8009146:	2b04      	cmp	r3, #4
 8009148:	d122      	bne.n	8009190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b04      	cmp	r3, #4
 8009156:	d11b      	bne.n	8009190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0204 	mvn.w	r2, #4
 8009160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f93b 	bl	80093f2 <HAL_TIM_IC_CaptureCallback>
 800917c:	e005      	b.n	800918a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f92d 	bl	80093de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f93e 	bl	8009406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b08      	cmp	r3, #8
 800919c:	d122      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f003 0308 	and.w	r3, r3, #8
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d11b      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f06f 0208 	mvn.w	r2, #8
 80091b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2204      	movs	r2, #4
 80091ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f911 	bl	80093f2 <HAL_TIM_IC_CaptureCallback>
 80091d0:	e005      	b.n	80091de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f903 	bl	80093de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f914 	bl	8009406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f003 0310 	and.w	r3, r3, #16
 80091ee:	2b10      	cmp	r3, #16
 80091f0:	d122      	bne.n	8009238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b10      	cmp	r3, #16
 80091fe:	d11b      	bne.n	8009238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0210 	mvn.w	r2, #16
 8009208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2208      	movs	r2, #8
 800920e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f8e7 	bl	80093f2 <HAL_TIM_IC_CaptureCallback>
 8009224:	e005      	b.n	8009232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8d9 	bl	80093de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f8ea 	bl	8009406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b01      	cmp	r3, #1
 8009244:	d10e      	bne.n	8009264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b01      	cmp	r3, #1
 8009252:	d107      	bne.n	8009264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f06f 0201 	mvn.w	r2, #1
 800925c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7fb fb04 	bl	800486c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926e:	2b80      	cmp	r3, #128	; 0x80
 8009270:	d10e      	bne.n	8009290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800927c:	2b80      	cmp	r3, #128	; 0x80
 800927e:	d107      	bne.n	8009290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f982 	bl	8009594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800929e:	d10e      	bne.n	80092be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	2b80      	cmp	r3, #128	; 0x80
 80092ac:	d107      	bne.n	80092be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f975 	bl	80095a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d10e      	bne.n	80092ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d6:	2b40      	cmp	r3, #64	; 0x40
 80092d8:	d107      	bne.n	80092ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f898 	bl	800941a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d10e      	bne.n	8009316 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b20      	cmp	r3, #32
 8009304:	d107      	bne.n	8009316 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f06f 0220 	mvn.w	r2, #32
 800930e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f935 	bl	8009580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009324:	d10f      	bne.n	8009346 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009334:	d107      	bne.n	8009346 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800933e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f93b 	bl	80095bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009354:	d10f      	bne.n	8009376 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009364:	d107      	bne.n	8009376 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800936e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f92d 	bl	80095d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009384:	d10f      	bne.n	80093a6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009394:	d107      	bne.n	80093a6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800939e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f91f 	bl	80095e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093b4:	d10f      	bne.n	80093d6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093c4:	d107      	bne.n	80093d6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80093ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f911 	bl	80095f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093fa:	bf00      	nop
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800940e:	bf00      	nop
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
	...

08009430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a46      	ldr	r2, [pc, #280]	; (800955c <TIM_Base_SetConfig+0x12c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d017      	beq.n	8009478 <TIM_Base_SetConfig+0x48>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800944e:	d013      	beq.n	8009478 <TIM_Base_SetConfig+0x48>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a43      	ldr	r2, [pc, #268]	; (8009560 <TIM_Base_SetConfig+0x130>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00f      	beq.n	8009478 <TIM_Base_SetConfig+0x48>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a42      	ldr	r2, [pc, #264]	; (8009564 <TIM_Base_SetConfig+0x134>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00b      	beq.n	8009478 <TIM_Base_SetConfig+0x48>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a41      	ldr	r2, [pc, #260]	; (8009568 <TIM_Base_SetConfig+0x138>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d007      	beq.n	8009478 <TIM_Base_SetConfig+0x48>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a40      	ldr	r2, [pc, #256]	; (800956c <TIM_Base_SetConfig+0x13c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_Base_SetConfig+0x48>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a3f      	ldr	r2, [pc, #252]	; (8009570 <TIM_Base_SetConfig+0x140>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d108      	bne.n	800948a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a33      	ldr	r2, [pc, #204]	; (800955c <TIM_Base_SetConfig+0x12c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d023      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009498:	d01f      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a30      	ldr	r2, [pc, #192]	; (8009560 <TIM_Base_SetConfig+0x130>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d01b      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a2f      	ldr	r2, [pc, #188]	; (8009564 <TIM_Base_SetConfig+0x134>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d017      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a2e      	ldr	r2, [pc, #184]	; (8009568 <TIM_Base_SetConfig+0x138>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d013      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a2d      	ldr	r2, [pc, #180]	; (800956c <TIM_Base_SetConfig+0x13c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00f      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a2d      	ldr	r2, [pc, #180]	; (8009574 <TIM_Base_SetConfig+0x144>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00b      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a2c      	ldr	r2, [pc, #176]	; (8009578 <TIM_Base_SetConfig+0x148>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d007      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a2b      	ldr	r2, [pc, #172]	; (800957c <TIM_Base_SetConfig+0x14c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d003      	beq.n	80094da <TIM_Base_SetConfig+0xaa>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a26      	ldr	r2, [pc, #152]	; (8009570 <TIM_Base_SetConfig+0x140>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d108      	bne.n	80094ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a12      	ldr	r2, [pc, #72]	; (800955c <TIM_Base_SetConfig+0x12c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d013      	beq.n	8009540 <TIM_Base_SetConfig+0x110>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a14      	ldr	r2, [pc, #80]	; (800956c <TIM_Base_SetConfig+0x13c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00f      	beq.n	8009540 <TIM_Base_SetConfig+0x110>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a14      	ldr	r2, [pc, #80]	; (8009574 <TIM_Base_SetConfig+0x144>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00b      	beq.n	8009540 <TIM_Base_SetConfig+0x110>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a13      	ldr	r2, [pc, #76]	; (8009578 <TIM_Base_SetConfig+0x148>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d007      	beq.n	8009540 <TIM_Base_SetConfig+0x110>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a12      	ldr	r2, [pc, #72]	; (800957c <TIM_Base_SetConfig+0x14c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_Base_SetConfig+0x110>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a0d      	ldr	r2, [pc, #52]	; (8009570 <TIM_Base_SetConfig+0x140>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d103      	bne.n	8009548 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	615a      	str	r2, [r3, #20]
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40012c00 	.word	0x40012c00
 8009560:	40000400 	.word	0x40000400
 8009564:	40000800 	.word	0x40000800
 8009568:	40000c00 	.word	0x40000c00
 800956c:	40013400 	.word	0x40013400
 8009570:	40015000 	.word	0x40015000
 8009574:	40014000 	.word	0x40014000
 8009578:	40014400 	.word	0x40014400
 800957c:	40014800 	.word	0x40014800

08009580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e042      	b.n	80096a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fd faa1 	bl	8006b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2224      	movs	r2, #36	; 0x24
 800963a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0201 	bic.w	r2, r2, #1
 800964c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f8c2 	bl	80097d8 <UART_SetConfig>
 8009654:	4603      	mov	r3, r0
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e022      	b.n	80096a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fbb2 	bl	8009dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800967a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689a      	ldr	r2, [r3, #8]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800968a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0201 	orr.w	r2, r2, #1
 800969a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fc39 	bl	8009f14 <UART_CheckIdleState>
 80096a2:	4603      	mov	r3, r0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	; 0x28
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	4613      	mov	r3, r2
 80096ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	f040 8083 	bne.w	80097ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <HAL_UART_Transmit+0x28>
 80096ce:	88fb      	ldrh	r3, [r7, #6]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e07b      	b.n	80097d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_UART_Transmit+0x3a>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e074      	b.n	80097d0 <HAL_UART_Transmit+0x124>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2221      	movs	r2, #33	; 0x21
 80096fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096fe:	f7fd fae7 	bl	8006cd0 <HAL_GetTick>
 8009702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	88fa      	ldrh	r2, [r7, #6]
 8009708:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	88fa      	ldrh	r2, [r7, #6]
 8009710:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971c:	d108      	bne.n	8009730 <HAL_UART_Transmit+0x84>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d104      	bne.n	8009730 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	61bb      	str	r3, [r7, #24]
 800972e:	e003      	b.n	8009738 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009734:	2300      	movs	r3, #0
 8009736:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009740:	e02c      	b.n	800979c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2200      	movs	r2, #0
 800974a:	2180      	movs	r1, #128	; 0x80
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 fc2c 	bl	8009faa <UART_WaitOnFlagUntilTimeout>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e039      	b.n	80097d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10b      	bne.n	800977a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009770:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	3302      	adds	r3, #2
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	e007      	b.n	800978a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	781a      	ldrb	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	3301      	adds	r3, #1
 8009788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009790:	b29b      	uxth	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1cc      	bne.n	8009742 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	2200      	movs	r2, #0
 80097b0:	2140      	movs	r1, #64	; 0x40
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fbf9 	bl	8009faa <UART_WaitOnFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e006      	b.n	80097d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2220      	movs	r2, #32
 80097c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e000      	b.n	80097d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80097ce:	2302      	movs	r3, #2
  }
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3720      	adds	r7, #32
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097dc:	b08c      	sub	sp, #48	; 0x30
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	689a      	ldr	r2, [r3, #8]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	431a      	orrs	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	4baa      	ldr	r3, [pc, #680]	; (8009ab0 <UART_SetConfig+0x2d8>)
 8009808:	4013      	ands	r3, r2
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	6812      	ldr	r2, [r2, #0]
 800980e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009810:	430b      	orrs	r3, r1
 8009812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a9f      	ldr	r2, [pc, #636]	; (8009ab4 <UART_SetConfig+0x2dc>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d004      	beq.n	8009844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009840:	4313      	orrs	r3, r2
 8009842:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800984e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	6812      	ldr	r2, [r2, #0]
 8009856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009858:	430b      	orrs	r3, r1
 800985a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009862:	f023 010f 	bic.w	r1, r3, #15
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a90      	ldr	r2, [pc, #576]	; (8009ab8 <UART_SetConfig+0x2e0>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d125      	bne.n	80098c8 <UART_SetConfig+0xf0>
 800987c:	4b8f      	ldr	r3, [pc, #572]	; (8009abc <UART_SetConfig+0x2e4>)
 800987e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	2b03      	cmp	r3, #3
 8009888:	d81a      	bhi.n	80098c0 <UART_SetConfig+0xe8>
 800988a:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <UART_SetConfig+0xb8>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	080098a1 	.word	0x080098a1
 8009894:	080098b1 	.word	0x080098b1
 8009898:	080098a9 	.word	0x080098a9
 800989c:	080098b9 	.word	0x080098b9
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098a6:	e116      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80098a8:	2302      	movs	r3, #2
 80098aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ae:	e112      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80098b0:	2304      	movs	r3, #4
 80098b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098b6:	e10e      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80098b8:	2308      	movs	r3, #8
 80098ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098be:	e10a      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80098c0:	2310      	movs	r3, #16
 80098c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098c6:	e106      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a7c      	ldr	r2, [pc, #496]	; (8009ac0 <UART_SetConfig+0x2e8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d138      	bne.n	8009944 <UART_SetConfig+0x16c>
 80098d2:	4b7a      	ldr	r3, [pc, #488]	; (8009abc <UART_SetConfig+0x2e4>)
 80098d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d8:	f003 030c 	and.w	r3, r3, #12
 80098dc:	2b0c      	cmp	r3, #12
 80098de:	d82d      	bhi.n	800993c <UART_SetConfig+0x164>
 80098e0:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <UART_SetConfig+0x110>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	0800991d 	.word	0x0800991d
 80098ec:	0800993d 	.word	0x0800993d
 80098f0:	0800993d 	.word	0x0800993d
 80098f4:	0800993d 	.word	0x0800993d
 80098f8:	0800992d 	.word	0x0800992d
 80098fc:	0800993d 	.word	0x0800993d
 8009900:	0800993d 	.word	0x0800993d
 8009904:	0800993d 	.word	0x0800993d
 8009908:	08009925 	.word	0x08009925
 800990c:	0800993d 	.word	0x0800993d
 8009910:	0800993d 	.word	0x0800993d
 8009914:	0800993d 	.word	0x0800993d
 8009918:	08009935 	.word	0x08009935
 800991c:	2300      	movs	r3, #0
 800991e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009922:	e0d8      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009924:	2302      	movs	r3, #2
 8009926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800992a:	e0d4      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 800992c:	2304      	movs	r3, #4
 800992e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009932:	e0d0      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009934:	2308      	movs	r3, #8
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800993a:	e0cc      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 800993c:	2310      	movs	r3, #16
 800993e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009942:	e0c8      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a5e      	ldr	r2, [pc, #376]	; (8009ac4 <UART_SetConfig+0x2ec>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d125      	bne.n	800999a <UART_SetConfig+0x1c2>
 800994e:	4b5b      	ldr	r3, [pc, #364]	; (8009abc <UART_SetConfig+0x2e4>)
 8009950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009954:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009958:	2b30      	cmp	r3, #48	; 0x30
 800995a:	d016      	beq.n	800998a <UART_SetConfig+0x1b2>
 800995c:	2b30      	cmp	r3, #48	; 0x30
 800995e:	d818      	bhi.n	8009992 <UART_SetConfig+0x1ba>
 8009960:	2b20      	cmp	r3, #32
 8009962:	d00a      	beq.n	800997a <UART_SetConfig+0x1a2>
 8009964:	2b20      	cmp	r3, #32
 8009966:	d814      	bhi.n	8009992 <UART_SetConfig+0x1ba>
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <UART_SetConfig+0x19a>
 800996c:	2b10      	cmp	r3, #16
 800996e:	d008      	beq.n	8009982 <UART_SetConfig+0x1aa>
 8009970:	e00f      	b.n	8009992 <UART_SetConfig+0x1ba>
 8009972:	2300      	movs	r3, #0
 8009974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009978:	e0ad      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 800997a:	2302      	movs	r3, #2
 800997c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009980:	e0a9      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009982:	2304      	movs	r3, #4
 8009984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009988:	e0a5      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 800998a:	2308      	movs	r3, #8
 800998c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009990:	e0a1      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009992:	2310      	movs	r3, #16
 8009994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009998:	e09d      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a4a      	ldr	r2, [pc, #296]	; (8009ac8 <UART_SetConfig+0x2f0>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d125      	bne.n	80099f0 <UART_SetConfig+0x218>
 80099a4:	4b45      	ldr	r3, [pc, #276]	; (8009abc <UART_SetConfig+0x2e4>)
 80099a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099ae:	2bc0      	cmp	r3, #192	; 0xc0
 80099b0:	d016      	beq.n	80099e0 <UART_SetConfig+0x208>
 80099b2:	2bc0      	cmp	r3, #192	; 0xc0
 80099b4:	d818      	bhi.n	80099e8 <UART_SetConfig+0x210>
 80099b6:	2b80      	cmp	r3, #128	; 0x80
 80099b8:	d00a      	beq.n	80099d0 <UART_SetConfig+0x1f8>
 80099ba:	2b80      	cmp	r3, #128	; 0x80
 80099bc:	d814      	bhi.n	80099e8 <UART_SetConfig+0x210>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <UART_SetConfig+0x1f0>
 80099c2:	2b40      	cmp	r3, #64	; 0x40
 80099c4:	d008      	beq.n	80099d8 <UART_SetConfig+0x200>
 80099c6:	e00f      	b.n	80099e8 <UART_SetConfig+0x210>
 80099c8:	2300      	movs	r3, #0
 80099ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ce:	e082      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80099d0:	2302      	movs	r3, #2
 80099d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099d6:	e07e      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80099d8:	2304      	movs	r3, #4
 80099da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099de:	e07a      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80099e0:	2308      	movs	r3, #8
 80099e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099e6:	e076      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80099e8:	2310      	movs	r3, #16
 80099ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ee:	e072      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a35      	ldr	r2, [pc, #212]	; (8009acc <UART_SetConfig+0x2f4>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d12a      	bne.n	8009a50 <UART_SetConfig+0x278>
 80099fa:	4b30      	ldr	r3, [pc, #192]	; (8009abc <UART_SetConfig+0x2e4>)
 80099fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a08:	d01a      	beq.n	8009a40 <UART_SetConfig+0x268>
 8009a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a0e:	d81b      	bhi.n	8009a48 <UART_SetConfig+0x270>
 8009a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a14:	d00c      	beq.n	8009a30 <UART_SetConfig+0x258>
 8009a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a1a:	d815      	bhi.n	8009a48 <UART_SetConfig+0x270>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <UART_SetConfig+0x250>
 8009a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a24:	d008      	beq.n	8009a38 <UART_SetConfig+0x260>
 8009a26:	e00f      	b.n	8009a48 <UART_SetConfig+0x270>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a2e:	e052      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009a30:	2302      	movs	r3, #2
 8009a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a36:	e04e      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a3e:	e04a      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009a40:	2308      	movs	r3, #8
 8009a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a46:	e046      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a4e:	e042      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a17      	ldr	r2, [pc, #92]	; (8009ab4 <UART_SetConfig+0x2dc>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d13a      	bne.n	8009ad0 <UART_SetConfig+0x2f8>
 8009a5a:	4b18      	ldr	r3, [pc, #96]	; (8009abc <UART_SetConfig+0x2e4>)
 8009a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a68:	d01a      	beq.n	8009aa0 <UART_SetConfig+0x2c8>
 8009a6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a6e:	d81b      	bhi.n	8009aa8 <UART_SetConfig+0x2d0>
 8009a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a74:	d00c      	beq.n	8009a90 <UART_SetConfig+0x2b8>
 8009a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a7a:	d815      	bhi.n	8009aa8 <UART_SetConfig+0x2d0>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <UART_SetConfig+0x2b0>
 8009a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a84:	d008      	beq.n	8009a98 <UART_SetConfig+0x2c0>
 8009a86:	e00f      	b.n	8009aa8 <UART_SetConfig+0x2d0>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a8e:	e022      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009a90:	2302      	movs	r3, #2
 8009a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a96:	e01e      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a9e:	e01a      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aa6:	e016      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aae:	e012      	b.n	8009ad6 <UART_SetConfig+0x2fe>
 8009ab0:	cfff69f3 	.word	0xcfff69f3
 8009ab4:	40008000 	.word	0x40008000
 8009ab8:	40013800 	.word	0x40013800
 8009abc:	40021000 	.word	0x40021000
 8009ac0:	40004400 	.word	0x40004400
 8009ac4:	40004800 	.word	0x40004800
 8009ac8:	40004c00 	.word	0x40004c00
 8009acc:	40005000 	.word	0x40005000
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4aae      	ldr	r2, [pc, #696]	; (8009d94 <UART_SetConfig+0x5bc>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	f040 8097 	bne.w	8009c10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	d823      	bhi.n	8009b32 <UART_SetConfig+0x35a>
 8009aea:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <UART_SetConfig+0x318>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b15 	.word	0x08009b15
 8009af4:	08009b33 	.word	0x08009b33
 8009af8:	08009b1d 	.word	0x08009b1d
 8009afc:	08009b33 	.word	0x08009b33
 8009b00:	08009b23 	.word	0x08009b23
 8009b04:	08009b33 	.word	0x08009b33
 8009b08:	08009b33 	.word	0x08009b33
 8009b0c:	08009b33 	.word	0x08009b33
 8009b10:	08009b2b 	.word	0x08009b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b14:	f7fe ff18 	bl	8008948 <HAL_RCC_GetPCLK1Freq>
 8009b18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b1a:	e010      	b.n	8009b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b1c:	4b9e      	ldr	r3, [pc, #632]	; (8009d98 <UART_SetConfig+0x5c0>)
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b20:	e00d      	b.n	8009b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b22:	f7fe fea3 	bl	800886c <HAL_RCC_GetSysClockFreq>
 8009b26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b28:	e009      	b.n	8009b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b30:	e005      	b.n	8009b3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 8130 	beq.w	8009da6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	4a94      	ldr	r2, [pc, #592]	; (8009d9c <UART_SetConfig+0x5c4>)
 8009b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b50:	461a      	mov	r2, r3
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	4413      	add	r3, r2
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d305      	bcc.n	8009b76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b70:	69ba      	ldr	r2, [r7, #24]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d903      	bls.n	8009b7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b7c:	e113      	b.n	8009da6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	2200      	movs	r2, #0
 8009b82:	60bb      	str	r3, [r7, #8]
 8009b84:	60fa      	str	r2, [r7, #12]
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	4a84      	ldr	r2, [pc, #528]	; (8009d9c <UART_SetConfig+0x5c4>)
 8009b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	2200      	movs	r2, #0
 8009b94:	603b      	str	r3, [r7, #0]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ba0:	f7f7 f9a8 	bl	8000ef4 <__aeabi_uldivmod>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4619      	mov	r1, r3
 8009bac:	f04f 0200 	mov.w	r2, #0
 8009bb0:	f04f 0300 	mov.w	r3, #0
 8009bb4:	020b      	lsls	r3, r1, #8
 8009bb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bba:	0202      	lsls	r2, r0, #8
 8009bbc:	6979      	ldr	r1, [r7, #20]
 8009bbe:	6849      	ldr	r1, [r1, #4]
 8009bc0:	0849      	lsrs	r1, r1, #1
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	eb12 0804 	adds.w	r8, r2, r4
 8009bcc:	eb43 0905 	adc.w	r9, r3, r5
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	469a      	mov	sl, r3
 8009bd8:	4693      	mov	fp, r2
 8009bda:	4652      	mov	r2, sl
 8009bdc:	465b      	mov	r3, fp
 8009bde:	4640      	mov	r0, r8
 8009be0:	4649      	mov	r1, r9
 8009be2:	f7f7 f987 	bl	8000ef4 <__aeabi_uldivmod>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4613      	mov	r3, r2
 8009bec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bf4:	d308      	bcc.n	8009c08 <UART_SetConfig+0x430>
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bfc:	d204      	bcs.n	8009c08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6a3a      	ldr	r2, [r7, #32]
 8009c04:	60da      	str	r2, [r3, #12]
 8009c06:	e0ce      	b.n	8009da6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c0e:	e0ca      	b.n	8009da6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c18:	d166      	bne.n	8009ce8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009c1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	d827      	bhi.n	8009c72 <UART_SetConfig+0x49a>
 8009c22:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <UART_SetConfig+0x450>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c55 	.word	0x08009c55
 8009c30:	08009c5d 	.word	0x08009c5d
 8009c34:	08009c73 	.word	0x08009c73
 8009c38:	08009c63 	.word	0x08009c63
 8009c3c:	08009c73 	.word	0x08009c73
 8009c40:	08009c73 	.word	0x08009c73
 8009c44:	08009c73 	.word	0x08009c73
 8009c48:	08009c6b 	.word	0x08009c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4c:	f7fe fe7c 	bl	8008948 <HAL_RCC_GetPCLK1Freq>
 8009c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c52:	e014      	b.n	8009c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c54:	f7fe fe8e 	bl	8008974 <HAL_RCC_GetPCLK2Freq>
 8009c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c5a:	e010      	b.n	8009c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c5c:	4b4e      	ldr	r3, [pc, #312]	; (8009d98 <UART_SetConfig+0x5c0>)
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c60:	e00d      	b.n	8009c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c62:	f7fe fe03 	bl	800886c <HAL_RCC_GetSysClockFreq>
 8009c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c68:	e009      	b.n	8009c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c70:	e005      	b.n	8009c7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 8090 	beq.w	8009da6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	4a44      	ldr	r2, [pc, #272]	; (8009d9c <UART_SetConfig+0x5c4>)
 8009c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c90:	461a      	mov	r2, r3
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c98:	005a      	lsls	r2, r3, #1
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	085b      	lsrs	r3, r3, #1
 8009ca0:	441a      	add	r2, r3
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009caa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	2b0f      	cmp	r3, #15
 8009cb0:	d916      	bls.n	8009ce0 <UART_SetConfig+0x508>
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb8:	d212      	bcs.n	8009ce0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	f023 030f 	bic.w	r3, r3, #15
 8009cc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	085b      	lsrs	r3, r3, #1
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	f003 0307 	and.w	r3, r3, #7
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	8bfb      	ldrh	r3, [r7, #30]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	8bfa      	ldrh	r2, [r7, #30]
 8009cdc:	60da      	str	r2, [r3, #12]
 8009cde:	e062      	b.n	8009da6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ce6:	e05e      	b.n	8009da6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d828      	bhi.n	8009d42 <UART_SetConfig+0x56a>
 8009cf0:	a201      	add	r2, pc, #4	; (adr r2, 8009cf8 <UART_SetConfig+0x520>)
 8009cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf6:	bf00      	nop
 8009cf8:	08009d1d 	.word	0x08009d1d
 8009cfc:	08009d25 	.word	0x08009d25
 8009d00:	08009d2d 	.word	0x08009d2d
 8009d04:	08009d43 	.word	0x08009d43
 8009d08:	08009d33 	.word	0x08009d33
 8009d0c:	08009d43 	.word	0x08009d43
 8009d10:	08009d43 	.word	0x08009d43
 8009d14:	08009d43 	.word	0x08009d43
 8009d18:	08009d3b 	.word	0x08009d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d1c:	f7fe fe14 	bl	8008948 <HAL_RCC_GetPCLK1Freq>
 8009d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d22:	e014      	b.n	8009d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d24:	f7fe fe26 	bl	8008974 <HAL_RCC_GetPCLK2Freq>
 8009d28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d2a:	e010      	b.n	8009d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d2c:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <UART_SetConfig+0x5c0>)
 8009d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d30:	e00d      	b.n	8009d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d32:	f7fe fd9b 	bl	800886c <HAL_RCC_GetSysClockFreq>
 8009d36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d38:	e009      	b.n	8009d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d40:	e005      	b.n	8009d4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009d4c:	bf00      	nop
    }

    if (pclk != 0U)
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d028      	beq.n	8009da6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	4a10      	ldr	r2, [pc, #64]	; (8009d9c <UART_SetConfig+0x5c4>)
 8009d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	441a      	add	r2, r3
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	2b0f      	cmp	r3, #15
 8009d7c:	d910      	bls.n	8009da0 <UART_SetConfig+0x5c8>
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d84:	d20c      	bcs.n	8009da0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	60da      	str	r2, [r3, #12]
 8009d90:	e009      	b.n	8009da6 <UART_SetConfig+0x5ce>
 8009d92:	bf00      	nop
 8009d94:	40008000 	.word	0x40008000
 8009d98:	00f42400 	.word	0x00f42400
 8009d9c:	080117d0 	.word	0x080117d0
      }
      else
      {
        ret = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2200      	movs	r2, #0
 8009dba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009dc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3730      	adds	r7, #48	; 0x30
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e20:	f003 0304 	and.w	r3, r3, #4
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e42:	f003 0308 	and.w	r3, r3, #8
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e64:	f003 0310 	and.w	r3, r3, #16
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00a      	beq.n	8009e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d01a      	beq.n	8009ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ece:	d10a      	bne.n	8009ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	430a      	orrs	r2, r1
 8009f06:	605a      	str	r2, [r3, #4]
  }
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af02      	add	r7, sp, #8
 8009f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f24:	f7fc fed4 	bl	8006cd0 <HAL_GetTick>
 8009f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0308 	and.w	r3, r3, #8
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d10e      	bne.n	8009f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f82f 	bl	8009faa <UART_WaitOnFlagUntilTimeout>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e025      	b.n	8009fa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d10e      	bne.n	8009f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f819 	bl	8009faa <UART_WaitOnFlagUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e00f      	b.n	8009fa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b09c      	sub	sp, #112	; 0x70
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	603b      	str	r3, [r7, #0]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fba:	e0a9      	b.n	800a110 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc2:	f000 80a5 	beq.w	800a110 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fc6:	f7fc fe83 	bl	8006cd0 <HAL_GetTick>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d302      	bcc.n	8009fdc <UART_WaitOnFlagUntilTimeout+0x32>
 8009fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d140      	bne.n	800a05e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ffc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e6      	bne.n	8009fdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3308      	adds	r3, #8
 800a014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a018:	e853 3f00 	ldrex	r3, [r3]
 800a01c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	f023 0301 	bic.w	r3, r3, #1
 800a024:	663b      	str	r3, [r7, #96]	; 0x60
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3308      	adds	r3, #8
 800a02c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a02e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e5      	bne.n	800a00e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2220      	movs	r2, #32
 800a046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e069      	b.n	800a132 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d051      	beq.n	800a110 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a07a:	d149      	bne.n	800a110 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a084:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a09a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e6      	bne.n	800a086 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f023 0301 	bic.w	r3, r3, #1
 800a0ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0d8:	623a      	str	r2, [r7, #32]
 800a0da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0dc:	69f9      	ldr	r1, [r7, #28]
 800a0de:	6a3a      	ldr	r2, [r7, #32]
 800a0e0:	e841 2300 	strex	r3, r2, [r1]
 800a0e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e5      	bne.n	800a0b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e010      	b.n	800a132 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	69da      	ldr	r2, [r3, #28]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4013      	ands	r3, r2
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	bf0c      	ite	eq
 800a120:	2301      	moveq	r3, #1
 800a122:	2300      	movne	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	461a      	mov	r2, r3
 800a128:	79fb      	ldrb	r3, [r7, #7]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	f43f af46 	beq.w	8009fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3770      	adds	r7, #112	; 0x70
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d101      	bne.n	800a150 <HAL_UARTEx_DisableFifoMode+0x16>
 800a14c:	2302      	movs	r3, #2
 800a14e:	e027      	b.n	800a1a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2224      	movs	r2, #36	; 0x24
 800a15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0201 	bic.w	r2, r2, #1
 800a176:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a17e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2220      	movs	r2, #32
 800a192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d101      	bne.n	800a1c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e02d      	b.n	800a220 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2224      	movs	r2, #36	; 0x24
 800a1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f022 0201 	bic.w	r2, r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f84f 	bl	800a2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2220      	movs	r2, #32
 800a212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d101      	bne.n	800a240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a23c:	2302      	movs	r3, #2
 800a23e:	e02d      	b.n	800a29c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2224      	movs	r2, #36	; 0x24
 800a24c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f022 0201 	bic.w	r2, r2, #1
 800a266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f811 	bl	800a2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d108      	bne.n	800a2c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2c4:	e031      	b.n	800a32a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2c6:	2308      	movs	r3, #8
 800a2c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2ca:	2308      	movs	r3, #8
 800a2cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	0e5b      	lsrs	r3, r3, #25
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	f003 0307 	and.w	r3, r3, #7
 800a2dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	0f5b      	lsrs	r3, r3, #29
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
 800a2f0:	7b3a      	ldrb	r2, [r7, #12]
 800a2f2:	4911      	ldr	r1, [pc, #68]	; (800a338 <UARTEx_SetNbDataToProcess+0x94>)
 800a2f4:	5c8a      	ldrb	r2, [r1, r2]
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2fa:	7b3a      	ldrb	r2, [r7, #12]
 800a2fc:	490f      	ldr	r1, [pc, #60]	; (800a33c <UARTEx_SetNbDataToProcess+0x98>)
 800a2fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a300:	fb93 f3f2 	sdiv	r3, r3, r2
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	7b7a      	ldrb	r2, [r7, #13]
 800a310:	4909      	ldr	r1, [pc, #36]	; (800a338 <UARTEx_SetNbDataToProcess+0x94>)
 800a312:	5c8a      	ldrb	r2, [r1, r2]
 800a314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a318:	7b7a      	ldrb	r2, [r7, #13]
 800a31a:	4908      	ldr	r1, [pc, #32]	; (800a33c <UARTEx_SetNbDataToProcess+0x98>)
 800a31c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a31e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a322:	b29a      	uxth	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a32a:	bf00      	nop
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	080117e8 	.word	0x080117e8
 800a33c:	080117f0 	.word	0x080117f0

0800a340 <__errno>:
 800a340:	4b01      	ldr	r3, [pc, #4]	; (800a348 <__errno+0x8>)
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	20000030 	.word	0x20000030

0800a34c <__libc_init_array>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	4d0d      	ldr	r5, [pc, #52]	; (800a384 <__libc_init_array+0x38>)
 800a350:	4c0d      	ldr	r4, [pc, #52]	; (800a388 <__libc_init_array+0x3c>)
 800a352:	1b64      	subs	r4, r4, r5
 800a354:	10a4      	asrs	r4, r4, #2
 800a356:	2600      	movs	r6, #0
 800a358:	42a6      	cmp	r6, r4
 800a35a:	d109      	bne.n	800a370 <__libc_init_array+0x24>
 800a35c:	4d0b      	ldr	r5, [pc, #44]	; (800a38c <__libc_init_array+0x40>)
 800a35e:	4c0c      	ldr	r4, [pc, #48]	; (800a390 <__libc_init_array+0x44>)
 800a360:	f007 f9fc 	bl	801175c <_init>
 800a364:	1b64      	subs	r4, r4, r5
 800a366:	10a4      	asrs	r4, r4, #2
 800a368:	2600      	movs	r6, #0
 800a36a:	42a6      	cmp	r6, r4
 800a36c:	d105      	bne.n	800a37a <__libc_init_array+0x2e>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	f855 3b04 	ldr.w	r3, [r5], #4
 800a374:	4798      	blx	r3
 800a376:	3601      	adds	r6, #1
 800a378:	e7ee      	b.n	800a358 <__libc_init_array+0xc>
 800a37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a37e:	4798      	blx	r3
 800a380:	3601      	adds	r6, #1
 800a382:	e7f2      	b.n	800a36a <__libc_init_array+0x1e>
 800a384:	08012158 	.word	0x08012158
 800a388:	08012158 	.word	0x08012158
 800a38c:	08012158 	.word	0x08012158
 800a390:	0801215c 	.word	0x0801215c

0800a394 <memset>:
 800a394:	4402      	add	r2, r0
 800a396:	4603      	mov	r3, r0
 800a398:	4293      	cmp	r3, r2
 800a39a:	d100      	bne.n	800a39e <memset+0xa>
 800a39c:	4770      	bx	lr
 800a39e:	f803 1b01 	strb.w	r1, [r3], #1
 800a3a2:	e7f9      	b.n	800a398 <memset+0x4>

0800a3a4 <__cvt>:
 800a3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	ec55 4b10 	vmov	r4, r5, d0
 800a3ac:	2d00      	cmp	r5, #0
 800a3ae:	460e      	mov	r6, r1
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	462b      	mov	r3, r5
 800a3b4:	bfbb      	ittet	lt
 800a3b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a3ba:	461d      	movlt	r5, r3
 800a3bc:	2300      	movge	r3, #0
 800a3be:	232d      	movlt	r3, #45	; 0x2d
 800a3c0:	700b      	strb	r3, [r1, #0]
 800a3c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a3c8:	4691      	mov	r9, r2
 800a3ca:	f023 0820 	bic.w	r8, r3, #32
 800a3ce:	bfbc      	itt	lt
 800a3d0:	4622      	movlt	r2, r4
 800a3d2:	4614      	movlt	r4, r2
 800a3d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3d8:	d005      	beq.n	800a3e6 <__cvt+0x42>
 800a3da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a3de:	d100      	bne.n	800a3e2 <__cvt+0x3e>
 800a3e0:	3601      	adds	r6, #1
 800a3e2:	2102      	movs	r1, #2
 800a3e4:	e000      	b.n	800a3e8 <__cvt+0x44>
 800a3e6:	2103      	movs	r1, #3
 800a3e8:	ab03      	add	r3, sp, #12
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	ab02      	add	r3, sp, #8
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	ec45 4b10 	vmov	d0, r4, r5
 800a3f4:	4653      	mov	r3, sl
 800a3f6:	4632      	mov	r2, r6
 800a3f8:	f001 fdc6 	bl	800bf88 <_dtoa_r>
 800a3fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a400:	4607      	mov	r7, r0
 800a402:	d102      	bne.n	800a40a <__cvt+0x66>
 800a404:	f019 0f01 	tst.w	r9, #1
 800a408:	d022      	beq.n	800a450 <__cvt+0xac>
 800a40a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a40e:	eb07 0906 	add.w	r9, r7, r6
 800a412:	d110      	bne.n	800a436 <__cvt+0x92>
 800a414:	783b      	ldrb	r3, [r7, #0]
 800a416:	2b30      	cmp	r3, #48	; 0x30
 800a418:	d10a      	bne.n	800a430 <__cvt+0x8c>
 800a41a:	2200      	movs	r2, #0
 800a41c:	2300      	movs	r3, #0
 800a41e:	4620      	mov	r0, r4
 800a420:	4629      	mov	r1, r5
 800a422:	f7f6 fb79 	bl	8000b18 <__aeabi_dcmpeq>
 800a426:	b918      	cbnz	r0, 800a430 <__cvt+0x8c>
 800a428:	f1c6 0601 	rsb	r6, r6, #1
 800a42c:	f8ca 6000 	str.w	r6, [sl]
 800a430:	f8da 3000 	ldr.w	r3, [sl]
 800a434:	4499      	add	r9, r3
 800a436:	2200      	movs	r2, #0
 800a438:	2300      	movs	r3, #0
 800a43a:	4620      	mov	r0, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7f6 fb6b 	bl	8000b18 <__aeabi_dcmpeq>
 800a442:	b108      	cbz	r0, 800a448 <__cvt+0xa4>
 800a444:	f8cd 900c 	str.w	r9, [sp, #12]
 800a448:	2230      	movs	r2, #48	; 0x30
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	454b      	cmp	r3, r9
 800a44e:	d307      	bcc.n	800a460 <__cvt+0xbc>
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a454:	1bdb      	subs	r3, r3, r7
 800a456:	4638      	mov	r0, r7
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	b004      	add	sp, #16
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	1c59      	adds	r1, r3, #1
 800a462:	9103      	str	r1, [sp, #12]
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	e7f0      	b.n	800a44a <__cvt+0xa6>

0800a468 <__exponent>:
 800a468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a46a:	4603      	mov	r3, r0
 800a46c:	2900      	cmp	r1, #0
 800a46e:	bfb8      	it	lt
 800a470:	4249      	neglt	r1, r1
 800a472:	f803 2b02 	strb.w	r2, [r3], #2
 800a476:	bfb4      	ite	lt
 800a478:	222d      	movlt	r2, #45	; 0x2d
 800a47a:	222b      	movge	r2, #43	; 0x2b
 800a47c:	2909      	cmp	r1, #9
 800a47e:	7042      	strb	r2, [r0, #1]
 800a480:	dd2a      	ble.n	800a4d8 <__exponent+0x70>
 800a482:	f10d 0407 	add.w	r4, sp, #7
 800a486:	46a4      	mov	ip, r4
 800a488:	270a      	movs	r7, #10
 800a48a:	46a6      	mov	lr, r4
 800a48c:	460a      	mov	r2, r1
 800a48e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a492:	fb07 1516 	mls	r5, r7, r6, r1
 800a496:	3530      	adds	r5, #48	; 0x30
 800a498:	2a63      	cmp	r2, #99	; 0x63
 800a49a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a49e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	dcf1      	bgt.n	800a48a <__exponent+0x22>
 800a4a6:	3130      	adds	r1, #48	; 0x30
 800a4a8:	f1ae 0502 	sub.w	r5, lr, #2
 800a4ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a4b0:	1c44      	adds	r4, r0, #1
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	4561      	cmp	r1, ip
 800a4b6:	d30a      	bcc.n	800a4ce <__exponent+0x66>
 800a4b8:	f10d 0209 	add.w	r2, sp, #9
 800a4bc:	eba2 020e 	sub.w	r2, r2, lr
 800a4c0:	4565      	cmp	r5, ip
 800a4c2:	bf88      	it	hi
 800a4c4:	2200      	movhi	r2, #0
 800a4c6:	4413      	add	r3, r2
 800a4c8:	1a18      	subs	r0, r3, r0
 800a4ca:	b003      	add	sp, #12
 800a4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a4d6:	e7ed      	b.n	800a4b4 <__exponent+0x4c>
 800a4d8:	2330      	movs	r3, #48	; 0x30
 800a4da:	3130      	adds	r1, #48	; 0x30
 800a4dc:	7083      	strb	r3, [r0, #2]
 800a4de:	70c1      	strb	r1, [r0, #3]
 800a4e0:	1d03      	adds	r3, r0, #4
 800a4e2:	e7f1      	b.n	800a4c8 <__exponent+0x60>

0800a4e4 <_printf_float>:
 800a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e8:	ed2d 8b02 	vpush	{d8}
 800a4ec:	b08d      	sub	sp, #52	; 0x34
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a4f4:	4616      	mov	r6, r2
 800a4f6:	461f      	mov	r7, r3
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	f002 ff97 	bl	800d42c <_localeconv_r>
 800a4fe:	f8d0 a000 	ldr.w	sl, [r0]
 800a502:	4650      	mov	r0, sl
 800a504:	f7f5 fe8c 	bl	8000220 <strlen>
 800a508:	2300      	movs	r3, #0
 800a50a:	930a      	str	r3, [sp, #40]	; 0x28
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	9305      	str	r3, [sp, #20]
 800a510:	f8d8 3000 	ldr.w	r3, [r8]
 800a514:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a518:	3307      	adds	r3, #7
 800a51a:	f023 0307 	bic.w	r3, r3, #7
 800a51e:	f103 0208 	add.w	r2, r3, #8
 800a522:	f8c8 2000 	str.w	r2, [r8]
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a52e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a536:	9307      	str	r3, [sp, #28]
 800a538:	f8cd 8018 	str.w	r8, [sp, #24]
 800a53c:	ee08 0a10 	vmov	s16, r0
 800a540:	4b9f      	ldr	r3, [pc, #636]	; (800a7c0 <_printf_float+0x2dc>)
 800a542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a546:	f04f 32ff 	mov.w	r2, #4294967295
 800a54a:	f7f6 fb17 	bl	8000b7c <__aeabi_dcmpun>
 800a54e:	bb88      	cbnz	r0, 800a5b4 <_printf_float+0xd0>
 800a550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a554:	4b9a      	ldr	r3, [pc, #616]	; (800a7c0 <_printf_float+0x2dc>)
 800a556:	f04f 32ff 	mov.w	r2, #4294967295
 800a55a:	f7f6 faf1 	bl	8000b40 <__aeabi_dcmple>
 800a55e:	bb48      	cbnz	r0, 800a5b4 <_printf_float+0xd0>
 800a560:	2200      	movs	r2, #0
 800a562:	2300      	movs	r3, #0
 800a564:	4640      	mov	r0, r8
 800a566:	4649      	mov	r1, r9
 800a568:	f7f6 fae0 	bl	8000b2c <__aeabi_dcmplt>
 800a56c:	b110      	cbz	r0, 800a574 <_printf_float+0x90>
 800a56e:	232d      	movs	r3, #45	; 0x2d
 800a570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a574:	4b93      	ldr	r3, [pc, #588]	; (800a7c4 <_printf_float+0x2e0>)
 800a576:	4894      	ldr	r0, [pc, #592]	; (800a7c8 <_printf_float+0x2e4>)
 800a578:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a57c:	bf94      	ite	ls
 800a57e:	4698      	movls	r8, r3
 800a580:	4680      	movhi	r8, r0
 800a582:	2303      	movs	r3, #3
 800a584:	6123      	str	r3, [r4, #16]
 800a586:	9b05      	ldr	r3, [sp, #20]
 800a588:	f023 0204 	bic.w	r2, r3, #4
 800a58c:	6022      	str	r2, [r4, #0]
 800a58e:	f04f 0900 	mov.w	r9, #0
 800a592:	9700      	str	r7, [sp, #0]
 800a594:	4633      	mov	r3, r6
 800a596:	aa0b      	add	r2, sp, #44	; 0x2c
 800a598:	4621      	mov	r1, r4
 800a59a:	4628      	mov	r0, r5
 800a59c:	f000 f9d8 	bl	800a950 <_printf_common>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	f040 8090 	bne.w	800a6c6 <_printf_float+0x1e2>
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5aa:	b00d      	add	sp, #52	; 0x34
 800a5ac:	ecbd 8b02 	vpop	{d8}
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	464b      	mov	r3, r9
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	f7f6 fade 	bl	8000b7c <__aeabi_dcmpun>
 800a5c0:	b140      	cbz	r0, 800a5d4 <_printf_float+0xf0>
 800a5c2:	464b      	mov	r3, r9
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bfbc      	itt	lt
 800a5c8:	232d      	movlt	r3, #45	; 0x2d
 800a5ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5ce:	487f      	ldr	r0, [pc, #508]	; (800a7cc <_printf_float+0x2e8>)
 800a5d0:	4b7f      	ldr	r3, [pc, #508]	; (800a7d0 <_printf_float+0x2ec>)
 800a5d2:	e7d1      	b.n	800a578 <_printf_float+0x94>
 800a5d4:	6863      	ldr	r3, [r4, #4]
 800a5d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a5da:	9206      	str	r2, [sp, #24]
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	d13f      	bne.n	800a660 <_printf_float+0x17c>
 800a5e0:	2306      	movs	r3, #6
 800a5e2:	6063      	str	r3, [r4, #4]
 800a5e4:	9b05      	ldr	r3, [sp, #20]
 800a5e6:	6861      	ldr	r1, [r4, #4]
 800a5e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	9303      	str	r3, [sp, #12]
 800a5f0:	ab0a      	add	r3, sp, #40	; 0x28
 800a5f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a5f6:	ab09      	add	r3, sp, #36	; 0x24
 800a5f8:	ec49 8b10 	vmov	d0, r8, r9
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a604:	4628      	mov	r0, r5
 800a606:	f7ff fecd 	bl	800a3a4 <__cvt>
 800a60a:	9b06      	ldr	r3, [sp, #24]
 800a60c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a60e:	2b47      	cmp	r3, #71	; 0x47
 800a610:	4680      	mov	r8, r0
 800a612:	d108      	bne.n	800a626 <_printf_float+0x142>
 800a614:	1cc8      	adds	r0, r1, #3
 800a616:	db02      	blt.n	800a61e <_printf_float+0x13a>
 800a618:	6863      	ldr	r3, [r4, #4]
 800a61a:	4299      	cmp	r1, r3
 800a61c:	dd41      	ble.n	800a6a2 <_printf_float+0x1be>
 800a61e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a622:	fa5f fb8b 	uxtb.w	fp, fp
 800a626:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a62a:	d820      	bhi.n	800a66e <_printf_float+0x18a>
 800a62c:	3901      	subs	r1, #1
 800a62e:	465a      	mov	r2, fp
 800a630:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a634:	9109      	str	r1, [sp, #36]	; 0x24
 800a636:	f7ff ff17 	bl	800a468 <__exponent>
 800a63a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a63c:	1813      	adds	r3, r2, r0
 800a63e:	2a01      	cmp	r2, #1
 800a640:	4681      	mov	r9, r0
 800a642:	6123      	str	r3, [r4, #16]
 800a644:	dc02      	bgt.n	800a64c <_printf_float+0x168>
 800a646:	6822      	ldr	r2, [r4, #0]
 800a648:	07d2      	lsls	r2, r2, #31
 800a64a:	d501      	bpl.n	800a650 <_printf_float+0x16c>
 800a64c:	3301      	adds	r3, #1
 800a64e:	6123      	str	r3, [r4, #16]
 800a650:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a654:	2b00      	cmp	r3, #0
 800a656:	d09c      	beq.n	800a592 <_printf_float+0xae>
 800a658:	232d      	movs	r3, #45	; 0x2d
 800a65a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a65e:	e798      	b.n	800a592 <_printf_float+0xae>
 800a660:	9a06      	ldr	r2, [sp, #24]
 800a662:	2a47      	cmp	r2, #71	; 0x47
 800a664:	d1be      	bne.n	800a5e4 <_printf_float+0x100>
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1bc      	bne.n	800a5e4 <_printf_float+0x100>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e7b9      	b.n	800a5e2 <_printf_float+0xfe>
 800a66e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a672:	d118      	bne.n	800a6a6 <_printf_float+0x1c2>
 800a674:	2900      	cmp	r1, #0
 800a676:	6863      	ldr	r3, [r4, #4]
 800a678:	dd0b      	ble.n	800a692 <_printf_float+0x1ae>
 800a67a:	6121      	str	r1, [r4, #16]
 800a67c:	b913      	cbnz	r3, 800a684 <_printf_float+0x1a0>
 800a67e:	6822      	ldr	r2, [r4, #0]
 800a680:	07d0      	lsls	r0, r2, #31
 800a682:	d502      	bpl.n	800a68a <_printf_float+0x1a6>
 800a684:	3301      	adds	r3, #1
 800a686:	440b      	add	r3, r1
 800a688:	6123      	str	r3, [r4, #16]
 800a68a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a68c:	f04f 0900 	mov.w	r9, #0
 800a690:	e7de      	b.n	800a650 <_printf_float+0x16c>
 800a692:	b913      	cbnz	r3, 800a69a <_printf_float+0x1b6>
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	07d2      	lsls	r2, r2, #31
 800a698:	d501      	bpl.n	800a69e <_printf_float+0x1ba>
 800a69a:	3302      	adds	r3, #2
 800a69c:	e7f4      	b.n	800a688 <_printf_float+0x1a4>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e7f2      	b.n	800a688 <_printf_float+0x1a4>
 800a6a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a8:	4299      	cmp	r1, r3
 800a6aa:	db05      	blt.n	800a6b8 <_printf_float+0x1d4>
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	6121      	str	r1, [r4, #16]
 800a6b0:	07d8      	lsls	r0, r3, #31
 800a6b2:	d5ea      	bpl.n	800a68a <_printf_float+0x1a6>
 800a6b4:	1c4b      	adds	r3, r1, #1
 800a6b6:	e7e7      	b.n	800a688 <_printf_float+0x1a4>
 800a6b8:	2900      	cmp	r1, #0
 800a6ba:	bfd4      	ite	le
 800a6bc:	f1c1 0202 	rsble	r2, r1, #2
 800a6c0:	2201      	movgt	r2, #1
 800a6c2:	4413      	add	r3, r2
 800a6c4:	e7e0      	b.n	800a688 <_printf_float+0x1a4>
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	055a      	lsls	r2, r3, #21
 800a6ca:	d407      	bmi.n	800a6dc <_printf_float+0x1f8>
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	4642      	mov	r2, r8
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	47b8      	blx	r7
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d12c      	bne.n	800a734 <_printf_float+0x250>
 800a6da:	e764      	b.n	800a5a6 <_printf_float+0xc2>
 800a6dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6e0:	f240 80e0 	bls.w	800a8a4 <_printf_float+0x3c0>
 800a6e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f7f6 fa14 	bl	8000b18 <__aeabi_dcmpeq>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d034      	beq.n	800a75e <_printf_float+0x27a>
 800a6f4:	4a37      	ldr	r2, [pc, #220]	; (800a7d4 <_printf_float+0x2f0>)
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	f43f af51 	beq.w	800a5a6 <_printf_float+0xc2>
 800a704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a708:	429a      	cmp	r2, r3
 800a70a:	db02      	blt.n	800a712 <_printf_float+0x22e>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	07d8      	lsls	r0, r3, #31
 800a710:	d510      	bpl.n	800a734 <_printf_float+0x250>
 800a712:	ee18 3a10 	vmov	r3, s16
 800a716:	4652      	mov	r2, sl
 800a718:	4631      	mov	r1, r6
 800a71a:	4628      	mov	r0, r5
 800a71c:	47b8      	blx	r7
 800a71e:	3001      	adds	r0, #1
 800a720:	f43f af41 	beq.w	800a5a6 <_printf_float+0xc2>
 800a724:	f04f 0800 	mov.w	r8, #0
 800a728:	f104 091a 	add.w	r9, r4, #26
 800a72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a72e:	3b01      	subs	r3, #1
 800a730:	4543      	cmp	r3, r8
 800a732:	dc09      	bgt.n	800a748 <_printf_float+0x264>
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	079b      	lsls	r3, r3, #30
 800a738:	f100 8105 	bmi.w	800a946 <_printf_float+0x462>
 800a73c:	68e0      	ldr	r0, [r4, #12]
 800a73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a740:	4298      	cmp	r0, r3
 800a742:	bfb8      	it	lt
 800a744:	4618      	movlt	r0, r3
 800a746:	e730      	b.n	800a5aa <_printf_float+0xc6>
 800a748:	2301      	movs	r3, #1
 800a74a:	464a      	mov	r2, r9
 800a74c:	4631      	mov	r1, r6
 800a74e:	4628      	mov	r0, r5
 800a750:	47b8      	blx	r7
 800a752:	3001      	adds	r0, #1
 800a754:	f43f af27 	beq.w	800a5a6 <_printf_float+0xc2>
 800a758:	f108 0801 	add.w	r8, r8, #1
 800a75c:	e7e6      	b.n	800a72c <_printf_float+0x248>
 800a75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a760:	2b00      	cmp	r3, #0
 800a762:	dc39      	bgt.n	800a7d8 <_printf_float+0x2f4>
 800a764:	4a1b      	ldr	r2, [pc, #108]	; (800a7d4 <_printf_float+0x2f0>)
 800a766:	2301      	movs	r3, #1
 800a768:	4631      	mov	r1, r6
 800a76a:	4628      	mov	r0, r5
 800a76c:	47b8      	blx	r7
 800a76e:	3001      	adds	r0, #1
 800a770:	f43f af19 	beq.w	800a5a6 <_printf_float+0xc2>
 800a774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a778:	4313      	orrs	r3, r2
 800a77a:	d102      	bne.n	800a782 <_printf_float+0x29e>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	07d9      	lsls	r1, r3, #31
 800a780:	d5d8      	bpl.n	800a734 <_printf_float+0x250>
 800a782:	ee18 3a10 	vmov	r3, s16
 800a786:	4652      	mov	r2, sl
 800a788:	4631      	mov	r1, r6
 800a78a:	4628      	mov	r0, r5
 800a78c:	47b8      	blx	r7
 800a78e:	3001      	adds	r0, #1
 800a790:	f43f af09 	beq.w	800a5a6 <_printf_float+0xc2>
 800a794:	f04f 0900 	mov.w	r9, #0
 800a798:	f104 0a1a 	add.w	sl, r4, #26
 800a79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79e:	425b      	negs	r3, r3
 800a7a0:	454b      	cmp	r3, r9
 800a7a2:	dc01      	bgt.n	800a7a8 <_printf_float+0x2c4>
 800a7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a6:	e792      	b.n	800a6ce <_printf_float+0x1ea>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b8      	blx	r7
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	f43f aef7 	beq.w	800a5a6 <_printf_float+0xc2>
 800a7b8:	f109 0901 	add.w	r9, r9, #1
 800a7bc:	e7ee      	b.n	800a79c <_printf_float+0x2b8>
 800a7be:	bf00      	nop
 800a7c0:	7fefffff 	.word	0x7fefffff
 800a7c4:	080117fc 	.word	0x080117fc
 800a7c8:	08011800 	.word	0x08011800
 800a7cc:	08011808 	.word	0x08011808
 800a7d0:	08011804 	.word	0x08011804
 800a7d4:	0801180c 	.word	0x0801180c
 800a7d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	bfa8      	it	ge
 800a7e0:	461a      	movge	r2, r3
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	4691      	mov	r9, r2
 800a7e6:	dc37      	bgt.n	800a858 <_printf_float+0x374>
 800a7e8:	f04f 0b00 	mov.w	fp, #0
 800a7ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7f0:	f104 021a 	add.w	r2, r4, #26
 800a7f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7f6:	9305      	str	r3, [sp, #20]
 800a7f8:	eba3 0309 	sub.w	r3, r3, r9
 800a7fc:	455b      	cmp	r3, fp
 800a7fe:	dc33      	bgt.n	800a868 <_printf_float+0x384>
 800a800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a804:	429a      	cmp	r2, r3
 800a806:	db3b      	blt.n	800a880 <_printf_float+0x39c>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	07da      	lsls	r2, r3, #31
 800a80c:	d438      	bmi.n	800a880 <_printf_float+0x39c>
 800a80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a810:	9a05      	ldr	r2, [sp, #20]
 800a812:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a814:	1a9a      	subs	r2, r3, r2
 800a816:	eba3 0901 	sub.w	r9, r3, r1
 800a81a:	4591      	cmp	r9, r2
 800a81c:	bfa8      	it	ge
 800a81e:	4691      	movge	r9, r2
 800a820:	f1b9 0f00 	cmp.w	r9, #0
 800a824:	dc35      	bgt.n	800a892 <_printf_float+0x3ae>
 800a826:	f04f 0800 	mov.w	r8, #0
 800a82a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a82e:	f104 0a1a 	add.w	sl, r4, #26
 800a832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	eba3 0309 	sub.w	r3, r3, r9
 800a83c:	4543      	cmp	r3, r8
 800a83e:	f77f af79 	ble.w	800a734 <_printf_float+0x250>
 800a842:	2301      	movs	r3, #1
 800a844:	4652      	mov	r2, sl
 800a846:	4631      	mov	r1, r6
 800a848:	4628      	mov	r0, r5
 800a84a:	47b8      	blx	r7
 800a84c:	3001      	adds	r0, #1
 800a84e:	f43f aeaa 	beq.w	800a5a6 <_printf_float+0xc2>
 800a852:	f108 0801 	add.w	r8, r8, #1
 800a856:	e7ec      	b.n	800a832 <_printf_float+0x34e>
 800a858:	4613      	mov	r3, r2
 800a85a:	4631      	mov	r1, r6
 800a85c:	4642      	mov	r2, r8
 800a85e:	4628      	mov	r0, r5
 800a860:	47b8      	blx	r7
 800a862:	3001      	adds	r0, #1
 800a864:	d1c0      	bne.n	800a7e8 <_printf_float+0x304>
 800a866:	e69e      	b.n	800a5a6 <_printf_float+0xc2>
 800a868:	2301      	movs	r3, #1
 800a86a:	4631      	mov	r1, r6
 800a86c:	4628      	mov	r0, r5
 800a86e:	9205      	str	r2, [sp, #20]
 800a870:	47b8      	blx	r7
 800a872:	3001      	adds	r0, #1
 800a874:	f43f ae97 	beq.w	800a5a6 <_printf_float+0xc2>
 800a878:	9a05      	ldr	r2, [sp, #20]
 800a87a:	f10b 0b01 	add.w	fp, fp, #1
 800a87e:	e7b9      	b.n	800a7f4 <_printf_float+0x310>
 800a880:	ee18 3a10 	vmov	r3, s16
 800a884:	4652      	mov	r2, sl
 800a886:	4631      	mov	r1, r6
 800a888:	4628      	mov	r0, r5
 800a88a:	47b8      	blx	r7
 800a88c:	3001      	adds	r0, #1
 800a88e:	d1be      	bne.n	800a80e <_printf_float+0x32a>
 800a890:	e689      	b.n	800a5a6 <_printf_float+0xc2>
 800a892:	9a05      	ldr	r2, [sp, #20]
 800a894:	464b      	mov	r3, r9
 800a896:	4442      	add	r2, r8
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b8      	blx	r7
 800a89e:	3001      	adds	r0, #1
 800a8a0:	d1c1      	bne.n	800a826 <_printf_float+0x342>
 800a8a2:	e680      	b.n	800a5a6 <_printf_float+0xc2>
 800a8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8a6:	2a01      	cmp	r2, #1
 800a8a8:	dc01      	bgt.n	800a8ae <_printf_float+0x3ca>
 800a8aa:	07db      	lsls	r3, r3, #31
 800a8ac:	d538      	bpl.n	800a920 <_printf_float+0x43c>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b8      	blx	r7
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	f43f ae74 	beq.w	800a5a6 <_printf_float+0xc2>
 800a8be:	ee18 3a10 	vmov	r3, s16
 800a8c2:	4652      	mov	r2, sl
 800a8c4:	4631      	mov	r1, r6
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	47b8      	blx	r7
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	f43f ae6b 	beq.w	800a5a6 <_printf_float+0xc2>
 800a8d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f7f6 f91e 	bl	8000b18 <__aeabi_dcmpeq>
 800a8dc:	b9d8      	cbnz	r0, 800a916 <_printf_float+0x432>
 800a8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e0:	f108 0201 	add.w	r2, r8, #1
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	47b8      	blx	r7
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d10e      	bne.n	800a90e <_printf_float+0x42a>
 800a8f0:	e659      	b.n	800a5a6 <_printf_float+0xc2>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4652      	mov	r2, sl
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	47b8      	blx	r7
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	f43f ae52 	beq.w	800a5a6 <_printf_float+0xc2>
 800a902:	f108 0801 	add.w	r8, r8, #1
 800a906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a908:	3b01      	subs	r3, #1
 800a90a:	4543      	cmp	r3, r8
 800a90c:	dcf1      	bgt.n	800a8f2 <_printf_float+0x40e>
 800a90e:	464b      	mov	r3, r9
 800a910:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a914:	e6dc      	b.n	800a6d0 <_printf_float+0x1ec>
 800a916:	f04f 0800 	mov.w	r8, #0
 800a91a:	f104 0a1a 	add.w	sl, r4, #26
 800a91e:	e7f2      	b.n	800a906 <_printf_float+0x422>
 800a920:	2301      	movs	r3, #1
 800a922:	4642      	mov	r2, r8
 800a924:	e7df      	b.n	800a8e6 <_printf_float+0x402>
 800a926:	2301      	movs	r3, #1
 800a928:	464a      	mov	r2, r9
 800a92a:	4631      	mov	r1, r6
 800a92c:	4628      	mov	r0, r5
 800a92e:	47b8      	blx	r7
 800a930:	3001      	adds	r0, #1
 800a932:	f43f ae38 	beq.w	800a5a6 <_printf_float+0xc2>
 800a936:	f108 0801 	add.w	r8, r8, #1
 800a93a:	68e3      	ldr	r3, [r4, #12]
 800a93c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a93e:	1a5b      	subs	r3, r3, r1
 800a940:	4543      	cmp	r3, r8
 800a942:	dcf0      	bgt.n	800a926 <_printf_float+0x442>
 800a944:	e6fa      	b.n	800a73c <_printf_float+0x258>
 800a946:	f04f 0800 	mov.w	r8, #0
 800a94a:	f104 0919 	add.w	r9, r4, #25
 800a94e:	e7f4      	b.n	800a93a <_printf_float+0x456>

0800a950 <_printf_common>:
 800a950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a954:	4616      	mov	r6, r2
 800a956:	4699      	mov	r9, r3
 800a958:	688a      	ldr	r2, [r1, #8]
 800a95a:	690b      	ldr	r3, [r1, #16]
 800a95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a960:	4293      	cmp	r3, r2
 800a962:	bfb8      	it	lt
 800a964:	4613      	movlt	r3, r2
 800a966:	6033      	str	r3, [r6, #0]
 800a968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a96c:	4607      	mov	r7, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	b10a      	cbz	r2, 800a976 <_printf_common+0x26>
 800a972:	3301      	adds	r3, #1
 800a974:	6033      	str	r3, [r6, #0]
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	0699      	lsls	r1, r3, #26
 800a97a:	bf42      	ittt	mi
 800a97c:	6833      	ldrmi	r3, [r6, #0]
 800a97e:	3302      	addmi	r3, #2
 800a980:	6033      	strmi	r3, [r6, #0]
 800a982:	6825      	ldr	r5, [r4, #0]
 800a984:	f015 0506 	ands.w	r5, r5, #6
 800a988:	d106      	bne.n	800a998 <_printf_common+0x48>
 800a98a:	f104 0a19 	add.w	sl, r4, #25
 800a98e:	68e3      	ldr	r3, [r4, #12]
 800a990:	6832      	ldr	r2, [r6, #0]
 800a992:	1a9b      	subs	r3, r3, r2
 800a994:	42ab      	cmp	r3, r5
 800a996:	dc26      	bgt.n	800a9e6 <_printf_common+0x96>
 800a998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a99c:	1e13      	subs	r3, r2, #0
 800a99e:	6822      	ldr	r2, [r4, #0]
 800a9a0:	bf18      	it	ne
 800a9a2:	2301      	movne	r3, #1
 800a9a4:	0692      	lsls	r2, r2, #26
 800a9a6:	d42b      	bmi.n	800aa00 <_printf_common+0xb0>
 800a9a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	47c0      	blx	r8
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d01e      	beq.n	800a9f4 <_printf_common+0xa4>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	68e5      	ldr	r5, [r4, #12]
 800a9ba:	6832      	ldr	r2, [r6, #0]
 800a9bc:	f003 0306 	and.w	r3, r3, #6
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	bf08      	it	eq
 800a9c4:	1aad      	subeq	r5, r5, r2
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	6922      	ldr	r2, [r4, #16]
 800a9ca:	bf0c      	ite	eq
 800a9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9d0:	2500      	movne	r5, #0
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	bfc4      	itt	gt
 800a9d6:	1a9b      	subgt	r3, r3, r2
 800a9d8:	18ed      	addgt	r5, r5, r3
 800a9da:	2600      	movs	r6, #0
 800a9dc:	341a      	adds	r4, #26
 800a9de:	42b5      	cmp	r5, r6
 800a9e0:	d11a      	bne.n	800aa18 <_printf_common+0xc8>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e008      	b.n	800a9f8 <_printf_common+0xa8>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	4638      	mov	r0, r7
 800a9ee:	47c0      	blx	r8
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d103      	bne.n	800a9fc <_printf_common+0xac>
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	e7c6      	b.n	800a98e <_printf_common+0x3e>
 800aa00:	18e1      	adds	r1, r4, r3
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	2030      	movs	r0, #48	; 0x30
 800aa06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa0a:	4422      	add	r2, r4
 800aa0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa14:	3302      	adds	r3, #2
 800aa16:	e7c7      	b.n	800a9a8 <_printf_common+0x58>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	4622      	mov	r2, r4
 800aa1c:	4649      	mov	r1, r9
 800aa1e:	4638      	mov	r0, r7
 800aa20:	47c0      	blx	r8
 800aa22:	3001      	adds	r0, #1
 800aa24:	d0e6      	beq.n	800a9f4 <_printf_common+0xa4>
 800aa26:	3601      	adds	r6, #1
 800aa28:	e7d9      	b.n	800a9de <_printf_common+0x8e>
	...

0800aa2c <_printf_i>:
 800aa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	7e0f      	ldrb	r7, [r1, #24]
 800aa32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa34:	2f78      	cmp	r7, #120	; 0x78
 800aa36:	4691      	mov	r9, r2
 800aa38:	4680      	mov	r8, r0
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	469a      	mov	sl, r3
 800aa3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa42:	d807      	bhi.n	800aa54 <_printf_i+0x28>
 800aa44:	2f62      	cmp	r7, #98	; 0x62
 800aa46:	d80a      	bhi.n	800aa5e <_printf_i+0x32>
 800aa48:	2f00      	cmp	r7, #0
 800aa4a:	f000 80d8 	beq.w	800abfe <_printf_i+0x1d2>
 800aa4e:	2f58      	cmp	r7, #88	; 0x58
 800aa50:	f000 80a3 	beq.w	800ab9a <_printf_i+0x16e>
 800aa54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa5c:	e03a      	b.n	800aad4 <_printf_i+0xa8>
 800aa5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa62:	2b15      	cmp	r3, #21
 800aa64:	d8f6      	bhi.n	800aa54 <_printf_i+0x28>
 800aa66:	a101      	add	r1, pc, #4	; (adr r1, 800aa6c <_printf_i+0x40>)
 800aa68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa6c:	0800aac5 	.word	0x0800aac5
 800aa70:	0800aad9 	.word	0x0800aad9
 800aa74:	0800aa55 	.word	0x0800aa55
 800aa78:	0800aa55 	.word	0x0800aa55
 800aa7c:	0800aa55 	.word	0x0800aa55
 800aa80:	0800aa55 	.word	0x0800aa55
 800aa84:	0800aad9 	.word	0x0800aad9
 800aa88:	0800aa55 	.word	0x0800aa55
 800aa8c:	0800aa55 	.word	0x0800aa55
 800aa90:	0800aa55 	.word	0x0800aa55
 800aa94:	0800aa55 	.word	0x0800aa55
 800aa98:	0800abe5 	.word	0x0800abe5
 800aa9c:	0800ab09 	.word	0x0800ab09
 800aaa0:	0800abc7 	.word	0x0800abc7
 800aaa4:	0800aa55 	.word	0x0800aa55
 800aaa8:	0800aa55 	.word	0x0800aa55
 800aaac:	0800ac07 	.word	0x0800ac07
 800aab0:	0800aa55 	.word	0x0800aa55
 800aab4:	0800ab09 	.word	0x0800ab09
 800aab8:	0800aa55 	.word	0x0800aa55
 800aabc:	0800aa55 	.word	0x0800aa55
 800aac0:	0800abcf 	.word	0x0800abcf
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	1d1a      	adds	r2, r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	602a      	str	r2, [r5, #0]
 800aacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aad4:	2301      	movs	r3, #1
 800aad6:	e0a3      	b.n	800ac20 <_printf_i+0x1f4>
 800aad8:	6820      	ldr	r0, [r4, #0]
 800aada:	6829      	ldr	r1, [r5, #0]
 800aadc:	0606      	lsls	r6, r0, #24
 800aade:	f101 0304 	add.w	r3, r1, #4
 800aae2:	d50a      	bpl.n	800aafa <_printf_i+0xce>
 800aae4:	680e      	ldr	r6, [r1, #0]
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	2e00      	cmp	r6, #0
 800aaea:	da03      	bge.n	800aaf4 <_printf_i+0xc8>
 800aaec:	232d      	movs	r3, #45	; 0x2d
 800aaee:	4276      	negs	r6, r6
 800aaf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaf4:	485e      	ldr	r0, [pc, #376]	; (800ac70 <_printf_i+0x244>)
 800aaf6:	230a      	movs	r3, #10
 800aaf8:	e019      	b.n	800ab2e <_printf_i+0x102>
 800aafa:	680e      	ldr	r6, [r1, #0]
 800aafc:	602b      	str	r3, [r5, #0]
 800aafe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab02:	bf18      	it	ne
 800ab04:	b236      	sxthne	r6, r6
 800ab06:	e7ef      	b.n	800aae8 <_printf_i+0xbc>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	6820      	ldr	r0, [r4, #0]
 800ab0c:	1d19      	adds	r1, r3, #4
 800ab0e:	6029      	str	r1, [r5, #0]
 800ab10:	0601      	lsls	r1, r0, #24
 800ab12:	d501      	bpl.n	800ab18 <_printf_i+0xec>
 800ab14:	681e      	ldr	r6, [r3, #0]
 800ab16:	e002      	b.n	800ab1e <_printf_i+0xf2>
 800ab18:	0646      	lsls	r6, r0, #25
 800ab1a:	d5fb      	bpl.n	800ab14 <_printf_i+0xe8>
 800ab1c:	881e      	ldrh	r6, [r3, #0]
 800ab1e:	4854      	ldr	r0, [pc, #336]	; (800ac70 <_printf_i+0x244>)
 800ab20:	2f6f      	cmp	r7, #111	; 0x6f
 800ab22:	bf0c      	ite	eq
 800ab24:	2308      	moveq	r3, #8
 800ab26:	230a      	movne	r3, #10
 800ab28:	2100      	movs	r1, #0
 800ab2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab2e:	6865      	ldr	r5, [r4, #4]
 800ab30:	60a5      	str	r5, [r4, #8]
 800ab32:	2d00      	cmp	r5, #0
 800ab34:	bfa2      	ittt	ge
 800ab36:	6821      	ldrge	r1, [r4, #0]
 800ab38:	f021 0104 	bicge.w	r1, r1, #4
 800ab3c:	6021      	strge	r1, [r4, #0]
 800ab3e:	b90e      	cbnz	r6, 800ab44 <_printf_i+0x118>
 800ab40:	2d00      	cmp	r5, #0
 800ab42:	d04d      	beq.n	800abe0 <_printf_i+0x1b4>
 800ab44:	4615      	mov	r5, r2
 800ab46:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab4a:	fb03 6711 	mls	r7, r3, r1, r6
 800ab4e:	5dc7      	ldrb	r7, [r0, r7]
 800ab50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab54:	4637      	mov	r7, r6
 800ab56:	42bb      	cmp	r3, r7
 800ab58:	460e      	mov	r6, r1
 800ab5a:	d9f4      	bls.n	800ab46 <_printf_i+0x11a>
 800ab5c:	2b08      	cmp	r3, #8
 800ab5e:	d10b      	bne.n	800ab78 <_printf_i+0x14c>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	07de      	lsls	r6, r3, #31
 800ab64:	d508      	bpl.n	800ab78 <_printf_i+0x14c>
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	6861      	ldr	r1, [r4, #4]
 800ab6a:	4299      	cmp	r1, r3
 800ab6c:	bfde      	ittt	le
 800ab6e:	2330      	movle	r3, #48	; 0x30
 800ab70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab78:	1b52      	subs	r2, r2, r5
 800ab7a:	6122      	str	r2, [r4, #16]
 800ab7c:	f8cd a000 	str.w	sl, [sp]
 800ab80:	464b      	mov	r3, r9
 800ab82:	aa03      	add	r2, sp, #12
 800ab84:	4621      	mov	r1, r4
 800ab86:	4640      	mov	r0, r8
 800ab88:	f7ff fee2 	bl	800a950 <_printf_common>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d14c      	bne.n	800ac2a <_printf_i+0x1fe>
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295
 800ab94:	b004      	add	sp, #16
 800ab96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9a:	4835      	ldr	r0, [pc, #212]	; (800ac70 <_printf_i+0x244>)
 800ab9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aba0:	6829      	ldr	r1, [r5, #0]
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	f851 6b04 	ldr.w	r6, [r1], #4
 800aba8:	6029      	str	r1, [r5, #0]
 800abaa:	061d      	lsls	r5, r3, #24
 800abac:	d514      	bpl.n	800abd8 <_printf_i+0x1ac>
 800abae:	07df      	lsls	r7, r3, #31
 800abb0:	bf44      	itt	mi
 800abb2:	f043 0320 	orrmi.w	r3, r3, #32
 800abb6:	6023      	strmi	r3, [r4, #0]
 800abb8:	b91e      	cbnz	r6, 800abc2 <_printf_i+0x196>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	f023 0320 	bic.w	r3, r3, #32
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	2310      	movs	r3, #16
 800abc4:	e7b0      	b.n	800ab28 <_printf_i+0xfc>
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	f043 0320 	orr.w	r3, r3, #32
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	2378      	movs	r3, #120	; 0x78
 800abd0:	4828      	ldr	r0, [pc, #160]	; (800ac74 <_printf_i+0x248>)
 800abd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abd6:	e7e3      	b.n	800aba0 <_printf_i+0x174>
 800abd8:	0659      	lsls	r1, r3, #25
 800abda:	bf48      	it	mi
 800abdc:	b2b6      	uxthmi	r6, r6
 800abde:	e7e6      	b.n	800abae <_printf_i+0x182>
 800abe0:	4615      	mov	r5, r2
 800abe2:	e7bb      	b.n	800ab5c <_printf_i+0x130>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	6826      	ldr	r6, [r4, #0]
 800abe8:	6961      	ldr	r1, [r4, #20]
 800abea:	1d18      	adds	r0, r3, #4
 800abec:	6028      	str	r0, [r5, #0]
 800abee:	0635      	lsls	r5, r6, #24
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	d501      	bpl.n	800abf8 <_printf_i+0x1cc>
 800abf4:	6019      	str	r1, [r3, #0]
 800abf6:	e002      	b.n	800abfe <_printf_i+0x1d2>
 800abf8:	0670      	lsls	r0, r6, #25
 800abfa:	d5fb      	bpl.n	800abf4 <_printf_i+0x1c8>
 800abfc:	8019      	strh	r1, [r3, #0]
 800abfe:	2300      	movs	r3, #0
 800ac00:	6123      	str	r3, [r4, #16]
 800ac02:	4615      	mov	r5, r2
 800ac04:	e7ba      	b.n	800ab7c <_printf_i+0x150>
 800ac06:	682b      	ldr	r3, [r5, #0]
 800ac08:	1d1a      	adds	r2, r3, #4
 800ac0a:	602a      	str	r2, [r5, #0]
 800ac0c:	681d      	ldr	r5, [r3, #0]
 800ac0e:	6862      	ldr	r2, [r4, #4]
 800ac10:	2100      	movs	r1, #0
 800ac12:	4628      	mov	r0, r5
 800ac14:	f7f5 fb0c 	bl	8000230 <memchr>
 800ac18:	b108      	cbz	r0, 800ac1e <_printf_i+0x1f2>
 800ac1a:	1b40      	subs	r0, r0, r5
 800ac1c:	6060      	str	r0, [r4, #4]
 800ac1e:	6863      	ldr	r3, [r4, #4]
 800ac20:	6123      	str	r3, [r4, #16]
 800ac22:	2300      	movs	r3, #0
 800ac24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac28:	e7a8      	b.n	800ab7c <_printf_i+0x150>
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	4649      	mov	r1, r9
 800ac30:	4640      	mov	r0, r8
 800ac32:	47d0      	blx	sl
 800ac34:	3001      	adds	r0, #1
 800ac36:	d0ab      	beq.n	800ab90 <_printf_i+0x164>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	079b      	lsls	r3, r3, #30
 800ac3c:	d413      	bmi.n	800ac66 <_printf_i+0x23a>
 800ac3e:	68e0      	ldr	r0, [r4, #12]
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	4298      	cmp	r0, r3
 800ac44:	bfb8      	it	lt
 800ac46:	4618      	movlt	r0, r3
 800ac48:	e7a4      	b.n	800ab94 <_printf_i+0x168>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	4649      	mov	r1, r9
 800ac50:	4640      	mov	r0, r8
 800ac52:	47d0      	blx	sl
 800ac54:	3001      	adds	r0, #1
 800ac56:	d09b      	beq.n	800ab90 <_printf_i+0x164>
 800ac58:	3501      	adds	r5, #1
 800ac5a:	68e3      	ldr	r3, [r4, #12]
 800ac5c:	9903      	ldr	r1, [sp, #12]
 800ac5e:	1a5b      	subs	r3, r3, r1
 800ac60:	42ab      	cmp	r3, r5
 800ac62:	dcf2      	bgt.n	800ac4a <_printf_i+0x21e>
 800ac64:	e7eb      	b.n	800ac3e <_printf_i+0x212>
 800ac66:	2500      	movs	r5, #0
 800ac68:	f104 0619 	add.w	r6, r4, #25
 800ac6c:	e7f5      	b.n	800ac5a <_printf_i+0x22e>
 800ac6e:	bf00      	nop
 800ac70:	0801180e 	.word	0x0801180e
 800ac74:	0801181f 	.word	0x0801181f

0800ac78 <_scanf_float>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	b087      	sub	sp, #28
 800ac7e:	4617      	mov	r7, r2
 800ac80:	9303      	str	r3, [sp, #12]
 800ac82:	688b      	ldr	r3, [r1, #8]
 800ac84:	1e5a      	subs	r2, r3, #1
 800ac86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac8a:	bf83      	ittte	hi
 800ac8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac90:	195b      	addhi	r3, r3, r5
 800ac92:	9302      	strhi	r3, [sp, #8]
 800ac94:	2300      	movls	r3, #0
 800ac96:	bf86      	itte	hi
 800ac98:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac9c:	608b      	strhi	r3, [r1, #8]
 800ac9e:	9302      	strls	r3, [sp, #8]
 800aca0:	680b      	ldr	r3, [r1, #0]
 800aca2:	468b      	mov	fp, r1
 800aca4:	2500      	movs	r5, #0
 800aca6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800acaa:	f84b 3b1c 	str.w	r3, [fp], #28
 800acae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800acb2:	4680      	mov	r8, r0
 800acb4:	460c      	mov	r4, r1
 800acb6:	465e      	mov	r6, fp
 800acb8:	46aa      	mov	sl, r5
 800acba:	46a9      	mov	r9, r5
 800acbc:	9501      	str	r5, [sp, #4]
 800acbe:	68a2      	ldr	r2, [r4, #8]
 800acc0:	b152      	cbz	r2, 800acd8 <_scanf_float+0x60>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	2b4e      	cmp	r3, #78	; 0x4e
 800acc8:	d864      	bhi.n	800ad94 <_scanf_float+0x11c>
 800acca:	2b40      	cmp	r3, #64	; 0x40
 800accc:	d83c      	bhi.n	800ad48 <_scanf_float+0xd0>
 800acce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800acd2:	b2c8      	uxtb	r0, r1
 800acd4:	280e      	cmp	r0, #14
 800acd6:	d93a      	bls.n	800ad4e <_scanf_float+0xd6>
 800acd8:	f1b9 0f00 	cmp.w	r9, #0
 800acdc:	d003      	beq.n	800ace6 <_scanf_float+0x6e>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acea:	f1ba 0f01 	cmp.w	sl, #1
 800acee:	f200 8113 	bhi.w	800af18 <_scanf_float+0x2a0>
 800acf2:	455e      	cmp	r6, fp
 800acf4:	f200 8105 	bhi.w	800af02 <_scanf_float+0x28a>
 800acf8:	2501      	movs	r5, #1
 800acfa:	4628      	mov	r0, r5
 800acfc:	b007      	add	sp, #28
 800acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ad06:	2a0d      	cmp	r2, #13
 800ad08:	d8e6      	bhi.n	800acd8 <_scanf_float+0x60>
 800ad0a:	a101      	add	r1, pc, #4	; (adr r1, 800ad10 <_scanf_float+0x98>)
 800ad0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad10:	0800ae4f 	.word	0x0800ae4f
 800ad14:	0800acd9 	.word	0x0800acd9
 800ad18:	0800acd9 	.word	0x0800acd9
 800ad1c:	0800acd9 	.word	0x0800acd9
 800ad20:	0800aeaf 	.word	0x0800aeaf
 800ad24:	0800ae87 	.word	0x0800ae87
 800ad28:	0800acd9 	.word	0x0800acd9
 800ad2c:	0800acd9 	.word	0x0800acd9
 800ad30:	0800ae5d 	.word	0x0800ae5d
 800ad34:	0800acd9 	.word	0x0800acd9
 800ad38:	0800acd9 	.word	0x0800acd9
 800ad3c:	0800acd9 	.word	0x0800acd9
 800ad40:	0800acd9 	.word	0x0800acd9
 800ad44:	0800ae15 	.word	0x0800ae15
 800ad48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ad4c:	e7db      	b.n	800ad06 <_scanf_float+0x8e>
 800ad4e:	290e      	cmp	r1, #14
 800ad50:	d8c2      	bhi.n	800acd8 <_scanf_float+0x60>
 800ad52:	a001      	add	r0, pc, #4	; (adr r0, 800ad58 <_scanf_float+0xe0>)
 800ad54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad58:	0800ae07 	.word	0x0800ae07
 800ad5c:	0800acd9 	.word	0x0800acd9
 800ad60:	0800ae07 	.word	0x0800ae07
 800ad64:	0800ae9b 	.word	0x0800ae9b
 800ad68:	0800acd9 	.word	0x0800acd9
 800ad6c:	0800adb5 	.word	0x0800adb5
 800ad70:	0800adf1 	.word	0x0800adf1
 800ad74:	0800adf1 	.word	0x0800adf1
 800ad78:	0800adf1 	.word	0x0800adf1
 800ad7c:	0800adf1 	.word	0x0800adf1
 800ad80:	0800adf1 	.word	0x0800adf1
 800ad84:	0800adf1 	.word	0x0800adf1
 800ad88:	0800adf1 	.word	0x0800adf1
 800ad8c:	0800adf1 	.word	0x0800adf1
 800ad90:	0800adf1 	.word	0x0800adf1
 800ad94:	2b6e      	cmp	r3, #110	; 0x6e
 800ad96:	d809      	bhi.n	800adac <_scanf_float+0x134>
 800ad98:	2b60      	cmp	r3, #96	; 0x60
 800ad9a:	d8b2      	bhi.n	800ad02 <_scanf_float+0x8a>
 800ad9c:	2b54      	cmp	r3, #84	; 0x54
 800ad9e:	d077      	beq.n	800ae90 <_scanf_float+0x218>
 800ada0:	2b59      	cmp	r3, #89	; 0x59
 800ada2:	d199      	bne.n	800acd8 <_scanf_float+0x60>
 800ada4:	2d07      	cmp	r5, #7
 800ada6:	d197      	bne.n	800acd8 <_scanf_float+0x60>
 800ada8:	2508      	movs	r5, #8
 800adaa:	e029      	b.n	800ae00 <_scanf_float+0x188>
 800adac:	2b74      	cmp	r3, #116	; 0x74
 800adae:	d06f      	beq.n	800ae90 <_scanf_float+0x218>
 800adb0:	2b79      	cmp	r3, #121	; 0x79
 800adb2:	e7f6      	b.n	800ada2 <_scanf_float+0x12a>
 800adb4:	6821      	ldr	r1, [r4, #0]
 800adb6:	05c8      	lsls	r0, r1, #23
 800adb8:	d51a      	bpl.n	800adf0 <_scanf_float+0x178>
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800adc0:	6021      	str	r1, [r4, #0]
 800adc2:	f109 0901 	add.w	r9, r9, #1
 800adc6:	b11b      	cbz	r3, 800add0 <_scanf_float+0x158>
 800adc8:	3b01      	subs	r3, #1
 800adca:	3201      	adds	r2, #1
 800adcc:	9302      	str	r3, [sp, #8]
 800adce:	60a2      	str	r2, [r4, #8]
 800add0:	68a3      	ldr	r3, [r4, #8]
 800add2:	3b01      	subs	r3, #1
 800add4:	60a3      	str	r3, [r4, #8]
 800add6:	6923      	ldr	r3, [r4, #16]
 800add8:	3301      	adds	r3, #1
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3b01      	subs	r3, #1
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	607b      	str	r3, [r7, #4]
 800ade4:	f340 8084 	ble.w	800aef0 <_scanf_float+0x278>
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	3301      	adds	r3, #1
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	e766      	b.n	800acbe <_scanf_float+0x46>
 800adf0:	eb1a 0f05 	cmn.w	sl, r5
 800adf4:	f47f af70 	bne.w	800acd8 <_scanf_float+0x60>
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800adfe:	6022      	str	r2, [r4, #0]
 800ae00:	f806 3b01 	strb.w	r3, [r6], #1
 800ae04:	e7e4      	b.n	800add0 <_scanf_float+0x158>
 800ae06:	6822      	ldr	r2, [r4, #0]
 800ae08:	0610      	lsls	r0, r2, #24
 800ae0a:	f57f af65 	bpl.w	800acd8 <_scanf_float+0x60>
 800ae0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae12:	e7f4      	b.n	800adfe <_scanf_float+0x186>
 800ae14:	f1ba 0f00 	cmp.w	sl, #0
 800ae18:	d10e      	bne.n	800ae38 <_scanf_float+0x1c0>
 800ae1a:	f1b9 0f00 	cmp.w	r9, #0
 800ae1e:	d10e      	bne.n	800ae3e <_scanf_float+0x1c6>
 800ae20:	6822      	ldr	r2, [r4, #0]
 800ae22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae2a:	d108      	bne.n	800ae3e <_scanf_float+0x1c6>
 800ae2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae30:	6022      	str	r2, [r4, #0]
 800ae32:	f04f 0a01 	mov.w	sl, #1
 800ae36:	e7e3      	b.n	800ae00 <_scanf_float+0x188>
 800ae38:	f1ba 0f02 	cmp.w	sl, #2
 800ae3c:	d055      	beq.n	800aeea <_scanf_float+0x272>
 800ae3e:	2d01      	cmp	r5, #1
 800ae40:	d002      	beq.n	800ae48 <_scanf_float+0x1d0>
 800ae42:	2d04      	cmp	r5, #4
 800ae44:	f47f af48 	bne.w	800acd8 <_scanf_float+0x60>
 800ae48:	3501      	adds	r5, #1
 800ae4a:	b2ed      	uxtb	r5, r5
 800ae4c:	e7d8      	b.n	800ae00 <_scanf_float+0x188>
 800ae4e:	f1ba 0f01 	cmp.w	sl, #1
 800ae52:	f47f af41 	bne.w	800acd8 <_scanf_float+0x60>
 800ae56:	f04f 0a02 	mov.w	sl, #2
 800ae5a:	e7d1      	b.n	800ae00 <_scanf_float+0x188>
 800ae5c:	b97d      	cbnz	r5, 800ae7e <_scanf_float+0x206>
 800ae5e:	f1b9 0f00 	cmp.w	r9, #0
 800ae62:	f47f af3c 	bne.w	800acde <_scanf_float+0x66>
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae70:	f47f af39 	bne.w	800ace6 <_scanf_float+0x6e>
 800ae74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae78:	6022      	str	r2, [r4, #0]
 800ae7a:	2501      	movs	r5, #1
 800ae7c:	e7c0      	b.n	800ae00 <_scanf_float+0x188>
 800ae7e:	2d03      	cmp	r5, #3
 800ae80:	d0e2      	beq.n	800ae48 <_scanf_float+0x1d0>
 800ae82:	2d05      	cmp	r5, #5
 800ae84:	e7de      	b.n	800ae44 <_scanf_float+0x1cc>
 800ae86:	2d02      	cmp	r5, #2
 800ae88:	f47f af26 	bne.w	800acd8 <_scanf_float+0x60>
 800ae8c:	2503      	movs	r5, #3
 800ae8e:	e7b7      	b.n	800ae00 <_scanf_float+0x188>
 800ae90:	2d06      	cmp	r5, #6
 800ae92:	f47f af21 	bne.w	800acd8 <_scanf_float+0x60>
 800ae96:	2507      	movs	r5, #7
 800ae98:	e7b2      	b.n	800ae00 <_scanf_float+0x188>
 800ae9a:	6822      	ldr	r2, [r4, #0]
 800ae9c:	0591      	lsls	r1, r2, #22
 800ae9e:	f57f af1b 	bpl.w	800acd8 <_scanf_float+0x60>
 800aea2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aea6:	6022      	str	r2, [r4, #0]
 800aea8:	f8cd 9004 	str.w	r9, [sp, #4]
 800aeac:	e7a8      	b.n	800ae00 <_scanf_float+0x188>
 800aeae:	6822      	ldr	r2, [r4, #0]
 800aeb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aeb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aeb8:	d006      	beq.n	800aec8 <_scanf_float+0x250>
 800aeba:	0550      	lsls	r0, r2, #21
 800aebc:	f57f af0c 	bpl.w	800acd8 <_scanf_float+0x60>
 800aec0:	f1b9 0f00 	cmp.w	r9, #0
 800aec4:	f43f af0f 	beq.w	800ace6 <_scanf_float+0x6e>
 800aec8:	0591      	lsls	r1, r2, #22
 800aeca:	bf58      	it	pl
 800aecc:	9901      	ldrpl	r1, [sp, #4]
 800aece:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aed2:	bf58      	it	pl
 800aed4:	eba9 0101 	subpl.w	r1, r9, r1
 800aed8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aedc:	bf58      	it	pl
 800aede:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aee2:	6022      	str	r2, [r4, #0]
 800aee4:	f04f 0900 	mov.w	r9, #0
 800aee8:	e78a      	b.n	800ae00 <_scanf_float+0x188>
 800aeea:	f04f 0a03 	mov.w	sl, #3
 800aeee:	e787      	b.n	800ae00 <_scanf_float+0x188>
 800aef0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aef4:	4639      	mov	r1, r7
 800aef6:	4640      	mov	r0, r8
 800aef8:	4798      	blx	r3
 800aefa:	2800      	cmp	r0, #0
 800aefc:	f43f aedf 	beq.w	800acbe <_scanf_float+0x46>
 800af00:	e6ea      	b.n	800acd8 <_scanf_float+0x60>
 800af02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af0a:	463a      	mov	r2, r7
 800af0c:	4640      	mov	r0, r8
 800af0e:	4798      	blx	r3
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	3b01      	subs	r3, #1
 800af14:	6123      	str	r3, [r4, #16]
 800af16:	e6ec      	b.n	800acf2 <_scanf_float+0x7a>
 800af18:	1e6b      	subs	r3, r5, #1
 800af1a:	2b06      	cmp	r3, #6
 800af1c:	d825      	bhi.n	800af6a <_scanf_float+0x2f2>
 800af1e:	2d02      	cmp	r5, #2
 800af20:	d836      	bhi.n	800af90 <_scanf_float+0x318>
 800af22:	455e      	cmp	r6, fp
 800af24:	f67f aee8 	bls.w	800acf8 <_scanf_float+0x80>
 800af28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af30:	463a      	mov	r2, r7
 800af32:	4640      	mov	r0, r8
 800af34:	4798      	blx	r3
 800af36:	6923      	ldr	r3, [r4, #16]
 800af38:	3b01      	subs	r3, #1
 800af3a:	6123      	str	r3, [r4, #16]
 800af3c:	e7f1      	b.n	800af22 <_scanf_float+0x2aa>
 800af3e:	9802      	ldr	r0, [sp, #8]
 800af40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800af48:	9002      	str	r0, [sp, #8]
 800af4a:	463a      	mov	r2, r7
 800af4c:	4640      	mov	r0, r8
 800af4e:	4798      	blx	r3
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	3b01      	subs	r3, #1
 800af54:	6123      	str	r3, [r4, #16]
 800af56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af5a:	fa5f fa8a 	uxtb.w	sl, sl
 800af5e:	f1ba 0f02 	cmp.w	sl, #2
 800af62:	d1ec      	bne.n	800af3e <_scanf_float+0x2c6>
 800af64:	3d03      	subs	r5, #3
 800af66:	b2ed      	uxtb	r5, r5
 800af68:	1b76      	subs	r6, r6, r5
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	05da      	lsls	r2, r3, #23
 800af6e:	d52f      	bpl.n	800afd0 <_scanf_float+0x358>
 800af70:	055b      	lsls	r3, r3, #21
 800af72:	d510      	bpl.n	800af96 <_scanf_float+0x31e>
 800af74:	455e      	cmp	r6, fp
 800af76:	f67f aebf 	bls.w	800acf8 <_scanf_float+0x80>
 800af7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af82:	463a      	mov	r2, r7
 800af84:	4640      	mov	r0, r8
 800af86:	4798      	blx	r3
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	6123      	str	r3, [r4, #16]
 800af8e:	e7f1      	b.n	800af74 <_scanf_float+0x2fc>
 800af90:	46aa      	mov	sl, r5
 800af92:	9602      	str	r6, [sp, #8]
 800af94:	e7df      	b.n	800af56 <_scanf_float+0x2de>
 800af96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	2965      	cmp	r1, #101	; 0x65
 800af9e:	f103 33ff 	add.w	r3, r3, #4294967295
 800afa2:	f106 35ff 	add.w	r5, r6, #4294967295
 800afa6:	6123      	str	r3, [r4, #16]
 800afa8:	d00c      	beq.n	800afc4 <_scanf_float+0x34c>
 800afaa:	2945      	cmp	r1, #69	; 0x45
 800afac:	d00a      	beq.n	800afc4 <_scanf_float+0x34c>
 800afae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afb2:	463a      	mov	r2, r7
 800afb4:	4640      	mov	r0, r8
 800afb6:	4798      	blx	r3
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	1eb5      	subs	r5, r6, #2
 800afc2:	6123      	str	r3, [r4, #16]
 800afc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afc8:	463a      	mov	r2, r7
 800afca:	4640      	mov	r0, r8
 800afcc:	4798      	blx	r3
 800afce:	462e      	mov	r6, r5
 800afd0:	6825      	ldr	r5, [r4, #0]
 800afd2:	f015 0510 	ands.w	r5, r5, #16
 800afd6:	d159      	bne.n	800b08c <_scanf_float+0x414>
 800afd8:	7035      	strb	r5, [r6, #0]
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800afe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe4:	d11b      	bne.n	800b01e <_scanf_float+0x3a6>
 800afe6:	9b01      	ldr	r3, [sp, #4]
 800afe8:	454b      	cmp	r3, r9
 800afea:	eba3 0209 	sub.w	r2, r3, r9
 800afee:	d123      	bne.n	800b038 <_scanf_float+0x3c0>
 800aff0:	2200      	movs	r2, #0
 800aff2:	4659      	mov	r1, fp
 800aff4:	4640      	mov	r0, r8
 800aff6:	f000 feb1 	bl	800bd5c <_strtod_r>
 800affa:	6822      	ldr	r2, [r4, #0]
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	f012 0f02 	tst.w	r2, #2
 800b002:	ec57 6b10 	vmov	r6, r7, d0
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	d021      	beq.n	800b04e <_scanf_float+0x3d6>
 800b00a:	9903      	ldr	r1, [sp, #12]
 800b00c:	1d1a      	adds	r2, r3, #4
 800b00e:	600a      	str	r2, [r1, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	e9c3 6700 	strd	r6, r7, [r3]
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	3301      	adds	r3, #1
 800b01a:	60e3      	str	r3, [r4, #12]
 800b01c:	e66d      	b.n	800acfa <_scanf_float+0x82>
 800b01e:	9b04      	ldr	r3, [sp, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0e5      	beq.n	800aff0 <_scanf_float+0x378>
 800b024:	9905      	ldr	r1, [sp, #20]
 800b026:	230a      	movs	r3, #10
 800b028:	462a      	mov	r2, r5
 800b02a:	3101      	adds	r1, #1
 800b02c:	4640      	mov	r0, r8
 800b02e:	f000 ff1d 	bl	800be6c <_strtol_r>
 800b032:	9b04      	ldr	r3, [sp, #16]
 800b034:	9e05      	ldr	r6, [sp, #20]
 800b036:	1ac2      	subs	r2, r0, r3
 800b038:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b03c:	429e      	cmp	r6, r3
 800b03e:	bf28      	it	cs
 800b040:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b044:	4912      	ldr	r1, [pc, #72]	; (800b090 <_scanf_float+0x418>)
 800b046:	4630      	mov	r0, r6
 800b048:	f000 f844 	bl	800b0d4 <siprintf>
 800b04c:	e7d0      	b.n	800aff0 <_scanf_float+0x378>
 800b04e:	9903      	ldr	r1, [sp, #12]
 800b050:	f012 0f04 	tst.w	r2, #4
 800b054:	f103 0204 	add.w	r2, r3, #4
 800b058:	600a      	str	r2, [r1, #0]
 800b05a:	d1d9      	bne.n	800b010 <_scanf_float+0x398>
 800b05c:	f8d3 8000 	ldr.w	r8, [r3]
 800b060:	ee10 2a10 	vmov	r2, s0
 800b064:	ee10 0a10 	vmov	r0, s0
 800b068:	463b      	mov	r3, r7
 800b06a:	4639      	mov	r1, r7
 800b06c:	f7f5 fd86 	bl	8000b7c <__aeabi_dcmpun>
 800b070:	b128      	cbz	r0, 800b07e <_scanf_float+0x406>
 800b072:	4808      	ldr	r0, [pc, #32]	; (800b094 <_scanf_float+0x41c>)
 800b074:	f000 f828 	bl	800b0c8 <nanf>
 800b078:	ed88 0a00 	vstr	s0, [r8]
 800b07c:	e7cb      	b.n	800b016 <_scanf_float+0x39e>
 800b07e:	4630      	mov	r0, r6
 800b080:	4639      	mov	r1, r7
 800b082:	f7f5 fdd9 	bl	8000c38 <__aeabi_d2f>
 800b086:	f8c8 0000 	str.w	r0, [r8]
 800b08a:	e7c4      	b.n	800b016 <_scanf_float+0x39e>
 800b08c:	2500      	movs	r5, #0
 800b08e:	e634      	b.n	800acfa <_scanf_float+0x82>
 800b090:	08011830 	.word	0x08011830
 800b094:	08011ca0 	.word	0x08011ca0

0800b098 <iprintf>:
 800b098:	b40f      	push	{r0, r1, r2, r3}
 800b09a:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <iprintf+0x2c>)
 800b09c:	b513      	push	{r0, r1, r4, lr}
 800b09e:	681c      	ldr	r4, [r3, #0]
 800b0a0:	b124      	cbz	r4, 800b0ac <iprintf+0x14>
 800b0a2:	69a3      	ldr	r3, [r4, #24]
 800b0a4:	b913      	cbnz	r3, 800b0ac <iprintf+0x14>
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f001 fdb4 	bl	800cc14 <__sinit>
 800b0ac:	ab05      	add	r3, sp, #20
 800b0ae:	9a04      	ldr	r2, [sp, #16]
 800b0b0:	68a1      	ldr	r1, [r4, #8]
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f003 f927 	bl	800e308 <_vfiprintf_r>
 800b0ba:	b002      	add	sp, #8
 800b0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c0:	b004      	add	sp, #16
 800b0c2:	4770      	bx	lr
 800b0c4:	20000030 	.word	0x20000030

0800b0c8 <nanf>:
 800b0c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b0d0 <nanf+0x8>
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	7fc00000 	.word	0x7fc00000

0800b0d4 <siprintf>:
 800b0d4:	b40e      	push	{r1, r2, r3}
 800b0d6:	b500      	push	{lr}
 800b0d8:	b09c      	sub	sp, #112	; 0x70
 800b0da:	ab1d      	add	r3, sp, #116	; 0x74
 800b0dc:	9002      	str	r0, [sp, #8]
 800b0de:	9006      	str	r0, [sp, #24]
 800b0e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0e4:	4809      	ldr	r0, [pc, #36]	; (800b10c <siprintf+0x38>)
 800b0e6:	9107      	str	r1, [sp, #28]
 800b0e8:	9104      	str	r1, [sp, #16]
 800b0ea:	4909      	ldr	r1, [pc, #36]	; (800b110 <siprintf+0x3c>)
 800b0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f0:	9105      	str	r1, [sp, #20]
 800b0f2:	6800      	ldr	r0, [r0, #0]
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	a902      	add	r1, sp, #8
 800b0f8:	f002 ffdc 	bl	800e0b4 <_svfiprintf_r>
 800b0fc:	9b02      	ldr	r3, [sp, #8]
 800b0fe:	2200      	movs	r2, #0
 800b100:	701a      	strb	r2, [r3, #0]
 800b102:	b01c      	add	sp, #112	; 0x70
 800b104:	f85d eb04 	ldr.w	lr, [sp], #4
 800b108:	b003      	add	sp, #12
 800b10a:	4770      	bx	lr
 800b10c:	20000030 	.word	0x20000030
 800b110:	ffff0208 	.word	0xffff0208

0800b114 <sulp>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	4604      	mov	r4, r0
 800b118:	460d      	mov	r5, r1
 800b11a:	ec45 4b10 	vmov	d0, r4, r5
 800b11e:	4616      	mov	r6, r2
 800b120:	f002 fd26 	bl	800db70 <__ulp>
 800b124:	ec51 0b10 	vmov	r0, r1, d0
 800b128:	b17e      	cbz	r6, 800b14a <sulp+0x36>
 800b12a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b12e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b132:	2b00      	cmp	r3, #0
 800b134:	dd09      	ble.n	800b14a <sulp+0x36>
 800b136:	051b      	lsls	r3, r3, #20
 800b138:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b13c:	2400      	movs	r4, #0
 800b13e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b142:	4622      	mov	r2, r4
 800b144:	462b      	mov	r3, r5
 800b146:	f7f5 fa7f 	bl	8000648 <__aeabi_dmul>
 800b14a:	bd70      	pop	{r4, r5, r6, pc}
 800b14c:	0000      	movs	r0, r0
	...

0800b150 <_strtod_l>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	ed2d 8b02 	vpush	{d8}
 800b158:	b09d      	sub	sp, #116	; 0x74
 800b15a:	461f      	mov	r7, r3
 800b15c:	2300      	movs	r3, #0
 800b15e:	9318      	str	r3, [sp, #96]	; 0x60
 800b160:	4ba2      	ldr	r3, [pc, #648]	; (800b3ec <_strtod_l+0x29c>)
 800b162:	9213      	str	r2, [sp, #76]	; 0x4c
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	9305      	str	r3, [sp, #20]
 800b168:	4604      	mov	r4, r0
 800b16a:	4618      	mov	r0, r3
 800b16c:	4688      	mov	r8, r1
 800b16e:	f7f5 f857 	bl	8000220 <strlen>
 800b172:	f04f 0a00 	mov.w	sl, #0
 800b176:	4605      	mov	r5, r0
 800b178:	f04f 0b00 	mov.w	fp, #0
 800b17c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b182:	781a      	ldrb	r2, [r3, #0]
 800b184:	2a2b      	cmp	r2, #43	; 0x2b
 800b186:	d04e      	beq.n	800b226 <_strtod_l+0xd6>
 800b188:	d83b      	bhi.n	800b202 <_strtod_l+0xb2>
 800b18a:	2a0d      	cmp	r2, #13
 800b18c:	d834      	bhi.n	800b1f8 <_strtod_l+0xa8>
 800b18e:	2a08      	cmp	r2, #8
 800b190:	d834      	bhi.n	800b1fc <_strtod_l+0xac>
 800b192:	2a00      	cmp	r2, #0
 800b194:	d03e      	beq.n	800b214 <_strtod_l+0xc4>
 800b196:	2300      	movs	r3, #0
 800b198:	930a      	str	r3, [sp, #40]	; 0x28
 800b19a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b19c:	7833      	ldrb	r3, [r6, #0]
 800b19e:	2b30      	cmp	r3, #48	; 0x30
 800b1a0:	f040 80b0 	bne.w	800b304 <_strtod_l+0x1b4>
 800b1a4:	7873      	ldrb	r3, [r6, #1]
 800b1a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1aa:	2b58      	cmp	r3, #88	; 0x58
 800b1ac:	d168      	bne.n	800b280 <_strtod_l+0x130>
 800b1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	ab18      	add	r3, sp, #96	; 0x60
 800b1b4:	9702      	str	r7, [sp, #8]
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4a8d      	ldr	r2, [pc, #564]	; (800b3f0 <_strtod_l+0x2a0>)
 800b1ba:	ab19      	add	r3, sp, #100	; 0x64
 800b1bc:	a917      	add	r1, sp, #92	; 0x5c
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f001 fe2c 	bl	800ce1c <__gethex>
 800b1c4:	f010 0707 	ands.w	r7, r0, #7
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	d005      	beq.n	800b1d8 <_strtod_l+0x88>
 800b1cc:	2f06      	cmp	r7, #6
 800b1ce:	d12c      	bne.n	800b22a <_strtod_l+0xda>
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f040 8590 	bne.w	800bd00 <_strtod_l+0xbb0>
 800b1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e2:	b1eb      	cbz	r3, 800b220 <_strtod_l+0xd0>
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b1ea:	ec43 2b10 	vmov	d0, r2, r3
 800b1ee:	b01d      	add	sp, #116	; 0x74
 800b1f0:	ecbd 8b02 	vpop	{d8}
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f8:	2a20      	cmp	r2, #32
 800b1fa:	d1cc      	bne.n	800b196 <_strtod_l+0x46>
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800b200:	e7be      	b.n	800b180 <_strtod_l+0x30>
 800b202:	2a2d      	cmp	r2, #45	; 0x2d
 800b204:	d1c7      	bne.n	800b196 <_strtod_l+0x46>
 800b206:	2201      	movs	r2, #1
 800b208:	920a      	str	r2, [sp, #40]	; 0x28
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b20e:	785b      	ldrb	r3, [r3, #1]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1c2      	bne.n	800b19a <_strtod_l+0x4a>
 800b214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b216:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f040 856e 	bne.w	800bcfc <_strtod_l+0xbac>
 800b220:	4652      	mov	r2, sl
 800b222:	465b      	mov	r3, fp
 800b224:	e7e1      	b.n	800b1ea <_strtod_l+0x9a>
 800b226:	2200      	movs	r2, #0
 800b228:	e7ee      	b.n	800b208 <_strtod_l+0xb8>
 800b22a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b22c:	b13a      	cbz	r2, 800b23e <_strtod_l+0xee>
 800b22e:	2135      	movs	r1, #53	; 0x35
 800b230:	a81a      	add	r0, sp, #104	; 0x68
 800b232:	f002 fda8 	bl	800dd86 <__copybits>
 800b236:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b238:	4620      	mov	r0, r4
 800b23a:	f002 f967 	bl	800d50c <_Bfree>
 800b23e:	3f01      	subs	r7, #1
 800b240:	2f04      	cmp	r7, #4
 800b242:	d806      	bhi.n	800b252 <_strtod_l+0x102>
 800b244:	e8df f007 	tbb	[pc, r7]
 800b248:	1714030a 	.word	0x1714030a
 800b24c:	0a          	.byte	0x0a
 800b24d:	00          	.byte	0x00
 800b24e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b252:	0728      	lsls	r0, r5, #28
 800b254:	d5c0      	bpl.n	800b1d8 <_strtod_l+0x88>
 800b256:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b25a:	e7bd      	b.n	800b1d8 <_strtod_l+0x88>
 800b25c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b260:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b262:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b266:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b26a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b26e:	e7f0      	b.n	800b252 <_strtod_l+0x102>
 800b270:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b3f4 <_strtod_l+0x2a4>
 800b274:	e7ed      	b.n	800b252 <_strtod_l+0x102>
 800b276:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b27a:	f04f 3aff 	mov.w	sl, #4294967295
 800b27e:	e7e8      	b.n	800b252 <_strtod_l+0x102>
 800b280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	9217      	str	r2, [sp, #92]	; 0x5c
 800b286:	785b      	ldrb	r3, [r3, #1]
 800b288:	2b30      	cmp	r3, #48	; 0x30
 800b28a:	d0f9      	beq.n	800b280 <_strtod_l+0x130>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d0a3      	beq.n	800b1d8 <_strtod_l+0x88>
 800b290:	2301      	movs	r3, #1
 800b292:	f04f 0900 	mov.w	r9, #0
 800b296:	9304      	str	r3, [sp, #16]
 800b298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b29a:	9308      	str	r3, [sp, #32]
 800b29c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b2a0:	464f      	mov	r7, r9
 800b2a2:	220a      	movs	r2, #10
 800b2a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b2a6:	7806      	ldrb	r6, [r0, #0]
 800b2a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b2ac:	b2d9      	uxtb	r1, r3
 800b2ae:	2909      	cmp	r1, #9
 800b2b0:	d92a      	bls.n	800b308 <_strtod_l+0x1b8>
 800b2b2:	9905      	ldr	r1, [sp, #20]
 800b2b4:	462a      	mov	r2, r5
 800b2b6:	f003 f9b2 	bl	800e61e <strncmp>
 800b2ba:	b398      	cbz	r0, 800b324 <_strtod_l+0x1d4>
 800b2bc:	2000      	movs	r0, #0
 800b2be:	4632      	mov	r2, r6
 800b2c0:	463d      	mov	r5, r7
 800b2c2:	9005      	str	r0, [sp, #20]
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2a65      	cmp	r2, #101	; 0x65
 800b2c8:	d001      	beq.n	800b2ce <_strtod_l+0x17e>
 800b2ca:	2a45      	cmp	r2, #69	; 0x45
 800b2cc:	d118      	bne.n	800b300 <_strtod_l+0x1b0>
 800b2ce:	b91d      	cbnz	r5, 800b2d8 <_strtod_l+0x188>
 800b2d0:	9a04      	ldr	r2, [sp, #16]
 800b2d2:	4302      	orrs	r2, r0
 800b2d4:	d09e      	beq.n	800b214 <_strtod_l+0xc4>
 800b2d6:	2500      	movs	r5, #0
 800b2d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b2dc:	f108 0201 	add.w	r2, r8, #1
 800b2e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b2e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b2e6:	2a2b      	cmp	r2, #43	; 0x2b
 800b2e8:	d075      	beq.n	800b3d6 <_strtod_l+0x286>
 800b2ea:	2a2d      	cmp	r2, #45	; 0x2d
 800b2ec:	d07b      	beq.n	800b3e6 <_strtod_l+0x296>
 800b2ee:	f04f 0c00 	mov.w	ip, #0
 800b2f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b2f6:	2909      	cmp	r1, #9
 800b2f8:	f240 8082 	bls.w	800b400 <_strtod_l+0x2b0>
 800b2fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b300:	2600      	movs	r6, #0
 800b302:	e09d      	b.n	800b440 <_strtod_l+0x2f0>
 800b304:	2300      	movs	r3, #0
 800b306:	e7c4      	b.n	800b292 <_strtod_l+0x142>
 800b308:	2f08      	cmp	r7, #8
 800b30a:	bfd8      	it	le
 800b30c:	9907      	ldrle	r1, [sp, #28]
 800b30e:	f100 0001 	add.w	r0, r0, #1
 800b312:	bfda      	itte	le
 800b314:	fb02 3301 	mlale	r3, r2, r1, r3
 800b318:	9307      	strle	r3, [sp, #28]
 800b31a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b31e:	3701      	adds	r7, #1
 800b320:	9017      	str	r0, [sp, #92]	; 0x5c
 800b322:	e7bf      	b.n	800b2a4 <_strtod_l+0x154>
 800b324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b326:	195a      	adds	r2, r3, r5
 800b328:	9217      	str	r2, [sp, #92]	; 0x5c
 800b32a:	5d5a      	ldrb	r2, [r3, r5]
 800b32c:	2f00      	cmp	r7, #0
 800b32e:	d037      	beq.n	800b3a0 <_strtod_l+0x250>
 800b330:	9005      	str	r0, [sp, #20]
 800b332:	463d      	mov	r5, r7
 800b334:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b338:	2b09      	cmp	r3, #9
 800b33a:	d912      	bls.n	800b362 <_strtod_l+0x212>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e7c2      	b.n	800b2c6 <_strtod_l+0x176>
 800b340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	9217      	str	r2, [sp, #92]	; 0x5c
 800b346:	785a      	ldrb	r2, [r3, #1]
 800b348:	3001      	adds	r0, #1
 800b34a:	2a30      	cmp	r2, #48	; 0x30
 800b34c:	d0f8      	beq.n	800b340 <_strtod_l+0x1f0>
 800b34e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b352:	2b08      	cmp	r3, #8
 800b354:	f200 84d9 	bhi.w	800bd0a <_strtod_l+0xbba>
 800b358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b35a:	9005      	str	r0, [sp, #20]
 800b35c:	2000      	movs	r0, #0
 800b35e:	9308      	str	r3, [sp, #32]
 800b360:	4605      	mov	r5, r0
 800b362:	3a30      	subs	r2, #48	; 0x30
 800b364:	f100 0301 	add.w	r3, r0, #1
 800b368:	d014      	beq.n	800b394 <_strtod_l+0x244>
 800b36a:	9905      	ldr	r1, [sp, #20]
 800b36c:	4419      	add	r1, r3
 800b36e:	9105      	str	r1, [sp, #20]
 800b370:	462b      	mov	r3, r5
 800b372:	eb00 0e05 	add.w	lr, r0, r5
 800b376:	210a      	movs	r1, #10
 800b378:	4573      	cmp	r3, lr
 800b37a:	d113      	bne.n	800b3a4 <_strtod_l+0x254>
 800b37c:	182b      	adds	r3, r5, r0
 800b37e:	2b08      	cmp	r3, #8
 800b380:	f105 0501 	add.w	r5, r5, #1
 800b384:	4405      	add	r5, r0
 800b386:	dc1c      	bgt.n	800b3c2 <_strtod_l+0x272>
 800b388:	9907      	ldr	r1, [sp, #28]
 800b38a:	230a      	movs	r3, #10
 800b38c:	fb03 2301 	mla	r3, r3, r1, r2
 800b390:	9307      	str	r3, [sp, #28]
 800b392:	2300      	movs	r3, #0
 800b394:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b396:	1c51      	adds	r1, r2, #1
 800b398:	9117      	str	r1, [sp, #92]	; 0x5c
 800b39a:	7852      	ldrb	r2, [r2, #1]
 800b39c:	4618      	mov	r0, r3
 800b39e:	e7c9      	b.n	800b334 <_strtod_l+0x1e4>
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	e7d2      	b.n	800b34a <_strtod_l+0x1fa>
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	dc04      	bgt.n	800b3b2 <_strtod_l+0x262>
 800b3a8:	9e07      	ldr	r6, [sp, #28]
 800b3aa:	434e      	muls	r6, r1
 800b3ac:	9607      	str	r6, [sp, #28]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	e7e2      	b.n	800b378 <_strtod_l+0x228>
 800b3b2:	f103 0c01 	add.w	ip, r3, #1
 800b3b6:	f1bc 0f10 	cmp.w	ip, #16
 800b3ba:	bfd8      	it	le
 800b3bc:	fb01 f909 	mulle.w	r9, r1, r9
 800b3c0:	e7f5      	b.n	800b3ae <_strtod_l+0x25e>
 800b3c2:	2d10      	cmp	r5, #16
 800b3c4:	bfdc      	itt	le
 800b3c6:	230a      	movle	r3, #10
 800b3c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800b3cc:	e7e1      	b.n	800b392 <_strtod_l+0x242>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	9305      	str	r3, [sp, #20]
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e77c      	b.n	800b2d0 <_strtod_l+0x180>
 800b3d6:	f04f 0c00 	mov.w	ip, #0
 800b3da:	f108 0202 	add.w	r2, r8, #2
 800b3de:	9217      	str	r2, [sp, #92]	; 0x5c
 800b3e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b3e4:	e785      	b.n	800b2f2 <_strtod_l+0x1a2>
 800b3e6:	f04f 0c01 	mov.w	ip, #1
 800b3ea:	e7f6      	b.n	800b3da <_strtod_l+0x28a>
 800b3ec:	08011ae4 	.word	0x08011ae4
 800b3f0:	08011838 	.word	0x08011838
 800b3f4:	7ff00000 	.word	0x7ff00000
 800b3f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b3fa:	1c51      	adds	r1, r2, #1
 800b3fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800b3fe:	7852      	ldrb	r2, [r2, #1]
 800b400:	2a30      	cmp	r2, #48	; 0x30
 800b402:	d0f9      	beq.n	800b3f8 <_strtod_l+0x2a8>
 800b404:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b408:	2908      	cmp	r1, #8
 800b40a:	f63f af79 	bhi.w	800b300 <_strtod_l+0x1b0>
 800b40e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b412:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b414:	9206      	str	r2, [sp, #24]
 800b416:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b418:	1c51      	adds	r1, r2, #1
 800b41a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b41c:	7852      	ldrb	r2, [r2, #1]
 800b41e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b422:	2e09      	cmp	r6, #9
 800b424:	d937      	bls.n	800b496 <_strtod_l+0x346>
 800b426:	9e06      	ldr	r6, [sp, #24]
 800b428:	1b89      	subs	r1, r1, r6
 800b42a:	2908      	cmp	r1, #8
 800b42c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b430:	dc02      	bgt.n	800b438 <_strtod_l+0x2e8>
 800b432:	4576      	cmp	r6, lr
 800b434:	bfa8      	it	ge
 800b436:	4676      	movge	r6, lr
 800b438:	f1bc 0f00 	cmp.w	ip, #0
 800b43c:	d000      	beq.n	800b440 <_strtod_l+0x2f0>
 800b43e:	4276      	negs	r6, r6
 800b440:	2d00      	cmp	r5, #0
 800b442:	d14d      	bne.n	800b4e0 <_strtod_l+0x390>
 800b444:	9904      	ldr	r1, [sp, #16]
 800b446:	4301      	orrs	r1, r0
 800b448:	f47f aec6 	bne.w	800b1d8 <_strtod_l+0x88>
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f47f aee1 	bne.w	800b214 <_strtod_l+0xc4>
 800b452:	2a69      	cmp	r2, #105	; 0x69
 800b454:	d027      	beq.n	800b4a6 <_strtod_l+0x356>
 800b456:	dc24      	bgt.n	800b4a2 <_strtod_l+0x352>
 800b458:	2a49      	cmp	r2, #73	; 0x49
 800b45a:	d024      	beq.n	800b4a6 <_strtod_l+0x356>
 800b45c:	2a4e      	cmp	r2, #78	; 0x4e
 800b45e:	f47f aed9 	bne.w	800b214 <_strtod_l+0xc4>
 800b462:	499f      	ldr	r1, [pc, #636]	; (800b6e0 <_strtod_l+0x590>)
 800b464:	a817      	add	r0, sp, #92	; 0x5c
 800b466:	f001 ff31 	bl	800d2cc <__match>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	f43f aed2 	beq.w	800b214 <_strtod_l+0xc4>
 800b470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b28      	cmp	r3, #40	; 0x28
 800b476:	d12d      	bne.n	800b4d4 <_strtod_l+0x384>
 800b478:	499a      	ldr	r1, [pc, #616]	; (800b6e4 <_strtod_l+0x594>)
 800b47a:	aa1a      	add	r2, sp, #104	; 0x68
 800b47c:	a817      	add	r0, sp, #92	; 0x5c
 800b47e:	f001 ff39 	bl	800d2f4 <__hexnan>
 800b482:	2805      	cmp	r0, #5
 800b484:	d126      	bne.n	800b4d4 <_strtod_l+0x384>
 800b486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b488:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b48c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b490:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b494:	e6a0      	b.n	800b1d8 <_strtod_l+0x88>
 800b496:	210a      	movs	r1, #10
 800b498:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b49c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b4a0:	e7b9      	b.n	800b416 <_strtod_l+0x2c6>
 800b4a2:	2a6e      	cmp	r2, #110	; 0x6e
 800b4a4:	e7db      	b.n	800b45e <_strtod_l+0x30e>
 800b4a6:	4990      	ldr	r1, [pc, #576]	; (800b6e8 <_strtod_l+0x598>)
 800b4a8:	a817      	add	r0, sp, #92	; 0x5c
 800b4aa:	f001 ff0f 	bl	800d2cc <__match>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	f43f aeb0 	beq.w	800b214 <_strtod_l+0xc4>
 800b4b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4b6:	498d      	ldr	r1, [pc, #564]	; (800b6ec <_strtod_l+0x59c>)
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	a817      	add	r0, sp, #92	; 0x5c
 800b4bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b4be:	f001 ff05 	bl	800d2cc <__match>
 800b4c2:	b910      	cbnz	r0, 800b4ca <_strtod_l+0x37a>
 800b4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b4ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b6fc <_strtod_l+0x5ac>
 800b4ce:	f04f 0a00 	mov.w	sl, #0
 800b4d2:	e681      	b.n	800b1d8 <_strtod_l+0x88>
 800b4d4:	4886      	ldr	r0, [pc, #536]	; (800b6f0 <_strtod_l+0x5a0>)
 800b4d6:	f003 f847 	bl	800e568 <nan>
 800b4da:	ec5b ab10 	vmov	sl, fp, d0
 800b4de:	e67b      	b.n	800b1d8 <_strtod_l+0x88>
 800b4e0:	9b05      	ldr	r3, [sp, #20]
 800b4e2:	9807      	ldr	r0, [sp, #28]
 800b4e4:	1af3      	subs	r3, r6, r3
 800b4e6:	2f00      	cmp	r7, #0
 800b4e8:	bf08      	it	eq
 800b4ea:	462f      	moveq	r7, r5
 800b4ec:	2d10      	cmp	r5, #16
 800b4ee:	9306      	str	r3, [sp, #24]
 800b4f0:	46a8      	mov	r8, r5
 800b4f2:	bfa8      	it	ge
 800b4f4:	f04f 0810 	movge.w	r8, #16
 800b4f8:	f7f5 f82c 	bl	8000554 <__aeabi_ui2d>
 800b4fc:	2d09      	cmp	r5, #9
 800b4fe:	4682      	mov	sl, r0
 800b500:	468b      	mov	fp, r1
 800b502:	dd13      	ble.n	800b52c <_strtod_l+0x3dc>
 800b504:	4b7b      	ldr	r3, [pc, #492]	; (800b6f4 <_strtod_l+0x5a4>)
 800b506:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b50a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b50e:	f7f5 f89b 	bl	8000648 <__aeabi_dmul>
 800b512:	4682      	mov	sl, r0
 800b514:	4648      	mov	r0, r9
 800b516:	468b      	mov	fp, r1
 800b518:	f7f5 f81c 	bl	8000554 <__aeabi_ui2d>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4650      	mov	r0, sl
 800b522:	4659      	mov	r1, fp
 800b524:	f7f4 feda 	bl	80002dc <__adddf3>
 800b528:	4682      	mov	sl, r0
 800b52a:	468b      	mov	fp, r1
 800b52c:	2d0f      	cmp	r5, #15
 800b52e:	dc38      	bgt.n	800b5a2 <_strtod_l+0x452>
 800b530:	9b06      	ldr	r3, [sp, #24]
 800b532:	2b00      	cmp	r3, #0
 800b534:	f43f ae50 	beq.w	800b1d8 <_strtod_l+0x88>
 800b538:	dd24      	ble.n	800b584 <_strtod_l+0x434>
 800b53a:	2b16      	cmp	r3, #22
 800b53c:	dc0b      	bgt.n	800b556 <_strtod_l+0x406>
 800b53e:	496d      	ldr	r1, [pc, #436]	; (800b6f4 <_strtod_l+0x5a4>)
 800b540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b544:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b548:	4652      	mov	r2, sl
 800b54a:	465b      	mov	r3, fp
 800b54c:	f7f5 f87c 	bl	8000648 <__aeabi_dmul>
 800b550:	4682      	mov	sl, r0
 800b552:	468b      	mov	fp, r1
 800b554:	e640      	b.n	800b1d8 <_strtod_l+0x88>
 800b556:	9a06      	ldr	r2, [sp, #24]
 800b558:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b55c:	4293      	cmp	r3, r2
 800b55e:	db20      	blt.n	800b5a2 <_strtod_l+0x452>
 800b560:	4c64      	ldr	r4, [pc, #400]	; (800b6f4 <_strtod_l+0x5a4>)
 800b562:	f1c5 050f 	rsb	r5, r5, #15
 800b566:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b56a:	4652      	mov	r2, sl
 800b56c:	465b      	mov	r3, fp
 800b56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b572:	f7f5 f869 	bl	8000648 <__aeabi_dmul>
 800b576:	9b06      	ldr	r3, [sp, #24]
 800b578:	1b5d      	subs	r5, r3, r5
 800b57a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b57e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b582:	e7e3      	b.n	800b54c <_strtod_l+0x3fc>
 800b584:	9b06      	ldr	r3, [sp, #24]
 800b586:	3316      	adds	r3, #22
 800b588:	db0b      	blt.n	800b5a2 <_strtod_l+0x452>
 800b58a:	9b05      	ldr	r3, [sp, #20]
 800b58c:	1b9e      	subs	r6, r3, r6
 800b58e:	4b59      	ldr	r3, [pc, #356]	; (800b6f4 <_strtod_l+0x5a4>)
 800b590:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b594:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b598:	4650      	mov	r0, sl
 800b59a:	4659      	mov	r1, fp
 800b59c:	f7f5 f97e 	bl	800089c <__aeabi_ddiv>
 800b5a0:	e7d6      	b.n	800b550 <_strtod_l+0x400>
 800b5a2:	9b06      	ldr	r3, [sp, #24]
 800b5a4:	eba5 0808 	sub.w	r8, r5, r8
 800b5a8:	4498      	add	r8, r3
 800b5aa:	f1b8 0f00 	cmp.w	r8, #0
 800b5ae:	dd74      	ble.n	800b69a <_strtod_l+0x54a>
 800b5b0:	f018 030f 	ands.w	r3, r8, #15
 800b5b4:	d00a      	beq.n	800b5cc <_strtod_l+0x47c>
 800b5b6:	494f      	ldr	r1, [pc, #316]	; (800b6f4 <_strtod_l+0x5a4>)
 800b5b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b5bc:	4652      	mov	r2, sl
 800b5be:	465b      	mov	r3, fp
 800b5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5c4:	f7f5 f840 	bl	8000648 <__aeabi_dmul>
 800b5c8:	4682      	mov	sl, r0
 800b5ca:	468b      	mov	fp, r1
 800b5cc:	f038 080f 	bics.w	r8, r8, #15
 800b5d0:	d04f      	beq.n	800b672 <_strtod_l+0x522>
 800b5d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b5d6:	dd22      	ble.n	800b61e <_strtod_l+0x4ce>
 800b5d8:	2500      	movs	r5, #0
 800b5da:	462e      	mov	r6, r5
 800b5dc:	9507      	str	r5, [sp, #28]
 800b5de:	9505      	str	r5, [sp, #20]
 800b5e0:	2322      	movs	r3, #34	; 0x22
 800b5e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b6fc <_strtod_l+0x5ac>
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	f04f 0a00 	mov.w	sl, #0
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f43f adf2 	beq.w	800b1d8 <_strtod_l+0x88>
 800b5f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f001 ff88 	bl	800d50c <_Bfree>
 800b5fc:	9905      	ldr	r1, [sp, #20]
 800b5fe:	4620      	mov	r0, r4
 800b600:	f001 ff84 	bl	800d50c <_Bfree>
 800b604:	4631      	mov	r1, r6
 800b606:	4620      	mov	r0, r4
 800b608:	f001 ff80 	bl	800d50c <_Bfree>
 800b60c:	9907      	ldr	r1, [sp, #28]
 800b60e:	4620      	mov	r0, r4
 800b610:	f001 ff7c 	bl	800d50c <_Bfree>
 800b614:	4629      	mov	r1, r5
 800b616:	4620      	mov	r0, r4
 800b618:	f001 ff78 	bl	800d50c <_Bfree>
 800b61c:	e5dc      	b.n	800b1d8 <_strtod_l+0x88>
 800b61e:	4b36      	ldr	r3, [pc, #216]	; (800b6f8 <_strtod_l+0x5a8>)
 800b620:	9304      	str	r3, [sp, #16]
 800b622:	2300      	movs	r3, #0
 800b624:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b628:	4650      	mov	r0, sl
 800b62a:	4659      	mov	r1, fp
 800b62c:	4699      	mov	r9, r3
 800b62e:	f1b8 0f01 	cmp.w	r8, #1
 800b632:	dc21      	bgt.n	800b678 <_strtod_l+0x528>
 800b634:	b10b      	cbz	r3, 800b63a <_strtod_l+0x4ea>
 800b636:	4682      	mov	sl, r0
 800b638:	468b      	mov	fp, r1
 800b63a:	4b2f      	ldr	r3, [pc, #188]	; (800b6f8 <_strtod_l+0x5a8>)
 800b63c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b640:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b644:	4652      	mov	r2, sl
 800b646:	465b      	mov	r3, fp
 800b648:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b64c:	f7f4 fffc 	bl	8000648 <__aeabi_dmul>
 800b650:	4b2a      	ldr	r3, [pc, #168]	; (800b6fc <_strtod_l+0x5ac>)
 800b652:	460a      	mov	r2, r1
 800b654:	400b      	ands	r3, r1
 800b656:	492a      	ldr	r1, [pc, #168]	; (800b700 <_strtod_l+0x5b0>)
 800b658:	428b      	cmp	r3, r1
 800b65a:	4682      	mov	sl, r0
 800b65c:	d8bc      	bhi.n	800b5d8 <_strtod_l+0x488>
 800b65e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b662:	428b      	cmp	r3, r1
 800b664:	bf86      	itte	hi
 800b666:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b704 <_strtod_l+0x5b4>
 800b66a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b66e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b672:	2300      	movs	r3, #0
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	e084      	b.n	800b782 <_strtod_l+0x632>
 800b678:	f018 0f01 	tst.w	r8, #1
 800b67c:	d005      	beq.n	800b68a <_strtod_l+0x53a>
 800b67e:	9b04      	ldr	r3, [sp, #16]
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	f7f4 ffe0 	bl	8000648 <__aeabi_dmul>
 800b688:	2301      	movs	r3, #1
 800b68a:	9a04      	ldr	r2, [sp, #16]
 800b68c:	3208      	adds	r2, #8
 800b68e:	f109 0901 	add.w	r9, r9, #1
 800b692:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b696:	9204      	str	r2, [sp, #16]
 800b698:	e7c9      	b.n	800b62e <_strtod_l+0x4de>
 800b69a:	d0ea      	beq.n	800b672 <_strtod_l+0x522>
 800b69c:	f1c8 0800 	rsb	r8, r8, #0
 800b6a0:	f018 020f 	ands.w	r2, r8, #15
 800b6a4:	d00a      	beq.n	800b6bc <_strtod_l+0x56c>
 800b6a6:	4b13      	ldr	r3, [pc, #76]	; (800b6f4 <_strtod_l+0x5a4>)
 800b6a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ac:	4650      	mov	r0, sl
 800b6ae:	4659      	mov	r1, fp
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f5 f8f2 	bl	800089c <__aeabi_ddiv>
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	468b      	mov	fp, r1
 800b6bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b6c0:	d0d7      	beq.n	800b672 <_strtod_l+0x522>
 800b6c2:	f1b8 0f1f 	cmp.w	r8, #31
 800b6c6:	dd1f      	ble.n	800b708 <_strtod_l+0x5b8>
 800b6c8:	2500      	movs	r5, #0
 800b6ca:	462e      	mov	r6, r5
 800b6cc:	9507      	str	r5, [sp, #28]
 800b6ce:	9505      	str	r5, [sp, #20]
 800b6d0:	2322      	movs	r3, #34	; 0x22
 800b6d2:	f04f 0a00 	mov.w	sl, #0
 800b6d6:	f04f 0b00 	mov.w	fp, #0
 800b6da:	6023      	str	r3, [r4, #0]
 800b6dc:	e786      	b.n	800b5ec <_strtod_l+0x49c>
 800b6de:	bf00      	nop
 800b6e0:	08011809 	.word	0x08011809
 800b6e4:	0801184c 	.word	0x0801184c
 800b6e8:	08011801 	.word	0x08011801
 800b6ec:	0801198c 	.word	0x0801198c
 800b6f0:	08011ca0 	.word	0x08011ca0
 800b6f4:	08011b80 	.word	0x08011b80
 800b6f8:	08011b58 	.word	0x08011b58
 800b6fc:	7ff00000 	.word	0x7ff00000
 800b700:	7ca00000 	.word	0x7ca00000
 800b704:	7fefffff 	.word	0x7fefffff
 800b708:	f018 0310 	ands.w	r3, r8, #16
 800b70c:	bf18      	it	ne
 800b70e:	236a      	movne	r3, #106	; 0x6a
 800b710:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bac0 <_strtod_l+0x970>
 800b714:	9304      	str	r3, [sp, #16]
 800b716:	4650      	mov	r0, sl
 800b718:	4659      	mov	r1, fp
 800b71a:	2300      	movs	r3, #0
 800b71c:	f018 0f01 	tst.w	r8, #1
 800b720:	d004      	beq.n	800b72c <_strtod_l+0x5dc>
 800b722:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b726:	f7f4 ff8f 	bl	8000648 <__aeabi_dmul>
 800b72a:	2301      	movs	r3, #1
 800b72c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b730:	f109 0908 	add.w	r9, r9, #8
 800b734:	d1f2      	bne.n	800b71c <_strtod_l+0x5cc>
 800b736:	b10b      	cbz	r3, 800b73c <_strtod_l+0x5ec>
 800b738:	4682      	mov	sl, r0
 800b73a:	468b      	mov	fp, r1
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	b1c3      	cbz	r3, 800b772 <_strtod_l+0x622>
 800b740:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b744:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b748:	2b00      	cmp	r3, #0
 800b74a:	4659      	mov	r1, fp
 800b74c:	dd11      	ble.n	800b772 <_strtod_l+0x622>
 800b74e:	2b1f      	cmp	r3, #31
 800b750:	f340 8124 	ble.w	800b99c <_strtod_l+0x84c>
 800b754:	2b34      	cmp	r3, #52	; 0x34
 800b756:	bfde      	ittt	le
 800b758:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b75c:	f04f 33ff 	movle.w	r3, #4294967295
 800b760:	fa03 f202 	lslle.w	r2, r3, r2
 800b764:	f04f 0a00 	mov.w	sl, #0
 800b768:	bfcc      	ite	gt
 800b76a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b76e:	ea02 0b01 	andle.w	fp, r2, r1
 800b772:	2200      	movs	r2, #0
 800b774:	2300      	movs	r3, #0
 800b776:	4650      	mov	r0, sl
 800b778:	4659      	mov	r1, fp
 800b77a:	f7f5 f9cd 	bl	8000b18 <__aeabi_dcmpeq>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d1a2      	bne.n	800b6c8 <_strtod_l+0x578>
 800b782:	9b07      	ldr	r3, [sp, #28]
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	9908      	ldr	r1, [sp, #32]
 800b788:	462b      	mov	r3, r5
 800b78a:	463a      	mov	r2, r7
 800b78c:	4620      	mov	r0, r4
 800b78e:	f001 ff25 	bl	800d5dc <__s2b>
 800b792:	9007      	str	r0, [sp, #28]
 800b794:	2800      	cmp	r0, #0
 800b796:	f43f af1f 	beq.w	800b5d8 <_strtod_l+0x488>
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	1b9e      	subs	r6, r3, r6
 800b79e:	9b06      	ldr	r3, [sp, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	bfb4      	ite	lt
 800b7a4:	4633      	movlt	r3, r6
 800b7a6:	2300      	movge	r3, #0
 800b7a8:	930c      	str	r3, [sp, #48]	; 0x30
 800b7aa:	9b06      	ldr	r3, [sp, #24]
 800b7ac:	2500      	movs	r5, #0
 800b7ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b7b2:	9312      	str	r3, [sp, #72]	; 0x48
 800b7b4:	462e      	mov	r6, r5
 800b7b6:	9b07      	ldr	r3, [sp, #28]
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	6859      	ldr	r1, [r3, #4]
 800b7bc:	f001 fe66 	bl	800d48c <_Balloc>
 800b7c0:	9005      	str	r0, [sp, #20]
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	f43f af0c 	beq.w	800b5e0 <_strtod_l+0x490>
 800b7c8:	9b07      	ldr	r3, [sp, #28]
 800b7ca:	691a      	ldr	r2, [r3, #16]
 800b7cc:	3202      	adds	r2, #2
 800b7ce:	f103 010c 	add.w	r1, r3, #12
 800b7d2:	0092      	lsls	r2, r2, #2
 800b7d4:	300c      	adds	r0, #12
 800b7d6:	f001 fe4b 	bl	800d470 <memcpy>
 800b7da:	ec4b ab10 	vmov	d0, sl, fp
 800b7de:	aa1a      	add	r2, sp, #104	; 0x68
 800b7e0:	a919      	add	r1, sp, #100	; 0x64
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f002 fa40 	bl	800dc68 <__d2b>
 800b7e8:	ec4b ab18 	vmov	d8, sl, fp
 800b7ec:	9018      	str	r0, [sp, #96]	; 0x60
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f43f aef6 	beq.w	800b5e0 <_strtod_l+0x490>
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f001 ff8a 	bl	800d710 <__i2b>
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	2800      	cmp	r0, #0
 800b800:	f43f aeee 	beq.w	800b5e0 <_strtod_l+0x490>
 800b804:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b806:	9904      	ldr	r1, [sp, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	bfab      	itete	ge
 800b80c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b80e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b810:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b812:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b816:	bfac      	ite	ge
 800b818:	eb03 0902 	addge.w	r9, r3, r2
 800b81c:	1ad7      	sublt	r7, r2, r3
 800b81e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b820:	eba3 0801 	sub.w	r8, r3, r1
 800b824:	4490      	add	r8, r2
 800b826:	4ba1      	ldr	r3, [pc, #644]	; (800baac <_strtod_l+0x95c>)
 800b828:	f108 38ff 	add.w	r8, r8, #4294967295
 800b82c:	4598      	cmp	r8, r3
 800b82e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b832:	f280 80c7 	bge.w	800b9c4 <_strtod_l+0x874>
 800b836:	eba3 0308 	sub.w	r3, r3, r8
 800b83a:	2b1f      	cmp	r3, #31
 800b83c:	eba2 0203 	sub.w	r2, r2, r3
 800b840:	f04f 0101 	mov.w	r1, #1
 800b844:	f300 80b1 	bgt.w	800b9aa <_strtod_l+0x85a>
 800b848:	fa01 f303 	lsl.w	r3, r1, r3
 800b84c:	930d      	str	r3, [sp, #52]	; 0x34
 800b84e:	2300      	movs	r3, #0
 800b850:	9308      	str	r3, [sp, #32]
 800b852:	eb09 0802 	add.w	r8, r9, r2
 800b856:	9b04      	ldr	r3, [sp, #16]
 800b858:	45c1      	cmp	r9, r8
 800b85a:	4417      	add	r7, r2
 800b85c:	441f      	add	r7, r3
 800b85e:	464b      	mov	r3, r9
 800b860:	bfa8      	it	ge
 800b862:	4643      	movge	r3, r8
 800b864:	42bb      	cmp	r3, r7
 800b866:	bfa8      	it	ge
 800b868:	463b      	movge	r3, r7
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	bfc2      	ittt	gt
 800b86e:	eba8 0803 	subgt.w	r8, r8, r3
 800b872:	1aff      	subgt	r7, r7, r3
 800b874:	eba9 0903 	subgt.w	r9, r9, r3
 800b878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	dd17      	ble.n	800b8ae <_strtod_l+0x75e>
 800b87e:	4631      	mov	r1, r6
 800b880:	461a      	mov	r2, r3
 800b882:	4620      	mov	r0, r4
 800b884:	f002 f804 	bl	800d890 <__pow5mult>
 800b888:	4606      	mov	r6, r0
 800b88a:	2800      	cmp	r0, #0
 800b88c:	f43f aea8 	beq.w	800b5e0 <_strtod_l+0x490>
 800b890:	4601      	mov	r1, r0
 800b892:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b894:	4620      	mov	r0, r4
 800b896:	f001 ff51 	bl	800d73c <__multiply>
 800b89a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b89c:	2800      	cmp	r0, #0
 800b89e:	f43f ae9f 	beq.w	800b5e0 <_strtod_l+0x490>
 800b8a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f001 fe31 	bl	800d50c <_Bfree>
 800b8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ac:	9318      	str	r3, [sp, #96]	; 0x60
 800b8ae:	f1b8 0f00 	cmp.w	r8, #0
 800b8b2:	f300 808c 	bgt.w	800b9ce <_strtod_l+0x87e>
 800b8b6:	9b06      	ldr	r3, [sp, #24]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd08      	ble.n	800b8ce <_strtod_l+0x77e>
 800b8bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8be:	9905      	ldr	r1, [sp, #20]
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f001 ffe5 	bl	800d890 <__pow5mult>
 800b8c6:	9005      	str	r0, [sp, #20]
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	f43f ae89 	beq.w	800b5e0 <_strtod_l+0x490>
 800b8ce:	2f00      	cmp	r7, #0
 800b8d0:	dd08      	ble.n	800b8e4 <_strtod_l+0x794>
 800b8d2:	9905      	ldr	r1, [sp, #20]
 800b8d4:	463a      	mov	r2, r7
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f002 f834 	bl	800d944 <__lshift>
 800b8dc:	9005      	str	r0, [sp, #20]
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f43f ae7e 	beq.w	800b5e0 <_strtod_l+0x490>
 800b8e4:	f1b9 0f00 	cmp.w	r9, #0
 800b8e8:	dd08      	ble.n	800b8fc <_strtod_l+0x7ac>
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	464a      	mov	r2, r9
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f002 f828 	bl	800d944 <__lshift>
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f43f ae72 	beq.w	800b5e0 <_strtod_l+0x490>
 800b8fc:	9a05      	ldr	r2, [sp, #20]
 800b8fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b900:	4620      	mov	r0, r4
 800b902:	f002 f8ab 	bl	800da5c <__mdiff>
 800b906:	4605      	mov	r5, r0
 800b908:	2800      	cmp	r0, #0
 800b90a:	f43f ae69 	beq.w	800b5e0 <_strtod_l+0x490>
 800b90e:	68c3      	ldr	r3, [r0, #12]
 800b910:	930b      	str	r3, [sp, #44]	; 0x2c
 800b912:	2300      	movs	r3, #0
 800b914:	60c3      	str	r3, [r0, #12]
 800b916:	4631      	mov	r1, r6
 800b918:	f002 f884 	bl	800da24 <__mcmp>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	da60      	bge.n	800b9e2 <_strtod_l+0x892>
 800b920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b922:	ea53 030a 	orrs.w	r3, r3, sl
 800b926:	f040 8082 	bne.w	800ba2e <_strtod_l+0x8de>
 800b92a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d17d      	bne.n	800ba2e <_strtod_l+0x8de>
 800b932:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b936:	0d1b      	lsrs	r3, r3, #20
 800b938:	051b      	lsls	r3, r3, #20
 800b93a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b93e:	d976      	bls.n	800ba2e <_strtod_l+0x8de>
 800b940:	696b      	ldr	r3, [r5, #20]
 800b942:	b913      	cbnz	r3, 800b94a <_strtod_l+0x7fa>
 800b944:	692b      	ldr	r3, [r5, #16]
 800b946:	2b01      	cmp	r3, #1
 800b948:	dd71      	ble.n	800ba2e <_strtod_l+0x8de>
 800b94a:	4629      	mov	r1, r5
 800b94c:	2201      	movs	r2, #1
 800b94e:	4620      	mov	r0, r4
 800b950:	f001 fff8 	bl	800d944 <__lshift>
 800b954:	4631      	mov	r1, r6
 800b956:	4605      	mov	r5, r0
 800b958:	f002 f864 	bl	800da24 <__mcmp>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	dd66      	ble.n	800ba2e <_strtod_l+0x8de>
 800b960:	9904      	ldr	r1, [sp, #16]
 800b962:	4a53      	ldr	r2, [pc, #332]	; (800bab0 <_strtod_l+0x960>)
 800b964:	465b      	mov	r3, fp
 800b966:	2900      	cmp	r1, #0
 800b968:	f000 8081 	beq.w	800ba6e <_strtod_l+0x91e>
 800b96c:	ea02 010b 	and.w	r1, r2, fp
 800b970:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b974:	dc7b      	bgt.n	800ba6e <_strtod_l+0x91e>
 800b976:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b97a:	f77f aea9 	ble.w	800b6d0 <_strtod_l+0x580>
 800b97e:	4b4d      	ldr	r3, [pc, #308]	; (800bab4 <_strtod_l+0x964>)
 800b980:	4650      	mov	r0, sl
 800b982:	4659      	mov	r1, fp
 800b984:	2200      	movs	r2, #0
 800b986:	f7f4 fe5f 	bl	8000648 <__aeabi_dmul>
 800b98a:	460b      	mov	r3, r1
 800b98c:	4303      	orrs	r3, r0
 800b98e:	bf08      	it	eq
 800b990:	2322      	moveq	r3, #34	; 0x22
 800b992:	4682      	mov	sl, r0
 800b994:	468b      	mov	fp, r1
 800b996:	bf08      	it	eq
 800b998:	6023      	streq	r3, [r4, #0]
 800b99a:	e62b      	b.n	800b5f4 <_strtod_l+0x4a4>
 800b99c:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a4:	ea03 0a0a 	and.w	sl, r3, sl
 800b9a8:	e6e3      	b.n	800b772 <_strtod_l+0x622>
 800b9aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b9ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b9b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b9b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b9ba:	fa01 f308 	lsl.w	r3, r1, r8
 800b9be:	9308      	str	r3, [sp, #32]
 800b9c0:	910d      	str	r1, [sp, #52]	; 0x34
 800b9c2:	e746      	b.n	800b852 <_strtod_l+0x702>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9308      	str	r3, [sp, #32]
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b9cc:	e741      	b.n	800b852 <_strtod_l+0x702>
 800b9ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b9d0:	4642      	mov	r2, r8
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f001 ffb6 	bl	800d944 <__lshift>
 800b9d8:	9018      	str	r0, [sp, #96]	; 0x60
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	f47f af6b 	bne.w	800b8b6 <_strtod_l+0x766>
 800b9e0:	e5fe      	b.n	800b5e0 <_strtod_l+0x490>
 800b9e2:	465f      	mov	r7, fp
 800b9e4:	d16e      	bne.n	800bac4 <_strtod_l+0x974>
 800b9e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9ec:	b342      	cbz	r2, 800ba40 <_strtod_l+0x8f0>
 800b9ee:	4a32      	ldr	r2, [pc, #200]	; (800bab8 <_strtod_l+0x968>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d128      	bne.n	800ba46 <_strtod_l+0x8f6>
 800b9f4:	9b04      	ldr	r3, [sp, #16]
 800b9f6:	4651      	mov	r1, sl
 800b9f8:	b1eb      	cbz	r3, 800ba36 <_strtod_l+0x8e6>
 800b9fa:	4b2d      	ldr	r3, [pc, #180]	; (800bab0 <_strtod_l+0x960>)
 800b9fc:	403b      	ands	r3, r7
 800b9fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba02:	f04f 32ff 	mov.w	r2, #4294967295
 800ba06:	d819      	bhi.n	800ba3c <_strtod_l+0x8ec>
 800ba08:	0d1b      	lsrs	r3, r3, #20
 800ba0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba12:	4299      	cmp	r1, r3
 800ba14:	d117      	bne.n	800ba46 <_strtod_l+0x8f6>
 800ba16:	4b29      	ldr	r3, [pc, #164]	; (800babc <_strtod_l+0x96c>)
 800ba18:	429f      	cmp	r7, r3
 800ba1a:	d102      	bne.n	800ba22 <_strtod_l+0x8d2>
 800ba1c:	3101      	adds	r1, #1
 800ba1e:	f43f addf 	beq.w	800b5e0 <_strtod_l+0x490>
 800ba22:	4b23      	ldr	r3, [pc, #140]	; (800bab0 <_strtod_l+0x960>)
 800ba24:	403b      	ands	r3, r7
 800ba26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ba2a:	f04f 0a00 	mov.w	sl, #0
 800ba2e:	9b04      	ldr	r3, [sp, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1a4      	bne.n	800b97e <_strtod_l+0x82e>
 800ba34:	e5de      	b.n	800b5f4 <_strtod_l+0x4a4>
 800ba36:	f04f 33ff 	mov.w	r3, #4294967295
 800ba3a:	e7ea      	b.n	800ba12 <_strtod_l+0x8c2>
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	e7e8      	b.n	800ba12 <_strtod_l+0x8c2>
 800ba40:	ea53 030a 	orrs.w	r3, r3, sl
 800ba44:	d08c      	beq.n	800b960 <_strtod_l+0x810>
 800ba46:	9b08      	ldr	r3, [sp, #32]
 800ba48:	b1db      	cbz	r3, 800ba82 <_strtod_l+0x932>
 800ba4a:	423b      	tst	r3, r7
 800ba4c:	d0ef      	beq.n	800ba2e <_strtod_l+0x8de>
 800ba4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba50:	9a04      	ldr	r2, [sp, #16]
 800ba52:	4650      	mov	r0, sl
 800ba54:	4659      	mov	r1, fp
 800ba56:	b1c3      	cbz	r3, 800ba8a <_strtod_l+0x93a>
 800ba58:	f7ff fb5c 	bl	800b114 <sulp>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	460b      	mov	r3, r1
 800ba60:	ec51 0b18 	vmov	r0, r1, d8
 800ba64:	f7f4 fc3a 	bl	80002dc <__adddf3>
 800ba68:	4682      	mov	sl, r0
 800ba6a:	468b      	mov	fp, r1
 800ba6c:	e7df      	b.n	800ba2e <_strtod_l+0x8de>
 800ba6e:	4013      	ands	r3, r2
 800ba70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ba74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ba78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ba7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ba80:	e7d5      	b.n	800ba2e <_strtod_l+0x8de>
 800ba82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba84:	ea13 0f0a 	tst.w	r3, sl
 800ba88:	e7e0      	b.n	800ba4c <_strtod_l+0x8fc>
 800ba8a:	f7ff fb43 	bl	800b114 <sulp>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	ec51 0b18 	vmov	r0, r1, d8
 800ba96:	f7f4 fc1f 	bl	80002d8 <__aeabi_dsub>
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4682      	mov	sl, r0
 800baa0:	468b      	mov	fp, r1
 800baa2:	f7f5 f839 	bl	8000b18 <__aeabi_dcmpeq>
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d0c1      	beq.n	800ba2e <_strtod_l+0x8de>
 800baaa:	e611      	b.n	800b6d0 <_strtod_l+0x580>
 800baac:	fffffc02 	.word	0xfffffc02
 800bab0:	7ff00000 	.word	0x7ff00000
 800bab4:	39500000 	.word	0x39500000
 800bab8:	000fffff 	.word	0x000fffff
 800babc:	7fefffff 	.word	0x7fefffff
 800bac0:	08011860 	.word	0x08011860
 800bac4:	4631      	mov	r1, r6
 800bac6:	4628      	mov	r0, r5
 800bac8:	f002 f92a 	bl	800dd20 <__ratio>
 800bacc:	ec59 8b10 	vmov	r8, r9, d0
 800bad0:	ee10 0a10 	vmov	r0, s0
 800bad4:	2200      	movs	r2, #0
 800bad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bada:	4649      	mov	r1, r9
 800badc:	f7f5 f830 	bl	8000b40 <__aeabi_dcmple>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d07a      	beq.n	800bbda <_strtod_l+0xa8a>
 800bae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d04a      	beq.n	800bb80 <_strtod_l+0xa30>
 800baea:	4b95      	ldr	r3, [pc, #596]	; (800bd40 <_strtod_l+0xbf0>)
 800baec:	2200      	movs	r2, #0
 800baee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800baf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bd40 <_strtod_l+0xbf0>
 800baf6:	f04f 0800 	mov.w	r8, #0
 800bafa:	4b92      	ldr	r3, [pc, #584]	; (800bd44 <_strtod_l+0xbf4>)
 800bafc:	403b      	ands	r3, r7
 800bafe:	930d      	str	r3, [sp, #52]	; 0x34
 800bb00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb02:	4b91      	ldr	r3, [pc, #580]	; (800bd48 <_strtod_l+0xbf8>)
 800bb04:	429a      	cmp	r2, r3
 800bb06:	f040 80b0 	bne.w	800bc6a <_strtod_l+0xb1a>
 800bb0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bb12:	ec4b ab10 	vmov	d0, sl, fp
 800bb16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb1a:	f002 f829 	bl	800db70 <__ulp>
 800bb1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb22:	ec53 2b10 	vmov	r2, r3, d0
 800bb26:	f7f4 fd8f 	bl	8000648 <__aeabi_dmul>
 800bb2a:	4652      	mov	r2, sl
 800bb2c:	465b      	mov	r3, fp
 800bb2e:	f7f4 fbd5 	bl	80002dc <__adddf3>
 800bb32:	460b      	mov	r3, r1
 800bb34:	4983      	ldr	r1, [pc, #524]	; (800bd44 <_strtod_l+0xbf4>)
 800bb36:	4a85      	ldr	r2, [pc, #532]	; (800bd4c <_strtod_l+0xbfc>)
 800bb38:	4019      	ands	r1, r3
 800bb3a:	4291      	cmp	r1, r2
 800bb3c:	4682      	mov	sl, r0
 800bb3e:	d960      	bls.n	800bc02 <_strtod_l+0xab2>
 800bb40:	ee18 3a90 	vmov	r3, s17
 800bb44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d104      	bne.n	800bb56 <_strtod_l+0xa06>
 800bb4c:	ee18 3a10 	vmov	r3, s16
 800bb50:	3301      	adds	r3, #1
 800bb52:	f43f ad45 	beq.w	800b5e0 <_strtod_l+0x490>
 800bb56:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bd58 <_strtod_l+0xc08>
 800bb5a:	f04f 3aff 	mov.w	sl, #4294967295
 800bb5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb60:	4620      	mov	r0, r4
 800bb62:	f001 fcd3 	bl	800d50c <_Bfree>
 800bb66:	9905      	ldr	r1, [sp, #20]
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f001 fccf 	bl	800d50c <_Bfree>
 800bb6e:	4631      	mov	r1, r6
 800bb70:	4620      	mov	r0, r4
 800bb72:	f001 fccb 	bl	800d50c <_Bfree>
 800bb76:	4629      	mov	r1, r5
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f001 fcc7 	bl	800d50c <_Bfree>
 800bb7e:	e61a      	b.n	800b7b6 <_strtod_l+0x666>
 800bb80:	f1ba 0f00 	cmp.w	sl, #0
 800bb84:	d11b      	bne.n	800bbbe <_strtod_l+0xa6e>
 800bb86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb8a:	b9f3      	cbnz	r3, 800bbca <_strtod_l+0xa7a>
 800bb8c:	4b6c      	ldr	r3, [pc, #432]	; (800bd40 <_strtod_l+0xbf0>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	4640      	mov	r0, r8
 800bb92:	4649      	mov	r1, r9
 800bb94:	f7f4 ffca 	bl	8000b2c <__aeabi_dcmplt>
 800bb98:	b9d0      	cbnz	r0, 800bbd0 <_strtod_l+0xa80>
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	4b6c      	ldr	r3, [pc, #432]	; (800bd50 <_strtod_l+0xc00>)
 800bba0:	2200      	movs	r2, #0
 800bba2:	f7f4 fd51 	bl	8000648 <__aeabi_dmul>
 800bba6:	4680      	mov	r8, r0
 800bba8:	4689      	mov	r9, r1
 800bbaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bbae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bbb2:	9315      	str	r3, [sp, #84]	; 0x54
 800bbb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bbb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bbbc:	e79d      	b.n	800bafa <_strtod_l+0x9aa>
 800bbbe:	f1ba 0f01 	cmp.w	sl, #1
 800bbc2:	d102      	bne.n	800bbca <_strtod_l+0xa7a>
 800bbc4:	2f00      	cmp	r7, #0
 800bbc6:	f43f ad83 	beq.w	800b6d0 <_strtod_l+0x580>
 800bbca:	4b62      	ldr	r3, [pc, #392]	; (800bd54 <_strtod_l+0xc04>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	e78e      	b.n	800baee <_strtod_l+0x99e>
 800bbd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bd50 <_strtod_l+0xc00>
 800bbd4:	f04f 0800 	mov.w	r8, #0
 800bbd8:	e7e7      	b.n	800bbaa <_strtod_l+0xa5a>
 800bbda:	4b5d      	ldr	r3, [pc, #372]	; (800bd50 <_strtod_l+0xc00>)
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4649      	mov	r1, r9
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f7f4 fd31 	bl	8000648 <__aeabi_dmul>
 800bbe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4689      	mov	r9, r1
 800bbec:	b933      	cbnz	r3, 800bbfc <_strtod_l+0xaac>
 800bbee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbf2:	900e      	str	r0, [sp, #56]	; 0x38
 800bbf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bbfa:	e7dd      	b.n	800bbb8 <_strtod_l+0xa68>
 800bbfc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bc00:	e7f9      	b.n	800bbf6 <_strtod_l+0xaa6>
 800bc02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bc06:	9b04      	ldr	r3, [sp, #16]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1a8      	bne.n	800bb5e <_strtod_l+0xa0e>
 800bc0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc12:	0d1b      	lsrs	r3, r3, #20
 800bc14:	051b      	lsls	r3, r3, #20
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d1a1      	bne.n	800bb5e <_strtod_l+0xa0e>
 800bc1a:	4640      	mov	r0, r8
 800bc1c:	4649      	mov	r1, r9
 800bc1e:	f7f5 f981 	bl	8000f24 <__aeabi_d2lz>
 800bc22:	f7f4 fce3 	bl	80005ec <__aeabi_l2d>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	f7f4 fb53 	bl	80002d8 <__aeabi_dsub>
 800bc32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc38:	ea43 030a 	orr.w	r3, r3, sl
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	4680      	mov	r8, r0
 800bc40:	4689      	mov	r9, r1
 800bc42:	d055      	beq.n	800bcf0 <_strtod_l+0xba0>
 800bc44:	a336      	add	r3, pc, #216	; (adr r3, 800bd20 <_strtod_l+0xbd0>)
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f7f4 ff6f 	bl	8000b2c <__aeabi_dcmplt>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f47f acd0 	bne.w	800b5f4 <_strtod_l+0x4a4>
 800bc54:	a334      	add	r3, pc, #208	; (adr r3, 800bd28 <_strtod_l+0xbd8>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	f7f4 ff83 	bl	8000b68 <__aeabi_dcmpgt>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	f43f af7b 	beq.w	800bb5e <_strtod_l+0xa0e>
 800bc68:	e4c4      	b.n	800b5f4 <_strtod_l+0x4a4>
 800bc6a:	9b04      	ldr	r3, [sp, #16]
 800bc6c:	b333      	cbz	r3, 800bcbc <_strtod_l+0xb6c>
 800bc6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc74:	d822      	bhi.n	800bcbc <_strtod_l+0xb6c>
 800bc76:	a32e      	add	r3, pc, #184	; (adr r3, 800bd30 <_strtod_l+0xbe0>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	4649      	mov	r1, r9
 800bc80:	f7f4 ff5e 	bl	8000b40 <__aeabi_dcmple>
 800bc84:	b1a0      	cbz	r0, 800bcb0 <_strtod_l+0xb60>
 800bc86:	4649      	mov	r1, r9
 800bc88:	4640      	mov	r0, r8
 800bc8a:	f7f4 ffb5 	bl	8000bf8 <__aeabi_d2uiz>
 800bc8e:	2801      	cmp	r0, #1
 800bc90:	bf38      	it	cc
 800bc92:	2001      	movcc	r0, #1
 800bc94:	f7f4 fc5e 	bl	8000554 <__aeabi_ui2d>
 800bc98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc9a:	4680      	mov	r8, r0
 800bc9c:	4689      	mov	r9, r1
 800bc9e:	bb23      	cbnz	r3, 800bcea <_strtod_l+0xb9a>
 800bca0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bca4:	9010      	str	r0, [sp, #64]	; 0x40
 800bca6:	9311      	str	r3, [sp, #68]	; 0x44
 800bca8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bcac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bcb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bcb8:	1a9b      	subs	r3, r3, r2
 800bcba:	9309      	str	r3, [sp, #36]	; 0x24
 800bcbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bcc0:	eeb0 0a48 	vmov.f32	s0, s16
 800bcc4:	eef0 0a68 	vmov.f32	s1, s17
 800bcc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bccc:	f001 ff50 	bl	800db70 <__ulp>
 800bcd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bcd4:	ec53 2b10 	vmov	r2, r3, d0
 800bcd8:	f7f4 fcb6 	bl	8000648 <__aeabi_dmul>
 800bcdc:	ec53 2b18 	vmov	r2, r3, d8
 800bce0:	f7f4 fafc 	bl	80002dc <__adddf3>
 800bce4:	4682      	mov	sl, r0
 800bce6:	468b      	mov	fp, r1
 800bce8:	e78d      	b.n	800bc06 <_strtod_l+0xab6>
 800bcea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bcee:	e7db      	b.n	800bca8 <_strtod_l+0xb58>
 800bcf0:	a311      	add	r3, pc, #68	; (adr r3, 800bd38 <_strtod_l+0xbe8>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f7f4 ff19 	bl	8000b2c <__aeabi_dcmplt>
 800bcfa:	e7b2      	b.n	800bc62 <_strtod_l+0xb12>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	930a      	str	r3, [sp, #40]	; 0x28
 800bd00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd04:	6013      	str	r3, [r2, #0]
 800bd06:	f7ff ba6b 	b.w	800b1e0 <_strtod_l+0x90>
 800bd0a:	2a65      	cmp	r2, #101	; 0x65
 800bd0c:	f43f ab5f 	beq.w	800b3ce <_strtod_l+0x27e>
 800bd10:	2a45      	cmp	r2, #69	; 0x45
 800bd12:	f43f ab5c 	beq.w	800b3ce <_strtod_l+0x27e>
 800bd16:	2301      	movs	r3, #1
 800bd18:	f7ff bb94 	b.w	800b444 <_strtod_l+0x2f4>
 800bd1c:	f3af 8000 	nop.w
 800bd20:	94a03595 	.word	0x94a03595
 800bd24:	3fdfffff 	.word	0x3fdfffff
 800bd28:	35afe535 	.word	0x35afe535
 800bd2c:	3fe00000 	.word	0x3fe00000
 800bd30:	ffc00000 	.word	0xffc00000
 800bd34:	41dfffff 	.word	0x41dfffff
 800bd38:	94a03595 	.word	0x94a03595
 800bd3c:	3fcfffff 	.word	0x3fcfffff
 800bd40:	3ff00000 	.word	0x3ff00000
 800bd44:	7ff00000 	.word	0x7ff00000
 800bd48:	7fe00000 	.word	0x7fe00000
 800bd4c:	7c9fffff 	.word	0x7c9fffff
 800bd50:	3fe00000 	.word	0x3fe00000
 800bd54:	bff00000 	.word	0xbff00000
 800bd58:	7fefffff 	.word	0x7fefffff

0800bd5c <_strtod_r>:
 800bd5c:	4b01      	ldr	r3, [pc, #4]	; (800bd64 <_strtod_r+0x8>)
 800bd5e:	f7ff b9f7 	b.w	800b150 <_strtod_l>
 800bd62:	bf00      	nop
 800bd64:	20000098 	.word	0x20000098

0800bd68 <_strtol_l.constprop.0>:
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd6e:	d001      	beq.n	800bd74 <_strtol_l.constprop.0+0xc>
 800bd70:	2b24      	cmp	r3, #36	; 0x24
 800bd72:	d906      	bls.n	800bd82 <_strtol_l.constprop.0+0x1a>
 800bd74:	f7fe fae4 	bl	800a340 <__errno>
 800bd78:	2316      	movs	r3, #22
 800bd7a:	6003      	str	r3, [r0, #0]
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800be68 <_strtol_l.constprop.0+0x100>
 800bd86:	460d      	mov	r5, r1
 800bd88:	462e      	mov	r6, r5
 800bd8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bd92:	f017 0708 	ands.w	r7, r7, #8
 800bd96:	d1f7      	bne.n	800bd88 <_strtol_l.constprop.0+0x20>
 800bd98:	2c2d      	cmp	r4, #45	; 0x2d
 800bd9a:	d132      	bne.n	800be02 <_strtol_l.constprop.0+0x9a>
 800bd9c:	782c      	ldrb	r4, [r5, #0]
 800bd9e:	2701      	movs	r7, #1
 800bda0:	1cb5      	adds	r5, r6, #2
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d05b      	beq.n	800be5e <_strtol_l.constprop.0+0xf6>
 800bda6:	2b10      	cmp	r3, #16
 800bda8:	d109      	bne.n	800bdbe <_strtol_l.constprop.0+0x56>
 800bdaa:	2c30      	cmp	r4, #48	; 0x30
 800bdac:	d107      	bne.n	800bdbe <_strtol_l.constprop.0+0x56>
 800bdae:	782c      	ldrb	r4, [r5, #0]
 800bdb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bdb4:	2c58      	cmp	r4, #88	; 0x58
 800bdb6:	d14d      	bne.n	800be54 <_strtol_l.constprop.0+0xec>
 800bdb8:	786c      	ldrb	r4, [r5, #1]
 800bdba:	2310      	movs	r3, #16
 800bdbc:	3502      	adds	r5, #2
 800bdbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bdc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdc6:	f04f 0c00 	mov.w	ip, #0
 800bdca:	fbb8 f9f3 	udiv	r9, r8, r3
 800bdce:	4666      	mov	r6, ip
 800bdd0:	fb03 8a19 	mls	sl, r3, r9, r8
 800bdd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bdd8:	f1be 0f09 	cmp.w	lr, #9
 800bddc:	d816      	bhi.n	800be0c <_strtol_l.constprop.0+0xa4>
 800bdde:	4674      	mov	r4, lr
 800bde0:	42a3      	cmp	r3, r4
 800bde2:	dd24      	ble.n	800be2e <_strtol_l.constprop.0+0xc6>
 800bde4:	f1bc 0f00 	cmp.w	ip, #0
 800bde8:	db1e      	blt.n	800be28 <_strtol_l.constprop.0+0xc0>
 800bdea:	45b1      	cmp	r9, r6
 800bdec:	d31c      	bcc.n	800be28 <_strtol_l.constprop.0+0xc0>
 800bdee:	d101      	bne.n	800bdf4 <_strtol_l.constprop.0+0x8c>
 800bdf0:	45a2      	cmp	sl, r4
 800bdf2:	db19      	blt.n	800be28 <_strtol_l.constprop.0+0xc0>
 800bdf4:	fb06 4603 	mla	r6, r6, r3, r4
 800bdf8:	f04f 0c01 	mov.w	ip, #1
 800bdfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be00:	e7e8      	b.n	800bdd4 <_strtol_l.constprop.0+0x6c>
 800be02:	2c2b      	cmp	r4, #43	; 0x2b
 800be04:	bf04      	itt	eq
 800be06:	782c      	ldrbeq	r4, [r5, #0]
 800be08:	1cb5      	addeq	r5, r6, #2
 800be0a:	e7ca      	b.n	800bda2 <_strtol_l.constprop.0+0x3a>
 800be0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800be10:	f1be 0f19 	cmp.w	lr, #25
 800be14:	d801      	bhi.n	800be1a <_strtol_l.constprop.0+0xb2>
 800be16:	3c37      	subs	r4, #55	; 0x37
 800be18:	e7e2      	b.n	800bde0 <_strtol_l.constprop.0+0x78>
 800be1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800be1e:	f1be 0f19 	cmp.w	lr, #25
 800be22:	d804      	bhi.n	800be2e <_strtol_l.constprop.0+0xc6>
 800be24:	3c57      	subs	r4, #87	; 0x57
 800be26:	e7db      	b.n	800bde0 <_strtol_l.constprop.0+0x78>
 800be28:	f04f 3cff 	mov.w	ip, #4294967295
 800be2c:	e7e6      	b.n	800bdfc <_strtol_l.constprop.0+0x94>
 800be2e:	f1bc 0f00 	cmp.w	ip, #0
 800be32:	da05      	bge.n	800be40 <_strtol_l.constprop.0+0xd8>
 800be34:	2322      	movs	r3, #34	; 0x22
 800be36:	6003      	str	r3, [r0, #0]
 800be38:	4646      	mov	r6, r8
 800be3a:	b942      	cbnz	r2, 800be4e <_strtol_l.constprop.0+0xe6>
 800be3c:	4630      	mov	r0, r6
 800be3e:	e79e      	b.n	800bd7e <_strtol_l.constprop.0+0x16>
 800be40:	b107      	cbz	r7, 800be44 <_strtol_l.constprop.0+0xdc>
 800be42:	4276      	negs	r6, r6
 800be44:	2a00      	cmp	r2, #0
 800be46:	d0f9      	beq.n	800be3c <_strtol_l.constprop.0+0xd4>
 800be48:	f1bc 0f00 	cmp.w	ip, #0
 800be4c:	d000      	beq.n	800be50 <_strtol_l.constprop.0+0xe8>
 800be4e:	1e69      	subs	r1, r5, #1
 800be50:	6011      	str	r1, [r2, #0]
 800be52:	e7f3      	b.n	800be3c <_strtol_l.constprop.0+0xd4>
 800be54:	2430      	movs	r4, #48	; 0x30
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1b1      	bne.n	800bdbe <_strtol_l.constprop.0+0x56>
 800be5a:	2308      	movs	r3, #8
 800be5c:	e7af      	b.n	800bdbe <_strtol_l.constprop.0+0x56>
 800be5e:	2c30      	cmp	r4, #48	; 0x30
 800be60:	d0a5      	beq.n	800bdae <_strtol_l.constprop.0+0x46>
 800be62:	230a      	movs	r3, #10
 800be64:	e7ab      	b.n	800bdbe <_strtol_l.constprop.0+0x56>
 800be66:	bf00      	nop
 800be68:	08011889 	.word	0x08011889

0800be6c <_strtol_r>:
 800be6c:	f7ff bf7c 	b.w	800bd68 <_strtol_l.constprop.0>

0800be70 <quorem>:
 800be70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	6903      	ldr	r3, [r0, #16]
 800be76:	690c      	ldr	r4, [r1, #16]
 800be78:	42a3      	cmp	r3, r4
 800be7a:	4607      	mov	r7, r0
 800be7c:	f2c0 8081 	blt.w	800bf82 <quorem+0x112>
 800be80:	3c01      	subs	r4, #1
 800be82:	f101 0814 	add.w	r8, r1, #20
 800be86:	f100 0514 	add.w	r5, r0, #20
 800be8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be8e:	9301      	str	r3, [sp, #4]
 800be90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be98:	3301      	adds	r3, #1
 800be9a:	429a      	cmp	r2, r3
 800be9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bea0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bea4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bea8:	d331      	bcc.n	800bf0e <quorem+0x9e>
 800beaa:	f04f 0e00 	mov.w	lr, #0
 800beae:	4640      	mov	r0, r8
 800beb0:	46ac      	mov	ip, r5
 800beb2:	46f2      	mov	sl, lr
 800beb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800beb8:	b293      	uxth	r3, r2
 800beba:	fb06 e303 	mla	r3, r6, r3, lr
 800bebe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	ebaa 0303 	sub.w	r3, sl, r3
 800bec8:	f8dc a000 	ldr.w	sl, [ip]
 800becc:	0c12      	lsrs	r2, r2, #16
 800bece:	fa13 f38a 	uxtah	r3, r3, sl
 800bed2:	fb06 e202 	mla	r2, r6, r2, lr
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	9b00      	ldr	r3, [sp, #0]
 800beda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bede:	b292      	uxth	r2, r2
 800bee0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bee8:	f8bd 3000 	ldrh.w	r3, [sp]
 800beec:	4581      	cmp	r9, r0
 800beee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bef2:	f84c 3b04 	str.w	r3, [ip], #4
 800bef6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800befa:	d2db      	bcs.n	800beb4 <quorem+0x44>
 800befc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf00:	b92b      	cbnz	r3, 800bf0e <quorem+0x9e>
 800bf02:	9b01      	ldr	r3, [sp, #4]
 800bf04:	3b04      	subs	r3, #4
 800bf06:	429d      	cmp	r5, r3
 800bf08:	461a      	mov	r2, r3
 800bf0a:	d32e      	bcc.n	800bf6a <quorem+0xfa>
 800bf0c:	613c      	str	r4, [r7, #16]
 800bf0e:	4638      	mov	r0, r7
 800bf10:	f001 fd88 	bl	800da24 <__mcmp>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	db24      	blt.n	800bf62 <quorem+0xf2>
 800bf18:	3601      	adds	r6, #1
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f04f 0c00 	mov.w	ip, #0
 800bf20:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf24:	f8d0 e000 	ldr.w	lr, [r0]
 800bf28:	b293      	uxth	r3, r2
 800bf2a:	ebac 0303 	sub.w	r3, ip, r3
 800bf2e:	0c12      	lsrs	r2, r2, #16
 800bf30:	fa13 f38e 	uxtah	r3, r3, lr
 800bf34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf42:	45c1      	cmp	r9, r8
 800bf44:	f840 3b04 	str.w	r3, [r0], #4
 800bf48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf4c:	d2e8      	bcs.n	800bf20 <quorem+0xb0>
 800bf4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf56:	b922      	cbnz	r2, 800bf62 <quorem+0xf2>
 800bf58:	3b04      	subs	r3, #4
 800bf5a:	429d      	cmp	r5, r3
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	d30a      	bcc.n	800bf76 <quorem+0x106>
 800bf60:	613c      	str	r4, [r7, #16]
 800bf62:	4630      	mov	r0, r6
 800bf64:	b003      	add	sp, #12
 800bf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6a:	6812      	ldr	r2, [r2, #0]
 800bf6c:	3b04      	subs	r3, #4
 800bf6e:	2a00      	cmp	r2, #0
 800bf70:	d1cc      	bne.n	800bf0c <quorem+0x9c>
 800bf72:	3c01      	subs	r4, #1
 800bf74:	e7c7      	b.n	800bf06 <quorem+0x96>
 800bf76:	6812      	ldr	r2, [r2, #0]
 800bf78:	3b04      	subs	r3, #4
 800bf7a:	2a00      	cmp	r2, #0
 800bf7c:	d1f0      	bne.n	800bf60 <quorem+0xf0>
 800bf7e:	3c01      	subs	r4, #1
 800bf80:	e7eb      	b.n	800bf5a <quorem+0xea>
 800bf82:	2000      	movs	r0, #0
 800bf84:	e7ee      	b.n	800bf64 <quorem+0xf4>
	...

0800bf88 <_dtoa_r>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	ed2d 8b04 	vpush	{d8-d9}
 800bf90:	ec57 6b10 	vmov	r6, r7, d0
 800bf94:	b093      	sub	sp, #76	; 0x4c
 800bf96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf9c:	9106      	str	r1, [sp, #24]
 800bf9e:	ee10 aa10 	vmov	sl, s0
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	9209      	str	r2, [sp, #36]	; 0x24
 800bfa6:	930c      	str	r3, [sp, #48]	; 0x30
 800bfa8:	46bb      	mov	fp, r7
 800bfaa:	b975      	cbnz	r5, 800bfca <_dtoa_r+0x42>
 800bfac:	2010      	movs	r0, #16
 800bfae:	f001 fa45 	bl	800d43c <malloc>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	6260      	str	r0, [r4, #36]	; 0x24
 800bfb6:	b920      	cbnz	r0, 800bfc2 <_dtoa_r+0x3a>
 800bfb8:	4ba7      	ldr	r3, [pc, #668]	; (800c258 <_dtoa_r+0x2d0>)
 800bfba:	21ea      	movs	r1, #234	; 0xea
 800bfbc:	48a7      	ldr	r0, [pc, #668]	; (800c25c <_dtoa_r+0x2d4>)
 800bfbe:	f002 fc23 	bl	800e808 <__assert_func>
 800bfc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bfc6:	6005      	str	r5, [r0, #0]
 800bfc8:	60c5      	str	r5, [r0, #12]
 800bfca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfcc:	6819      	ldr	r1, [r3, #0]
 800bfce:	b151      	cbz	r1, 800bfe6 <_dtoa_r+0x5e>
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	604a      	str	r2, [r1, #4]
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	4093      	lsls	r3, r2
 800bfd8:	608b      	str	r3, [r1, #8]
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f001 fa96 	bl	800d50c <_Bfree>
 800bfe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	1e3b      	subs	r3, r7, #0
 800bfe8:	bfaa      	itet	ge
 800bfea:	2300      	movge	r3, #0
 800bfec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bff0:	f8c8 3000 	strge.w	r3, [r8]
 800bff4:	4b9a      	ldr	r3, [pc, #616]	; (800c260 <_dtoa_r+0x2d8>)
 800bff6:	bfbc      	itt	lt
 800bff8:	2201      	movlt	r2, #1
 800bffa:	f8c8 2000 	strlt.w	r2, [r8]
 800bffe:	ea33 030b 	bics.w	r3, r3, fp
 800c002:	d11b      	bne.n	800c03c <_dtoa_r+0xb4>
 800c004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c006:	f242 730f 	movw	r3, #9999	; 0x270f
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c010:	4333      	orrs	r3, r6
 800c012:	f000 8592 	beq.w	800cb3a <_dtoa_r+0xbb2>
 800c016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c018:	b963      	cbnz	r3, 800c034 <_dtoa_r+0xac>
 800c01a:	4b92      	ldr	r3, [pc, #584]	; (800c264 <_dtoa_r+0x2dc>)
 800c01c:	e022      	b.n	800c064 <_dtoa_r+0xdc>
 800c01e:	4b92      	ldr	r3, [pc, #584]	; (800c268 <_dtoa_r+0x2e0>)
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	3308      	adds	r3, #8
 800c024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	9801      	ldr	r0, [sp, #4]
 800c02a:	b013      	add	sp, #76	; 0x4c
 800c02c:	ecbd 8b04 	vpop	{d8-d9}
 800c030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c034:	4b8b      	ldr	r3, [pc, #556]	; (800c264 <_dtoa_r+0x2dc>)
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	3303      	adds	r3, #3
 800c03a:	e7f3      	b.n	800c024 <_dtoa_r+0x9c>
 800c03c:	2200      	movs	r2, #0
 800c03e:	2300      	movs	r3, #0
 800c040:	4650      	mov	r0, sl
 800c042:	4659      	mov	r1, fp
 800c044:	f7f4 fd68 	bl	8000b18 <__aeabi_dcmpeq>
 800c048:	ec4b ab19 	vmov	d9, sl, fp
 800c04c:	4680      	mov	r8, r0
 800c04e:	b158      	cbz	r0, 800c068 <_dtoa_r+0xe0>
 800c050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c052:	2301      	movs	r3, #1
 800c054:	6013      	str	r3, [r2, #0]
 800c056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 856b 	beq.w	800cb34 <_dtoa_r+0xbac>
 800c05e:	4883      	ldr	r0, [pc, #524]	; (800c26c <_dtoa_r+0x2e4>)
 800c060:	6018      	str	r0, [r3, #0]
 800c062:	1e43      	subs	r3, r0, #1
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	e7df      	b.n	800c028 <_dtoa_r+0xa0>
 800c068:	ec4b ab10 	vmov	d0, sl, fp
 800c06c:	aa10      	add	r2, sp, #64	; 0x40
 800c06e:	a911      	add	r1, sp, #68	; 0x44
 800c070:	4620      	mov	r0, r4
 800c072:	f001 fdf9 	bl	800dc68 <__d2b>
 800c076:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c07a:	ee08 0a10 	vmov	s16, r0
 800c07e:	2d00      	cmp	r5, #0
 800c080:	f000 8084 	beq.w	800c18c <_dtoa_r+0x204>
 800c084:	ee19 3a90 	vmov	r3, s19
 800c088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c08c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c090:	4656      	mov	r6, sl
 800c092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c09a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c09e:	4b74      	ldr	r3, [pc, #464]	; (800c270 <_dtoa_r+0x2e8>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	f7f4 f917 	bl	80002d8 <__aeabi_dsub>
 800c0aa:	a365      	add	r3, pc, #404	; (adr r3, 800c240 <_dtoa_r+0x2b8>)
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f7f4 faca 	bl	8000648 <__aeabi_dmul>
 800c0b4:	a364      	add	r3, pc, #400	; (adr r3, 800c248 <_dtoa_r+0x2c0>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	f7f4 f90f 	bl	80002dc <__adddf3>
 800c0be:	4606      	mov	r6, r0
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	460f      	mov	r7, r1
 800c0c4:	f7f4 fa56 	bl	8000574 <__aeabi_i2d>
 800c0c8:	a361      	add	r3, pc, #388	; (adr r3, 800c250 <_dtoa_r+0x2c8>)
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	f7f4 fabb 	bl	8000648 <__aeabi_dmul>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	4639      	mov	r1, r7
 800c0da:	f7f4 f8ff 	bl	80002dc <__adddf3>
 800c0de:	4606      	mov	r6, r0
 800c0e0:	460f      	mov	r7, r1
 800c0e2:	f7f4 fd61 	bl	8000ba8 <__aeabi_d2iz>
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	9000      	str	r0, [sp, #0]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	f7f4 fd1c 	bl	8000b2c <__aeabi_dcmplt>
 800c0f4:	b150      	cbz	r0, 800c10c <_dtoa_r+0x184>
 800c0f6:	9800      	ldr	r0, [sp, #0]
 800c0f8:	f7f4 fa3c 	bl	8000574 <__aeabi_i2d>
 800c0fc:	4632      	mov	r2, r6
 800c0fe:	463b      	mov	r3, r7
 800c100:	f7f4 fd0a 	bl	8000b18 <__aeabi_dcmpeq>
 800c104:	b910      	cbnz	r0, 800c10c <_dtoa_r+0x184>
 800c106:	9b00      	ldr	r3, [sp, #0]
 800c108:	3b01      	subs	r3, #1
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	9b00      	ldr	r3, [sp, #0]
 800c10e:	2b16      	cmp	r3, #22
 800c110:	d85a      	bhi.n	800c1c8 <_dtoa_r+0x240>
 800c112:	9a00      	ldr	r2, [sp, #0]
 800c114:	4b57      	ldr	r3, [pc, #348]	; (800c274 <_dtoa_r+0x2ec>)
 800c116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	ec51 0b19 	vmov	r0, r1, d9
 800c122:	f7f4 fd03 	bl	8000b2c <__aeabi_dcmplt>
 800c126:	2800      	cmp	r0, #0
 800c128:	d050      	beq.n	800c1cc <_dtoa_r+0x244>
 800c12a:	9b00      	ldr	r3, [sp, #0]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	2300      	movs	r3, #0
 800c132:	930b      	str	r3, [sp, #44]	; 0x2c
 800c134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c136:	1b5d      	subs	r5, r3, r5
 800c138:	1e6b      	subs	r3, r5, #1
 800c13a:	9305      	str	r3, [sp, #20]
 800c13c:	bf45      	ittet	mi
 800c13e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c142:	9304      	strmi	r3, [sp, #16]
 800c144:	2300      	movpl	r3, #0
 800c146:	2300      	movmi	r3, #0
 800c148:	bf4c      	ite	mi
 800c14a:	9305      	strmi	r3, [sp, #20]
 800c14c:	9304      	strpl	r3, [sp, #16]
 800c14e:	9b00      	ldr	r3, [sp, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	db3d      	blt.n	800c1d0 <_dtoa_r+0x248>
 800c154:	9b05      	ldr	r3, [sp, #20]
 800c156:	9a00      	ldr	r2, [sp, #0]
 800c158:	920a      	str	r2, [sp, #40]	; 0x28
 800c15a:	4413      	add	r3, r2
 800c15c:	9305      	str	r3, [sp, #20]
 800c15e:	2300      	movs	r3, #0
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	9b06      	ldr	r3, [sp, #24]
 800c164:	2b09      	cmp	r3, #9
 800c166:	f200 8089 	bhi.w	800c27c <_dtoa_r+0x2f4>
 800c16a:	2b05      	cmp	r3, #5
 800c16c:	bfc4      	itt	gt
 800c16e:	3b04      	subgt	r3, #4
 800c170:	9306      	strgt	r3, [sp, #24]
 800c172:	9b06      	ldr	r3, [sp, #24]
 800c174:	f1a3 0302 	sub.w	r3, r3, #2
 800c178:	bfcc      	ite	gt
 800c17a:	2500      	movgt	r5, #0
 800c17c:	2501      	movle	r5, #1
 800c17e:	2b03      	cmp	r3, #3
 800c180:	f200 8087 	bhi.w	800c292 <_dtoa_r+0x30a>
 800c184:	e8df f003 	tbb	[pc, r3]
 800c188:	59383a2d 	.word	0x59383a2d
 800c18c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c190:	441d      	add	r5, r3
 800c192:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c196:	2b20      	cmp	r3, #32
 800c198:	bfc1      	itttt	gt
 800c19a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c19e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c1a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c1a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c1aa:	bfda      	itte	le
 800c1ac:	f1c3 0320 	rsble	r3, r3, #32
 800c1b0:	fa06 f003 	lslle.w	r0, r6, r3
 800c1b4:	4318      	orrgt	r0, r3
 800c1b6:	f7f4 f9cd 	bl	8000554 <__aeabi_ui2d>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	4606      	mov	r6, r0
 800c1be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c1c2:	3d01      	subs	r5, #1
 800c1c4:	930e      	str	r3, [sp, #56]	; 0x38
 800c1c6:	e76a      	b.n	800c09e <_dtoa_r+0x116>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e7b2      	b.n	800c132 <_dtoa_r+0x1aa>
 800c1cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c1ce:	e7b1      	b.n	800c134 <_dtoa_r+0x1ac>
 800c1d0:	9b04      	ldr	r3, [sp, #16]
 800c1d2:	9a00      	ldr	r2, [sp, #0]
 800c1d4:	1a9b      	subs	r3, r3, r2
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	4253      	negs	r3, r2
 800c1da:	9307      	str	r3, [sp, #28]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e0:	e7bf      	b.n	800c162 <_dtoa_r+0x1da>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	9308      	str	r3, [sp, #32]
 800c1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dc55      	bgt.n	800c298 <_dtoa_r+0x310>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800c1f6:	e00c      	b.n	800c212 <_dtoa_r+0x28a>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e7f3      	b.n	800c1e4 <_dtoa_r+0x25c>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c200:	9308      	str	r3, [sp, #32]
 800c202:	9b00      	ldr	r3, [sp, #0]
 800c204:	4413      	add	r3, r2
 800c206:	9302      	str	r3, [sp, #8]
 800c208:	3301      	adds	r3, #1
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	9303      	str	r3, [sp, #12]
 800c20e:	bfb8      	it	lt
 800c210:	2301      	movlt	r3, #1
 800c212:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c214:	2200      	movs	r2, #0
 800c216:	6042      	str	r2, [r0, #4]
 800c218:	2204      	movs	r2, #4
 800c21a:	f102 0614 	add.w	r6, r2, #20
 800c21e:	429e      	cmp	r6, r3
 800c220:	6841      	ldr	r1, [r0, #4]
 800c222:	d93d      	bls.n	800c2a0 <_dtoa_r+0x318>
 800c224:	4620      	mov	r0, r4
 800c226:	f001 f931 	bl	800d48c <_Balloc>
 800c22a:	9001      	str	r0, [sp, #4]
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d13b      	bne.n	800c2a8 <_dtoa_r+0x320>
 800c230:	4b11      	ldr	r3, [pc, #68]	; (800c278 <_dtoa_r+0x2f0>)
 800c232:	4602      	mov	r2, r0
 800c234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c238:	e6c0      	b.n	800bfbc <_dtoa_r+0x34>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e7df      	b.n	800c1fe <_dtoa_r+0x276>
 800c23e:	bf00      	nop
 800c240:	636f4361 	.word	0x636f4361
 800c244:	3fd287a7 	.word	0x3fd287a7
 800c248:	8b60c8b3 	.word	0x8b60c8b3
 800c24c:	3fc68a28 	.word	0x3fc68a28
 800c250:	509f79fb 	.word	0x509f79fb
 800c254:	3fd34413 	.word	0x3fd34413
 800c258:	08011996 	.word	0x08011996
 800c25c:	080119ad 	.word	0x080119ad
 800c260:	7ff00000 	.word	0x7ff00000
 800c264:	08011992 	.word	0x08011992
 800c268:	08011989 	.word	0x08011989
 800c26c:	0801180d 	.word	0x0801180d
 800c270:	3ff80000 	.word	0x3ff80000
 800c274:	08011b80 	.word	0x08011b80
 800c278:	08011a08 	.word	0x08011a08
 800c27c:	2501      	movs	r5, #1
 800c27e:	2300      	movs	r3, #0
 800c280:	9306      	str	r3, [sp, #24]
 800c282:	9508      	str	r5, [sp, #32]
 800c284:	f04f 33ff 	mov.w	r3, #4294967295
 800c288:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c28c:	2200      	movs	r2, #0
 800c28e:	2312      	movs	r3, #18
 800c290:	e7b0      	b.n	800c1f4 <_dtoa_r+0x26c>
 800c292:	2301      	movs	r3, #1
 800c294:	9308      	str	r3, [sp, #32]
 800c296:	e7f5      	b.n	800c284 <_dtoa_r+0x2fc>
 800c298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c29a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c29e:	e7b8      	b.n	800c212 <_dtoa_r+0x28a>
 800c2a0:	3101      	adds	r1, #1
 800c2a2:	6041      	str	r1, [r0, #4]
 800c2a4:	0052      	lsls	r2, r2, #1
 800c2a6:	e7b8      	b.n	800c21a <_dtoa_r+0x292>
 800c2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2aa:	9a01      	ldr	r2, [sp, #4]
 800c2ac:	601a      	str	r2, [r3, #0]
 800c2ae:	9b03      	ldr	r3, [sp, #12]
 800c2b0:	2b0e      	cmp	r3, #14
 800c2b2:	f200 809d 	bhi.w	800c3f0 <_dtoa_r+0x468>
 800c2b6:	2d00      	cmp	r5, #0
 800c2b8:	f000 809a 	beq.w	800c3f0 <_dtoa_r+0x468>
 800c2bc:	9b00      	ldr	r3, [sp, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	dd32      	ble.n	800c328 <_dtoa_r+0x3a0>
 800c2c2:	4ab7      	ldr	r2, [pc, #732]	; (800c5a0 <_dtoa_r+0x618>)
 800c2c4:	f003 030f 	and.w	r3, r3, #15
 800c2c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c2cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2d0:	9b00      	ldr	r3, [sp, #0]
 800c2d2:	05d8      	lsls	r0, r3, #23
 800c2d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c2d8:	d516      	bpl.n	800c308 <_dtoa_r+0x380>
 800c2da:	4bb2      	ldr	r3, [pc, #712]	; (800c5a4 <_dtoa_r+0x61c>)
 800c2dc:	ec51 0b19 	vmov	r0, r1, d9
 800c2e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2e4:	f7f4 fada 	bl	800089c <__aeabi_ddiv>
 800c2e8:	f007 070f 	and.w	r7, r7, #15
 800c2ec:	4682      	mov	sl, r0
 800c2ee:	468b      	mov	fp, r1
 800c2f0:	2503      	movs	r5, #3
 800c2f2:	4eac      	ldr	r6, [pc, #688]	; (800c5a4 <_dtoa_r+0x61c>)
 800c2f4:	b957      	cbnz	r7, 800c30c <_dtoa_r+0x384>
 800c2f6:	4642      	mov	r2, r8
 800c2f8:	464b      	mov	r3, r9
 800c2fa:	4650      	mov	r0, sl
 800c2fc:	4659      	mov	r1, fp
 800c2fe:	f7f4 facd 	bl	800089c <__aeabi_ddiv>
 800c302:	4682      	mov	sl, r0
 800c304:	468b      	mov	fp, r1
 800c306:	e028      	b.n	800c35a <_dtoa_r+0x3d2>
 800c308:	2502      	movs	r5, #2
 800c30a:	e7f2      	b.n	800c2f2 <_dtoa_r+0x36a>
 800c30c:	07f9      	lsls	r1, r7, #31
 800c30e:	d508      	bpl.n	800c322 <_dtoa_r+0x39a>
 800c310:	4640      	mov	r0, r8
 800c312:	4649      	mov	r1, r9
 800c314:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c318:	f7f4 f996 	bl	8000648 <__aeabi_dmul>
 800c31c:	3501      	adds	r5, #1
 800c31e:	4680      	mov	r8, r0
 800c320:	4689      	mov	r9, r1
 800c322:	107f      	asrs	r7, r7, #1
 800c324:	3608      	adds	r6, #8
 800c326:	e7e5      	b.n	800c2f4 <_dtoa_r+0x36c>
 800c328:	f000 809b 	beq.w	800c462 <_dtoa_r+0x4da>
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	4f9d      	ldr	r7, [pc, #628]	; (800c5a4 <_dtoa_r+0x61c>)
 800c330:	425e      	negs	r6, r3
 800c332:	4b9b      	ldr	r3, [pc, #620]	; (800c5a0 <_dtoa_r+0x618>)
 800c334:	f006 020f 	and.w	r2, r6, #15
 800c338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	ec51 0b19 	vmov	r0, r1, d9
 800c344:	f7f4 f980 	bl	8000648 <__aeabi_dmul>
 800c348:	1136      	asrs	r6, r6, #4
 800c34a:	4682      	mov	sl, r0
 800c34c:	468b      	mov	fp, r1
 800c34e:	2300      	movs	r3, #0
 800c350:	2502      	movs	r5, #2
 800c352:	2e00      	cmp	r6, #0
 800c354:	d17a      	bne.n	800c44c <_dtoa_r+0x4c4>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1d3      	bne.n	800c302 <_dtoa_r+0x37a>
 800c35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f000 8082 	beq.w	800c466 <_dtoa_r+0x4de>
 800c362:	4b91      	ldr	r3, [pc, #580]	; (800c5a8 <_dtoa_r+0x620>)
 800c364:	2200      	movs	r2, #0
 800c366:	4650      	mov	r0, sl
 800c368:	4659      	mov	r1, fp
 800c36a:	f7f4 fbdf 	bl	8000b2c <__aeabi_dcmplt>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d079      	beq.n	800c466 <_dtoa_r+0x4de>
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d076      	beq.n	800c466 <_dtoa_r+0x4de>
 800c378:	9b02      	ldr	r3, [sp, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	dd36      	ble.n	800c3ec <_dtoa_r+0x464>
 800c37e:	9b00      	ldr	r3, [sp, #0]
 800c380:	4650      	mov	r0, sl
 800c382:	4659      	mov	r1, fp
 800c384:	1e5f      	subs	r7, r3, #1
 800c386:	2200      	movs	r2, #0
 800c388:	4b88      	ldr	r3, [pc, #544]	; (800c5ac <_dtoa_r+0x624>)
 800c38a:	f7f4 f95d 	bl	8000648 <__aeabi_dmul>
 800c38e:	9e02      	ldr	r6, [sp, #8]
 800c390:	4682      	mov	sl, r0
 800c392:	468b      	mov	fp, r1
 800c394:	3501      	adds	r5, #1
 800c396:	4628      	mov	r0, r5
 800c398:	f7f4 f8ec 	bl	8000574 <__aeabi_i2d>
 800c39c:	4652      	mov	r2, sl
 800c39e:	465b      	mov	r3, fp
 800c3a0:	f7f4 f952 	bl	8000648 <__aeabi_dmul>
 800c3a4:	4b82      	ldr	r3, [pc, #520]	; (800c5b0 <_dtoa_r+0x628>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f7f3 ff98 	bl	80002dc <__adddf3>
 800c3ac:	46d0      	mov	r8, sl
 800c3ae:	46d9      	mov	r9, fp
 800c3b0:	4682      	mov	sl, r0
 800c3b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c3b6:	2e00      	cmp	r6, #0
 800c3b8:	d158      	bne.n	800c46c <_dtoa_r+0x4e4>
 800c3ba:	4b7e      	ldr	r3, [pc, #504]	; (800c5b4 <_dtoa_r+0x62c>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	4640      	mov	r0, r8
 800c3c0:	4649      	mov	r1, r9
 800c3c2:	f7f3 ff89 	bl	80002d8 <__aeabi_dsub>
 800c3c6:	4652      	mov	r2, sl
 800c3c8:	465b      	mov	r3, fp
 800c3ca:	4680      	mov	r8, r0
 800c3cc:	4689      	mov	r9, r1
 800c3ce:	f7f4 fbcb 	bl	8000b68 <__aeabi_dcmpgt>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	f040 8295 	bne.w	800c902 <_dtoa_r+0x97a>
 800c3d8:	4652      	mov	r2, sl
 800c3da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c3de:	4640      	mov	r0, r8
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	f7f4 fba3 	bl	8000b2c <__aeabi_dcmplt>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f040 8289 	bne.w	800c8fe <_dtoa_r+0x976>
 800c3ec:	ec5b ab19 	vmov	sl, fp, d9
 800c3f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f2c0 8148 	blt.w	800c688 <_dtoa_r+0x700>
 800c3f8:	9a00      	ldr	r2, [sp, #0]
 800c3fa:	2a0e      	cmp	r2, #14
 800c3fc:	f300 8144 	bgt.w	800c688 <_dtoa_r+0x700>
 800c400:	4b67      	ldr	r3, [pc, #412]	; (800c5a0 <_dtoa_r+0x618>)
 800c402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c406:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f280 80d5 	bge.w	800c5bc <_dtoa_r+0x634>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	f300 80d1 	bgt.w	800c5bc <_dtoa_r+0x634>
 800c41a:	f040 826f 	bne.w	800c8fc <_dtoa_r+0x974>
 800c41e:	4b65      	ldr	r3, [pc, #404]	; (800c5b4 <_dtoa_r+0x62c>)
 800c420:	2200      	movs	r2, #0
 800c422:	4640      	mov	r0, r8
 800c424:	4649      	mov	r1, r9
 800c426:	f7f4 f90f 	bl	8000648 <__aeabi_dmul>
 800c42a:	4652      	mov	r2, sl
 800c42c:	465b      	mov	r3, fp
 800c42e:	f7f4 fb91 	bl	8000b54 <__aeabi_dcmpge>
 800c432:	9e03      	ldr	r6, [sp, #12]
 800c434:	4637      	mov	r7, r6
 800c436:	2800      	cmp	r0, #0
 800c438:	f040 8245 	bne.w	800c8c6 <_dtoa_r+0x93e>
 800c43c:	9d01      	ldr	r5, [sp, #4]
 800c43e:	2331      	movs	r3, #49	; 0x31
 800c440:	f805 3b01 	strb.w	r3, [r5], #1
 800c444:	9b00      	ldr	r3, [sp, #0]
 800c446:	3301      	adds	r3, #1
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	e240      	b.n	800c8ce <_dtoa_r+0x946>
 800c44c:	07f2      	lsls	r2, r6, #31
 800c44e:	d505      	bpl.n	800c45c <_dtoa_r+0x4d4>
 800c450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c454:	f7f4 f8f8 	bl	8000648 <__aeabi_dmul>
 800c458:	3501      	adds	r5, #1
 800c45a:	2301      	movs	r3, #1
 800c45c:	1076      	asrs	r6, r6, #1
 800c45e:	3708      	adds	r7, #8
 800c460:	e777      	b.n	800c352 <_dtoa_r+0x3ca>
 800c462:	2502      	movs	r5, #2
 800c464:	e779      	b.n	800c35a <_dtoa_r+0x3d2>
 800c466:	9f00      	ldr	r7, [sp, #0]
 800c468:	9e03      	ldr	r6, [sp, #12]
 800c46a:	e794      	b.n	800c396 <_dtoa_r+0x40e>
 800c46c:	9901      	ldr	r1, [sp, #4]
 800c46e:	4b4c      	ldr	r3, [pc, #304]	; (800c5a0 <_dtoa_r+0x618>)
 800c470:	4431      	add	r1, r6
 800c472:	910d      	str	r1, [sp, #52]	; 0x34
 800c474:	9908      	ldr	r1, [sp, #32]
 800c476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c47a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c47e:	2900      	cmp	r1, #0
 800c480:	d043      	beq.n	800c50a <_dtoa_r+0x582>
 800c482:	494d      	ldr	r1, [pc, #308]	; (800c5b8 <_dtoa_r+0x630>)
 800c484:	2000      	movs	r0, #0
 800c486:	f7f4 fa09 	bl	800089c <__aeabi_ddiv>
 800c48a:	4652      	mov	r2, sl
 800c48c:	465b      	mov	r3, fp
 800c48e:	f7f3 ff23 	bl	80002d8 <__aeabi_dsub>
 800c492:	9d01      	ldr	r5, [sp, #4]
 800c494:	4682      	mov	sl, r0
 800c496:	468b      	mov	fp, r1
 800c498:	4649      	mov	r1, r9
 800c49a:	4640      	mov	r0, r8
 800c49c:	f7f4 fb84 	bl	8000ba8 <__aeabi_d2iz>
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	f7f4 f867 	bl	8000574 <__aeabi_i2d>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	4649      	mov	r1, r9
 800c4ae:	f7f3 ff13 	bl	80002d8 <__aeabi_dsub>
 800c4b2:	3630      	adds	r6, #48	; 0x30
 800c4b4:	f805 6b01 	strb.w	r6, [r5], #1
 800c4b8:	4652      	mov	r2, sl
 800c4ba:	465b      	mov	r3, fp
 800c4bc:	4680      	mov	r8, r0
 800c4be:	4689      	mov	r9, r1
 800c4c0:	f7f4 fb34 	bl	8000b2c <__aeabi_dcmplt>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d163      	bne.n	800c590 <_dtoa_r+0x608>
 800c4c8:	4642      	mov	r2, r8
 800c4ca:	464b      	mov	r3, r9
 800c4cc:	4936      	ldr	r1, [pc, #216]	; (800c5a8 <_dtoa_r+0x620>)
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	f7f3 ff02 	bl	80002d8 <__aeabi_dsub>
 800c4d4:	4652      	mov	r2, sl
 800c4d6:	465b      	mov	r3, fp
 800c4d8:	f7f4 fb28 	bl	8000b2c <__aeabi_dcmplt>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	f040 80b5 	bne.w	800c64c <_dtoa_r+0x6c4>
 800c4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4e4:	429d      	cmp	r5, r3
 800c4e6:	d081      	beq.n	800c3ec <_dtoa_r+0x464>
 800c4e8:	4b30      	ldr	r3, [pc, #192]	; (800c5ac <_dtoa_r+0x624>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	4650      	mov	r0, sl
 800c4ee:	4659      	mov	r1, fp
 800c4f0:	f7f4 f8aa 	bl	8000648 <__aeabi_dmul>
 800c4f4:	4b2d      	ldr	r3, [pc, #180]	; (800c5ac <_dtoa_r+0x624>)
 800c4f6:	4682      	mov	sl, r0
 800c4f8:	468b      	mov	fp, r1
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	4649      	mov	r1, r9
 800c4fe:	2200      	movs	r2, #0
 800c500:	f7f4 f8a2 	bl	8000648 <__aeabi_dmul>
 800c504:	4680      	mov	r8, r0
 800c506:	4689      	mov	r9, r1
 800c508:	e7c6      	b.n	800c498 <_dtoa_r+0x510>
 800c50a:	4650      	mov	r0, sl
 800c50c:	4659      	mov	r1, fp
 800c50e:	f7f4 f89b 	bl	8000648 <__aeabi_dmul>
 800c512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c514:	9d01      	ldr	r5, [sp, #4]
 800c516:	930f      	str	r3, [sp, #60]	; 0x3c
 800c518:	4682      	mov	sl, r0
 800c51a:	468b      	mov	fp, r1
 800c51c:	4649      	mov	r1, r9
 800c51e:	4640      	mov	r0, r8
 800c520:	f7f4 fb42 	bl	8000ba8 <__aeabi_d2iz>
 800c524:	4606      	mov	r6, r0
 800c526:	f7f4 f825 	bl	8000574 <__aeabi_i2d>
 800c52a:	3630      	adds	r6, #48	; 0x30
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4640      	mov	r0, r8
 800c532:	4649      	mov	r1, r9
 800c534:	f7f3 fed0 	bl	80002d8 <__aeabi_dsub>
 800c538:	f805 6b01 	strb.w	r6, [r5], #1
 800c53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c53e:	429d      	cmp	r5, r3
 800c540:	4680      	mov	r8, r0
 800c542:	4689      	mov	r9, r1
 800c544:	f04f 0200 	mov.w	r2, #0
 800c548:	d124      	bne.n	800c594 <_dtoa_r+0x60c>
 800c54a:	4b1b      	ldr	r3, [pc, #108]	; (800c5b8 <_dtoa_r+0x630>)
 800c54c:	4650      	mov	r0, sl
 800c54e:	4659      	mov	r1, fp
 800c550:	f7f3 fec4 	bl	80002dc <__adddf3>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	4640      	mov	r0, r8
 800c55a:	4649      	mov	r1, r9
 800c55c:	f7f4 fb04 	bl	8000b68 <__aeabi_dcmpgt>
 800c560:	2800      	cmp	r0, #0
 800c562:	d173      	bne.n	800c64c <_dtoa_r+0x6c4>
 800c564:	4652      	mov	r2, sl
 800c566:	465b      	mov	r3, fp
 800c568:	4913      	ldr	r1, [pc, #76]	; (800c5b8 <_dtoa_r+0x630>)
 800c56a:	2000      	movs	r0, #0
 800c56c:	f7f3 feb4 	bl	80002d8 <__aeabi_dsub>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4640      	mov	r0, r8
 800c576:	4649      	mov	r1, r9
 800c578:	f7f4 fad8 	bl	8000b2c <__aeabi_dcmplt>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	f43f af35 	beq.w	800c3ec <_dtoa_r+0x464>
 800c582:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c584:	1e6b      	subs	r3, r5, #1
 800c586:	930f      	str	r3, [sp, #60]	; 0x3c
 800c588:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c58c:	2b30      	cmp	r3, #48	; 0x30
 800c58e:	d0f8      	beq.n	800c582 <_dtoa_r+0x5fa>
 800c590:	9700      	str	r7, [sp, #0]
 800c592:	e049      	b.n	800c628 <_dtoa_r+0x6a0>
 800c594:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <_dtoa_r+0x624>)
 800c596:	f7f4 f857 	bl	8000648 <__aeabi_dmul>
 800c59a:	4680      	mov	r8, r0
 800c59c:	4689      	mov	r9, r1
 800c59e:	e7bd      	b.n	800c51c <_dtoa_r+0x594>
 800c5a0:	08011b80 	.word	0x08011b80
 800c5a4:	08011b58 	.word	0x08011b58
 800c5a8:	3ff00000 	.word	0x3ff00000
 800c5ac:	40240000 	.word	0x40240000
 800c5b0:	401c0000 	.word	0x401c0000
 800c5b4:	40140000 	.word	0x40140000
 800c5b8:	3fe00000 	.word	0x3fe00000
 800c5bc:	9d01      	ldr	r5, [sp, #4]
 800c5be:	4656      	mov	r6, sl
 800c5c0:	465f      	mov	r7, fp
 800c5c2:	4642      	mov	r2, r8
 800c5c4:	464b      	mov	r3, r9
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	f7f4 f967 	bl	800089c <__aeabi_ddiv>
 800c5ce:	f7f4 faeb 	bl	8000ba8 <__aeabi_d2iz>
 800c5d2:	4682      	mov	sl, r0
 800c5d4:	f7f3 ffce 	bl	8000574 <__aeabi_i2d>
 800c5d8:	4642      	mov	r2, r8
 800c5da:	464b      	mov	r3, r9
 800c5dc:	f7f4 f834 	bl	8000648 <__aeabi_dmul>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	4639      	mov	r1, r7
 800c5e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c5ec:	f7f3 fe74 	bl	80002d8 <__aeabi_dsub>
 800c5f0:	f805 6b01 	strb.w	r6, [r5], #1
 800c5f4:	9e01      	ldr	r6, [sp, #4]
 800c5f6:	9f03      	ldr	r7, [sp, #12]
 800c5f8:	1bae      	subs	r6, r5, r6
 800c5fa:	42b7      	cmp	r7, r6
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	d135      	bne.n	800c66e <_dtoa_r+0x6e6>
 800c602:	f7f3 fe6b 	bl	80002dc <__adddf3>
 800c606:	4642      	mov	r2, r8
 800c608:	464b      	mov	r3, r9
 800c60a:	4606      	mov	r6, r0
 800c60c:	460f      	mov	r7, r1
 800c60e:	f7f4 faab 	bl	8000b68 <__aeabi_dcmpgt>
 800c612:	b9d0      	cbnz	r0, 800c64a <_dtoa_r+0x6c2>
 800c614:	4642      	mov	r2, r8
 800c616:	464b      	mov	r3, r9
 800c618:	4630      	mov	r0, r6
 800c61a:	4639      	mov	r1, r7
 800c61c:	f7f4 fa7c 	bl	8000b18 <__aeabi_dcmpeq>
 800c620:	b110      	cbz	r0, 800c628 <_dtoa_r+0x6a0>
 800c622:	f01a 0f01 	tst.w	sl, #1
 800c626:	d110      	bne.n	800c64a <_dtoa_r+0x6c2>
 800c628:	4620      	mov	r0, r4
 800c62a:	ee18 1a10 	vmov	r1, s16
 800c62e:	f000 ff6d 	bl	800d50c <_Bfree>
 800c632:	2300      	movs	r3, #0
 800c634:	9800      	ldr	r0, [sp, #0]
 800c636:	702b      	strb	r3, [r5, #0]
 800c638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c63a:	3001      	adds	r0, #1
 800c63c:	6018      	str	r0, [r3, #0]
 800c63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c640:	2b00      	cmp	r3, #0
 800c642:	f43f acf1 	beq.w	800c028 <_dtoa_r+0xa0>
 800c646:	601d      	str	r5, [r3, #0]
 800c648:	e4ee      	b.n	800c028 <_dtoa_r+0xa0>
 800c64a:	9f00      	ldr	r7, [sp, #0]
 800c64c:	462b      	mov	r3, r5
 800c64e:	461d      	mov	r5, r3
 800c650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c654:	2a39      	cmp	r2, #57	; 0x39
 800c656:	d106      	bne.n	800c666 <_dtoa_r+0x6de>
 800c658:	9a01      	ldr	r2, [sp, #4]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d1f7      	bne.n	800c64e <_dtoa_r+0x6c6>
 800c65e:	9901      	ldr	r1, [sp, #4]
 800c660:	2230      	movs	r2, #48	; 0x30
 800c662:	3701      	adds	r7, #1
 800c664:	700a      	strb	r2, [r1, #0]
 800c666:	781a      	ldrb	r2, [r3, #0]
 800c668:	3201      	adds	r2, #1
 800c66a:	701a      	strb	r2, [r3, #0]
 800c66c:	e790      	b.n	800c590 <_dtoa_r+0x608>
 800c66e:	4ba6      	ldr	r3, [pc, #664]	; (800c908 <_dtoa_r+0x980>)
 800c670:	2200      	movs	r2, #0
 800c672:	f7f3 ffe9 	bl	8000648 <__aeabi_dmul>
 800c676:	2200      	movs	r2, #0
 800c678:	2300      	movs	r3, #0
 800c67a:	4606      	mov	r6, r0
 800c67c:	460f      	mov	r7, r1
 800c67e:	f7f4 fa4b 	bl	8000b18 <__aeabi_dcmpeq>
 800c682:	2800      	cmp	r0, #0
 800c684:	d09d      	beq.n	800c5c2 <_dtoa_r+0x63a>
 800c686:	e7cf      	b.n	800c628 <_dtoa_r+0x6a0>
 800c688:	9a08      	ldr	r2, [sp, #32]
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	f000 80d7 	beq.w	800c83e <_dtoa_r+0x8b6>
 800c690:	9a06      	ldr	r2, [sp, #24]
 800c692:	2a01      	cmp	r2, #1
 800c694:	f300 80ba 	bgt.w	800c80c <_dtoa_r+0x884>
 800c698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c69a:	2a00      	cmp	r2, #0
 800c69c:	f000 80b2 	beq.w	800c804 <_dtoa_r+0x87c>
 800c6a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c6a4:	9e07      	ldr	r6, [sp, #28]
 800c6a6:	9d04      	ldr	r5, [sp, #16]
 800c6a8:	9a04      	ldr	r2, [sp, #16]
 800c6aa:	441a      	add	r2, r3
 800c6ac:	9204      	str	r2, [sp, #16]
 800c6ae:	9a05      	ldr	r2, [sp, #20]
 800c6b0:	2101      	movs	r1, #1
 800c6b2:	441a      	add	r2, r3
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	9205      	str	r2, [sp, #20]
 800c6b8:	f001 f82a 	bl	800d710 <__i2b>
 800c6bc:	4607      	mov	r7, r0
 800c6be:	2d00      	cmp	r5, #0
 800c6c0:	dd0c      	ble.n	800c6dc <_dtoa_r+0x754>
 800c6c2:	9b05      	ldr	r3, [sp, #20]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	dd09      	ble.n	800c6dc <_dtoa_r+0x754>
 800c6c8:	42ab      	cmp	r3, r5
 800c6ca:	9a04      	ldr	r2, [sp, #16]
 800c6cc:	bfa8      	it	ge
 800c6ce:	462b      	movge	r3, r5
 800c6d0:	1ad2      	subs	r2, r2, r3
 800c6d2:	9204      	str	r2, [sp, #16]
 800c6d4:	9a05      	ldr	r2, [sp, #20]
 800c6d6:	1aed      	subs	r5, r5, r3
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	9305      	str	r3, [sp, #20]
 800c6dc:	9b07      	ldr	r3, [sp, #28]
 800c6de:	b31b      	cbz	r3, 800c728 <_dtoa_r+0x7a0>
 800c6e0:	9b08      	ldr	r3, [sp, #32]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 80af 	beq.w	800c846 <_dtoa_r+0x8be>
 800c6e8:	2e00      	cmp	r6, #0
 800c6ea:	dd13      	ble.n	800c714 <_dtoa_r+0x78c>
 800c6ec:	4639      	mov	r1, r7
 800c6ee:	4632      	mov	r2, r6
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f001 f8cd 	bl	800d890 <__pow5mult>
 800c6f6:	ee18 2a10 	vmov	r2, s16
 800c6fa:	4601      	mov	r1, r0
 800c6fc:	4607      	mov	r7, r0
 800c6fe:	4620      	mov	r0, r4
 800c700:	f001 f81c 	bl	800d73c <__multiply>
 800c704:	ee18 1a10 	vmov	r1, s16
 800c708:	4680      	mov	r8, r0
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 fefe 	bl	800d50c <_Bfree>
 800c710:	ee08 8a10 	vmov	s16, r8
 800c714:	9b07      	ldr	r3, [sp, #28]
 800c716:	1b9a      	subs	r2, r3, r6
 800c718:	d006      	beq.n	800c728 <_dtoa_r+0x7a0>
 800c71a:	ee18 1a10 	vmov	r1, s16
 800c71e:	4620      	mov	r0, r4
 800c720:	f001 f8b6 	bl	800d890 <__pow5mult>
 800c724:	ee08 0a10 	vmov	s16, r0
 800c728:	2101      	movs	r1, #1
 800c72a:	4620      	mov	r0, r4
 800c72c:	f000 fff0 	bl	800d710 <__i2b>
 800c730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c732:	2b00      	cmp	r3, #0
 800c734:	4606      	mov	r6, r0
 800c736:	f340 8088 	ble.w	800c84a <_dtoa_r+0x8c2>
 800c73a:	461a      	mov	r2, r3
 800c73c:	4601      	mov	r1, r0
 800c73e:	4620      	mov	r0, r4
 800c740:	f001 f8a6 	bl	800d890 <__pow5mult>
 800c744:	9b06      	ldr	r3, [sp, #24]
 800c746:	2b01      	cmp	r3, #1
 800c748:	4606      	mov	r6, r0
 800c74a:	f340 8081 	ble.w	800c850 <_dtoa_r+0x8c8>
 800c74e:	f04f 0800 	mov.w	r8, #0
 800c752:	6933      	ldr	r3, [r6, #16]
 800c754:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c758:	6918      	ldr	r0, [r3, #16]
 800c75a:	f000 ff89 	bl	800d670 <__hi0bits>
 800c75e:	f1c0 0020 	rsb	r0, r0, #32
 800c762:	9b05      	ldr	r3, [sp, #20]
 800c764:	4418      	add	r0, r3
 800c766:	f010 001f 	ands.w	r0, r0, #31
 800c76a:	f000 8092 	beq.w	800c892 <_dtoa_r+0x90a>
 800c76e:	f1c0 0320 	rsb	r3, r0, #32
 800c772:	2b04      	cmp	r3, #4
 800c774:	f340 808a 	ble.w	800c88c <_dtoa_r+0x904>
 800c778:	f1c0 001c 	rsb	r0, r0, #28
 800c77c:	9b04      	ldr	r3, [sp, #16]
 800c77e:	4403      	add	r3, r0
 800c780:	9304      	str	r3, [sp, #16]
 800c782:	9b05      	ldr	r3, [sp, #20]
 800c784:	4403      	add	r3, r0
 800c786:	4405      	add	r5, r0
 800c788:	9305      	str	r3, [sp, #20]
 800c78a:	9b04      	ldr	r3, [sp, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	dd07      	ble.n	800c7a0 <_dtoa_r+0x818>
 800c790:	ee18 1a10 	vmov	r1, s16
 800c794:	461a      	mov	r2, r3
 800c796:	4620      	mov	r0, r4
 800c798:	f001 f8d4 	bl	800d944 <__lshift>
 800c79c:	ee08 0a10 	vmov	s16, r0
 800c7a0:	9b05      	ldr	r3, [sp, #20]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	dd05      	ble.n	800c7b2 <_dtoa_r+0x82a>
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f001 f8ca 	bl	800d944 <__lshift>
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d06e      	beq.n	800c896 <_dtoa_r+0x90e>
 800c7b8:	ee18 0a10 	vmov	r0, s16
 800c7bc:	4631      	mov	r1, r6
 800c7be:	f001 f931 	bl	800da24 <__mcmp>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	da67      	bge.n	800c896 <_dtoa_r+0x90e>
 800c7c6:	9b00      	ldr	r3, [sp, #0]
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	ee18 1a10 	vmov	r1, s16
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	220a      	movs	r2, #10
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f000 febb 	bl	800d550 <__multadd>
 800c7da:	9b08      	ldr	r3, [sp, #32]
 800c7dc:	ee08 0a10 	vmov	s16, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f000 81b1 	beq.w	800cb48 <_dtoa_r+0xbc0>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	220a      	movs	r2, #10
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f000 feaf 	bl	800d550 <__multadd>
 800c7f2:	9b02      	ldr	r3, [sp, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	4607      	mov	r7, r0
 800c7f8:	f300 808e 	bgt.w	800c918 <_dtoa_r+0x990>
 800c7fc:	9b06      	ldr	r3, [sp, #24]
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	dc51      	bgt.n	800c8a6 <_dtoa_r+0x91e>
 800c802:	e089      	b.n	800c918 <_dtoa_r+0x990>
 800c804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c80a:	e74b      	b.n	800c6a4 <_dtoa_r+0x71c>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	1e5e      	subs	r6, r3, #1
 800c810:	9b07      	ldr	r3, [sp, #28]
 800c812:	42b3      	cmp	r3, r6
 800c814:	bfbf      	itttt	lt
 800c816:	9b07      	ldrlt	r3, [sp, #28]
 800c818:	9607      	strlt	r6, [sp, #28]
 800c81a:	1af2      	sublt	r2, r6, r3
 800c81c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c81e:	bfb6      	itet	lt
 800c820:	189b      	addlt	r3, r3, r2
 800c822:	1b9e      	subge	r6, r3, r6
 800c824:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	bfb8      	it	lt
 800c82a:	2600      	movlt	r6, #0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bfb7      	itett	lt
 800c830:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c834:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c838:	1a9d      	sublt	r5, r3, r2
 800c83a:	2300      	movlt	r3, #0
 800c83c:	e734      	b.n	800c6a8 <_dtoa_r+0x720>
 800c83e:	9e07      	ldr	r6, [sp, #28]
 800c840:	9d04      	ldr	r5, [sp, #16]
 800c842:	9f08      	ldr	r7, [sp, #32]
 800c844:	e73b      	b.n	800c6be <_dtoa_r+0x736>
 800c846:	9a07      	ldr	r2, [sp, #28]
 800c848:	e767      	b.n	800c71a <_dtoa_r+0x792>
 800c84a:	9b06      	ldr	r3, [sp, #24]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	dc18      	bgt.n	800c882 <_dtoa_r+0x8fa>
 800c850:	f1ba 0f00 	cmp.w	sl, #0
 800c854:	d115      	bne.n	800c882 <_dtoa_r+0x8fa>
 800c856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c85a:	b993      	cbnz	r3, 800c882 <_dtoa_r+0x8fa>
 800c85c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c860:	0d1b      	lsrs	r3, r3, #20
 800c862:	051b      	lsls	r3, r3, #20
 800c864:	b183      	cbz	r3, 800c888 <_dtoa_r+0x900>
 800c866:	9b04      	ldr	r3, [sp, #16]
 800c868:	3301      	adds	r3, #1
 800c86a:	9304      	str	r3, [sp, #16]
 800c86c:	9b05      	ldr	r3, [sp, #20]
 800c86e:	3301      	adds	r3, #1
 800c870:	9305      	str	r3, [sp, #20]
 800c872:	f04f 0801 	mov.w	r8, #1
 800c876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f47f af6a 	bne.w	800c752 <_dtoa_r+0x7ca>
 800c87e:	2001      	movs	r0, #1
 800c880:	e76f      	b.n	800c762 <_dtoa_r+0x7da>
 800c882:	f04f 0800 	mov.w	r8, #0
 800c886:	e7f6      	b.n	800c876 <_dtoa_r+0x8ee>
 800c888:	4698      	mov	r8, r3
 800c88a:	e7f4      	b.n	800c876 <_dtoa_r+0x8ee>
 800c88c:	f43f af7d 	beq.w	800c78a <_dtoa_r+0x802>
 800c890:	4618      	mov	r0, r3
 800c892:	301c      	adds	r0, #28
 800c894:	e772      	b.n	800c77c <_dtoa_r+0x7f4>
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	dc37      	bgt.n	800c90c <_dtoa_r+0x984>
 800c89c:	9b06      	ldr	r3, [sp, #24]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	dd34      	ble.n	800c90c <_dtoa_r+0x984>
 800c8a2:	9b03      	ldr	r3, [sp, #12]
 800c8a4:	9302      	str	r3, [sp, #8]
 800c8a6:	9b02      	ldr	r3, [sp, #8]
 800c8a8:	b96b      	cbnz	r3, 800c8c6 <_dtoa_r+0x93e>
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	2205      	movs	r2, #5
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 fe4e 	bl	800d550 <__multadd>
 800c8b4:	4601      	mov	r1, r0
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	ee18 0a10 	vmov	r0, s16
 800c8bc:	f001 f8b2 	bl	800da24 <__mcmp>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	f73f adbb 	bgt.w	800c43c <_dtoa_r+0x4b4>
 800c8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c8:	9d01      	ldr	r5, [sp, #4]
 800c8ca:	43db      	mvns	r3, r3
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	f04f 0800 	mov.w	r8, #0
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f000 fe19 	bl	800d50c <_Bfree>
 800c8da:	2f00      	cmp	r7, #0
 800c8dc:	f43f aea4 	beq.w	800c628 <_dtoa_r+0x6a0>
 800c8e0:	f1b8 0f00 	cmp.w	r8, #0
 800c8e4:	d005      	beq.n	800c8f2 <_dtoa_r+0x96a>
 800c8e6:	45b8      	cmp	r8, r7
 800c8e8:	d003      	beq.n	800c8f2 <_dtoa_r+0x96a>
 800c8ea:	4641      	mov	r1, r8
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f000 fe0d 	bl	800d50c <_Bfree>
 800c8f2:	4639      	mov	r1, r7
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 fe09 	bl	800d50c <_Bfree>
 800c8fa:	e695      	b.n	800c628 <_dtoa_r+0x6a0>
 800c8fc:	2600      	movs	r6, #0
 800c8fe:	4637      	mov	r7, r6
 800c900:	e7e1      	b.n	800c8c6 <_dtoa_r+0x93e>
 800c902:	9700      	str	r7, [sp, #0]
 800c904:	4637      	mov	r7, r6
 800c906:	e599      	b.n	800c43c <_dtoa_r+0x4b4>
 800c908:	40240000 	.word	0x40240000
 800c90c:	9b08      	ldr	r3, [sp, #32]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f000 80ca 	beq.w	800caa8 <_dtoa_r+0xb20>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	9302      	str	r3, [sp, #8]
 800c918:	2d00      	cmp	r5, #0
 800c91a:	dd05      	ble.n	800c928 <_dtoa_r+0x9a0>
 800c91c:	4639      	mov	r1, r7
 800c91e:	462a      	mov	r2, r5
 800c920:	4620      	mov	r0, r4
 800c922:	f001 f80f 	bl	800d944 <__lshift>
 800c926:	4607      	mov	r7, r0
 800c928:	f1b8 0f00 	cmp.w	r8, #0
 800c92c:	d05b      	beq.n	800c9e6 <_dtoa_r+0xa5e>
 800c92e:	6879      	ldr	r1, [r7, #4]
 800c930:	4620      	mov	r0, r4
 800c932:	f000 fdab 	bl	800d48c <_Balloc>
 800c936:	4605      	mov	r5, r0
 800c938:	b928      	cbnz	r0, 800c946 <_dtoa_r+0x9be>
 800c93a:	4b87      	ldr	r3, [pc, #540]	; (800cb58 <_dtoa_r+0xbd0>)
 800c93c:	4602      	mov	r2, r0
 800c93e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c942:	f7ff bb3b 	b.w	800bfbc <_dtoa_r+0x34>
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	3202      	adds	r2, #2
 800c94a:	0092      	lsls	r2, r2, #2
 800c94c:	f107 010c 	add.w	r1, r7, #12
 800c950:	300c      	adds	r0, #12
 800c952:	f000 fd8d 	bl	800d470 <memcpy>
 800c956:	2201      	movs	r2, #1
 800c958:	4629      	mov	r1, r5
 800c95a:	4620      	mov	r0, r4
 800c95c:	f000 fff2 	bl	800d944 <__lshift>
 800c960:	9b01      	ldr	r3, [sp, #4]
 800c962:	f103 0901 	add.w	r9, r3, #1
 800c966:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c96a:	4413      	add	r3, r2
 800c96c:	9305      	str	r3, [sp, #20]
 800c96e:	f00a 0301 	and.w	r3, sl, #1
 800c972:	46b8      	mov	r8, r7
 800c974:	9304      	str	r3, [sp, #16]
 800c976:	4607      	mov	r7, r0
 800c978:	4631      	mov	r1, r6
 800c97a:	ee18 0a10 	vmov	r0, s16
 800c97e:	f7ff fa77 	bl	800be70 <quorem>
 800c982:	4641      	mov	r1, r8
 800c984:	9002      	str	r0, [sp, #8]
 800c986:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c98a:	ee18 0a10 	vmov	r0, s16
 800c98e:	f001 f849 	bl	800da24 <__mcmp>
 800c992:	463a      	mov	r2, r7
 800c994:	9003      	str	r0, [sp, #12]
 800c996:	4631      	mov	r1, r6
 800c998:	4620      	mov	r0, r4
 800c99a:	f001 f85f 	bl	800da5c <__mdiff>
 800c99e:	68c2      	ldr	r2, [r0, #12]
 800c9a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	bb02      	cbnz	r2, 800c9ea <_dtoa_r+0xa62>
 800c9a8:	4601      	mov	r1, r0
 800c9aa:	ee18 0a10 	vmov	r0, s16
 800c9ae:	f001 f839 	bl	800da24 <__mcmp>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	9207      	str	r2, [sp, #28]
 800c9ba:	f000 fda7 	bl	800d50c <_Bfree>
 800c9be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c9c2:	ea43 0102 	orr.w	r1, r3, r2
 800c9c6:	9b04      	ldr	r3, [sp, #16]
 800c9c8:	430b      	orrs	r3, r1
 800c9ca:	464d      	mov	r5, r9
 800c9cc:	d10f      	bne.n	800c9ee <_dtoa_r+0xa66>
 800c9ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c9d2:	d02a      	beq.n	800ca2a <_dtoa_r+0xaa2>
 800c9d4:	9b03      	ldr	r3, [sp, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dd02      	ble.n	800c9e0 <_dtoa_r+0xa58>
 800c9da:	9b02      	ldr	r3, [sp, #8]
 800c9dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c9e0:	f88b a000 	strb.w	sl, [fp]
 800c9e4:	e775      	b.n	800c8d2 <_dtoa_r+0x94a>
 800c9e6:	4638      	mov	r0, r7
 800c9e8:	e7ba      	b.n	800c960 <_dtoa_r+0x9d8>
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	e7e2      	b.n	800c9b4 <_dtoa_r+0xa2c>
 800c9ee:	9b03      	ldr	r3, [sp, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	db04      	blt.n	800c9fe <_dtoa_r+0xa76>
 800c9f4:	9906      	ldr	r1, [sp, #24]
 800c9f6:	430b      	orrs	r3, r1
 800c9f8:	9904      	ldr	r1, [sp, #16]
 800c9fa:	430b      	orrs	r3, r1
 800c9fc:	d122      	bne.n	800ca44 <_dtoa_r+0xabc>
 800c9fe:	2a00      	cmp	r2, #0
 800ca00:	ddee      	ble.n	800c9e0 <_dtoa_r+0xa58>
 800ca02:	ee18 1a10 	vmov	r1, s16
 800ca06:	2201      	movs	r2, #1
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f000 ff9b 	bl	800d944 <__lshift>
 800ca0e:	4631      	mov	r1, r6
 800ca10:	ee08 0a10 	vmov	s16, r0
 800ca14:	f001 f806 	bl	800da24 <__mcmp>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	dc03      	bgt.n	800ca24 <_dtoa_r+0xa9c>
 800ca1c:	d1e0      	bne.n	800c9e0 <_dtoa_r+0xa58>
 800ca1e:	f01a 0f01 	tst.w	sl, #1
 800ca22:	d0dd      	beq.n	800c9e0 <_dtoa_r+0xa58>
 800ca24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca28:	d1d7      	bne.n	800c9da <_dtoa_r+0xa52>
 800ca2a:	2339      	movs	r3, #57	; 0x39
 800ca2c:	f88b 3000 	strb.w	r3, [fp]
 800ca30:	462b      	mov	r3, r5
 800ca32:	461d      	mov	r5, r3
 800ca34:	3b01      	subs	r3, #1
 800ca36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca3a:	2a39      	cmp	r2, #57	; 0x39
 800ca3c:	d071      	beq.n	800cb22 <_dtoa_r+0xb9a>
 800ca3e:	3201      	adds	r2, #1
 800ca40:	701a      	strb	r2, [r3, #0]
 800ca42:	e746      	b.n	800c8d2 <_dtoa_r+0x94a>
 800ca44:	2a00      	cmp	r2, #0
 800ca46:	dd07      	ble.n	800ca58 <_dtoa_r+0xad0>
 800ca48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca4c:	d0ed      	beq.n	800ca2a <_dtoa_r+0xaa2>
 800ca4e:	f10a 0301 	add.w	r3, sl, #1
 800ca52:	f88b 3000 	strb.w	r3, [fp]
 800ca56:	e73c      	b.n	800c8d2 <_dtoa_r+0x94a>
 800ca58:	9b05      	ldr	r3, [sp, #20]
 800ca5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ca5e:	4599      	cmp	r9, r3
 800ca60:	d047      	beq.n	800caf2 <_dtoa_r+0xb6a>
 800ca62:	ee18 1a10 	vmov	r1, s16
 800ca66:	2300      	movs	r3, #0
 800ca68:	220a      	movs	r2, #10
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f000 fd70 	bl	800d550 <__multadd>
 800ca70:	45b8      	cmp	r8, r7
 800ca72:	ee08 0a10 	vmov	s16, r0
 800ca76:	f04f 0300 	mov.w	r3, #0
 800ca7a:	f04f 020a 	mov.w	r2, #10
 800ca7e:	4641      	mov	r1, r8
 800ca80:	4620      	mov	r0, r4
 800ca82:	d106      	bne.n	800ca92 <_dtoa_r+0xb0a>
 800ca84:	f000 fd64 	bl	800d550 <__multadd>
 800ca88:	4680      	mov	r8, r0
 800ca8a:	4607      	mov	r7, r0
 800ca8c:	f109 0901 	add.w	r9, r9, #1
 800ca90:	e772      	b.n	800c978 <_dtoa_r+0x9f0>
 800ca92:	f000 fd5d 	bl	800d550 <__multadd>
 800ca96:	4639      	mov	r1, r7
 800ca98:	4680      	mov	r8, r0
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	220a      	movs	r2, #10
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 fd56 	bl	800d550 <__multadd>
 800caa4:	4607      	mov	r7, r0
 800caa6:	e7f1      	b.n	800ca8c <_dtoa_r+0xb04>
 800caa8:	9b03      	ldr	r3, [sp, #12]
 800caaa:	9302      	str	r3, [sp, #8]
 800caac:	9d01      	ldr	r5, [sp, #4]
 800caae:	ee18 0a10 	vmov	r0, s16
 800cab2:	4631      	mov	r1, r6
 800cab4:	f7ff f9dc 	bl	800be70 <quorem>
 800cab8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cabc:	9b01      	ldr	r3, [sp, #4]
 800cabe:	f805 ab01 	strb.w	sl, [r5], #1
 800cac2:	1aea      	subs	r2, r5, r3
 800cac4:	9b02      	ldr	r3, [sp, #8]
 800cac6:	4293      	cmp	r3, r2
 800cac8:	dd09      	ble.n	800cade <_dtoa_r+0xb56>
 800caca:	ee18 1a10 	vmov	r1, s16
 800cace:	2300      	movs	r3, #0
 800cad0:	220a      	movs	r2, #10
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 fd3c 	bl	800d550 <__multadd>
 800cad8:	ee08 0a10 	vmov	s16, r0
 800cadc:	e7e7      	b.n	800caae <_dtoa_r+0xb26>
 800cade:	9b02      	ldr	r3, [sp, #8]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	bfc8      	it	gt
 800cae4:	461d      	movgt	r5, r3
 800cae6:	9b01      	ldr	r3, [sp, #4]
 800cae8:	bfd8      	it	le
 800caea:	2501      	movle	r5, #1
 800caec:	441d      	add	r5, r3
 800caee:	f04f 0800 	mov.w	r8, #0
 800caf2:	ee18 1a10 	vmov	r1, s16
 800caf6:	2201      	movs	r2, #1
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 ff23 	bl	800d944 <__lshift>
 800cafe:	4631      	mov	r1, r6
 800cb00:	ee08 0a10 	vmov	s16, r0
 800cb04:	f000 ff8e 	bl	800da24 <__mcmp>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	dc91      	bgt.n	800ca30 <_dtoa_r+0xaa8>
 800cb0c:	d102      	bne.n	800cb14 <_dtoa_r+0xb8c>
 800cb0e:	f01a 0f01 	tst.w	sl, #1
 800cb12:	d18d      	bne.n	800ca30 <_dtoa_r+0xaa8>
 800cb14:	462b      	mov	r3, r5
 800cb16:	461d      	mov	r5, r3
 800cb18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb1c:	2a30      	cmp	r2, #48	; 0x30
 800cb1e:	d0fa      	beq.n	800cb16 <_dtoa_r+0xb8e>
 800cb20:	e6d7      	b.n	800c8d2 <_dtoa_r+0x94a>
 800cb22:	9a01      	ldr	r2, [sp, #4]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d184      	bne.n	800ca32 <_dtoa_r+0xaaa>
 800cb28:	9b00      	ldr	r3, [sp, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	2331      	movs	r3, #49	; 0x31
 800cb30:	7013      	strb	r3, [r2, #0]
 800cb32:	e6ce      	b.n	800c8d2 <_dtoa_r+0x94a>
 800cb34:	4b09      	ldr	r3, [pc, #36]	; (800cb5c <_dtoa_r+0xbd4>)
 800cb36:	f7ff ba95 	b.w	800c064 <_dtoa_r+0xdc>
 800cb3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f47f aa6e 	bne.w	800c01e <_dtoa_r+0x96>
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <_dtoa_r+0xbd8>)
 800cb44:	f7ff ba8e 	b.w	800c064 <_dtoa_r+0xdc>
 800cb48:	9b02      	ldr	r3, [sp, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	dcae      	bgt.n	800caac <_dtoa_r+0xb24>
 800cb4e:	9b06      	ldr	r3, [sp, #24]
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	f73f aea8 	bgt.w	800c8a6 <_dtoa_r+0x91e>
 800cb56:	e7a9      	b.n	800caac <_dtoa_r+0xb24>
 800cb58:	08011a08 	.word	0x08011a08
 800cb5c:	0801180c 	.word	0x0801180c
 800cb60:	08011989 	.word	0x08011989

0800cb64 <std>:
 800cb64:	2300      	movs	r3, #0
 800cb66:	b510      	push	{r4, lr}
 800cb68:	4604      	mov	r4, r0
 800cb6a:	e9c0 3300 	strd	r3, r3, [r0]
 800cb6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb72:	6083      	str	r3, [r0, #8]
 800cb74:	8181      	strh	r1, [r0, #12]
 800cb76:	6643      	str	r3, [r0, #100]	; 0x64
 800cb78:	81c2      	strh	r2, [r0, #14]
 800cb7a:	6183      	str	r3, [r0, #24]
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	2208      	movs	r2, #8
 800cb80:	305c      	adds	r0, #92	; 0x5c
 800cb82:	f7fd fc07 	bl	800a394 <memset>
 800cb86:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <std+0x38>)
 800cb88:	6263      	str	r3, [r4, #36]	; 0x24
 800cb8a:	4b05      	ldr	r3, [pc, #20]	; (800cba0 <std+0x3c>)
 800cb8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb8e:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <std+0x40>)
 800cb90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb92:	4b05      	ldr	r3, [pc, #20]	; (800cba8 <std+0x44>)
 800cb94:	6224      	str	r4, [r4, #32]
 800cb96:	6323      	str	r3, [r4, #48]	; 0x30
 800cb98:	bd10      	pop	{r4, pc}
 800cb9a:	bf00      	nop
 800cb9c:	0800e599 	.word	0x0800e599
 800cba0:	0800e5bb 	.word	0x0800e5bb
 800cba4:	0800e5f3 	.word	0x0800e5f3
 800cba8:	0800e617 	.word	0x0800e617

0800cbac <_cleanup_r>:
 800cbac:	4901      	ldr	r1, [pc, #4]	; (800cbb4 <_cleanup_r+0x8>)
 800cbae:	f000 b8af 	b.w	800cd10 <_fwalk_reent>
 800cbb2:	bf00      	nop
 800cbb4:	0800e971 	.word	0x0800e971

0800cbb8 <__sfmoreglue>:
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	2268      	movs	r2, #104	; 0x68
 800cbbc:	1e4d      	subs	r5, r1, #1
 800cbbe:	4355      	muls	r5, r2
 800cbc0:	460e      	mov	r6, r1
 800cbc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbc6:	f001 f9a5 	bl	800df14 <_malloc_r>
 800cbca:	4604      	mov	r4, r0
 800cbcc:	b140      	cbz	r0, 800cbe0 <__sfmoreglue+0x28>
 800cbce:	2100      	movs	r1, #0
 800cbd0:	e9c0 1600 	strd	r1, r6, [r0]
 800cbd4:	300c      	adds	r0, #12
 800cbd6:	60a0      	str	r0, [r4, #8]
 800cbd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbdc:	f7fd fbda 	bl	800a394 <memset>
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	bd70      	pop	{r4, r5, r6, pc}

0800cbe4 <__sfp_lock_acquire>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	; (800cbec <__sfp_lock_acquire+0x8>)
 800cbe6:	f000 bc26 	b.w	800d436 <__retarget_lock_acquire_recursive>
 800cbea:	bf00      	nop
 800cbec:	20000585 	.word	0x20000585

0800cbf0 <__sfp_lock_release>:
 800cbf0:	4801      	ldr	r0, [pc, #4]	; (800cbf8 <__sfp_lock_release+0x8>)
 800cbf2:	f000 bc21 	b.w	800d438 <__retarget_lock_release_recursive>
 800cbf6:	bf00      	nop
 800cbf8:	20000585 	.word	0x20000585

0800cbfc <__sinit_lock_acquire>:
 800cbfc:	4801      	ldr	r0, [pc, #4]	; (800cc04 <__sinit_lock_acquire+0x8>)
 800cbfe:	f000 bc1a 	b.w	800d436 <__retarget_lock_acquire_recursive>
 800cc02:	bf00      	nop
 800cc04:	20000586 	.word	0x20000586

0800cc08 <__sinit_lock_release>:
 800cc08:	4801      	ldr	r0, [pc, #4]	; (800cc10 <__sinit_lock_release+0x8>)
 800cc0a:	f000 bc15 	b.w	800d438 <__retarget_lock_release_recursive>
 800cc0e:	bf00      	nop
 800cc10:	20000586 	.word	0x20000586

0800cc14 <__sinit>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	4604      	mov	r4, r0
 800cc18:	f7ff fff0 	bl	800cbfc <__sinit_lock_acquire>
 800cc1c:	69a3      	ldr	r3, [r4, #24]
 800cc1e:	b11b      	cbz	r3, 800cc28 <__sinit+0x14>
 800cc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc24:	f7ff bff0 	b.w	800cc08 <__sinit_lock_release>
 800cc28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc2c:	6523      	str	r3, [r4, #80]	; 0x50
 800cc2e:	4b13      	ldr	r3, [pc, #76]	; (800cc7c <__sinit+0x68>)
 800cc30:	4a13      	ldr	r2, [pc, #76]	; (800cc80 <__sinit+0x6c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc36:	42a3      	cmp	r3, r4
 800cc38:	bf04      	itt	eq
 800cc3a:	2301      	moveq	r3, #1
 800cc3c:	61a3      	streq	r3, [r4, #24]
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 f820 	bl	800cc84 <__sfp>
 800cc44:	6060      	str	r0, [r4, #4]
 800cc46:	4620      	mov	r0, r4
 800cc48:	f000 f81c 	bl	800cc84 <__sfp>
 800cc4c:	60a0      	str	r0, [r4, #8]
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f000 f818 	bl	800cc84 <__sfp>
 800cc54:	2200      	movs	r2, #0
 800cc56:	60e0      	str	r0, [r4, #12]
 800cc58:	2104      	movs	r1, #4
 800cc5a:	6860      	ldr	r0, [r4, #4]
 800cc5c:	f7ff ff82 	bl	800cb64 <std>
 800cc60:	68a0      	ldr	r0, [r4, #8]
 800cc62:	2201      	movs	r2, #1
 800cc64:	2109      	movs	r1, #9
 800cc66:	f7ff ff7d 	bl	800cb64 <std>
 800cc6a:	68e0      	ldr	r0, [r4, #12]
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	2112      	movs	r1, #18
 800cc70:	f7ff ff78 	bl	800cb64 <std>
 800cc74:	2301      	movs	r3, #1
 800cc76:	61a3      	str	r3, [r4, #24]
 800cc78:	e7d2      	b.n	800cc20 <__sinit+0xc>
 800cc7a:	bf00      	nop
 800cc7c:	080117f8 	.word	0x080117f8
 800cc80:	0800cbad 	.word	0x0800cbad

0800cc84 <__sfp>:
 800cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc86:	4607      	mov	r7, r0
 800cc88:	f7ff ffac 	bl	800cbe4 <__sfp_lock_acquire>
 800cc8c:	4b1e      	ldr	r3, [pc, #120]	; (800cd08 <__sfp+0x84>)
 800cc8e:	681e      	ldr	r6, [r3, #0]
 800cc90:	69b3      	ldr	r3, [r6, #24]
 800cc92:	b913      	cbnz	r3, 800cc9a <__sfp+0x16>
 800cc94:	4630      	mov	r0, r6
 800cc96:	f7ff ffbd 	bl	800cc14 <__sinit>
 800cc9a:	3648      	adds	r6, #72	; 0x48
 800cc9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	d503      	bpl.n	800ccac <__sfp+0x28>
 800cca4:	6833      	ldr	r3, [r6, #0]
 800cca6:	b30b      	cbz	r3, 800ccec <__sfp+0x68>
 800cca8:	6836      	ldr	r6, [r6, #0]
 800ccaa:	e7f7      	b.n	800cc9c <__sfp+0x18>
 800ccac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ccb0:	b9d5      	cbnz	r5, 800cce8 <__sfp+0x64>
 800ccb2:	4b16      	ldr	r3, [pc, #88]	; (800cd0c <__sfp+0x88>)
 800ccb4:	60e3      	str	r3, [r4, #12]
 800ccb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ccba:	6665      	str	r5, [r4, #100]	; 0x64
 800ccbc:	f000 fbba 	bl	800d434 <__retarget_lock_init_recursive>
 800ccc0:	f7ff ff96 	bl	800cbf0 <__sfp_lock_release>
 800ccc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cccc:	6025      	str	r5, [r4, #0]
 800ccce:	61a5      	str	r5, [r4, #24]
 800ccd0:	2208      	movs	r2, #8
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ccd8:	f7fd fb5c 	bl	800a394 <memset>
 800ccdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cce4:	4620      	mov	r0, r4
 800cce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce8:	3468      	adds	r4, #104	; 0x68
 800ccea:	e7d9      	b.n	800cca0 <__sfp+0x1c>
 800ccec:	2104      	movs	r1, #4
 800ccee:	4638      	mov	r0, r7
 800ccf0:	f7ff ff62 	bl	800cbb8 <__sfmoreglue>
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	6030      	str	r0, [r6, #0]
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d1d5      	bne.n	800cca8 <__sfp+0x24>
 800ccfc:	f7ff ff78 	bl	800cbf0 <__sfp_lock_release>
 800cd00:	230c      	movs	r3, #12
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	e7ee      	b.n	800cce4 <__sfp+0x60>
 800cd06:	bf00      	nop
 800cd08:	080117f8 	.word	0x080117f8
 800cd0c:	ffff0001 	.word	0xffff0001

0800cd10 <_fwalk_reent>:
 800cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd14:	4606      	mov	r6, r0
 800cd16:	4688      	mov	r8, r1
 800cd18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd1c:	2700      	movs	r7, #0
 800cd1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd22:	f1b9 0901 	subs.w	r9, r9, #1
 800cd26:	d505      	bpl.n	800cd34 <_fwalk_reent+0x24>
 800cd28:	6824      	ldr	r4, [r4, #0]
 800cd2a:	2c00      	cmp	r4, #0
 800cd2c:	d1f7      	bne.n	800cd1e <_fwalk_reent+0xe>
 800cd2e:	4638      	mov	r0, r7
 800cd30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd34:	89ab      	ldrh	r3, [r5, #12]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d907      	bls.n	800cd4a <_fwalk_reent+0x3a>
 800cd3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	d003      	beq.n	800cd4a <_fwalk_reent+0x3a>
 800cd42:	4629      	mov	r1, r5
 800cd44:	4630      	mov	r0, r6
 800cd46:	47c0      	blx	r8
 800cd48:	4307      	orrs	r7, r0
 800cd4a:	3568      	adds	r5, #104	; 0x68
 800cd4c:	e7e9      	b.n	800cd22 <_fwalk_reent+0x12>

0800cd4e <rshift>:
 800cd4e:	6903      	ldr	r3, [r0, #16]
 800cd50:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd58:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd5c:	f100 0414 	add.w	r4, r0, #20
 800cd60:	dd45      	ble.n	800cdee <rshift+0xa0>
 800cd62:	f011 011f 	ands.w	r1, r1, #31
 800cd66:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd6a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd6e:	d10c      	bne.n	800cd8a <rshift+0x3c>
 800cd70:	f100 0710 	add.w	r7, r0, #16
 800cd74:	4629      	mov	r1, r5
 800cd76:	42b1      	cmp	r1, r6
 800cd78:	d334      	bcc.n	800cde4 <rshift+0x96>
 800cd7a:	1a9b      	subs	r3, r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	1eea      	subs	r2, r5, #3
 800cd80:	4296      	cmp	r6, r2
 800cd82:	bf38      	it	cc
 800cd84:	2300      	movcc	r3, #0
 800cd86:	4423      	add	r3, r4
 800cd88:	e015      	b.n	800cdb6 <rshift+0x68>
 800cd8a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cd8e:	f1c1 0820 	rsb	r8, r1, #32
 800cd92:	40cf      	lsrs	r7, r1
 800cd94:	f105 0e04 	add.w	lr, r5, #4
 800cd98:	46a1      	mov	r9, r4
 800cd9a:	4576      	cmp	r6, lr
 800cd9c:	46f4      	mov	ip, lr
 800cd9e:	d815      	bhi.n	800cdcc <rshift+0x7e>
 800cda0:	1a9a      	subs	r2, r3, r2
 800cda2:	0092      	lsls	r2, r2, #2
 800cda4:	3a04      	subs	r2, #4
 800cda6:	3501      	adds	r5, #1
 800cda8:	42ae      	cmp	r6, r5
 800cdaa:	bf38      	it	cc
 800cdac:	2200      	movcc	r2, #0
 800cdae:	18a3      	adds	r3, r4, r2
 800cdb0:	50a7      	str	r7, [r4, r2]
 800cdb2:	b107      	cbz	r7, 800cdb6 <rshift+0x68>
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	1b1a      	subs	r2, r3, r4
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cdbe:	bf08      	it	eq
 800cdc0:	2300      	moveq	r3, #0
 800cdc2:	6102      	str	r2, [r0, #16]
 800cdc4:	bf08      	it	eq
 800cdc6:	6143      	streq	r3, [r0, #20]
 800cdc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdcc:	f8dc c000 	ldr.w	ip, [ip]
 800cdd0:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdd4:	ea4c 0707 	orr.w	r7, ip, r7
 800cdd8:	f849 7b04 	str.w	r7, [r9], #4
 800cddc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cde0:	40cf      	lsrs	r7, r1
 800cde2:	e7da      	b.n	800cd9a <rshift+0x4c>
 800cde4:	f851 cb04 	ldr.w	ip, [r1], #4
 800cde8:	f847 cf04 	str.w	ip, [r7, #4]!
 800cdec:	e7c3      	b.n	800cd76 <rshift+0x28>
 800cdee:	4623      	mov	r3, r4
 800cdf0:	e7e1      	b.n	800cdb6 <rshift+0x68>

0800cdf2 <__hexdig_fun>:
 800cdf2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cdf6:	2b09      	cmp	r3, #9
 800cdf8:	d802      	bhi.n	800ce00 <__hexdig_fun+0xe>
 800cdfa:	3820      	subs	r0, #32
 800cdfc:	b2c0      	uxtb	r0, r0
 800cdfe:	4770      	bx	lr
 800ce00:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce04:	2b05      	cmp	r3, #5
 800ce06:	d801      	bhi.n	800ce0c <__hexdig_fun+0x1a>
 800ce08:	3847      	subs	r0, #71	; 0x47
 800ce0a:	e7f7      	b.n	800cdfc <__hexdig_fun+0xa>
 800ce0c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce10:	2b05      	cmp	r3, #5
 800ce12:	d801      	bhi.n	800ce18 <__hexdig_fun+0x26>
 800ce14:	3827      	subs	r0, #39	; 0x27
 800ce16:	e7f1      	b.n	800cdfc <__hexdig_fun+0xa>
 800ce18:	2000      	movs	r0, #0
 800ce1a:	4770      	bx	lr

0800ce1c <__gethex>:
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	ed2d 8b02 	vpush	{d8}
 800ce24:	b089      	sub	sp, #36	; 0x24
 800ce26:	ee08 0a10 	vmov	s16, r0
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	4bb4      	ldr	r3, [pc, #720]	; (800d100 <__gethex+0x2e4>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	4618      	mov	r0, r3
 800ce34:	468b      	mov	fp, r1
 800ce36:	4690      	mov	r8, r2
 800ce38:	f7f3 f9f2 	bl	8000220 <strlen>
 800ce3c:	9b01      	ldr	r3, [sp, #4]
 800ce3e:	f8db 2000 	ldr.w	r2, [fp]
 800ce42:	4403      	add	r3, r0
 800ce44:	4682      	mov	sl, r0
 800ce46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	1c93      	adds	r3, r2, #2
 800ce4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce56:	32fe      	adds	r2, #254	; 0xfe
 800ce58:	18d1      	adds	r1, r2, r3
 800ce5a:	461f      	mov	r7, r3
 800ce5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce60:	9100      	str	r1, [sp, #0]
 800ce62:	2830      	cmp	r0, #48	; 0x30
 800ce64:	d0f8      	beq.n	800ce58 <__gethex+0x3c>
 800ce66:	f7ff ffc4 	bl	800cdf2 <__hexdig_fun>
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d13a      	bne.n	800cee6 <__gethex+0xca>
 800ce70:	9901      	ldr	r1, [sp, #4]
 800ce72:	4652      	mov	r2, sl
 800ce74:	4638      	mov	r0, r7
 800ce76:	f001 fbd2 	bl	800e61e <strncmp>
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d168      	bne.n	800cf52 <__gethex+0x136>
 800ce80:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ce84:	eb07 060a 	add.w	r6, r7, sl
 800ce88:	f7ff ffb3 	bl	800cdf2 <__hexdig_fun>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d062      	beq.n	800cf56 <__gethex+0x13a>
 800ce90:	4633      	mov	r3, r6
 800ce92:	7818      	ldrb	r0, [r3, #0]
 800ce94:	2830      	cmp	r0, #48	; 0x30
 800ce96:	461f      	mov	r7, r3
 800ce98:	f103 0301 	add.w	r3, r3, #1
 800ce9c:	d0f9      	beq.n	800ce92 <__gethex+0x76>
 800ce9e:	f7ff ffa8 	bl	800cdf2 <__hexdig_fun>
 800cea2:	2301      	movs	r3, #1
 800cea4:	fab0 f480 	clz	r4, r0
 800cea8:	0964      	lsrs	r4, r4, #5
 800ceaa:	4635      	mov	r5, r6
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	463a      	mov	r2, r7
 800ceb0:	4616      	mov	r6, r2
 800ceb2:	3201      	adds	r2, #1
 800ceb4:	7830      	ldrb	r0, [r6, #0]
 800ceb6:	f7ff ff9c 	bl	800cdf2 <__hexdig_fun>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d1f8      	bne.n	800ceb0 <__gethex+0x94>
 800cebe:	9901      	ldr	r1, [sp, #4]
 800cec0:	4652      	mov	r2, sl
 800cec2:	4630      	mov	r0, r6
 800cec4:	f001 fbab 	bl	800e61e <strncmp>
 800cec8:	b980      	cbnz	r0, 800ceec <__gethex+0xd0>
 800ceca:	b94d      	cbnz	r5, 800cee0 <__gethex+0xc4>
 800cecc:	eb06 050a 	add.w	r5, r6, sl
 800ced0:	462a      	mov	r2, r5
 800ced2:	4616      	mov	r6, r2
 800ced4:	3201      	adds	r2, #1
 800ced6:	7830      	ldrb	r0, [r6, #0]
 800ced8:	f7ff ff8b 	bl	800cdf2 <__hexdig_fun>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d1f8      	bne.n	800ced2 <__gethex+0xb6>
 800cee0:	1bad      	subs	r5, r5, r6
 800cee2:	00ad      	lsls	r5, r5, #2
 800cee4:	e004      	b.n	800cef0 <__gethex+0xd4>
 800cee6:	2400      	movs	r4, #0
 800cee8:	4625      	mov	r5, r4
 800ceea:	e7e0      	b.n	800ceae <__gethex+0x92>
 800ceec:	2d00      	cmp	r5, #0
 800ceee:	d1f7      	bne.n	800cee0 <__gethex+0xc4>
 800cef0:	7833      	ldrb	r3, [r6, #0]
 800cef2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cef6:	2b50      	cmp	r3, #80	; 0x50
 800cef8:	d13b      	bne.n	800cf72 <__gethex+0x156>
 800cefa:	7873      	ldrb	r3, [r6, #1]
 800cefc:	2b2b      	cmp	r3, #43	; 0x2b
 800cefe:	d02c      	beq.n	800cf5a <__gethex+0x13e>
 800cf00:	2b2d      	cmp	r3, #45	; 0x2d
 800cf02:	d02e      	beq.n	800cf62 <__gethex+0x146>
 800cf04:	1c71      	adds	r1, r6, #1
 800cf06:	f04f 0900 	mov.w	r9, #0
 800cf0a:	7808      	ldrb	r0, [r1, #0]
 800cf0c:	f7ff ff71 	bl	800cdf2 <__hexdig_fun>
 800cf10:	1e43      	subs	r3, r0, #1
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	2b18      	cmp	r3, #24
 800cf16:	d82c      	bhi.n	800cf72 <__gethex+0x156>
 800cf18:	f1a0 0210 	sub.w	r2, r0, #16
 800cf1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf20:	f7ff ff67 	bl	800cdf2 <__hexdig_fun>
 800cf24:	1e43      	subs	r3, r0, #1
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b18      	cmp	r3, #24
 800cf2a:	d91d      	bls.n	800cf68 <__gethex+0x14c>
 800cf2c:	f1b9 0f00 	cmp.w	r9, #0
 800cf30:	d000      	beq.n	800cf34 <__gethex+0x118>
 800cf32:	4252      	negs	r2, r2
 800cf34:	4415      	add	r5, r2
 800cf36:	f8cb 1000 	str.w	r1, [fp]
 800cf3a:	b1e4      	cbz	r4, 800cf76 <__gethex+0x15a>
 800cf3c:	9b00      	ldr	r3, [sp, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	bf14      	ite	ne
 800cf42:	2700      	movne	r7, #0
 800cf44:	2706      	moveq	r7, #6
 800cf46:	4638      	mov	r0, r7
 800cf48:	b009      	add	sp, #36	; 0x24
 800cf4a:	ecbd 8b02 	vpop	{d8}
 800cf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf52:	463e      	mov	r6, r7
 800cf54:	4625      	mov	r5, r4
 800cf56:	2401      	movs	r4, #1
 800cf58:	e7ca      	b.n	800cef0 <__gethex+0xd4>
 800cf5a:	f04f 0900 	mov.w	r9, #0
 800cf5e:	1cb1      	adds	r1, r6, #2
 800cf60:	e7d3      	b.n	800cf0a <__gethex+0xee>
 800cf62:	f04f 0901 	mov.w	r9, #1
 800cf66:	e7fa      	b.n	800cf5e <__gethex+0x142>
 800cf68:	230a      	movs	r3, #10
 800cf6a:	fb03 0202 	mla	r2, r3, r2, r0
 800cf6e:	3a10      	subs	r2, #16
 800cf70:	e7d4      	b.n	800cf1c <__gethex+0x100>
 800cf72:	4631      	mov	r1, r6
 800cf74:	e7df      	b.n	800cf36 <__gethex+0x11a>
 800cf76:	1bf3      	subs	r3, r6, r7
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	2b07      	cmp	r3, #7
 800cf7e:	dc0b      	bgt.n	800cf98 <__gethex+0x17c>
 800cf80:	ee18 0a10 	vmov	r0, s16
 800cf84:	f000 fa82 	bl	800d48c <_Balloc>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	b940      	cbnz	r0, 800cf9e <__gethex+0x182>
 800cf8c:	4b5d      	ldr	r3, [pc, #372]	; (800d104 <__gethex+0x2e8>)
 800cf8e:	4602      	mov	r2, r0
 800cf90:	21de      	movs	r1, #222	; 0xde
 800cf92:	485d      	ldr	r0, [pc, #372]	; (800d108 <__gethex+0x2ec>)
 800cf94:	f001 fc38 	bl	800e808 <__assert_func>
 800cf98:	3101      	adds	r1, #1
 800cf9a:	105b      	asrs	r3, r3, #1
 800cf9c:	e7ee      	b.n	800cf7c <__gethex+0x160>
 800cf9e:	f100 0914 	add.w	r9, r0, #20
 800cfa2:	f04f 0b00 	mov.w	fp, #0
 800cfa6:	f1ca 0301 	rsb	r3, sl, #1
 800cfaa:	f8cd 9008 	str.w	r9, [sp, #8]
 800cfae:	f8cd b000 	str.w	fp, [sp]
 800cfb2:	9306      	str	r3, [sp, #24]
 800cfb4:	42b7      	cmp	r7, r6
 800cfb6:	d340      	bcc.n	800d03a <__gethex+0x21e>
 800cfb8:	9802      	ldr	r0, [sp, #8]
 800cfba:	9b00      	ldr	r3, [sp, #0]
 800cfbc:	f840 3b04 	str.w	r3, [r0], #4
 800cfc0:	eba0 0009 	sub.w	r0, r0, r9
 800cfc4:	1080      	asrs	r0, r0, #2
 800cfc6:	0146      	lsls	r6, r0, #5
 800cfc8:	6120      	str	r0, [r4, #16]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 fb50 	bl	800d670 <__hi0bits>
 800cfd0:	1a30      	subs	r0, r6, r0
 800cfd2:	f8d8 6000 	ldr.w	r6, [r8]
 800cfd6:	42b0      	cmp	r0, r6
 800cfd8:	dd63      	ble.n	800d0a2 <__gethex+0x286>
 800cfda:	1b87      	subs	r7, r0, r6
 800cfdc:	4639      	mov	r1, r7
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f000 fef4 	bl	800ddcc <__any_on>
 800cfe4:	4682      	mov	sl, r0
 800cfe6:	b1a8      	cbz	r0, 800d014 <__gethex+0x1f8>
 800cfe8:	1e7b      	subs	r3, r7, #1
 800cfea:	1159      	asrs	r1, r3, #5
 800cfec:	f003 021f 	and.w	r2, r3, #31
 800cff0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cff4:	f04f 0a01 	mov.w	sl, #1
 800cff8:	fa0a f202 	lsl.w	r2, sl, r2
 800cffc:	420a      	tst	r2, r1
 800cffe:	d009      	beq.n	800d014 <__gethex+0x1f8>
 800d000:	4553      	cmp	r3, sl
 800d002:	dd05      	ble.n	800d010 <__gethex+0x1f4>
 800d004:	1eb9      	subs	r1, r7, #2
 800d006:	4620      	mov	r0, r4
 800d008:	f000 fee0 	bl	800ddcc <__any_on>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d145      	bne.n	800d09c <__gethex+0x280>
 800d010:	f04f 0a02 	mov.w	sl, #2
 800d014:	4639      	mov	r1, r7
 800d016:	4620      	mov	r0, r4
 800d018:	f7ff fe99 	bl	800cd4e <rshift>
 800d01c:	443d      	add	r5, r7
 800d01e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d022:	42ab      	cmp	r3, r5
 800d024:	da4c      	bge.n	800d0c0 <__gethex+0x2a4>
 800d026:	ee18 0a10 	vmov	r0, s16
 800d02a:	4621      	mov	r1, r4
 800d02c:	f000 fa6e 	bl	800d50c <_Bfree>
 800d030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d032:	2300      	movs	r3, #0
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	27a3      	movs	r7, #163	; 0xa3
 800d038:	e785      	b.n	800cf46 <__gethex+0x12a>
 800d03a:	1e73      	subs	r3, r6, #1
 800d03c:	9a05      	ldr	r2, [sp, #20]
 800d03e:	9303      	str	r3, [sp, #12]
 800d040:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d044:	4293      	cmp	r3, r2
 800d046:	d019      	beq.n	800d07c <__gethex+0x260>
 800d048:	f1bb 0f20 	cmp.w	fp, #32
 800d04c:	d107      	bne.n	800d05e <__gethex+0x242>
 800d04e:	9b02      	ldr	r3, [sp, #8]
 800d050:	9a00      	ldr	r2, [sp, #0]
 800d052:	f843 2b04 	str.w	r2, [r3], #4
 800d056:	9302      	str	r3, [sp, #8]
 800d058:	2300      	movs	r3, #0
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	469b      	mov	fp, r3
 800d05e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d062:	f7ff fec6 	bl	800cdf2 <__hexdig_fun>
 800d066:	9b00      	ldr	r3, [sp, #0]
 800d068:	f000 000f 	and.w	r0, r0, #15
 800d06c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d070:	4303      	orrs	r3, r0
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	f10b 0b04 	add.w	fp, fp, #4
 800d078:	9b03      	ldr	r3, [sp, #12]
 800d07a:	e00d      	b.n	800d098 <__gethex+0x27c>
 800d07c:	9b03      	ldr	r3, [sp, #12]
 800d07e:	9a06      	ldr	r2, [sp, #24]
 800d080:	4413      	add	r3, r2
 800d082:	42bb      	cmp	r3, r7
 800d084:	d3e0      	bcc.n	800d048 <__gethex+0x22c>
 800d086:	4618      	mov	r0, r3
 800d088:	9901      	ldr	r1, [sp, #4]
 800d08a:	9307      	str	r3, [sp, #28]
 800d08c:	4652      	mov	r2, sl
 800d08e:	f001 fac6 	bl	800e61e <strncmp>
 800d092:	9b07      	ldr	r3, [sp, #28]
 800d094:	2800      	cmp	r0, #0
 800d096:	d1d7      	bne.n	800d048 <__gethex+0x22c>
 800d098:	461e      	mov	r6, r3
 800d09a:	e78b      	b.n	800cfb4 <__gethex+0x198>
 800d09c:	f04f 0a03 	mov.w	sl, #3
 800d0a0:	e7b8      	b.n	800d014 <__gethex+0x1f8>
 800d0a2:	da0a      	bge.n	800d0ba <__gethex+0x29e>
 800d0a4:	1a37      	subs	r7, r6, r0
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	ee18 0a10 	vmov	r0, s16
 800d0ac:	463a      	mov	r2, r7
 800d0ae:	f000 fc49 	bl	800d944 <__lshift>
 800d0b2:	1bed      	subs	r5, r5, r7
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	f100 0914 	add.w	r9, r0, #20
 800d0ba:	f04f 0a00 	mov.w	sl, #0
 800d0be:	e7ae      	b.n	800d01e <__gethex+0x202>
 800d0c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d0c4:	42a8      	cmp	r0, r5
 800d0c6:	dd72      	ble.n	800d1ae <__gethex+0x392>
 800d0c8:	1b45      	subs	r5, r0, r5
 800d0ca:	42ae      	cmp	r6, r5
 800d0cc:	dc36      	bgt.n	800d13c <__gethex+0x320>
 800d0ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	d02a      	beq.n	800d12c <__gethex+0x310>
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d02c      	beq.n	800d134 <__gethex+0x318>
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d11c      	bne.n	800d118 <__gethex+0x2fc>
 800d0de:	42ae      	cmp	r6, r5
 800d0e0:	d11a      	bne.n	800d118 <__gethex+0x2fc>
 800d0e2:	2e01      	cmp	r6, #1
 800d0e4:	d112      	bne.n	800d10c <__gethex+0x2f0>
 800d0e6:	9a04      	ldr	r2, [sp, #16]
 800d0e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	6123      	str	r3, [r4, #16]
 800d0f2:	f8c9 3000 	str.w	r3, [r9]
 800d0f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0f8:	2762      	movs	r7, #98	; 0x62
 800d0fa:	601c      	str	r4, [r3, #0]
 800d0fc:	e723      	b.n	800cf46 <__gethex+0x12a>
 800d0fe:	bf00      	nop
 800d100:	08011ae4 	.word	0x08011ae4
 800d104:	08011a08 	.word	0x08011a08
 800d108:	08011a7c 	.word	0x08011a7c
 800d10c:	1e71      	subs	r1, r6, #1
 800d10e:	4620      	mov	r0, r4
 800d110:	f000 fe5c 	bl	800ddcc <__any_on>
 800d114:	2800      	cmp	r0, #0
 800d116:	d1e6      	bne.n	800d0e6 <__gethex+0x2ca>
 800d118:	ee18 0a10 	vmov	r0, s16
 800d11c:	4621      	mov	r1, r4
 800d11e:	f000 f9f5 	bl	800d50c <_Bfree>
 800d122:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d124:	2300      	movs	r3, #0
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	2750      	movs	r7, #80	; 0x50
 800d12a:	e70c      	b.n	800cf46 <__gethex+0x12a>
 800d12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1f2      	bne.n	800d118 <__gethex+0x2fc>
 800d132:	e7d8      	b.n	800d0e6 <__gethex+0x2ca>
 800d134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1d5      	bne.n	800d0e6 <__gethex+0x2ca>
 800d13a:	e7ed      	b.n	800d118 <__gethex+0x2fc>
 800d13c:	1e6f      	subs	r7, r5, #1
 800d13e:	f1ba 0f00 	cmp.w	sl, #0
 800d142:	d131      	bne.n	800d1a8 <__gethex+0x38c>
 800d144:	b127      	cbz	r7, 800d150 <__gethex+0x334>
 800d146:	4639      	mov	r1, r7
 800d148:	4620      	mov	r0, r4
 800d14a:	f000 fe3f 	bl	800ddcc <__any_on>
 800d14e:	4682      	mov	sl, r0
 800d150:	117b      	asrs	r3, r7, #5
 800d152:	2101      	movs	r1, #1
 800d154:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d158:	f007 071f 	and.w	r7, r7, #31
 800d15c:	fa01 f707 	lsl.w	r7, r1, r7
 800d160:	421f      	tst	r7, r3
 800d162:	4629      	mov	r1, r5
 800d164:	4620      	mov	r0, r4
 800d166:	bf18      	it	ne
 800d168:	f04a 0a02 	orrne.w	sl, sl, #2
 800d16c:	1b76      	subs	r6, r6, r5
 800d16e:	f7ff fdee 	bl	800cd4e <rshift>
 800d172:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d176:	2702      	movs	r7, #2
 800d178:	f1ba 0f00 	cmp.w	sl, #0
 800d17c:	d048      	beq.n	800d210 <__gethex+0x3f4>
 800d17e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d182:	2b02      	cmp	r3, #2
 800d184:	d015      	beq.n	800d1b2 <__gethex+0x396>
 800d186:	2b03      	cmp	r3, #3
 800d188:	d017      	beq.n	800d1ba <__gethex+0x39e>
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d109      	bne.n	800d1a2 <__gethex+0x386>
 800d18e:	f01a 0f02 	tst.w	sl, #2
 800d192:	d006      	beq.n	800d1a2 <__gethex+0x386>
 800d194:	f8d9 0000 	ldr.w	r0, [r9]
 800d198:	ea4a 0a00 	orr.w	sl, sl, r0
 800d19c:	f01a 0f01 	tst.w	sl, #1
 800d1a0:	d10e      	bne.n	800d1c0 <__gethex+0x3a4>
 800d1a2:	f047 0710 	orr.w	r7, r7, #16
 800d1a6:	e033      	b.n	800d210 <__gethex+0x3f4>
 800d1a8:	f04f 0a01 	mov.w	sl, #1
 800d1ac:	e7d0      	b.n	800d150 <__gethex+0x334>
 800d1ae:	2701      	movs	r7, #1
 800d1b0:	e7e2      	b.n	800d178 <__gethex+0x35c>
 800d1b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1b4:	f1c3 0301 	rsb	r3, r3, #1
 800d1b8:	9315      	str	r3, [sp, #84]	; 0x54
 800d1ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d0f0      	beq.n	800d1a2 <__gethex+0x386>
 800d1c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1c4:	f104 0314 	add.w	r3, r4, #20
 800d1c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d1cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d1d0:	f04f 0c00 	mov.w	ip, #0
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1da:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d1de:	d01c      	beq.n	800d21a <__gethex+0x3fe>
 800d1e0:	3201      	adds	r2, #1
 800d1e2:	6002      	str	r2, [r0, #0]
 800d1e4:	2f02      	cmp	r7, #2
 800d1e6:	f104 0314 	add.w	r3, r4, #20
 800d1ea:	d13f      	bne.n	800d26c <__gethex+0x450>
 800d1ec:	f8d8 2000 	ldr.w	r2, [r8]
 800d1f0:	3a01      	subs	r2, #1
 800d1f2:	42b2      	cmp	r2, r6
 800d1f4:	d10a      	bne.n	800d20c <__gethex+0x3f0>
 800d1f6:	1171      	asrs	r1, r6, #5
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1fe:	f006 061f 	and.w	r6, r6, #31
 800d202:	fa02 f606 	lsl.w	r6, r2, r6
 800d206:	421e      	tst	r6, r3
 800d208:	bf18      	it	ne
 800d20a:	4617      	movne	r7, r2
 800d20c:	f047 0720 	orr.w	r7, r7, #32
 800d210:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d212:	601c      	str	r4, [r3, #0]
 800d214:	9b04      	ldr	r3, [sp, #16]
 800d216:	601d      	str	r5, [r3, #0]
 800d218:	e695      	b.n	800cf46 <__gethex+0x12a>
 800d21a:	4299      	cmp	r1, r3
 800d21c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d220:	d8d8      	bhi.n	800d1d4 <__gethex+0x3b8>
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	459b      	cmp	fp, r3
 800d226:	db19      	blt.n	800d25c <__gethex+0x440>
 800d228:	6861      	ldr	r1, [r4, #4]
 800d22a:	ee18 0a10 	vmov	r0, s16
 800d22e:	3101      	adds	r1, #1
 800d230:	f000 f92c 	bl	800d48c <_Balloc>
 800d234:	4681      	mov	r9, r0
 800d236:	b918      	cbnz	r0, 800d240 <__gethex+0x424>
 800d238:	4b1a      	ldr	r3, [pc, #104]	; (800d2a4 <__gethex+0x488>)
 800d23a:	4602      	mov	r2, r0
 800d23c:	2184      	movs	r1, #132	; 0x84
 800d23e:	e6a8      	b.n	800cf92 <__gethex+0x176>
 800d240:	6922      	ldr	r2, [r4, #16]
 800d242:	3202      	adds	r2, #2
 800d244:	f104 010c 	add.w	r1, r4, #12
 800d248:	0092      	lsls	r2, r2, #2
 800d24a:	300c      	adds	r0, #12
 800d24c:	f000 f910 	bl	800d470 <memcpy>
 800d250:	4621      	mov	r1, r4
 800d252:	ee18 0a10 	vmov	r0, s16
 800d256:	f000 f959 	bl	800d50c <_Bfree>
 800d25a:	464c      	mov	r4, r9
 800d25c:	6923      	ldr	r3, [r4, #16]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d264:	6122      	str	r2, [r4, #16]
 800d266:	2201      	movs	r2, #1
 800d268:	615a      	str	r2, [r3, #20]
 800d26a:	e7bb      	b.n	800d1e4 <__gethex+0x3c8>
 800d26c:	6922      	ldr	r2, [r4, #16]
 800d26e:	455a      	cmp	r2, fp
 800d270:	dd0b      	ble.n	800d28a <__gethex+0x46e>
 800d272:	2101      	movs	r1, #1
 800d274:	4620      	mov	r0, r4
 800d276:	f7ff fd6a 	bl	800cd4e <rshift>
 800d27a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d27e:	3501      	adds	r5, #1
 800d280:	42ab      	cmp	r3, r5
 800d282:	f6ff aed0 	blt.w	800d026 <__gethex+0x20a>
 800d286:	2701      	movs	r7, #1
 800d288:	e7c0      	b.n	800d20c <__gethex+0x3f0>
 800d28a:	f016 061f 	ands.w	r6, r6, #31
 800d28e:	d0fa      	beq.n	800d286 <__gethex+0x46a>
 800d290:	4453      	add	r3, sl
 800d292:	f1c6 0620 	rsb	r6, r6, #32
 800d296:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d29a:	f000 f9e9 	bl	800d670 <__hi0bits>
 800d29e:	42b0      	cmp	r0, r6
 800d2a0:	dbe7      	blt.n	800d272 <__gethex+0x456>
 800d2a2:	e7f0      	b.n	800d286 <__gethex+0x46a>
 800d2a4:	08011a08 	.word	0x08011a08

0800d2a8 <L_shift>:
 800d2a8:	f1c2 0208 	rsb	r2, r2, #8
 800d2ac:	0092      	lsls	r2, r2, #2
 800d2ae:	b570      	push	{r4, r5, r6, lr}
 800d2b0:	f1c2 0620 	rsb	r6, r2, #32
 800d2b4:	6843      	ldr	r3, [r0, #4]
 800d2b6:	6804      	ldr	r4, [r0, #0]
 800d2b8:	fa03 f506 	lsl.w	r5, r3, r6
 800d2bc:	432c      	orrs	r4, r5
 800d2be:	40d3      	lsrs	r3, r2
 800d2c0:	6004      	str	r4, [r0, #0]
 800d2c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2c6:	4288      	cmp	r0, r1
 800d2c8:	d3f4      	bcc.n	800d2b4 <L_shift+0xc>
 800d2ca:	bd70      	pop	{r4, r5, r6, pc}

0800d2cc <__match>:
 800d2cc:	b530      	push	{r4, r5, lr}
 800d2ce:	6803      	ldr	r3, [r0, #0]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2d6:	b914      	cbnz	r4, 800d2de <__match+0x12>
 800d2d8:	6003      	str	r3, [r0, #0]
 800d2da:	2001      	movs	r0, #1
 800d2dc:	bd30      	pop	{r4, r5, pc}
 800d2de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2e6:	2d19      	cmp	r5, #25
 800d2e8:	bf98      	it	ls
 800d2ea:	3220      	addls	r2, #32
 800d2ec:	42a2      	cmp	r2, r4
 800d2ee:	d0f0      	beq.n	800d2d2 <__match+0x6>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e7f3      	b.n	800d2dc <__match+0x10>

0800d2f4 <__hexnan>:
 800d2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f8:	680b      	ldr	r3, [r1, #0]
 800d2fa:	115e      	asrs	r6, r3, #5
 800d2fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d300:	f013 031f 	ands.w	r3, r3, #31
 800d304:	b087      	sub	sp, #28
 800d306:	bf18      	it	ne
 800d308:	3604      	addne	r6, #4
 800d30a:	2500      	movs	r5, #0
 800d30c:	1f37      	subs	r7, r6, #4
 800d30e:	4690      	mov	r8, r2
 800d310:	6802      	ldr	r2, [r0, #0]
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	4682      	mov	sl, r0
 800d316:	f846 5c04 	str.w	r5, [r6, #-4]
 800d31a:	46b9      	mov	r9, r7
 800d31c:	463c      	mov	r4, r7
 800d31e:	9502      	str	r5, [sp, #8]
 800d320:	46ab      	mov	fp, r5
 800d322:	7851      	ldrb	r1, [r2, #1]
 800d324:	1c53      	adds	r3, r2, #1
 800d326:	9303      	str	r3, [sp, #12]
 800d328:	b341      	cbz	r1, 800d37c <__hexnan+0x88>
 800d32a:	4608      	mov	r0, r1
 800d32c:	9205      	str	r2, [sp, #20]
 800d32e:	9104      	str	r1, [sp, #16]
 800d330:	f7ff fd5f 	bl	800cdf2 <__hexdig_fun>
 800d334:	2800      	cmp	r0, #0
 800d336:	d14f      	bne.n	800d3d8 <__hexnan+0xe4>
 800d338:	9904      	ldr	r1, [sp, #16]
 800d33a:	9a05      	ldr	r2, [sp, #20]
 800d33c:	2920      	cmp	r1, #32
 800d33e:	d818      	bhi.n	800d372 <__hexnan+0x7e>
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	459b      	cmp	fp, r3
 800d344:	dd13      	ble.n	800d36e <__hexnan+0x7a>
 800d346:	454c      	cmp	r4, r9
 800d348:	d206      	bcs.n	800d358 <__hexnan+0x64>
 800d34a:	2d07      	cmp	r5, #7
 800d34c:	dc04      	bgt.n	800d358 <__hexnan+0x64>
 800d34e:	462a      	mov	r2, r5
 800d350:	4649      	mov	r1, r9
 800d352:	4620      	mov	r0, r4
 800d354:	f7ff ffa8 	bl	800d2a8 <L_shift>
 800d358:	4544      	cmp	r4, r8
 800d35a:	d950      	bls.n	800d3fe <__hexnan+0x10a>
 800d35c:	2300      	movs	r3, #0
 800d35e:	f1a4 0904 	sub.w	r9, r4, #4
 800d362:	f844 3c04 	str.w	r3, [r4, #-4]
 800d366:	f8cd b008 	str.w	fp, [sp, #8]
 800d36a:	464c      	mov	r4, r9
 800d36c:	461d      	mov	r5, r3
 800d36e:	9a03      	ldr	r2, [sp, #12]
 800d370:	e7d7      	b.n	800d322 <__hexnan+0x2e>
 800d372:	2929      	cmp	r1, #41	; 0x29
 800d374:	d156      	bne.n	800d424 <__hexnan+0x130>
 800d376:	3202      	adds	r2, #2
 800d378:	f8ca 2000 	str.w	r2, [sl]
 800d37c:	f1bb 0f00 	cmp.w	fp, #0
 800d380:	d050      	beq.n	800d424 <__hexnan+0x130>
 800d382:	454c      	cmp	r4, r9
 800d384:	d206      	bcs.n	800d394 <__hexnan+0xa0>
 800d386:	2d07      	cmp	r5, #7
 800d388:	dc04      	bgt.n	800d394 <__hexnan+0xa0>
 800d38a:	462a      	mov	r2, r5
 800d38c:	4649      	mov	r1, r9
 800d38e:	4620      	mov	r0, r4
 800d390:	f7ff ff8a 	bl	800d2a8 <L_shift>
 800d394:	4544      	cmp	r4, r8
 800d396:	d934      	bls.n	800d402 <__hexnan+0x10e>
 800d398:	f1a8 0204 	sub.w	r2, r8, #4
 800d39c:	4623      	mov	r3, r4
 800d39e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d3a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d3a6:	429f      	cmp	r7, r3
 800d3a8:	d2f9      	bcs.n	800d39e <__hexnan+0xaa>
 800d3aa:	1b3b      	subs	r3, r7, r4
 800d3ac:	f023 0303 	bic.w	r3, r3, #3
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	3401      	adds	r4, #1
 800d3b4:	3e03      	subs	r6, #3
 800d3b6:	42b4      	cmp	r4, r6
 800d3b8:	bf88      	it	hi
 800d3ba:	2304      	movhi	r3, #4
 800d3bc:	4443      	add	r3, r8
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f843 2b04 	str.w	r2, [r3], #4
 800d3c4:	429f      	cmp	r7, r3
 800d3c6:	d2fb      	bcs.n	800d3c0 <__hexnan+0xcc>
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	b91b      	cbnz	r3, 800d3d4 <__hexnan+0xe0>
 800d3cc:	4547      	cmp	r7, r8
 800d3ce:	d127      	bne.n	800d420 <__hexnan+0x12c>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	603b      	str	r3, [r7, #0]
 800d3d4:	2005      	movs	r0, #5
 800d3d6:	e026      	b.n	800d426 <__hexnan+0x132>
 800d3d8:	3501      	adds	r5, #1
 800d3da:	2d08      	cmp	r5, #8
 800d3dc:	f10b 0b01 	add.w	fp, fp, #1
 800d3e0:	dd06      	ble.n	800d3f0 <__hexnan+0xfc>
 800d3e2:	4544      	cmp	r4, r8
 800d3e4:	d9c3      	bls.n	800d36e <__hexnan+0x7a>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3ec:	2501      	movs	r5, #1
 800d3ee:	3c04      	subs	r4, #4
 800d3f0:	6822      	ldr	r2, [r4, #0]
 800d3f2:	f000 000f 	and.w	r0, r0, #15
 800d3f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d3fa:	6022      	str	r2, [r4, #0]
 800d3fc:	e7b7      	b.n	800d36e <__hexnan+0x7a>
 800d3fe:	2508      	movs	r5, #8
 800d400:	e7b5      	b.n	800d36e <__hexnan+0x7a>
 800d402:	9b01      	ldr	r3, [sp, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0df      	beq.n	800d3c8 <__hexnan+0xd4>
 800d408:	f04f 32ff 	mov.w	r2, #4294967295
 800d40c:	f1c3 0320 	rsb	r3, r3, #32
 800d410:	fa22 f303 	lsr.w	r3, r2, r3
 800d414:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d418:	401a      	ands	r2, r3
 800d41a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d41e:	e7d3      	b.n	800d3c8 <__hexnan+0xd4>
 800d420:	3f04      	subs	r7, #4
 800d422:	e7d1      	b.n	800d3c8 <__hexnan+0xd4>
 800d424:	2004      	movs	r0, #4
 800d426:	b007      	add	sp, #28
 800d428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d42c <_localeconv_r>:
 800d42c:	4800      	ldr	r0, [pc, #0]	; (800d430 <_localeconv_r+0x4>)
 800d42e:	4770      	bx	lr
 800d430:	20000188 	.word	0x20000188

0800d434 <__retarget_lock_init_recursive>:
 800d434:	4770      	bx	lr

0800d436 <__retarget_lock_acquire_recursive>:
 800d436:	4770      	bx	lr

0800d438 <__retarget_lock_release_recursive>:
 800d438:	4770      	bx	lr
	...

0800d43c <malloc>:
 800d43c:	4b02      	ldr	r3, [pc, #8]	; (800d448 <malloc+0xc>)
 800d43e:	4601      	mov	r1, r0
 800d440:	6818      	ldr	r0, [r3, #0]
 800d442:	f000 bd67 	b.w	800df14 <_malloc_r>
 800d446:	bf00      	nop
 800d448:	20000030 	.word	0x20000030

0800d44c <__ascii_mbtowc>:
 800d44c:	b082      	sub	sp, #8
 800d44e:	b901      	cbnz	r1, 800d452 <__ascii_mbtowc+0x6>
 800d450:	a901      	add	r1, sp, #4
 800d452:	b142      	cbz	r2, 800d466 <__ascii_mbtowc+0x1a>
 800d454:	b14b      	cbz	r3, 800d46a <__ascii_mbtowc+0x1e>
 800d456:	7813      	ldrb	r3, [r2, #0]
 800d458:	600b      	str	r3, [r1, #0]
 800d45a:	7812      	ldrb	r2, [r2, #0]
 800d45c:	1e10      	subs	r0, r2, #0
 800d45e:	bf18      	it	ne
 800d460:	2001      	movne	r0, #1
 800d462:	b002      	add	sp, #8
 800d464:	4770      	bx	lr
 800d466:	4610      	mov	r0, r2
 800d468:	e7fb      	b.n	800d462 <__ascii_mbtowc+0x16>
 800d46a:	f06f 0001 	mvn.w	r0, #1
 800d46e:	e7f8      	b.n	800d462 <__ascii_mbtowc+0x16>

0800d470 <memcpy>:
 800d470:	440a      	add	r2, r1
 800d472:	4291      	cmp	r1, r2
 800d474:	f100 33ff 	add.w	r3, r0, #4294967295
 800d478:	d100      	bne.n	800d47c <memcpy+0xc>
 800d47a:	4770      	bx	lr
 800d47c:	b510      	push	{r4, lr}
 800d47e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d482:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d486:	4291      	cmp	r1, r2
 800d488:	d1f9      	bne.n	800d47e <memcpy+0xe>
 800d48a:	bd10      	pop	{r4, pc}

0800d48c <_Balloc>:
 800d48c:	b570      	push	{r4, r5, r6, lr}
 800d48e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d490:	4604      	mov	r4, r0
 800d492:	460d      	mov	r5, r1
 800d494:	b976      	cbnz	r6, 800d4b4 <_Balloc+0x28>
 800d496:	2010      	movs	r0, #16
 800d498:	f7ff ffd0 	bl	800d43c <malloc>
 800d49c:	4602      	mov	r2, r0
 800d49e:	6260      	str	r0, [r4, #36]	; 0x24
 800d4a0:	b920      	cbnz	r0, 800d4ac <_Balloc+0x20>
 800d4a2:	4b18      	ldr	r3, [pc, #96]	; (800d504 <_Balloc+0x78>)
 800d4a4:	4818      	ldr	r0, [pc, #96]	; (800d508 <_Balloc+0x7c>)
 800d4a6:	2166      	movs	r1, #102	; 0x66
 800d4a8:	f001 f9ae 	bl	800e808 <__assert_func>
 800d4ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4b0:	6006      	str	r6, [r0, #0]
 800d4b2:	60c6      	str	r6, [r0, #12]
 800d4b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d4b6:	68f3      	ldr	r3, [r6, #12]
 800d4b8:	b183      	cbz	r3, 800d4dc <_Balloc+0x50>
 800d4ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4c2:	b9b8      	cbnz	r0, 800d4f4 <_Balloc+0x68>
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d4ca:	1d72      	adds	r2, r6, #5
 800d4cc:	0092      	lsls	r2, r2, #2
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f000 fc9d 	bl	800de0e <_calloc_r>
 800d4d4:	b160      	cbz	r0, 800d4f0 <_Balloc+0x64>
 800d4d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4da:	e00e      	b.n	800d4fa <_Balloc+0x6e>
 800d4dc:	2221      	movs	r2, #33	; 0x21
 800d4de:	2104      	movs	r1, #4
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fc94 	bl	800de0e <_calloc_r>
 800d4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e8:	60f0      	str	r0, [r6, #12]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e4      	bne.n	800d4ba <_Balloc+0x2e>
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
 800d4f4:	6802      	ldr	r2, [r0, #0]
 800d4f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d500:	e7f7      	b.n	800d4f2 <_Balloc+0x66>
 800d502:	bf00      	nop
 800d504:	08011996 	.word	0x08011996
 800d508:	08011af8 	.word	0x08011af8

0800d50c <_Bfree>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d510:	4605      	mov	r5, r0
 800d512:	460c      	mov	r4, r1
 800d514:	b976      	cbnz	r6, 800d534 <_Bfree+0x28>
 800d516:	2010      	movs	r0, #16
 800d518:	f7ff ff90 	bl	800d43c <malloc>
 800d51c:	4602      	mov	r2, r0
 800d51e:	6268      	str	r0, [r5, #36]	; 0x24
 800d520:	b920      	cbnz	r0, 800d52c <_Bfree+0x20>
 800d522:	4b09      	ldr	r3, [pc, #36]	; (800d548 <_Bfree+0x3c>)
 800d524:	4809      	ldr	r0, [pc, #36]	; (800d54c <_Bfree+0x40>)
 800d526:	218a      	movs	r1, #138	; 0x8a
 800d528:	f001 f96e 	bl	800e808 <__assert_func>
 800d52c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d530:	6006      	str	r6, [r0, #0]
 800d532:	60c6      	str	r6, [r0, #12]
 800d534:	b13c      	cbz	r4, 800d546 <_Bfree+0x3a>
 800d536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d538:	6862      	ldr	r2, [r4, #4]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d540:	6021      	str	r1, [r4, #0]
 800d542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d546:	bd70      	pop	{r4, r5, r6, pc}
 800d548:	08011996 	.word	0x08011996
 800d54c:	08011af8 	.word	0x08011af8

0800d550 <__multadd>:
 800d550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d554:	690d      	ldr	r5, [r1, #16]
 800d556:	4607      	mov	r7, r0
 800d558:	460c      	mov	r4, r1
 800d55a:	461e      	mov	r6, r3
 800d55c:	f101 0c14 	add.w	ip, r1, #20
 800d560:	2000      	movs	r0, #0
 800d562:	f8dc 3000 	ldr.w	r3, [ip]
 800d566:	b299      	uxth	r1, r3
 800d568:	fb02 6101 	mla	r1, r2, r1, r6
 800d56c:	0c1e      	lsrs	r6, r3, #16
 800d56e:	0c0b      	lsrs	r3, r1, #16
 800d570:	fb02 3306 	mla	r3, r2, r6, r3
 800d574:	b289      	uxth	r1, r1
 800d576:	3001      	adds	r0, #1
 800d578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d57c:	4285      	cmp	r5, r0
 800d57e:	f84c 1b04 	str.w	r1, [ip], #4
 800d582:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d586:	dcec      	bgt.n	800d562 <__multadd+0x12>
 800d588:	b30e      	cbz	r6, 800d5ce <__multadd+0x7e>
 800d58a:	68a3      	ldr	r3, [r4, #8]
 800d58c:	42ab      	cmp	r3, r5
 800d58e:	dc19      	bgt.n	800d5c4 <__multadd+0x74>
 800d590:	6861      	ldr	r1, [r4, #4]
 800d592:	4638      	mov	r0, r7
 800d594:	3101      	adds	r1, #1
 800d596:	f7ff ff79 	bl	800d48c <_Balloc>
 800d59a:	4680      	mov	r8, r0
 800d59c:	b928      	cbnz	r0, 800d5aa <__multadd+0x5a>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	4b0c      	ldr	r3, [pc, #48]	; (800d5d4 <__multadd+0x84>)
 800d5a2:	480d      	ldr	r0, [pc, #52]	; (800d5d8 <__multadd+0x88>)
 800d5a4:	21b5      	movs	r1, #181	; 0xb5
 800d5a6:	f001 f92f 	bl	800e808 <__assert_func>
 800d5aa:	6922      	ldr	r2, [r4, #16]
 800d5ac:	3202      	adds	r2, #2
 800d5ae:	f104 010c 	add.w	r1, r4, #12
 800d5b2:	0092      	lsls	r2, r2, #2
 800d5b4:	300c      	adds	r0, #12
 800d5b6:	f7ff ff5b 	bl	800d470 <memcpy>
 800d5ba:	4621      	mov	r1, r4
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f7ff ffa5 	bl	800d50c <_Bfree>
 800d5c2:	4644      	mov	r4, r8
 800d5c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5c8:	3501      	adds	r5, #1
 800d5ca:	615e      	str	r6, [r3, #20]
 800d5cc:	6125      	str	r5, [r4, #16]
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d4:	08011a08 	.word	0x08011a08
 800d5d8:	08011af8 	.word	0x08011af8

0800d5dc <__s2b>:
 800d5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e0:	460c      	mov	r4, r1
 800d5e2:	4615      	mov	r5, r2
 800d5e4:	461f      	mov	r7, r3
 800d5e6:	2209      	movs	r2, #9
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5f0:	2100      	movs	r1, #0
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	db09      	blt.n	800d60c <__s2b+0x30>
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	f7ff ff47 	bl	800d48c <_Balloc>
 800d5fe:	b940      	cbnz	r0, 800d612 <__s2b+0x36>
 800d600:	4602      	mov	r2, r0
 800d602:	4b19      	ldr	r3, [pc, #100]	; (800d668 <__s2b+0x8c>)
 800d604:	4819      	ldr	r0, [pc, #100]	; (800d66c <__s2b+0x90>)
 800d606:	21ce      	movs	r1, #206	; 0xce
 800d608:	f001 f8fe 	bl	800e808 <__assert_func>
 800d60c:	0052      	lsls	r2, r2, #1
 800d60e:	3101      	adds	r1, #1
 800d610:	e7f0      	b.n	800d5f4 <__s2b+0x18>
 800d612:	9b08      	ldr	r3, [sp, #32]
 800d614:	6143      	str	r3, [r0, #20]
 800d616:	2d09      	cmp	r5, #9
 800d618:	f04f 0301 	mov.w	r3, #1
 800d61c:	6103      	str	r3, [r0, #16]
 800d61e:	dd16      	ble.n	800d64e <__s2b+0x72>
 800d620:	f104 0909 	add.w	r9, r4, #9
 800d624:	46c8      	mov	r8, r9
 800d626:	442c      	add	r4, r5
 800d628:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d62c:	4601      	mov	r1, r0
 800d62e:	3b30      	subs	r3, #48	; 0x30
 800d630:	220a      	movs	r2, #10
 800d632:	4630      	mov	r0, r6
 800d634:	f7ff ff8c 	bl	800d550 <__multadd>
 800d638:	45a0      	cmp	r8, r4
 800d63a:	d1f5      	bne.n	800d628 <__s2b+0x4c>
 800d63c:	f1a5 0408 	sub.w	r4, r5, #8
 800d640:	444c      	add	r4, r9
 800d642:	1b2d      	subs	r5, r5, r4
 800d644:	1963      	adds	r3, r4, r5
 800d646:	42bb      	cmp	r3, r7
 800d648:	db04      	blt.n	800d654 <__s2b+0x78>
 800d64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64e:	340a      	adds	r4, #10
 800d650:	2509      	movs	r5, #9
 800d652:	e7f6      	b.n	800d642 <__s2b+0x66>
 800d654:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d658:	4601      	mov	r1, r0
 800d65a:	3b30      	subs	r3, #48	; 0x30
 800d65c:	220a      	movs	r2, #10
 800d65e:	4630      	mov	r0, r6
 800d660:	f7ff ff76 	bl	800d550 <__multadd>
 800d664:	e7ee      	b.n	800d644 <__s2b+0x68>
 800d666:	bf00      	nop
 800d668:	08011a08 	.word	0x08011a08
 800d66c:	08011af8 	.word	0x08011af8

0800d670 <__hi0bits>:
 800d670:	0c03      	lsrs	r3, r0, #16
 800d672:	041b      	lsls	r3, r3, #16
 800d674:	b9d3      	cbnz	r3, 800d6ac <__hi0bits+0x3c>
 800d676:	0400      	lsls	r0, r0, #16
 800d678:	2310      	movs	r3, #16
 800d67a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d67e:	bf04      	itt	eq
 800d680:	0200      	lsleq	r0, r0, #8
 800d682:	3308      	addeq	r3, #8
 800d684:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d688:	bf04      	itt	eq
 800d68a:	0100      	lsleq	r0, r0, #4
 800d68c:	3304      	addeq	r3, #4
 800d68e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d692:	bf04      	itt	eq
 800d694:	0080      	lsleq	r0, r0, #2
 800d696:	3302      	addeq	r3, #2
 800d698:	2800      	cmp	r0, #0
 800d69a:	db05      	blt.n	800d6a8 <__hi0bits+0x38>
 800d69c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d6a0:	f103 0301 	add.w	r3, r3, #1
 800d6a4:	bf08      	it	eq
 800d6a6:	2320      	moveq	r3, #32
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	4770      	bx	lr
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e7e4      	b.n	800d67a <__hi0bits+0xa>

0800d6b0 <__lo0bits>:
 800d6b0:	6803      	ldr	r3, [r0, #0]
 800d6b2:	f013 0207 	ands.w	r2, r3, #7
 800d6b6:	4601      	mov	r1, r0
 800d6b8:	d00b      	beq.n	800d6d2 <__lo0bits+0x22>
 800d6ba:	07da      	lsls	r2, r3, #31
 800d6bc:	d423      	bmi.n	800d706 <__lo0bits+0x56>
 800d6be:	0798      	lsls	r0, r3, #30
 800d6c0:	bf49      	itett	mi
 800d6c2:	085b      	lsrmi	r3, r3, #1
 800d6c4:	089b      	lsrpl	r3, r3, #2
 800d6c6:	2001      	movmi	r0, #1
 800d6c8:	600b      	strmi	r3, [r1, #0]
 800d6ca:	bf5c      	itt	pl
 800d6cc:	600b      	strpl	r3, [r1, #0]
 800d6ce:	2002      	movpl	r0, #2
 800d6d0:	4770      	bx	lr
 800d6d2:	b298      	uxth	r0, r3
 800d6d4:	b9a8      	cbnz	r0, 800d702 <__lo0bits+0x52>
 800d6d6:	0c1b      	lsrs	r3, r3, #16
 800d6d8:	2010      	movs	r0, #16
 800d6da:	b2da      	uxtb	r2, r3
 800d6dc:	b90a      	cbnz	r2, 800d6e2 <__lo0bits+0x32>
 800d6de:	3008      	adds	r0, #8
 800d6e0:	0a1b      	lsrs	r3, r3, #8
 800d6e2:	071a      	lsls	r2, r3, #28
 800d6e4:	bf04      	itt	eq
 800d6e6:	091b      	lsreq	r3, r3, #4
 800d6e8:	3004      	addeq	r0, #4
 800d6ea:	079a      	lsls	r2, r3, #30
 800d6ec:	bf04      	itt	eq
 800d6ee:	089b      	lsreq	r3, r3, #2
 800d6f0:	3002      	addeq	r0, #2
 800d6f2:	07da      	lsls	r2, r3, #31
 800d6f4:	d403      	bmi.n	800d6fe <__lo0bits+0x4e>
 800d6f6:	085b      	lsrs	r3, r3, #1
 800d6f8:	f100 0001 	add.w	r0, r0, #1
 800d6fc:	d005      	beq.n	800d70a <__lo0bits+0x5a>
 800d6fe:	600b      	str	r3, [r1, #0]
 800d700:	4770      	bx	lr
 800d702:	4610      	mov	r0, r2
 800d704:	e7e9      	b.n	800d6da <__lo0bits+0x2a>
 800d706:	2000      	movs	r0, #0
 800d708:	4770      	bx	lr
 800d70a:	2020      	movs	r0, #32
 800d70c:	4770      	bx	lr
	...

0800d710 <__i2b>:
 800d710:	b510      	push	{r4, lr}
 800d712:	460c      	mov	r4, r1
 800d714:	2101      	movs	r1, #1
 800d716:	f7ff feb9 	bl	800d48c <_Balloc>
 800d71a:	4602      	mov	r2, r0
 800d71c:	b928      	cbnz	r0, 800d72a <__i2b+0x1a>
 800d71e:	4b05      	ldr	r3, [pc, #20]	; (800d734 <__i2b+0x24>)
 800d720:	4805      	ldr	r0, [pc, #20]	; (800d738 <__i2b+0x28>)
 800d722:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d726:	f001 f86f 	bl	800e808 <__assert_func>
 800d72a:	2301      	movs	r3, #1
 800d72c:	6144      	str	r4, [r0, #20]
 800d72e:	6103      	str	r3, [r0, #16]
 800d730:	bd10      	pop	{r4, pc}
 800d732:	bf00      	nop
 800d734:	08011a08 	.word	0x08011a08
 800d738:	08011af8 	.word	0x08011af8

0800d73c <__multiply>:
 800d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d740:	4691      	mov	r9, r2
 800d742:	690a      	ldr	r2, [r1, #16]
 800d744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d748:	429a      	cmp	r2, r3
 800d74a:	bfb8      	it	lt
 800d74c:	460b      	movlt	r3, r1
 800d74e:	460c      	mov	r4, r1
 800d750:	bfbc      	itt	lt
 800d752:	464c      	movlt	r4, r9
 800d754:	4699      	movlt	r9, r3
 800d756:	6927      	ldr	r7, [r4, #16]
 800d758:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d75c:	68a3      	ldr	r3, [r4, #8]
 800d75e:	6861      	ldr	r1, [r4, #4]
 800d760:	eb07 060a 	add.w	r6, r7, sl
 800d764:	42b3      	cmp	r3, r6
 800d766:	b085      	sub	sp, #20
 800d768:	bfb8      	it	lt
 800d76a:	3101      	addlt	r1, #1
 800d76c:	f7ff fe8e 	bl	800d48c <_Balloc>
 800d770:	b930      	cbnz	r0, 800d780 <__multiply+0x44>
 800d772:	4602      	mov	r2, r0
 800d774:	4b44      	ldr	r3, [pc, #272]	; (800d888 <__multiply+0x14c>)
 800d776:	4845      	ldr	r0, [pc, #276]	; (800d88c <__multiply+0x150>)
 800d778:	f240 115d 	movw	r1, #349	; 0x15d
 800d77c:	f001 f844 	bl	800e808 <__assert_func>
 800d780:	f100 0514 	add.w	r5, r0, #20
 800d784:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d788:	462b      	mov	r3, r5
 800d78a:	2200      	movs	r2, #0
 800d78c:	4543      	cmp	r3, r8
 800d78e:	d321      	bcc.n	800d7d4 <__multiply+0x98>
 800d790:	f104 0314 	add.w	r3, r4, #20
 800d794:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d798:	f109 0314 	add.w	r3, r9, #20
 800d79c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d7a0:	9202      	str	r2, [sp, #8]
 800d7a2:	1b3a      	subs	r2, r7, r4
 800d7a4:	3a15      	subs	r2, #21
 800d7a6:	f022 0203 	bic.w	r2, r2, #3
 800d7aa:	3204      	adds	r2, #4
 800d7ac:	f104 0115 	add.w	r1, r4, #21
 800d7b0:	428f      	cmp	r7, r1
 800d7b2:	bf38      	it	cc
 800d7b4:	2204      	movcc	r2, #4
 800d7b6:	9201      	str	r2, [sp, #4]
 800d7b8:	9a02      	ldr	r2, [sp, #8]
 800d7ba:	9303      	str	r3, [sp, #12]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d80c      	bhi.n	800d7da <__multiply+0x9e>
 800d7c0:	2e00      	cmp	r6, #0
 800d7c2:	dd03      	ble.n	800d7cc <__multiply+0x90>
 800d7c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d05a      	beq.n	800d882 <__multiply+0x146>
 800d7cc:	6106      	str	r6, [r0, #16]
 800d7ce:	b005      	add	sp, #20
 800d7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d4:	f843 2b04 	str.w	r2, [r3], #4
 800d7d8:	e7d8      	b.n	800d78c <__multiply+0x50>
 800d7da:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7de:	f1ba 0f00 	cmp.w	sl, #0
 800d7e2:	d024      	beq.n	800d82e <__multiply+0xf2>
 800d7e4:	f104 0e14 	add.w	lr, r4, #20
 800d7e8:	46a9      	mov	r9, r5
 800d7ea:	f04f 0c00 	mov.w	ip, #0
 800d7ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d7f2:	f8d9 1000 	ldr.w	r1, [r9]
 800d7f6:	fa1f fb82 	uxth.w	fp, r2
 800d7fa:	b289      	uxth	r1, r1
 800d7fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d800:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d804:	f8d9 2000 	ldr.w	r2, [r9]
 800d808:	4461      	add	r1, ip
 800d80a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d80e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d812:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d816:	b289      	uxth	r1, r1
 800d818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d81c:	4577      	cmp	r7, lr
 800d81e:	f849 1b04 	str.w	r1, [r9], #4
 800d822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d826:	d8e2      	bhi.n	800d7ee <__multiply+0xb2>
 800d828:	9a01      	ldr	r2, [sp, #4]
 800d82a:	f845 c002 	str.w	ip, [r5, r2]
 800d82e:	9a03      	ldr	r2, [sp, #12]
 800d830:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d834:	3304      	adds	r3, #4
 800d836:	f1b9 0f00 	cmp.w	r9, #0
 800d83a:	d020      	beq.n	800d87e <__multiply+0x142>
 800d83c:	6829      	ldr	r1, [r5, #0]
 800d83e:	f104 0c14 	add.w	ip, r4, #20
 800d842:	46ae      	mov	lr, r5
 800d844:	f04f 0a00 	mov.w	sl, #0
 800d848:	f8bc b000 	ldrh.w	fp, [ip]
 800d84c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d850:	fb09 220b 	mla	r2, r9, fp, r2
 800d854:	4492      	add	sl, r2
 800d856:	b289      	uxth	r1, r1
 800d858:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d85c:	f84e 1b04 	str.w	r1, [lr], #4
 800d860:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d864:	f8be 1000 	ldrh.w	r1, [lr]
 800d868:	0c12      	lsrs	r2, r2, #16
 800d86a:	fb09 1102 	mla	r1, r9, r2, r1
 800d86e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d872:	4567      	cmp	r7, ip
 800d874:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d878:	d8e6      	bhi.n	800d848 <__multiply+0x10c>
 800d87a:	9a01      	ldr	r2, [sp, #4]
 800d87c:	50a9      	str	r1, [r5, r2]
 800d87e:	3504      	adds	r5, #4
 800d880:	e79a      	b.n	800d7b8 <__multiply+0x7c>
 800d882:	3e01      	subs	r6, #1
 800d884:	e79c      	b.n	800d7c0 <__multiply+0x84>
 800d886:	bf00      	nop
 800d888:	08011a08 	.word	0x08011a08
 800d88c:	08011af8 	.word	0x08011af8

0800d890 <__pow5mult>:
 800d890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d894:	4615      	mov	r5, r2
 800d896:	f012 0203 	ands.w	r2, r2, #3
 800d89a:	4606      	mov	r6, r0
 800d89c:	460f      	mov	r7, r1
 800d89e:	d007      	beq.n	800d8b0 <__pow5mult+0x20>
 800d8a0:	4c25      	ldr	r4, [pc, #148]	; (800d938 <__pow5mult+0xa8>)
 800d8a2:	3a01      	subs	r2, #1
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8aa:	f7ff fe51 	bl	800d550 <__multadd>
 800d8ae:	4607      	mov	r7, r0
 800d8b0:	10ad      	asrs	r5, r5, #2
 800d8b2:	d03d      	beq.n	800d930 <__pow5mult+0xa0>
 800d8b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d8b6:	b97c      	cbnz	r4, 800d8d8 <__pow5mult+0x48>
 800d8b8:	2010      	movs	r0, #16
 800d8ba:	f7ff fdbf 	bl	800d43c <malloc>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	6270      	str	r0, [r6, #36]	; 0x24
 800d8c2:	b928      	cbnz	r0, 800d8d0 <__pow5mult+0x40>
 800d8c4:	4b1d      	ldr	r3, [pc, #116]	; (800d93c <__pow5mult+0xac>)
 800d8c6:	481e      	ldr	r0, [pc, #120]	; (800d940 <__pow5mult+0xb0>)
 800d8c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d8cc:	f000 ff9c 	bl	800e808 <__assert_func>
 800d8d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8d4:	6004      	str	r4, [r0, #0]
 800d8d6:	60c4      	str	r4, [r0, #12]
 800d8d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8e0:	b94c      	cbnz	r4, 800d8f6 <__pow5mult+0x66>
 800d8e2:	f240 2171 	movw	r1, #625	; 0x271
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7ff ff12 	bl	800d710 <__i2b>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	6003      	str	r3, [r0, #0]
 800d8f6:	f04f 0900 	mov.w	r9, #0
 800d8fa:	07eb      	lsls	r3, r5, #31
 800d8fc:	d50a      	bpl.n	800d914 <__pow5mult+0x84>
 800d8fe:	4639      	mov	r1, r7
 800d900:	4622      	mov	r2, r4
 800d902:	4630      	mov	r0, r6
 800d904:	f7ff ff1a 	bl	800d73c <__multiply>
 800d908:	4639      	mov	r1, r7
 800d90a:	4680      	mov	r8, r0
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7ff fdfd 	bl	800d50c <_Bfree>
 800d912:	4647      	mov	r7, r8
 800d914:	106d      	asrs	r5, r5, #1
 800d916:	d00b      	beq.n	800d930 <__pow5mult+0xa0>
 800d918:	6820      	ldr	r0, [r4, #0]
 800d91a:	b938      	cbnz	r0, 800d92c <__pow5mult+0x9c>
 800d91c:	4622      	mov	r2, r4
 800d91e:	4621      	mov	r1, r4
 800d920:	4630      	mov	r0, r6
 800d922:	f7ff ff0b 	bl	800d73c <__multiply>
 800d926:	6020      	str	r0, [r4, #0]
 800d928:	f8c0 9000 	str.w	r9, [r0]
 800d92c:	4604      	mov	r4, r0
 800d92e:	e7e4      	b.n	800d8fa <__pow5mult+0x6a>
 800d930:	4638      	mov	r0, r7
 800d932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d936:	bf00      	nop
 800d938:	08011c48 	.word	0x08011c48
 800d93c:	08011996 	.word	0x08011996
 800d940:	08011af8 	.word	0x08011af8

0800d944 <__lshift>:
 800d944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d948:	460c      	mov	r4, r1
 800d94a:	6849      	ldr	r1, [r1, #4]
 800d94c:	6923      	ldr	r3, [r4, #16]
 800d94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d952:	68a3      	ldr	r3, [r4, #8]
 800d954:	4607      	mov	r7, r0
 800d956:	4691      	mov	r9, r2
 800d958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d95c:	f108 0601 	add.w	r6, r8, #1
 800d960:	42b3      	cmp	r3, r6
 800d962:	db0b      	blt.n	800d97c <__lshift+0x38>
 800d964:	4638      	mov	r0, r7
 800d966:	f7ff fd91 	bl	800d48c <_Balloc>
 800d96a:	4605      	mov	r5, r0
 800d96c:	b948      	cbnz	r0, 800d982 <__lshift+0x3e>
 800d96e:	4602      	mov	r2, r0
 800d970:	4b2a      	ldr	r3, [pc, #168]	; (800da1c <__lshift+0xd8>)
 800d972:	482b      	ldr	r0, [pc, #172]	; (800da20 <__lshift+0xdc>)
 800d974:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d978:	f000 ff46 	bl	800e808 <__assert_func>
 800d97c:	3101      	adds	r1, #1
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	e7ee      	b.n	800d960 <__lshift+0x1c>
 800d982:	2300      	movs	r3, #0
 800d984:	f100 0114 	add.w	r1, r0, #20
 800d988:	f100 0210 	add.w	r2, r0, #16
 800d98c:	4618      	mov	r0, r3
 800d98e:	4553      	cmp	r3, sl
 800d990:	db37      	blt.n	800da02 <__lshift+0xbe>
 800d992:	6920      	ldr	r0, [r4, #16]
 800d994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d998:	f104 0314 	add.w	r3, r4, #20
 800d99c:	f019 091f 	ands.w	r9, r9, #31
 800d9a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d9a8:	d02f      	beq.n	800da0a <__lshift+0xc6>
 800d9aa:	f1c9 0e20 	rsb	lr, r9, #32
 800d9ae:	468a      	mov	sl, r1
 800d9b0:	f04f 0c00 	mov.w	ip, #0
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	fa02 f209 	lsl.w	r2, r2, r9
 800d9ba:	ea42 020c 	orr.w	r2, r2, ip
 800d9be:	f84a 2b04 	str.w	r2, [sl], #4
 800d9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c6:	4298      	cmp	r0, r3
 800d9c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d9cc:	d8f2      	bhi.n	800d9b4 <__lshift+0x70>
 800d9ce:	1b03      	subs	r3, r0, r4
 800d9d0:	3b15      	subs	r3, #21
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	f104 0215 	add.w	r2, r4, #21
 800d9dc:	4290      	cmp	r0, r2
 800d9de:	bf38      	it	cc
 800d9e0:	2304      	movcc	r3, #4
 800d9e2:	f841 c003 	str.w	ip, [r1, r3]
 800d9e6:	f1bc 0f00 	cmp.w	ip, #0
 800d9ea:	d001      	beq.n	800d9f0 <__lshift+0xac>
 800d9ec:	f108 0602 	add.w	r6, r8, #2
 800d9f0:	3e01      	subs	r6, #1
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	612e      	str	r6, [r5, #16]
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	f7ff fd88 	bl	800d50c <_Bfree>
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da02:	f842 0f04 	str.w	r0, [r2, #4]!
 800da06:	3301      	adds	r3, #1
 800da08:	e7c1      	b.n	800d98e <__lshift+0x4a>
 800da0a:	3904      	subs	r1, #4
 800da0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da10:	f841 2f04 	str.w	r2, [r1, #4]!
 800da14:	4298      	cmp	r0, r3
 800da16:	d8f9      	bhi.n	800da0c <__lshift+0xc8>
 800da18:	e7ea      	b.n	800d9f0 <__lshift+0xac>
 800da1a:	bf00      	nop
 800da1c:	08011a08 	.word	0x08011a08
 800da20:	08011af8 	.word	0x08011af8

0800da24 <__mcmp>:
 800da24:	b530      	push	{r4, r5, lr}
 800da26:	6902      	ldr	r2, [r0, #16]
 800da28:	690c      	ldr	r4, [r1, #16]
 800da2a:	1b12      	subs	r2, r2, r4
 800da2c:	d10e      	bne.n	800da4c <__mcmp+0x28>
 800da2e:	f100 0314 	add.w	r3, r0, #20
 800da32:	3114      	adds	r1, #20
 800da34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da44:	42a5      	cmp	r5, r4
 800da46:	d003      	beq.n	800da50 <__mcmp+0x2c>
 800da48:	d305      	bcc.n	800da56 <__mcmp+0x32>
 800da4a:	2201      	movs	r2, #1
 800da4c:	4610      	mov	r0, r2
 800da4e:	bd30      	pop	{r4, r5, pc}
 800da50:	4283      	cmp	r3, r0
 800da52:	d3f3      	bcc.n	800da3c <__mcmp+0x18>
 800da54:	e7fa      	b.n	800da4c <__mcmp+0x28>
 800da56:	f04f 32ff 	mov.w	r2, #4294967295
 800da5a:	e7f7      	b.n	800da4c <__mcmp+0x28>

0800da5c <__mdiff>:
 800da5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da60:	460c      	mov	r4, r1
 800da62:	4606      	mov	r6, r0
 800da64:	4611      	mov	r1, r2
 800da66:	4620      	mov	r0, r4
 800da68:	4690      	mov	r8, r2
 800da6a:	f7ff ffdb 	bl	800da24 <__mcmp>
 800da6e:	1e05      	subs	r5, r0, #0
 800da70:	d110      	bne.n	800da94 <__mdiff+0x38>
 800da72:	4629      	mov	r1, r5
 800da74:	4630      	mov	r0, r6
 800da76:	f7ff fd09 	bl	800d48c <_Balloc>
 800da7a:	b930      	cbnz	r0, 800da8a <__mdiff+0x2e>
 800da7c:	4b3a      	ldr	r3, [pc, #232]	; (800db68 <__mdiff+0x10c>)
 800da7e:	4602      	mov	r2, r0
 800da80:	f240 2132 	movw	r1, #562	; 0x232
 800da84:	4839      	ldr	r0, [pc, #228]	; (800db6c <__mdiff+0x110>)
 800da86:	f000 febf 	bl	800e808 <__assert_func>
 800da8a:	2301      	movs	r3, #1
 800da8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da94:	bfa4      	itt	ge
 800da96:	4643      	movge	r3, r8
 800da98:	46a0      	movge	r8, r4
 800da9a:	4630      	mov	r0, r6
 800da9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800daa0:	bfa6      	itte	ge
 800daa2:	461c      	movge	r4, r3
 800daa4:	2500      	movge	r5, #0
 800daa6:	2501      	movlt	r5, #1
 800daa8:	f7ff fcf0 	bl	800d48c <_Balloc>
 800daac:	b920      	cbnz	r0, 800dab8 <__mdiff+0x5c>
 800daae:	4b2e      	ldr	r3, [pc, #184]	; (800db68 <__mdiff+0x10c>)
 800dab0:	4602      	mov	r2, r0
 800dab2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dab6:	e7e5      	b.n	800da84 <__mdiff+0x28>
 800dab8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dabc:	6926      	ldr	r6, [r4, #16]
 800dabe:	60c5      	str	r5, [r0, #12]
 800dac0:	f104 0914 	add.w	r9, r4, #20
 800dac4:	f108 0514 	add.w	r5, r8, #20
 800dac8:	f100 0e14 	add.w	lr, r0, #20
 800dacc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dad0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dad4:	f108 0210 	add.w	r2, r8, #16
 800dad8:	46f2      	mov	sl, lr
 800dada:	2100      	movs	r1, #0
 800dadc:	f859 3b04 	ldr.w	r3, [r9], #4
 800dae0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dae4:	fa1f f883 	uxth.w	r8, r3
 800dae8:	fa11 f18b 	uxtah	r1, r1, fp
 800daec:	0c1b      	lsrs	r3, r3, #16
 800daee:	eba1 0808 	sub.w	r8, r1, r8
 800daf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800daf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dafa:	fa1f f888 	uxth.w	r8, r8
 800dafe:	1419      	asrs	r1, r3, #16
 800db00:	454e      	cmp	r6, r9
 800db02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db06:	f84a 3b04 	str.w	r3, [sl], #4
 800db0a:	d8e7      	bhi.n	800dadc <__mdiff+0x80>
 800db0c:	1b33      	subs	r3, r6, r4
 800db0e:	3b15      	subs	r3, #21
 800db10:	f023 0303 	bic.w	r3, r3, #3
 800db14:	3304      	adds	r3, #4
 800db16:	3415      	adds	r4, #21
 800db18:	42a6      	cmp	r6, r4
 800db1a:	bf38      	it	cc
 800db1c:	2304      	movcc	r3, #4
 800db1e:	441d      	add	r5, r3
 800db20:	4473      	add	r3, lr
 800db22:	469e      	mov	lr, r3
 800db24:	462e      	mov	r6, r5
 800db26:	4566      	cmp	r6, ip
 800db28:	d30e      	bcc.n	800db48 <__mdiff+0xec>
 800db2a:	f10c 0203 	add.w	r2, ip, #3
 800db2e:	1b52      	subs	r2, r2, r5
 800db30:	f022 0203 	bic.w	r2, r2, #3
 800db34:	3d03      	subs	r5, #3
 800db36:	45ac      	cmp	ip, r5
 800db38:	bf38      	it	cc
 800db3a:	2200      	movcc	r2, #0
 800db3c:	441a      	add	r2, r3
 800db3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800db42:	b17b      	cbz	r3, 800db64 <__mdiff+0x108>
 800db44:	6107      	str	r7, [r0, #16]
 800db46:	e7a3      	b.n	800da90 <__mdiff+0x34>
 800db48:	f856 8b04 	ldr.w	r8, [r6], #4
 800db4c:	fa11 f288 	uxtah	r2, r1, r8
 800db50:	1414      	asrs	r4, r2, #16
 800db52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800db56:	b292      	uxth	r2, r2
 800db58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800db5c:	f84e 2b04 	str.w	r2, [lr], #4
 800db60:	1421      	asrs	r1, r4, #16
 800db62:	e7e0      	b.n	800db26 <__mdiff+0xca>
 800db64:	3f01      	subs	r7, #1
 800db66:	e7ea      	b.n	800db3e <__mdiff+0xe2>
 800db68:	08011a08 	.word	0x08011a08
 800db6c:	08011af8 	.word	0x08011af8

0800db70 <__ulp>:
 800db70:	b082      	sub	sp, #8
 800db72:	ed8d 0b00 	vstr	d0, [sp]
 800db76:	9b01      	ldr	r3, [sp, #4]
 800db78:	4912      	ldr	r1, [pc, #72]	; (800dbc4 <__ulp+0x54>)
 800db7a:	4019      	ands	r1, r3
 800db7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800db80:	2900      	cmp	r1, #0
 800db82:	dd05      	ble.n	800db90 <__ulp+0x20>
 800db84:	2200      	movs	r2, #0
 800db86:	460b      	mov	r3, r1
 800db88:	ec43 2b10 	vmov	d0, r2, r3
 800db8c:	b002      	add	sp, #8
 800db8e:	4770      	bx	lr
 800db90:	4249      	negs	r1, r1
 800db92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800db96:	ea4f 5021 	mov.w	r0, r1, asr #20
 800db9a:	f04f 0200 	mov.w	r2, #0
 800db9e:	f04f 0300 	mov.w	r3, #0
 800dba2:	da04      	bge.n	800dbae <__ulp+0x3e>
 800dba4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dba8:	fa41 f300 	asr.w	r3, r1, r0
 800dbac:	e7ec      	b.n	800db88 <__ulp+0x18>
 800dbae:	f1a0 0114 	sub.w	r1, r0, #20
 800dbb2:	291e      	cmp	r1, #30
 800dbb4:	bfda      	itte	le
 800dbb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dbba:	fa20 f101 	lsrle.w	r1, r0, r1
 800dbbe:	2101      	movgt	r1, #1
 800dbc0:	460a      	mov	r2, r1
 800dbc2:	e7e1      	b.n	800db88 <__ulp+0x18>
 800dbc4:	7ff00000 	.word	0x7ff00000

0800dbc8 <__b2d>:
 800dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbca:	6905      	ldr	r5, [r0, #16]
 800dbcc:	f100 0714 	add.w	r7, r0, #20
 800dbd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dbd4:	1f2e      	subs	r6, r5, #4
 800dbd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f7ff fd48 	bl	800d670 <__hi0bits>
 800dbe0:	f1c0 0320 	rsb	r3, r0, #32
 800dbe4:	280a      	cmp	r0, #10
 800dbe6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dc64 <__b2d+0x9c>
 800dbea:	600b      	str	r3, [r1, #0]
 800dbec:	dc14      	bgt.n	800dc18 <__b2d+0x50>
 800dbee:	f1c0 0e0b 	rsb	lr, r0, #11
 800dbf2:	fa24 f10e 	lsr.w	r1, r4, lr
 800dbf6:	42b7      	cmp	r7, r6
 800dbf8:	ea41 030c 	orr.w	r3, r1, ip
 800dbfc:	bf34      	ite	cc
 800dbfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dc02:	2100      	movcs	r1, #0
 800dc04:	3015      	adds	r0, #21
 800dc06:	fa04 f000 	lsl.w	r0, r4, r0
 800dc0a:	fa21 f10e 	lsr.w	r1, r1, lr
 800dc0e:	ea40 0201 	orr.w	r2, r0, r1
 800dc12:	ec43 2b10 	vmov	d0, r2, r3
 800dc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc18:	42b7      	cmp	r7, r6
 800dc1a:	bf3a      	itte	cc
 800dc1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dc20:	f1a5 0608 	subcc.w	r6, r5, #8
 800dc24:	2100      	movcs	r1, #0
 800dc26:	380b      	subs	r0, #11
 800dc28:	d017      	beq.n	800dc5a <__b2d+0x92>
 800dc2a:	f1c0 0c20 	rsb	ip, r0, #32
 800dc2e:	fa04 f500 	lsl.w	r5, r4, r0
 800dc32:	42be      	cmp	r6, r7
 800dc34:	fa21 f40c 	lsr.w	r4, r1, ip
 800dc38:	ea45 0504 	orr.w	r5, r5, r4
 800dc3c:	bf8c      	ite	hi
 800dc3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dc42:	2400      	movls	r4, #0
 800dc44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dc48:	fa01 f000 	lsl.w	r0, r1, r0
 800dc4c:	fa24 f40c 	lsr.w	r4, r4, ip
 800dc50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc54:	ea40 0204 	orr.w	r2, r0, r4
 800dc58:	e7db      	b.n	800dc12 <__b2d+0x4a>
 800dc5a:	ea44 030c 	orr.w	r3, r4, ip
 800dc5e:	460a      	mov	r2, r1
 800dc60:	e7d7      	b.n	800dc12 <__b2d+0x4a>
 800dc62:	bf00      	nop
 800dc64:	3ff00000 	.word	0x3ff00000

0800dc68 <__d2b>:
 800dc68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc6c:	4689      	mov	r9, r1
 800dc6e:	2101      	movs	r1, #1
 800dc70:	ec57 6b10 	vmov	r6, r7, d0
 800dc74:	4690      	mov	r8, r2
 800dc76:	f7ff fc09 	bl	800d48c <_Balloc>
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	b930      	cbnz	r0, 800dc8c <__d2b+0x24>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	4b25      	ldr	r3, [pc, #148]	; (800dd18 <__d2b+0xb0>)
 800dc82:	4826      	ldr	r0, [pc, #152]	; (800dd1c <__d2b+0xb4>)
 800dc84:	f240 310a 	movw	r1, #778	; 0x30a
 800dc88:	f000 fdbe 	bl	800e808 <__assert_func>
 800dc8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dc90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc94:	bb35      	cbnz	r5, 800dce4 <__d2b+0x7c>
 800dc96:	2e00      	cmp	r6, #0
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	d028      	beq.n	800dcee <__d2b+0x86>
 800dc9c:	4668      	mov	r0, sp
 800dc9e:	9600      	str	r6, [sp, #0]
 800dca0:	f7ff fd06 	bl	800d6b0 <__lo0bits>
 800dca4:	9900      	ldr	r1, [sp, #0]
 800dca6:	b300      	cbz	r0, 800dcea <__d2b+0x82>
 800dca8:	9a01      	ldr	r2, [sp, #4]
 800dcaa:	f1c0 0320 	rsb	r3, r0, #32
 800dcae:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb2:	430b      	orrs	r3, r1
 800dcb4:	40c2      	lsrs	r2, r0
 800dcb6:	6163      	str	r3, [r4, #20]
 800dcb8:	9201      	str	r2, [sp, #4]
 800dcba:	9b01      	ldr	r3, [sp, #4]
 800dcbc:	61a3      	str	r3, [r4, #24]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	bf14      	ite	ne
 800dcc2:	2202      	movne	r2, #2
 800dcc4:	2201      	moveq	r2, #1
 800dcc6:	6122      	str	r2, [r4, #16]
 800dcc8:	b1d5      	cbz	r5, 800dd00 <__d2b+0x98>
 800dcca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dcce:	4405      	add	r5, r0
 800dcd0:	f8c9 5000 	str.w	r5, [r9]
 800dcd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dcd8:	f8c8 0000 	str.w	r0, [r8]
 800dcdc:	4620      	mov	r0, r4
 800dcde:	b003      	add	sp, #12
 800dce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dce8:	e7d5      	b.n	800dc96 <__d2b+0x2e>
 800dcea:	6161      	str	r1, [r4, #20]
 800dcec:	e7e5      	b.n	800dcba <__d2b+0x52>
 800dcee:	a801      	add	r0, sp, #4
 800dcf0:	f7ff fcde 	bl	800d6b0 <__lo0bits>
 800dcf4:	9b01      	ldr	r3, [sp, #4]
 800dcf6:	6163      	str	r3, [r4, #20]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	6122      	str	r2, [r4, #16]
 800dcfc:	3020      	adds	r0, #32
 800dcfe:	e7e3      	b.n	800dcc8 <__d2b+0x60>
 800dd00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd08:	f8c9 0000 	str.w	r0, [r9]
 800dd0c:	6918      	ldr	r0, [r3, #16]
 800dd0e:	f7ff fcaf 	bl	800d670 <__hi0bits>
 800dd12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd16:	e7df      	b.n	800dcd8 <__d2b+0x70>
 800dd18:	08011a08 	.word	0x08011a08
 800dd1c:	08011af8 	.word	0x08011af8

0800dd20 <__ratio>:
 800dd20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	4688      	mov	r8, r1
 800dd26:	4669      	mov	r1, sp
 800dd28:	4681      	mov	r9, r0
 800dd2a:	f7ff ff4d 	bl	800dbc8 <__b2d>
 800dd2e:	a901      	add	r1, sp, #4
 800dd30:	4640      	mov	r0, r8
 800dd32:	ec55 4b10 	vmov	r4, r5, d0
 800dd36:	f7ff ff47 	bl	800dbc8 <__b2d>
 800dd3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dd42:	eba3 0c02 	sub.w	ip, r3, r2
 800dd46:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dd4a:	1a9b      	subs	r3, r3, r2
 800dd4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dd50:	ec51 0b10 	vmov	r0, r1, d0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	bfd6      	itet	le
 800dd58:	460a      	movle	r2, r1
 800dd5a:	462a      	movgt	r2, r5
 800dd5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd60:	468b      	mov	fp, r1
 800dd62:	462f      	mov	r7, r5
 800dd64:	bfd4      	ite	le
 800dd66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dd6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd6e:	4620      	mov	r0, r4
 800dd70:	ee10 2a10 	vmov	r2, s0
 800dd74:	465b      	mov	r3, fp
 800dd76:	4639      	mov	r1, r7
 800dd78:	f7f2 fd90 	bl	800089c <__aeabi_ddiv>
 800dd7c:	ec41 0b10 	vmov	d0, r0, r1
 800dd80:	b003      	add	sp, #12
 800dd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd86 <__copybits>:
 800dd86:	3901      	subs	r1, #1
 800dd88:	b570      	push	{r4, r5, r6, lr}
 800dd8a:	1149      	asrs	r1, r1, #5
 800dd8c:	6914      	ldr	r4, [r2, #16]
 800dd8e:	3101      	adds	r1, #1
 800dd90:	f102 0314 	add.w	r3, r2, #20
 800dd94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd9c:	1f05      	subs	r5, r0, #4
 800dd9e:	42a3      	cmp	r3, r4
 800dda0:	d30c      	bcc.n	800ddbc <__copybits+0x36>
 800dda2:	1aa3      	subs	r3, r4, r2
 800dda4:	3b11      	subs	r3, #17
 800dda6:	f023 0303 	bic.w	r3, r3, #3
 800ddaa:	3211      	adds	r2, #17
 800ddac:	42a2      	cmp	r2, r4
 800ddae:	bf88      	it	hi
 800ddb0:	2300      	movhi	r3, #0
 800ddb2:	4418      	add	r0, r3
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4288      	cmp	r0, r1
 800ddb8:	d305      	bcc.n	800ddc6 <__copybits+0x40>
 800ddba:	bd70      	pop	{r4, r5, r6, pc}
 800ddbc:	f853 6b04 	ldr.w	r6, [r3], #4
 800ddc0:	f845 6f04 	str.w	r6, [r5, #4]!
 800ddc4:	e7eb      	b.n	800dd9e <__copybits+0x18>
 800ddc6:	f840 3b04 	str.w	r3, [r0], #4
 800ddca:	e7f4      	b.n	800ddb6 <__copybits+0x30>

0800ddcc <__any_on>:
 800ddcc:	f100 0214 	add.w	r2, r0, #20
 800ddd0:	6900      	ldr	r0, [r0, #16]
 800ddd2:	114b      	asrs	r3, r1, #5
 800ddd4:	4298      	cmp	r0, r3
 800ddd6:	b510      	push	{r4, lr}
 800ddd8:	db11      	blt.n	800ddfe <__any_on+0x32>
 800ddda:	dd0a      	ble.n	800ddf2 <__any_on+0x26>
 800dddc:	f011 011f 	ands.w	r1, r1, #31
 800dde0:	d007      	beq.n	800ddf2 <__any_on+0x26>
 800dde2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dde6:	fa24 f001 	lsr.w	r0, r4, r1
 800ddea:	fa00 f101 	lsl.w	r1, r0, r1
 800ddee:	428c      	cmp	r4, r1
 800ddf0:	d10b      	bne.n	800de0a <__any_on+0x3e>
 800ddf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d803      	bhi.n	800de02 <__any_on+0x36>
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	bd10      	pop	{r4, pc}
 800ddfe:	4603      	mov	r3, r0
 800de00:	e7f7      	b.n	800ddf2 <__any_on+0x26>
 800de02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800de06:	2900      	cmp	r1, #0
 800de08:	d0f5      	beq.n	800ddf6 <__any_on+0x2a>
 800de0a:	2001      	movs	r0, #1
 800de0c:	e7f6      	b.n	800ddfc <__any_on+0x30>

0800de0e <_calloc_r>:
 800de0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de10:	fba1 2402 	umull	r2, r4, r1, r2
 800de14:	b94c      	cbnz	r4, 800de2a <_calloc_r+0x1c>
 800de16:	4611      	mov	r1, r2
 800de18:	9201      	str	r2, [sp, #4]
 800de1a:	f000 f87b 	bl	800df14 <_malloc_r>
 800de1e:	9a01      	ldr	r2, [sp, #4]
 800de20:	4605      	mov	r5, r0
 800de22:	b930      	cbnz	r0, 800de32 <_calloc_r+0x24>
 800de24:	4628      	mov	r0, r5
 800de26:	b003      	add	sp, #12
 800de28:	bd30      	pop	{r4, r5, pc}
 800de2a:	220c      	movs	r2, #12
 800de2c:	6002      	str	r2, [r0, #0]
 800de2e:	2500      	movs	r5, #0
 800de30:	e7f8      	b.n	800de24 <_calloc_r+0x16>
 800de32:	4621      	mov	r1, r4
 800de34:	f7fc faae 	bl	800a394 <memset>
 800de38:	e7f4      	b.n	800de24 <_calloc_r+0x16>
	...

0800de3c <_free_r>:
 800de3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de3e:	2900      	cmp	r1, #0
 800de40:	d044      	beq.n	800decc <_free_r+0x90>
 800de42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de46:	9001      	str	r0, [sp, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f1a1 0404 	sub.w	r4, r1, #4
 800de4e:	bfb8      	it	lt
 800de50:	18e4      	addlt	r4, r4, r3
 800de52:	f000 fe6d 	bl	800eb30 <__malloc_lock>
 800de56:	4a1e      	ldr	r2, [pc, #120]	; (800ded0 <_free_r+0x94>)
 800de58:	9801      	ldr	r0, [sp, #4]
 800de5a:	6813      	ldr	r3, [r2, #0]
 800de5c:	b933      	cbnz	r3, 800de6c <_free_r+0x30>
 800de5e:	6063      	str	r3, [r4, #4]
 800de60:	6014      	str	r4, [r2, #0]
 800de62:	b003      	add	sp, #12
 800de64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de68:	f000 be68 	b.w	800eb3c <__malloc_unlock>
 800de6c:	42a3      	cmp	r3, r4
 800de6e:	d908      	bls.n	800de82 <_free_r+0x46>
 800de70:	6825      	ldr	r5, [r4, #0]
 800de72:	1961      	adds	r1, r4, r5
 800de74:	428b      	cmp	r3, r1
 800de76:	bf01      	itttt	eq
 800de78:	6819      	ldreq	r1, [r3, #0]
 800de7a:	685b      	ldreq	r3, [r3, #4]
 800de7c:	1949      	addeq	r1, r1, r5
 800de7e:	6021      	streq	r1, [r4, #0]
 800de80:	e7ed      	b.n	800de5e <_free_r+0x22>
 800de82:	461a      	mov	r2, r3
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	b10b      	cbz	r3, 800de8c <_free_r+0x50>
 800de88:	42a3      	cmp	r3, r4
 800de8a:	d9fa      	bls.n	800de82 <_free_r+0x46>
 800de8c:	6811      	ldr	r1, [r2, #0]
 800de8e:	1855      	adds	r5, r2, r1
 800de90:	42a5      	cmp	r5, r4
 800de92:	d10b      	bne.n	800deac <_free_r+0x70>
 800de94:	6824      	ldr	r4, [r4, #0]
 800de96:	4421      	add	r1, r4
 800de98:	1854      	adds	r4, r2, r1
 800de9a:	42a3      	cmp	r3, r4
 800de9c:	6011      	str	r1, [r2, #0]
 800de9e:	d1e0      	bne.n	800de62 <_free_r+0x26>
 800dea0:	681c      	ldr	r4, [r3, #0]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	6053      	str	r3, [r2, #4]
 800dea6:	4421      	add	r1, r4
 800dea8:	6011      	str	r1, [r2, #0]
 800deaa:	e7da      	b.n	800de62 <_free_r+0x26>
 800deac:	d902      	bls.n	800deb4 <_free_r+0x78>
 800deae:	230c      	movs	r3, #12
 800deb0:	6003      	str	r3, [r0, #0]
 800deb2:	e7d6      	b.n	800de62 <_free_r+0x26>
 800deb4:	6825      	ldr	r5, [r4, #0]
 800deb6:	1961      	adds	r1, r4, r5
 800deb8:	428b      	cmp	r3, r1
 800deba:	bf04      	itt	eq
 800debc:	6819      	ldreq	r1, [r3, #0]
 800debe:	685b      	ldreq	r3, [r3, #4]
 800dec0:	6063      	str	r3, [r4, #4]
 800dec2:	bf04      	itt	eq
 800dec4:	1949      	addeq	r1, r1, r5
 800dec6:	6021      	streq	r1, [r4, #0]
 800dec8:	6054      	str	r4, [r2, #4]
 800deca:	e7ca      	b.n	800de62 <_free_r+0x26>
 800decc:	b003      	add	sp, #12
 800dece:	bd30      	pop	{r4, r5, pc}
 800ded0:	20000588 	.word	0x20000588

0800ded4 <sbrk_aligned>:
 800ded4:	b570      	push	{r4, r5, r6, lr}
 800ded6:	4e0e      	ldr	r6, [pc, #56]	; (800df10 <sbrk_aligned+0x3c>)
 800ded8:	460c      	mov	r4, r1
 800deda:	6831      	ldr	r1, [r6, #0]
 800dedc:	4605      	mov	r5, r0
 800dede:	b911      	cbnz	r1, 800dee6 <sbrk_aligned+0x12>
 800dee0:	f000 fb4a 	bl	800e578 <_sbrk_r>
 800dee4:	6030      	str	r0, [r6, #0]
 800dee6:	4621      	mov	r1, r4
 800dee8:	4628      	mov	r0, r5
 800deea:	f000 fb45 	bl	800e578 <_sbrk_r>
 800deee:	1c43      	adds	r3, r0, #1
 800def0:	d00a      	beq.n	800df08 <sbrk_aligned+0x34>
 800def2:	1cc4      	adds	r4, r0, #3
 800def4:	f024 0403 	bic.w	r4, r4, #3
 800def8:	42a0      	cmp	r0, r4
 800defa:	d007      	beq.n	800df0c <sbrk_aligned+0x38>
 800defc:	1a21      	subs	r1, r4, r0
 800defe:	4628      	mov	r0, r5
 800df00:	f000 fb3a 	bl	800e578 <_sbrk_r>
 800df04:	3001      	adds	r0, #1
 800df06:	d101      	bne.n	800df0c <sbrk_aligned+0x38>
 800df08:	f04f 34ff 	mov.w	r4, #4294967295
 800df0c:	4620      	mov	r0, r4
 800df0e:	bd70      	pop	{r4, r5, r6, pc}
 800df10:	2000058c 	.word	0x2000058c

0800df14 <_malloc_r>:
 800df14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df18:	1ccd      	adds	r5, r1, #3
 800df1a:	f025 0503 	bic.w	r5, r5, #3
 800df1e:	3508      	adds	r5, #8
 800df20:	2d0c      	cmp	r5, #12
 800df22:	bf38      	it	cc
 800df24:	250c      	movcc	r5, #12
 800df26:	2d00      	cmp	r5, #0
 800df28:	4607      	mov	r7, r0
 800df2a:	db01      	blt.n	800df30 <_malloc_r+0x1c>
 800df2c:	42a9      	cmp	r1, r5
 800df2e:	d905      	bls.n	800df3c <_malloc_r+0x28>
 800df30:	230c      	movs	r3, #12
 800df32:	603b      	str	r3, [r7, #0]
 800df34:	2600      	movs	r6, #0
 800df36:	4630      	mov	r0, r6
 800df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df3c:	4e2e      	ldr	r6, [pc, #184]	; (800dff8 <_malloc_r+0xe4>)
 800df3e:	f000 fdf7 	bl	800eb30 <__malloc_lock>
 800df42:	6833      	ldr	r3, [r6, #0]
 800df44:	461c      	mov	r4, r3
 800df46:	bb34      	cbnz	r4, 800df96 <_malloc_r+0x82>
 800df48:	4629      	mov	r1, r5
 800df4a:	4638      	mov	r0, r7
 800df4c:	f7ff ffc2 	bl	800ded4 <sbrk_aligned>
 800df50:	1c43      	adds	r3, r0, #1
 800df52:	4604      	mov	r4, r0
 800df54:	d14d      	bne.n	800dff2 <_malloc_r+0xde>
 800df56:	6834      	ldr	r4, [r6, #0]
 800df58:	4626      	mov	r6, r4
 800df5a:	2e00      	cmp	r6, #0
 800df5c:	d140      	bne.n	800dfe0 <_malloc_r+0xcc>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	4631      	mov	r1, r6
 800df62:	4638      	mov	r0, r7
 800df64:	eb04 0803 	add.w	r8, r4, r3
 800df68:	f000 fb06 	bl	800e578 <_sbrk_r>
 800df6c:	4580      	cmp	r8, r0
 800df6e:	d13a      	bne.n	800dfe6 <_malloc_r+0xd2>
 800df70:	6821      	ldr	r1, [r4, #0]
 800df72:	3503      	adds	r5, #3
 800df74:	1a6d      	subs	r5, r5, r1
 800df76:	f025 0503 	bic.w	r5, r5, #3
 800df7a:	3508      	adds	r5, #8
 800df7c:	2d0c      	cmp	r5, #12
 800df7e:	bf38      	it	cc
 800df80:	250c      	movcc	r5, #12
 800df82:	4629      	mov	r1, r5
 800df84:	4638      	mov	r0, r7
 800df86:	f7ff ffa5 	bl	800ded4 <sbrk_aligned>
 800df8a:	3001      	adds	r0, #1
 800df8c:	d02b      	beq.n	800dfe6 <_malloc_r+0xd2>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	442b      	add	r3, r5
 800df92:	6023      	str	r3, [r4, #0]
 800df94:	e00e      	b.n	800dfb4 <_malloc_r+0xa0>
 800df96:	6822      	ldr	r2, [r4, #0]
 800df98:	1b52      	subs	r2, r2, r5
 800df9a:	d41e      	bmi.n	800dfda <_malloc_r+0xc6>
 800df9c:	2a0b      	cmp	r2, #11
 800df9e:	d916      	bls.n	800dfce <_malloc_r+0xba>
 800dfa0:	1961      	adds	r1, r4, r5
 800dfa2:	42a3      	cmp	r3, r4
 800dfa4:	6025      	str	r5, [r4, #0]
 800dfa6:	bf18      	it	ne
 800dfa8:	6059      	strne	r1, [r3, #4]
 800dfaa:	6863      	ldr	r3, [r4, #4]
 800dfac:	bf08      	it	eq
 800dfae:	6031      	streq	r1, [r6, #0]
 800dfb0:	5162      	str	r2, [r4, r5]
 800dfb2:	604b      	str	r3, [r1, #4]
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	f104 060b 	add.w	r6, r4, #11
 800dfba:	f000 fdbf 	bl	800eb3c <__malloc_unlock>
 800dfbe:	f026 0607 	bic.w	r6, r6, #7
 800dfc2:	1d23      	adds	r3, r4, #4
 800dfc4:	1af2      	subs	r2, r6, r3
 800dfc6:	d0b6      	beq.n	800df36 <_malloc_r+0x22>
 800dfc8:	1b9b      	subs	r3, r3, r6
 800dfca:	50a3      	str	r3, [r4, r2]
 800dfcc:	e7b3      	b.n	800df36 <_malloc_r+0x22>
 800dfce:	6862      	ldr	r2, [r4, #4]
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	bf0c      	ite	eq
 800dfd4:	6032      	streq	r2, [r6, #0]
 800dfd6:	605a      	strne	r2, [r3, #4]
 800dfd8:	e7ec      	b.n	800dfb4 <_malloc_r+0xa0>
 800dfda:	4623      	mov	r3, r4
 800dfdc:	6864      	ldr	r4, [r4, #4]
 800dfde:	e7b2      	b.n	800df46 <_malloc_r+0x32>
 800dfe0:	4634      	mov	r4, r6
 800dfe2:	6876      	ldr	r6, [r6, #4]
 800dfe4:	e7b9      	b.n	800df5a <_malloc_r+0x46>
 800dfe6:	230c      	movs	r3, #12
 800dfe8:	603b      	str	r3, [r7, #0]
 800dfea:	4638      	mov	r0, r7
 800dfec:	f000 fda6 	bl	800eb3c <__malloc_unlock>
 800dff0:	e7a1      	b.n	800df36 <_malloc_r+0x22>
 800dff2:	6025      	str	r5, [r4, #0]
 800dff4:	e7de      	b.n	800dfb4 <_malloc_r+0xa0>
 800dff6:	bf00      	nop
 800dff8:	20000588 	.word	0x20000588

0800dffc <__ssputs_r>:
 800dffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e000:	688e      	ldr	r6, [r1, #8]
 800e002:	429e      	cmp	r6, r3
 800e004:	4682      	mov	sl, r0
 800e006:	460c      	mov	r4, r1
 800e008:	4690      	mov	r8, r2
 800e00a:	461f      	mov	r7, r3
 800e00c:	d838      	bhi.n	800e080 <__ssputs_r+0x84>
 800e00e:	898a      	ldrh	r2, [r1, #12]
 800e010:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e014:	d032      	beq.n	800e07c <__ssputs_r+0x80>
 800e016:	6825      	ldr	r5, [r4, #0]
 800e018:	6909      	ldr	r1, [r1, #16]
 800e01a:	eba5 0901 	sub.w	r9, r5, r1
 800e01e:	6965      	ldr	r5, [r4, #20]
 800e020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e028:	3301      	adds	r3, #1
 800e02a:	444b      	add	r3, r9
 800e02c:	106d      	asrs	r5, r5, #1
 800e02e:	429d      	cmp	r5, r3
 800e030:	bf38      	it	cc
 800e032:	461d      	movcc	r5, r3
 800e034:	0553      	lsls	r3, r2, #21
 800e036:	d531      	bpl.n	800e09c <__ssputs_r+0xa0>
 800e038:	4629      	mov	r1, r5
 800e03a:	f7ff ff6b 	bl	800df14 <_malloc_r>
 800e03e:	4606      	mov	r6, r0
 800e040:	b950      	cbnz	r0, 800e058 <__ssputs_r+0x5c>
 800e042:	230c      	movs	r3, #12
 800e044:	f8ca 3000 	str.w	r3, [sl]
 800e048:	89a3      	ldrh	r3, [r4, #12]
 800e04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e04e:	81a3      	strh	r3, [r4, #12]
 800e050:	f04f 30ff 	mov.w	r0, #4294967295
 800e054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e058:	6921      	ldr	r1, [r4, #16]
 800e05a:	464a      	mov	r2, r9
 800e05c:	f7ff fa08 	bl	800d470 <memcpy>
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e06a:	81a3      	strh	r3, [r4, #12]
 800e06c:	6126      	str	r6, [r4, #16]
 800e06e:	6165      	str	r5, [r4, #20]
 800e070:	444e      	add	r6, r9
 800e072:	eba5 0509 	sub.w	r5, r5, r9
 800e076:	6026      	str	r6, [r4, #0]
 800e078:	60a5      	str	r5, [r4, #8]
 800e07a:	463e      	mov	r6, r7
 800e07c:	42be      	cmp	r6, r7
 800e07e:	d900      	bls.n	800e082 <__ssputs_r+0x86>
 800e080:	463e      	mov	r6, r7
 800e082:	6820      	ldr	r0, [r4, #0]
 800e084:	4632      	mov	r2, r6
 800e086:	4641      	mov	r1, r8
 800e088:	f000 fd38 	bl	800eafc <memmove>
 800e08c:	68a3      	ldr	r3, [r4, #8]
 800e08e:	1b9b      	subs	r3, r3, r6
 800e090:	60a3      	str	r3, [r4, #8]
 800e092:	6823      	ldr	r3, [r4, #0]
 800e094:	4433      	add	r3, r6
 800e096:	6023      	str	r3, [r4, #0]
 800e098:	2000      	movs	r0, #0
 800e09a:	e7db      	b.n	800e054 <__ssputs_r+0x58>
 800e09c:	462a      	mov	r2, r5
 800e09e:	f000 fd53 	bl	800eb48 <_realloc_r>
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	d1e1      	bne.n	800e06c <__ssputs_r+0x70>
 800e0a8:	6921      	ldr	r1, [r4, #16]
 800e0aa:	4650      	mov	r0, sl
 800e0ac:	f7ff fec6 	bl	800de3c <_free_r>
 800e0b0:	e7c7      	b.n	800e042 <__ssputs_r+0x46>
	...

0800e0b4 <_svfiprintf_r>:
 800e0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b8:	4698      	mov	r8, r3
 800e0ba:	898b      	ldrh	r3, [r1, #12]
 800e0bc:	061b      	lsls	r3, r3, #24
 800e0be:	b09d      	sub	sp, #116	; 0x74
 800e0c0:	4607      	mov	r7, r0
 800e0c2:	460d      	mov	r5, r1
 800e0c4:	4614      	mov	r4, r2
 800e0c6:	d50e      	bpl.n	800e0e6 <_svfiprintf_r+0x32>
 800e0c8:	690b      	ldr	r3, [r1, #16]
 800e0ca:	b963      	cbnz	r3, 800e0e6 <_svfiprintf_r+0x32>
 800e0cc:	2140      	movs	r1, #64	; 0x40
 800e0ce:	f7ff ff21 	bl	800df14 <_malloc_r>
 800e0d2:	6028      	str	r0, [r5, #0]
 800e0d4:	6128      	str	r0, [r5, #16]
 800e0d6:	b920      	cbnz	r0, 800e0e2 <_svfiprintf_r+0x2e>
 800e0d8:	230c      	movs	r3, #12
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e0:	e0d1      	b.n	800e286 <_svfiprintf_r+0x1d2>
 800e0e2:	2340      	movs	r3, #64	; 0x40
 800e0e4:	616b      	str	r3, [r5, #20]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ea:	2320      	movs	r3, #32
 800e0ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0f4:	2330      	movs	r3, #48	; 0x30
 800e0f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2a0 <_svfiprintf_r+0x1ec>
 800e0fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0fe:	f04f 0901 	mov.w	r9, #1
 800e102:	4623      	mov	r3, r4
 800e104:	469a      	mov	sl, r3
 800e106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e10a:	b10a      	cbz	r2, 800e110 <_svfiprintf_r+0x5c>
 800e10c:	2a25      	cmp	r2, #37	; 0x25
 800e10e:	d1f9      	bne.n	800e104 <_svfiprintf_r+0x50>
 800e110:	ebba 0b04 	subs.w	fp, sl, r4
 800e114:	d00b      	beq.n	800e12e <_svfiprintf_r+0x7a>
 800e116:	465b      	mov	r3, fp
 800e118:	4622      	mov	r2, r4
 800e11a:	4629      	mov	r1, r5
 800e11c:	4638      	mov	r0, r7
 800e11e:	f7ff ff6d 	bl	800dffc <__ssputs_r>
 800e122:	3001      	adds	r0, #1
 800e124:	f000 80aa 	beq.w	800e27c <_svfiprintf_r+0x1c8>
 800e128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e12a:	445a      	add	r2, fp
 800e12c:	9209      	str	r2, [sp, #36]	; 0x24
 800e12e:	f89a 3000 	ldrb.w	r3, [sl]
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 80a2 	beq.w	800e27c <_svfiprintf_r+0x1c8>
 800e138:	2300      	movs	r3, #0
 800e13a:	f04f 32ff 	mov.w	r2, #4294967295
 800e13e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e142:	f10a 0a01 	add.w	sl, sl, #1
 800e146:	9304      	str	r3, [sp, #16]
 800e148:	9307      	str	r3, [sp, #28]
 800e14a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e14e:	931a      	str	r3, [sp, #104]	; 0x68
 800e150:	4654      	mov	r4, sl
 800e152:	2205      	movs	r2, #5
 800e154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e158:	4851      	ldr	r0, [pc, #324]	; (800e2a0 <_svfiprintf_r+0x1ec>)
 800e15a:	f7f2 f869 	bl	8000230 <memchr>
 800e15e:	9a04      	ldr	r2, [sp, #16]
 800e160:	b9d8      	cbnz	r0, 800e19a <_svfiprintf_r+0xe6>
 800e162:	06d0      	lsls	r0, r2, #27
 800e164:	bf44      	itt	mi
 800e166:	2320      	movmi	r3, #32
 800e168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e16c:	0711      	lsls	r1, r2, #28
 800e16e:	bf44      	itt	mi
 800e170:	232b      	movmi	r3, #43	; 0x2b
 800e172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e176:	f89a 3000 	ldrb.w	r3, [sl]
 800e17a:	2b2a      	cmp	r3, #42	; 0x2a
 800e17c:	d015      	beq.n	800e1aa <_svfiprintf_r+0xf6>
 800e17e:	9a07      	ldr	r2, [sp, #28]
 800e180:	4654      	mov	r4, sl
 800e182:	2000      	movs	r0, #0
 800e184:	f04f 0c0a 	mov.w	ip, #10
 800e188:	4621      	mov	r1, r4
 800e18a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e18e:	3b30      	subs	r3, #48	; 0x30
 800e190:	2b09      	cmp	r3, #9
 800e192:	d94e      	bls.n	800e232 <_svfiprintf_r+0x17e>
 800e194:	b1b0      	cbz	r0, 800e1c4 <_svfiprintf_r+0x110>
 800e196:	9207      	str	r2, [sp, #28]
 800e198:	e014      	b.n	800e1c4 <_svfiprintf_r+0x110>
 800e19a:	eba0 0308 	sub.w	r3, r0, r8
 800e19e:	fa09 f303 	lsl.w	r3, r9, r3
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	9304      	str	r3, [sp, #16]
 800e1a6:	46a2      	mov	sl, r4
 800e1a8:	e7d2      	b.n	800e150 <_svfiprintf_r+0x9c>
 800e1aa:	9b03      	ldr	r3, [sp, #12]
 800e1ac:	1d19      	adds	r1, r3, #4
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	9103      	str	r1, [sp, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	bfbb      	ittet	lt
 800e1b6:	425b      	neglt	r3, r3
 800e1b8:	f042 0202 	orrlt.w	r2, r2, #2
 800e1bc:	9307      	strge	r3, [sp, #28]
 800e1be:	9307      	strlt	r3, [sp, #28]
 800e1c0:	bfb8      	it	lt
 800e1c2:	9204      	strlt	r2, [sp, #16]
 800e1c4:	7823      	ldrb	r3, [r4, #0]
 800e1c6:	2b2e      	cmp	r3, #46	; 0x2e
 800e1c8:	d10c      	bne.n	800e1e4 <_svfiprintf_r+0x130>
 800e1ca:	7863      	ldrb	r3, [r4, #1]
 800e1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e1ce:	d135      	bne.n	800e23c <_svfiprintf_r+0x188>
 800e1d0:	9b03      	ldr	r3, [sp, #12]
 800e1d2:	1d1a      	adds	r2, r3, #4
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	9203      	str	r2, [sp, #12]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	bfb8      	it	lt
 800e1dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1e0:	3402      	adds	r4, #2
 800e1e2:	9305      	str	r3, [sp, #20]
 800e1e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2b0 <_svfiprintf_r+0x1fc>
 800e1e8:	7821      	ldrb	r1, [r4, #0]
 800e1ea:	2203      	movs	r2, #3
 800e1ec:	4650      	mov	r0, sl
 800e1ee:	f7f2 f81f 	bl	8000230 <memchr>
 800e1f2:	b140      	cbz	r0, 800e206 <_svfiprintf_r+0x152>
 800e1f4:	2340      	movs	r3, #64	; 0x40
 800e1f6:	eba0 000a 	sub.w	r0, r0, sl
 800e1fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e1fe:	9b04      	ldr	r3, [sp, #16]
 800e200:	4303      	orrs	r3, r0
 800e202:	3401      	adds	r4, #1
 800e204:	9304      	str	r3, [sp, #16]
 800e206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e20a:	4826      	ldr	r0, [pc, #152]	; (800e2a4 <_svfiprintf_r+0x1f0>)
 800e20c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e210:	2206      	movs	r2, #6
 800e212:	f7f2 f80d 	bl	8000230 <memchr>
 800e216:	2800      	cmp	r0, #0
 800e218:	d038      	beq.n	800e28c <_svfiprintf_r+0x1d8>
 800e21a:	4b23      	ldr	r3, [pc, #140]	; (800e2a8 <_svfiprintf_r+0x1f4>)
 800e21c:	bb1b      	cbnz	r3, 800e266 <_svfiprintf_r+0x1b2>
 800e21e:	9b03      	ldr	r3, [sp, #12]
 800e220:	3307      	adds	r3, #7
 800e222:	f023 0307 	bic.w	r3, r3, #7
 800e226:	3308      	adds	r3, #8
 800e228:	9303      	str	r3, [sp, #12]
 800e22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e22c:	4433      	add	r3, r6
 800e22e:	9309      	str	r3, [sp, #36]	; 0x24
 800e230:	e767      	b.n	800e102 <_svfiprintf_r+0x4e>
 800e232:	fb0c 3202 	mla	r2, ip, r2, r3
 800e236:	460c      	mov	r4, r1
 800e238:	2001      	movs	r0, #1
 800e23a:	e7a5      	b.n	800e188 <_svfiprintf_r+0xd4>
 800e23c:	2300      	movs	r3, #0
 800e23e:	3401      	adds	r4, #1
 800e240:	9305      	str	r3, [sp, #20]
 800e242:	4619      	mov	r1, r3
 800e244:	f04f 0c0a 	mov.w	ip, #10
 800e248:	4620      	mov	r0, r4
 800e24a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e24e:	3a30      	subs	r2, #48	; 0x30
 800e250:	2a09      	cmp	r2, #9
 800e252:	d903      	bls.n	800e25c <_svfiprintf_r+0x1a8>
 800e254:	2b00      	cmp	r3, #0
 800e256:	d0c5      	beq.n	800e1e4 <_svfiprintf_r+0x130>
 800e258:	9105      	str	r1, [sp, #20]
 800e25a:	e7c3      	b.n	800e1e4 <_svfiprintf_r+0x130>
 800e25c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e260:	4604      	mov	r4, r0
 800e262:	2301      	movs	r3, #1
 800e264:	e7f0      	b.n	800e248 <_svfiprintf_r+0x194>
 800e266:	ab03      	add	r3, sp, #12
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	462a      	mov	r2, r5
 800e26c:	4b0f      	ldr	r3, [pc, #60]	; (800e2ac <_svfiprintf_r+0x1f8>)
 800e26e:	a904      	add	r1, sp, #16
 800e270:	4638      	mov	r0, r7
 800e272:	f7fc f937 	bl	800a4e4 <_printf_float>
 800e276:	1c42      	adds	r2, r0, #1
 800e278:	4606      	mov	r6, r0
 800e27a:	d1d6      	bne.n	800e22a <_svfiprintf_r+0x176>
 800e27c:	89ab      	ldrh	r3, [r5, #12]
 800e27e:	065b      	lsls	r3, r3, #25
 800e280:	f53f af2c 	bmi.w	800e0dc <_svfiprintf_r+0x28>
 800e284:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e286:	b01d      	add	sp, #116	; 0x74
 800e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28c:	ab03      	add	r3, sp, #12
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	462a      	mov	r2, r5
 800e292:	4b06      	ldr	r3, [pc, #24]	; (800e2ac <_svfiprintf_r+0x1f8>)
 800e294:	a904      	add	r1, sp, #16
 800e296:	4638      	mov	r0, r7
 800e298:	f7fc fbc8 	bl	800aa2c <_printf_i>
 800e29c:	e7eb      	b.n	800e276 <_svfiprintf_r+0x1c2>
 800e29e:	bf00      	nop
 800e2a0:	08011c54 	.word	0x08011c54
 800e2a4:	08011c5e 	.word	0x08011c5e
 800e2a8:	0800a4e5 	.word	0x0800a4e5
 800e2ac:	0800dffd 	.word	0x0800dffd
 800e2b0:	08011c5a 	.word	0x08011c5a

0800e2b4 <__sfputc_r>:
 800e2b4:	6893      	ldr	r3, [r2, #8]
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	b410      	push	{r4}
 800e2bc:	6093      	str	r3, [r2, #8]
 800e2be:	da08      	bge.n	800e2d2 <__sfputc_r+0x1e>
 800e2c0:	6994      	ldr	r4, [r2, #24]
 800e2c2:	42a3      	cmp	r3, r4
 800e2c4:	db01      	blt.n	800e2ca <__sfputc_r+0x16>
 800e2c6:	290a      	cmp	r1, #10
 800e2c8:	d103      	bne.n	800e2d2 <__sfputc_r+0x1e>
 800e2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2ce:	f000 b9bb 	b.w	800e648 <__swbuf_r>
 800e2d2:	6813      	ldr	r3, [r2, #0]
 800e2d4:	1c58      	adds	r0, r3, #1
 800e2d6:	6010      	str	r0, [r2, #0]
 800e2d8:	7019      	strb	r1, [r3, #0]
 800e2da:	4608      	mov	r0, r1
 800e2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <__sfputs_r>:
 800e2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e4:	4606      	mov	r6, r0
 800e2e6:	460f      	mov	r7, r1
 800e2e8:	4614      	mov	r4, r2
 800e2ea:	18d5      	adds	r5, r2, r3
 800e2ec:	42ac      	cmp	r4, r5
 800e2ee:	d101      	bne.n	800e2f4 <__sfputs_r+0x12>
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	e007      	b.n	800e304 <__sfputs_r+0x22>
 800e2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2f8:	463a      	mov	r2, r7
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	f7ff ffda 	bl	800e2b4 <__sfputc_r>
 800e300:	1c43      	adds	r3, r0, #1
 800e302:	d1f3      	bne.n	800e2ec <__sfputs_r+0xa>
 800e304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e308 <_vfiprintf_r>:
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	460d      	mov	r5, r1
 800e30e:	b09d      	sub	sp, #116	; 0x74
 800e310:	4614      	mov	r4, r2
 800e312:	4698      	mov	r8, r3
 800e314:	4606      	mov	r6, r0
 800e316:	b118      	cbz	r0, 800e320 <_vfiprintf_r+0x18>
 800e318:	6983      	ldr	r3, [r0, #24]
 800e31a:	b90b      	cbnz	r3, 800e320 <_vfiprintf_r+0x18>
 800e31c:	f7fe fc7a 	bl	800cc14 <__sinit>
 800e320:	4b89      	ldr	r3, [pc, #548]	; (800e548 <_vfiprintf_r+0x240>)
 800e322:	429d      	cmp	r5, r3
 800e324:	d11b      	bne.n	800e35e <_vfiprintf_r+0x56>
 800e326:	6875      	ldr	r5, [r6, #4]
 800e328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e32a:	07d9      	lsls	r1, r3, #31
 800e32c:	d405      	bmi.n	800e33a <_vfiprintf_r+0x32>
 800e32e:	89ab      	ldrh	r3, [r5, #12]
 800e330:	059a      	lsls	r2, r3, #22
 800e332:	d402      	bmi.n	800e33a <_vfiprintf_r+0x32>
 800e334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e336:	f7ff f87e 	bl	800d436 <__retarget_lock_acquire_recursive>
 800e33a:	89ab      	ldrh	r3, [r5, #12]
 800e33c:	071b      	lsls	r3, r3, #28
 800e33e:	d501      	bpl.n	800e344 <_vfiprintf_r+0x3c>
 800e340:	692b      	ldr	r3, [r5, #16]
 800e342:	b9eb      	cbnz	r3, 800e380 <_vfiprintf_r+0x78>
 800e344:	4629      	mov	r1, r5
 800e346:	4630      	mov	r0, r6
 800e348:	f000 f9f0 	bl	800e72c <__swsetup_r>
 800e34c:	b1c0      	cbz	r0, 800e380 <_vfiprintf_r+0x78>
 800e34e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e350:	07dc      	lsls	r4, r3, #31
 800e352:	d50e      	bpl.n	800e372 <_vfiprintf_r+0x6a>
 800e354:	f04f 30ff 	mov.w	r0, #4294967295
 800e358:	b01d      	add	sp, #116	; 0x74
 800e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35e:	4b7b      	ldr	r3, [pc, #492]	; (800e54c <_vfiprintf_r+0x244>)
 800e360:	429d      	cmp	r5, r3
 800e362:	d101      	bne.n	800e368 <_vfiprintf_r+0x60>
 800e364:	68b5      	ldr	r5, [r6, #8]
 800e366:	e7df      	b.n	800e328 <_vfiprintf_r+0x20>
 800e368:	4b79      	ldr	r3, [pc, #484]	; (800e550 <_vfiprintf_r+0x248>)
 800e36a:	429d      	cmp	r5, r3
 800e36c:	bf08      	it	eq
 800e36e:	68f5      	ldreq	r5, [r6, #12]
 800e370:	e7da      	b.n	800e328 <_vfiprintf_r+0x20>
 800e372:	89ab      	ldrh	r3, [r5, #12]
 800e374:	0598      	lsls	r0, r3, #22
 800e376:	d4ed      	bmi.n	800e354 <_vfiprintf_r+0x4c>
 800e378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e37a:	f7ff f85d 	bl	800d438 <__retarget_lock_release_recursive>
 800e37e:	e7e9      	b.n	800e354 <_vfiprintf_r+0x4c>
 800e380:	2300      	movs	r3, #0
 800e382:	9309      	str	r3, [sp, #36]	; 0x24
 800e384:	2320      	movs	r3, #32
 800e386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e38a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e38e:	2330      	movs	r3, #48	; 0x30
 800e390:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e554 <_vfiprintf_r+0x24c>
 800e394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e398:	f04f 0901 	mov.w	r9, #1
 800e39c:	4623      	mov	r3, r4
 800e39e:	469a      	mov	sl, r3
 800e3a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3a4:	b10a      	cbz	r2, 800e3aa <_vfiprintf_r+0xa2>
 800e3a6:	2a25      	cmp	r2, #37	; 0x25
 800e3a8:	d1f9      	bne.n	800e39e <_vfiprintf_r+0x96>
 800e3aa:	ebba 0b04 	subs.w	fp, sl, r4
 800e3ae:	d00b      	beq.n	800e3c8 <_vfiprintf_r+0xc0>
 800e3b0:	465b      	mov	r3, fp
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	f7ff ff93 	bl	800e2e2 <__sfputs_r>
 800e3bc:	3001      	adds	r0, #1
 800e3be:	f000 80aa 	beq.w	800e516 <_vfiprintf_r+0x20e>
 800e3c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3c4:	445a      	add	r2, fp
 800e3c6:	9209      	str	r2, [sp, #36]	; 0x24
 800e3c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 80a2 	beq.w	800e516 <_vfiprintf_r+0x20e>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3dc:	f10a 0a01 	add.w	sl, sl, #1
 800e3e0:	9304      	str	r3, [sp, #16]
 800e3e2:	9307      	str	r3, [sp, #28]
 800e3e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3e8:	931a      	str	r3, [sp, #104]	; 0x68
 800e3ea:	4654      	mov	r4, sl
 800e3ec:	2205      	movs	r2, #5
 800e3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3f2:	4858      	ldr	r0, [pc, #352]	; (800e554 <_vfiprintf_r+0x24c>)
 800e3f4:	f7f1 ff1c 	bl	8000230 <memchr>
 800e3f8:	9a04      	ldr	r2, [sp, #16]
 800e3fa:	b9d8      	cbnz	r0, 800e434 <_vfiprintf_r+0x12c>
 800e3fc:	06d1      	lsls	r1, r2, #27
 800e3fe:	bf44      	itt	mi
 800e400:	2320      	movmi	r3, #32
 800e402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e406:	0713      	lsls	r3, r2, #28
 800e408:	bf44      	itt	mi
 800e40a:	232b      	movmi	r3, #43	; 0x2b
 800e40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e410:	f89a 3000 	ldrb.w	r3, [sl]
 800e414:	2b2a      	cmp	r3, #42	; 0x2a
 800e416:	d015      	beq.n	800e444 <_vfiprintf_r+0x13c>
 800e418:	9a07      	ldr	r2, [sp, #28]
 800e41a:	4654      	mov	r4, sl
 800e41c:	2000      	movs	r0, #0
 800e41e:	f04f 0c0a 	mov.w	ip, #10
 800e422:	4621      	mov	r1, r4
 800e424:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e428:	3b30      	subs	r3, #48	; 0x30
 800e42a:	2b09      	cmp	r3, #9
 800e42c:	d94e      	bls.n	800e4cc <_vfiprintf_r+0x1c4>
 800e42e:	b1b0      	cbz	r0, 800e45e <_vfiprintf_r+0x156>
 800e430:	9207      	str	r2, [sp, #28]
 800e432:	e014      	b.n	800e45e <_vfiprintf_r+0x156>
 800e434:	eba0 0308 	sub.w	r3, r0, r8
 800e438:	fa09 f303 	lsl.w	r3, r9, r3
 800e43c:	4313      	orrs	r3, r2
 800e43e:	9304      	str	r3, [sp, #16]
 800e440:	46a2      	mov	sl, r4
 800e442:	e7d2      	b.n	800e3ea <_vfiprintf_r+0xe2>
 800e444:	9b03      	ldr	r3, [sp, #12]
 800e446:	1d19      	adds	r1, r3, #4
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	9103      	str	r1, [sp, #12]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	bfbb      	ittet	lt
 800e450:	425b      	neglt	r3, r3
 800e452:	f042 0202 	orrlt.w	r2, r2, #2
 800e456:	9307      	strge	r3, [sp, #28]
 800e458:	9307      	strlt	r3, [sp, #28]
 800e45a:	bfb8      	it	lt
 800e45c:	9204      	strlt	r2, [sp, #16]
 800e45e:	7823      	ldrb	r3, [r4, #0]
 800e460:	2b2e      	cmp	r3, #46	; 0x2e
 800e462:	d10c      	bne.n	800e47e <_vfiprintf_r+0x176>
 800e464:	7863      	ldrb	r3, [r4, #1]
 800e466:	2b2a      	cmp	r3, #42	; 0x2a
 800e468:	d135      	bne.n	800e4d6 <_vfiprintf_r+0x1ce>
 800e46a:	9b03      	ldr	r3, [sp, #12]
 800e46c:	1d1a      	adds	r2, r3, #4
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	9203      	str	r2, [sp, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	bfb8      	it	lt
 800e476:	f04f 33ff 	movlt.w	r3, #4294967295
 800e47a:	3402      	adds	r4, #2
 800e47c:	9305      	str	r3, [sp, #20]
 800e47e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e564 <_vfiprintf_r+0x25c>
 800e482:	7821      	ldrb	r1, [r4, #0]
 800e484:	2203      	movs	r2, #3
 800e486:	4650      	mov	r0, sl
 800e488:	f7f1 fed2 	bl	8000230 <memchr>
 800e48c:	b140      	cbz	r0, 800e4a0 <_vfiprintf_r+0x198>
 800e48e:	2340      	movs	r3, #64	; 0x40
 800e490:	eba0 000a 	sub.w	r0, r0, sl
 800e494:	fa03 f000 	lsl.w	r0, r3, r0
 800e498:	9b04      	ldr	r3, [sp, #16]
 800e49a:	4303      	orrs	r3, r0
 800e49c:	3401      	adds	r4, #1
 800e49e:	9304      	str	r3, [sp, #16]
 800e4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a4:	482c      	ldr	r0, [pc, #176]	; (800e558 <_vfiprintf_r+0x250>)
 800e4a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4aa:	2206      	movs	r2, #6
 800e4ac:	f7f1 fec0 	bl	8000230 <memchr>
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d03f      	beq.n	800e534 <_vfiprintf_r+0x22c>
 800e4b4:	4b29      	ldr	r3, [pc, #164]	; (800e55c <_vfiprintf_r+0x254>)
 800e4b6:	bb1b      	cbnz	r3, 800e500 <_vfiprintf_r+0x1f8>
 800e4b8:	9b03      	ldr	r3, [sp, #12]
 800e4ba:	3307      	adds	r3, #7
 800e4bc:	f023 0307 	bic.w	r3, r3, #7
 800e4c0:	3308      	adds	r3, #8
 800e4c2:	9303      	str	r3, [sp, #12]
 800e4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4c6:	443b      	add	r3, r7
 800e4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ca:	e767      	b.n	800e39c <_vfiprintf_r+0x94>
 800e4cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	e7a5      	b.n	800e422 <_vfiprintf_r+0x11a>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	3401      	adds	r4, #1
 800e4da:	9305      	str	r3, [sp, #20]
 800e4dc:	4619      	mov	r1, r3
 800e4de:	f04f 0c0a 	mov.w	ip, #10
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4e8:	3a30      	subs	r2, #48	; 0x30
 800e4ea:	2a09      	cmp	r2, #9
 800e4ec:	d903      	bls.n	800e4f6 <_vfiprintf_r+0x1ee>
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d0c5      	beq.n	800e47e <_vfiprintf_r+0x176>
 800e4f2:	9105      	str	r1, [sp, #20]
 800e4f4:	e7c3      	b.n	800e47e <_vfiprintf_r+0x176>
 800e4f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e7f0      	b.n	800e4e2 <_vfiprintf_r+0x1da>
 800e500:	ab03      	add	r3, sp, #12
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	462a      	mov	r2, r5
 800e506:	4b16      	ldr	r3, [pc, #88]	; (800e560 <_vfiprintf_r+0x258>)
 800e508:	a904      	add	r1, sp, #16
 800e50a:	4630      	mov	r0, r6
 800e50c:	f7fb ffea 	bl	800a4e4 <_printf_float>
 800e510:	4607      	mov	r7, r0
 800e512:	1c78      	adds	r0, r7, #1
 800e514:	d1d6      	bne.n	800e4c4 <_vfiprintf_r+0x1bc>
 800e516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e518:	07d9      	lsls	r1, r3, #31
 800e51a:	d405      	bmi.n	800e528 <_vfiprintf_r+0x220>
 800e51c:	89ab      	ldrh	r3, [r5, #12]
 800e51e:	059a      	lsls	r2, r3, #22
 800e520:	d402      	bmi.n	800e528 <_vfiprintf_r+0x220>
 800e522:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e524:	f7fe ff88 	bl	800d438 <__retarget_lock_release_recursive>
 800e528:	89ab      	ldrh	r3, [r5, #12]
 800e52a:	065b      	lsls	r3, r3, #25
 800e52c:	f53f af12 	bmi.w	800e354 <_vfiprintf_r+0x4c>
 800e530:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e532:	e711      	b.n	800e358 <_vfiprintf_r+0x50>
 800e534:	ab03      	add	r3, sp, #12
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	462a      	mov	r2, r5
 800e53a:	4b09      	ldr	r3, [pc, #36]	; (800e560 <_vfiprintf_r+0x258>)
 800e53c:	a904      	add	r1, sp, #16
 800e53e:	4630      	mov	r0, r6
 800e540:	f7fc fa74 	bl	800aa2c <_printf_i>
 800e544:	e7e4      	b.n	800e510 <_vfiprintf_r+0x208>
 800e546:	bf00      	nop
 800e548:	08011a3c 	.word	0x08011a3c
 800e54c:	08011a5c 	.word	0x08011a5c
 800e550:	08011a1c 	.word	0x08011a1c
 800e554:	08011c54 	.word	0x08011c54
 800e558:	08011c5e 	.word	0x08011c5e
 800e55c:	0800a4e5 	.word	0x0800a4e5
 800e560:	0800e2e3 	.word	0x0800e2e3
 800e564:	08011c5a 	.word	0x08011c5a

0800e568 <nan>:
 800e568:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e570 <nan+0x8>
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	00000000 	.word	0x00000000
 800e574:	7ff80000 	.word	0x7ff80000

0800e578 <_sbrk_r>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	4d06      	ldr	r5, [pc, #24]	; (800e594 <_sbrk_r+0x1c>)
 800e57c:	2300      	movs	r3, #0
 800e57e:	4604      	mov	r4, r0
 800e580:	4608      	mov	r0, r1
 800e582:	602b      	str	r3, [r5, #0]
 800e584:	f7f8 fa66 	bl	8006a54 <_sbrk>
 800e588:	1c43      	adds	r3, r0, #1
 800e58a:	d102      	bne.n	800e592 <_sbrk_r+0x1a>
 800e58c:	682b      	ldr	r3, [r5, #0]
 800e58e:	b103      	cbz	r3, 800e592 <_sbrk_r+0x1a>
 800e590:	6023      	str	r3, [r4, #0]
 800e592:	bd38      	pop	{r3, r4, r5, pc}
 800e594:	20000590 	.word	0x20000590

0800e598 <__sread>:
 800e598:	b510      	push	{r4, lr}
 800e59a:	460c      	mov	r4, r1
 800e59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a0:	f000 fb02 	bl	800eba8 <_read_r>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	bfab      	itete	ge
 800e5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5aa:	89a3      	ldrhlt	r3, [r4, #12]
 800e5ac:	181b      	addge	r3, r3, r0
 800e5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5b2:	bfac      	ite	ge
 800e5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5b6:	81a3      	strhlt	r3, [r4, #12]
 800e5b8:	bd10      	pop	{r4, pc}

0800e5ba <__swrite>:
 800e5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5be:	461f      	mov	r7, r3
 800e5c0:	898b      	ldrh	r3, [r1, #12]
 800e5c2:	05db      	lsls	r3, r3, #23
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	460c      	mov	r4, r1
 800e5c8:	4616      	mov	r6, r2
 800e5ca:	d505      	bpl.n	800e5d8 <__swrite+0x1e>
 800e5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5d0:	2302      	movs	r3, #2
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f000 fa1a 	bl	800ea0c <_lseek_r>
 800e5d8:	89a3      	ldrh	r3, [r4, #12]
 800e5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5e2:	81a3      	strh	r3, [r4, #12]
 800e5e4:	4632      	mov	r2, r6
 800e5e6:	463b      	mov	r3, r7
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ee:	f000 b88b 	b.w	800e708 <_write_r>

0800e5f2 <__sseek>:
 800e5f2:	b510      	push	{r4, lr}
 800e5f4:	460c      	mov	r4, r1
 800e5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5fa:	f000 fa07 	bl	800ea0c <_lseek_r>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	bf15      	itete	ne
 800e604:	6560      	strne	r0, [r4, #84]	; 0x54
 800e606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e60e:	81a3      	strheq	r3, [r4, #12]
 800e610:	bf18      	it	ne
 800e612:	81a3      	strhne	r3, [r4, #12]
 800e614:	bd10      	pop	{r4, pc}

0800e616 <__sclose>:
 800e616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e61a:	f000 b913 	b.w	800e844 <_close_r>

0800e61e <strncmp>:
 800e61e:	b510      	push	{r4, lr}
 800e620:	b17a      	cbz	r2, 800e642 <strncmp+0x24>
 800e622:	4603      	mov	r3, r0
 800e624:	3901      	subs	r1, #1
 800e626:	1884      	adds	r4, r0, r2
 800e628:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e62c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e630:	4290      	cmp	r0, r2
 800e632:	d101      	bne.n	800e638 <strncmp+0x1a>
 800e634:	42a3      	cmp	r3, r4
 800e636:	d101      	bne.n	800e63c <strncmp+0x1e>
 800e638:	1a80      	subs	r0, r0, r2
 800e63a:	bd10      	pop	{r4, pc}
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d1f3      	bne.n	800e628 <strncmp+0xa>
 800e640:	e7fa      	b.n	800e638 <strncmp+0x1a>
 800e642:	4610      	mov	r0, r2
 800e644:	e7f9      	b.n	800e63a <strncmp+0x1c>
	...

0800e648 <__swbuf_r>:
 800e648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64a:	460e      	mov	r6, r1
 800e64c:	4614      	mov	r4, r2
 800e64e:	4605      	mov	r5, r0
 800e650:	b118      	cbz	r0, 800e65a <__swbuf_r+0x12>
 800e652:	6983      	ldr	r3, [r0, #24]
 800e654:	b90b      	cbnz	r3, 800e65a <__swbuf_r+0x12>
 800e656:	f7fe fadd 	bl	800cc14 <__sinit>
 800e65a:	4b21      	ldr	r3, [pc, #132]	; (800e6e0 <__swbuf_r+0x98>)
 800e65c:	429c      	cmp	r4, r3
 800e65e:	d12b      	bne.n	800e6b8 <__swbuf_r+0x70>
 800e660:	686c      	ldr	r4, [r5, #4]
 800e662:	69a3      	ldr	r3, [r4, #24]
 800e664:	60a3      	str	r3, [r4, #8]
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	071a      	lsls	r2, r3, #28
 800e66a:	d52f      	bpl.n	800e6cc <__swbuf_r+0x84>
 800e66c:	6923      	ldr	r3, [r4, #16]
 800e66e:	b36b      	cbz	r3, 800e6cc <__swbuf_r+0x84>
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	6820      	ldr	r0, [r4, #0]
 800e674:	1ac0      	subs	r0, r0, r3
 800e676:	6963      	ldr	r3, [r4, #20]
 800e678:	b2f6      	uxtb	r6, r6
 800e67a:	4283      	cmp	r3, r0
 800e67c:	4637      	mov	r7, r6
 800e67e:	dc04      	bgt.n	800e68a <__swbuf_r+0x42>
 800e680:	4621      	mov	r1, r4
 800e682:	4628      	mov	r0, r5
 800e684:	f000 f974 	bl	800e970 <_fflush_r>
 800e688:	bb30      	cbnz	r0, 800e6d8 <__swbuf_r+0x90>
 800e68a:	68a3      	ldr	r3, [r4, #8]
 800e68c:	3b01      	subs	r3, #1
 800e68e:	60a3      	str	r3, [r4, #8]
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	6022      	str	r2, [r4, #0]
 800e696:	701e      	strb	r6, [r3, #0]
 800e698:	6963      	ldr	r3, [r4, #20]
 800e69a:	3001      	adds	r0, #1
 800e69c:	4283      	cmp	r3, r0
 800e69e:	d004      	beq.n	800e6aa <__swbuf_r+0x62>
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	07db      	lsls	r3, r3, #31
 800e6a4:	d506      	bpl.n	800e6b4 <__swbuf_r+0x6c>
 800e6a6:	2e0a      	cmp	r6, #10
 800e6a8:	d104      	bne.n	800e6b4 <__swbuf_r+0x6c>
 800e6aa:	4621      	mov	r1, r4
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	f000 f95f 	bl	800e970 <_fflush_r>
 800e6b2:	b988      	cbnz	r0, 800e6d8 <__swbuf_r+0x90>
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6b8:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <__swbuf_r+0x9c>)
 800e6ba:	429c      	cmp	r4, r3
 800e6bc:	d101      	bne.n	800e6c2 <__swbuf_r+0x7a>
 800e6be:	68ac      	ldr	r4, [r5, #8]
 800e6c0:	e7cf      	b.n	800e662 <__swbuf_r+0x1a>
 800e6c2:	4b09      	ldr	r3, [pc, #36]	; (800e6e8 <__swbuf_r+0xa0>)
 800e6c4:	429c      	cmp	r4, r3
 800e6c6:	bf08      	it	eq
 800e6c8:	68ec      	ldreq	r4, [r5, #12]
 800e6ca:	e7ca      	b.n	800e662 <__swbuf_r+0x1a>
 800e6cc:	4621      	mov	r1, r4
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	f000 f82c 	bl	800e72c <__swsetup_r>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d0cb      	beq.n	800e670 <__swbuf_r+0x28>
 800e6d8:	f04f 37ff 	mov.w	r7, #4294967295
 800e6dc:	e7ea      	b.n	800e6b4 <__swbuf_r+0x6c>
 800e6de:	bf00      	nop
 800e6e0:	08011a3c 	.word	0x08011a3c
 800e6e4:	08011a5c 	.word	0x08011a5c
 800e6e8:	08011a1c 	.word	0x08011a1c

0800e6ec <__ascii_wctomb>:
 800e6ec:	b149      	cbz	r1, 800e702 <__ascii_wctomb+0x16>
 800e6ee:	2aff      	cmp	r2, #255	; 0xff
 800e6f0:	bf85      	ittet	hi
 800e6f2:	238a      	movhi	r3, #138	; 0x8a
 800e6f4:	6003      	strhi	r3, [r0, #0]
 800e6f6:	700a      	strbls	r2, [r1, #0]
 800e6f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e6fc:	bf98      	it	ls
 800e6fe:	2001      	movls	r0, #1
 800e700:	4770      	bx	lr
 800e702:	4608      	mov	r0, r1
 800e704:	4770      	bx	lr
	...

0800e708 <_write_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	4d07      	ldr	r5, [pc, #28]	; (800e728 <_write_r+0x20>)
 800e70c:	4604      	mov	r4, r0
 800e70e:	4608      	mov	r0, r1
 800e710:	4611      	mov	r1, r2
 800e712:	2200      	movs	r2, #0
 800e714:	602a      	str	r2, [r5, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	f7f5 fdfe 	bl	8004318 <_write>
 800e71c:	1c43      	adds	r3, r0, #1
 800e71e:	d102      	bne.n	800e726 <_write_r+0x1e>
 800e720:	682b      	ldr	r3, [r5, #0]
 800e722:	b103      	cbz	r3, 800e726 <_write_r+0x1e>
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	20000590 	.word	0x20000590

0800e72c <__swsetup_r>:
 800e72c:	4b32      	ldr	r3, [pc, #200]	; (800e7f8 <__swsetup_r+0xcc>)
 800e72e:	b570      	push	{r4, r5, r6, lr}
 800e730:	681d      	ldr	r5, [r3, #0]
 800e732:	4606      	mov	r6, r0
 800e734:	460c      	mov	r4, r1
 800e736:	b125      	cbz	r5, 800e742 <__swsetup_r+0x16>
 800e738:	69ab      	ldr	r3, [r5, #24]
 800e73a:	b913      	cbnz	r3, 800e742 <__swsetup_r+0x16>
 800e73c:	4628      	mov	r0, r5
 800e73e:	f7fe fa69 	bl	800cc14 <__sinit>
 800e742:	4b2e      	ldr	r3, [pc, #184]	; (800e7fc <__swsetup_r+0xd0>)
 800e744:	429c      	cmp	r4, r3
 800e746:	d10f      	bne.n	800e768 <__swsetup_r+0x3c>
 800e748:	686c      	ldr	r4, [r5, #4]
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e750:	0719      	lsls	r1, r3, #28
 800e752:	d42c      	bmi.n	800e7ae <__swsetup_r+0x82>
 800e754:	06dd      	lsls	r5, r3, #27
 800e756:	d411      	bmi.n	800e77c <__swsetup_r+0x50>
 800e758:	2309      	movs	r3, #9
 800e75a:	6033      	str	r3, [r6, #0]
 800e75c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e760:	81a3      	strh	r3, [r4, #12]
 800e762:	f04f 30ff 	mov.w	r0, #4294967295
 800e766:	e03e      	b.n	800e7e6 <__swsetup_r+0xba>
 800e768:	4b25      	ldr	r3, [pc, #148]	; (800e800 <__swsetup_r+0xd4>)
 800e76a:	429c      	cmp	r4, r3
 800e76c:	d101      	bne.n	800e772 <__swsetup_r+0x46>
 800e76e:	68ac      	ldr	r4, [r5, #8]
 800e770:	e7eb      	b.n	800e74a <__swsetup_r+0x1e>
 800e772:	4b24      	ldr	r3, [pc, #144]	; (800e804 <__swsetup_r+0xd8>)
 800e774:	429c      	cmp	r4, r3
 800e776:	bf08      	it	eq
 800e778:	68ec      	ldreq	r4, [r5, #12]
 800e77a:	e7e6      	b.n	800e74a <__swsetup_r+0x1e>
 800e77c:	0758      	lsls	r0, r3, #29
 800e77e:	d512      	bpl.n	800e7a6 <__swsetup_r+0x7a>
 800e780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e782:	b141      	cbz	r1, 800e796 <__swsetup_r+0x6a>
 800e784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e788:	4299      	cmp	r1, r3
 800e78a:	d002      	beq.n	800e792 <__swsetup_r+0x66>
 800e78c:	4630      	mov	r0, r6
 800e78e:	f7ff fb55 	bl	800de3c <_free_r>
 800e792:	2300      	movs	r3, #0
 800e794:	6363      	str	r3, [r4, #52]	; 0x34
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e79c:	81a3      	strh	r3, [r4, #12]
 800e79e:	2300      	movs	r3, #0
 800e7a0:	6063      	str	r3, [r4, #4]
 800e7a2:	6923      	ldr	r3, [r4, #16]
 800e7a4:	6023      	str	r3, [r4, #0]
 800e7a6:	89a3      	ldrh	r3, [r4, #12]
 800e7a8:	f043 0308 	orr.w	r3, r3, #8
 800e7ac:	81a3      	strh	r3, [r4, #12]
 800e7ae:	6923      	ldr	r3, [r4, #16]
 800e7b0:	b94b      	cbnz	r3, 800e7c6 <__swsetup_r+0x9a>
 800e7b2:	89a3      	ldrh	r3, [r4, #12]
 800e7b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7bc:	d003      	beq.n	800e7c6 <__swsetup_r+0x9a>
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	f000 f95b 	bl	800ea7c <__smakebuf_r>
 800e7c6:	89a0      	ldrh	r0, [r4, #12]
 800e7c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7cc:	f010 0301 	ands.w	r3, r0, #1
 800e7d0:	d00a      	beq.n	800e7e8 <__swsetup_r+0xbc>
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	60a3      	str	r3, [r4, #8]
 800e7d6:	6963      	ldr	r3, [r4, #20]
 800e7d8:	425b      	negs	r3, r3
 800e7da:	61a3      	str	r3, [r4, #24]
 800e7dc:	6923      	ldr	r3, [r4, #16]
 800e7de:	b943      	cbnz	r3, 800e7f2 <__swsetup_r+0xc6>
 800e7e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e7e4:	d1ba      	bne.n	800e75c <__swsetup_r+0x30>
 800e7e6:	bd70      	pop	{r4, r5, r6, pc}
 800e7e8:	0781      	lsls	r1, r0, #30
 800e7ea:	bf58      	it	pl
 800e7ec:	6963      	ldrpl	r3, [r4, #20]
 800e7ee:	60a3      	str	r3, [r4, #8]
 800e7f0:	e7f4      	b.n	800e7dc <__swsetup_r+0xb0>
 800e7f2:	2000      	movs	r0, #0
 800e7f4:	e7f7      	b.n	800e7e6 <__swsetup_r+0xba>
 800e7f6:	bf00      	nop
 800e7f8:	20000030 	.word	0x20000030
 800e7fc:	08011a3c 	.word	0x08011a3c
 800e800:	08011a5c 	.word	0x08011a5c
 800e804:	08011a1c 	.word	0x08011a1c

0800e808 <__assert_func>:
 800e808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e80a:	4614      	mov	r4, r2
 800e80c:	461a      	mov	r2, r3
 800e80e:	4b09      	ldr	r3, [pc, #36]	; (800e834 <__assert_func+0x2c>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4605      	mov	r5, r0
 800e814:	68d8      	ldr	r0, [r3, #12]
 800e816:	b14c      	cbz	r4, 800e82c <__assert_func+0x24>
 800e818:	4b07      	ldr	r3, [pc, #28]	; (800e838 <__assert_func+0x30>)
 800e81a:	9100      	str	r1, [sp, #0]
 800e81c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e820:	4906      	ldr	r1, [pc, #24]	; (800e83c <__assert_func+0x34>)
 800e822:	462b      	mov	r3, r5
 800e824:	f000 f8e0 	bl	800e9e8 <fiprintf>
 800e828:	f000 f9d0 	bl	800ebcc <abort>
 800e82c:	4b04      	ldr	r3, [pc, #16]	; (800e840 <__assert_func+0x38>)
 800e82e:	461c      	mov	r4, r3
 800e830:	e7f3      	b.n	800e81a <__assert_func+0x12>
 800e832:	bf00      	nop
 800e834:	20000030 	.word	0x20000030
 800e838:	08011c65 	.word	0x08011c65
 800e83c:	08011c72 	.word	0x08011c72
 800e840:	08011ca0 	.word	0x08011ca0

0800e844 <_close_r>:
 800e844:	b538      	push	{r3, r4, r5, lr}
 800e846:	4d06      	ldr	r5, [pc, #24]	; (800e860 <_close_r+0x1c>)
 800e848:	2300      	movs	r3, #0
 800e84a:	4604      	mov	r4, r0
 800e84c:	4608      	mov	r0, r1
 800e84e:	602b      	str	r3, [r5, #0]
 800e850:	f7f8 f8cb 	bl	80069ea <_close>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d102      	bne.n	800e85e <_close_r+0x1a>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	b103      	cbz	r3, 800e85e <_close_r+0x1a>
 800e85c:	6023      	str	r3, [r4, #0]
 800e85e:	bd38      	pop	{r3, r4, r5, pc}
 800e860:	20000590 	.word	0x20000590

0800e864 <__sflush_r>:
 800e864:	898a      	ldrh	r2, [r1, #12]
 800e866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e86a:	4605      	mov	r5, r0
 800e86c:	0710      	lsls	r0, r2, #28
 800e86e:	460c      	mov	r4, r1
 800e870:	d458      	bmi.n	800e924 <__sflush_r+0xc0>
 800e872:	684b      	ldr	r3, [r1, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	dc05      	bgt.n	800e884 <__sflush_r+0x20>
 800e878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	dc02      	bgt.n	800e884 <__sflush_r+0x20>
 800e87e:	2000      	movs	r0, #0
 800e880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e886:	2e00      	cmp	r6, #0
 800e888:	d0f9      	beq.n	800e87e <__sflush_r+0x1a>
 800e88a:	2300      	movs	r3, #0
 800e88c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e890:	682f      	ldr	r7, [r5, #0]
 800e892:	602b      	str	r3, [r5, #0]
 800e894:	d032      	beq.n	800e8fc <__sflush_r+0x98>
 800e896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	075a      	lsls	r2, r3, #29
 800e89c:	d505      	bpl.n	800e8aa <__sflush_r+0x46>
 800e89e:	6863      	ldr	r3, [r4, #4]
 800e8a0:	1ac0      	subs	r0, r0, r3
 800e8a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8a4:	b10b      	cbz	r3, 800e8aa <__sflush_r+0x46>
 800e8a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8a8:	1ac0      	subs	r0, r0, r3
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8b0:	6a21      	ldr	r1, [r4, #32]
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	47b0      	blx	r6
 800e8b6:	1c43      	adds	r3, r0, #1
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	d106      	bne.n	800e8ca <__sflush_r+0x66>
 800e8bc:	6829      	ldr	r1, [r5, #0]
 800e8be:	291d      	cmp	r1, #29
 800e8c0:	d82c      	bhi.n	800e91c <__sflush_r+0xb8>
 800e8c2:	4a2a      	ldr	r2, [pc, #168]	; (800e96c <__sflush_r+0x108>)
 800e8c4:	40ca      	lsrs	r2, r1
 800e8c6:	07d6      	lsls	r6, r2, #31
 800e8c8:	d528      	bpl.n	800e91c <__sflush_r+0xb8>
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	6062      	str	r2, [r4, #4]
 800e8ce:	04d9      	lsls	r1, r3, #19
 800e8d0:	6922      	ldr	r2, [r4, #16]
 800e8d2:	6022      	str	r2, [r4, #0]
 800e8d4:	d504      	bpl.n	800e8e0 <__sflush_r+0x7c>
 800e8d6:	1c42      	adds	r2, r0, #1
 800e8d8:	d101      	bne.n	800e8de <__sflush_r+0x7a>
 800e8da:	682b      	ldr	r3, [r5, #0]
 800e8dc:	b903      	cbnz	r3, 800e8e0 <__sflush_r+0x7c>
 800e8de:	6560      	str	r0, [r4, #84]	; 0x54
 800e8e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8e2:	602f      	str	r7, [r5, #0]
 800e8e4:	2900      	cmp	r1, #0
 800e8e6:	d0ca      	beq.n	800e87e <__sflush_r+0x1a>
 800e8e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8ec:	4299      	cmp	r1, r3
 800e8ee:	d002      	beq.n	800e8f6 <__sflush_r+0x92>
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	f7ff faa3 	bl	800de3c <_free_r>
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	6360      	str	r0, [r4, #52]	; 0x34
 800e8fa:	e7c1      	b.n	800e880 <__sflush_r+0x1c>
 800e8fc:	6a21      	ldr	r1, [r4, #32]
 800e8fe:	2301      	movs	r3, #1
 800e900:	4628      	mov	r0, r5
 800e902:	47b0      	blx	r6
 800e904:	1c41      	adds	r1, r0, #1
 800e906:	d1c7      	bne.n	800e898 <__sflush_r+0x34>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d0c4      	beq.n	800e898 <__sflush_r+0x34>
 800e90e:	2b1d      	cmp	r3, #29
 800e910:	d001      	beq.n	800e916 <__sflush_r+0xb2>
 800e912:	2b16      	cmp	r3, #22
 800e914:	d101      	bne.n	800e91a <__sflush_r+0xb6>
 800e916:	602f      	str	r7, [r5, #0]
 800e918:	e7b1      	b.n	800e87e <__sflush_r+0x1a>
 800e91a:	89a3      	ldrh	r3, [r4, #12]
 800e91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e920:	81a3      	strh	r3, [r4, #12]
 800e922:	e7ad      	b.n	800e880 <__sflush_r+0x1c>
 800e924:	690f      	ldr	r7, [r1, #16]
 800e926:	2f00      	cmp	r7, #0
 800e928:	d0a9      	beq.n	800e87e <__sflush_r+0x1a>
 800e92a:	0793      	lsls	r3, r2, #30
 800e92c:	680e      	ldr	r6, [r1, #0]
 800e92e:	bf08      	it	eq
 800e930:	694b      	ldreq	r3, [r1, #20]
 800e932:	600f      	str	r7, [r1, #0]
 800e934:	bf18      	it	ne
 800e936:	2300      	movne	r3, #0
 800e938:	eba6 0807 	sub.w	r8, r6, r7
 800e93c:	608b      	str	r3, [r1, #8]
 800e93e:	f1b8 0f00 	cmp.w	r8, #0
 800e942:	dd9c      	ble.n	800e87e <__sflush_r+0x1a>
 800e944:	6a21      	ldr	r1, [r4, #32]
 800e946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e948:	4643      	mov	r3, r8
 800e94a:	463a      	mov	r2, r7
 800e94c:	4628      	mov	r0, r5
 800e94e:	47b0      	blx	r6
 800e950:	2800      	cmp	r0, #0
 800e952:	dc06      	bgt.n	800e962 <__sflush_r+0xfe>
 800e954:	89a3      	ldrh	r3, [r4, #12]
 800e956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e95a:	81a3      	strh	r3, [r4, #12]
 800e95c:	f04f 30ff 	mov.w	r0, #4294967295
 800e960:	e78e      	b.n	800e880 <__sflush_r+0x1c>
 800e962:	4407      	add	r7, r0
 800e964:	eba8 0800 	sub.w	r8, r8, r0
 800e968:	e7e9      	b.n	800e93e <__sflush_r+0xda>
 800e96a:	bf00      	nop
 800e96c:	20400001 	.word	0x20400001

0800e970 <_fflush_r>:
 800e970:	b538      	push	{r3, r4, r5, lr}
 800e972:	690b      	ldr	r3, [r1, #16]
 800e974:	4605      	mov	r5, r0
 800e976:	460c      	mov	r4, r1
 800e978:	b913      	cbnz	r3, 800e980 <_fflush_r+0x10>
 800e97a:	2500      	movs	r5, #0
 800e97c:	4628      	mov	r0, r5
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	b118      	cbz	r0, 800e98a <_fflush_r+0x1a>
 800e982:	6983      	ldr	r3, [r0, #24]
 800e984:	b90b      	cbnz	r3, 800e98a <_fflush_r+0x1a>
 800e986:	f7fe f945 	bl	800cc14 <__sinit>
 800e98a:	4b14      	ldr	r3, [pc, #80]	; (800e9dc <_fflush_r+0x6c>)
 800e98c:	429c      	cmp	r4, r3
 800e98e:	d11b      	bne.n	800e9c8 <_fflush_r+0x58>
 800e990:	686c      	ldr	r4, [r5, #4]
 800e992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d0ef      	beq.n	800e97a <_fflush_r+0xa>
 800e99a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e99c:	07d0      	lsls	r0, r2, #31
 800e99e:	d404      	bmi.n	800e9aa <_fflush_r+0x3a>
 800e9a0:	0599      	lsls	r1, r3, #22
 800e9a2:	d402      	bmi.n	800e9aa <_fflush_r+0x3a>
 800e9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9a6:	f7fe fd46 	bl	800d436 <__retarget_lock_acquire_recursive>
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	f7ff ff59 	bl	800e864 <__sflush_r>
 800e9b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9b4:	07da      	lsls	r2, r3, #31
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	d4e0      	bmi.n	800e97c <_fflush_r+0xc>
 800e9ba:	89a3      	ldrh	r3, [r4, #12]
 800e9bc:	059b      	lsls	r3, r3, #22
 800e9be:	d4dd      	bmi.n	800e97c <_fflush_r+0xc>
 800e9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9c2:	f7fe fd39 	bl	800d438 <__retarget_lock_release_recursive>
 800e9c6:	e7d9      	b.n	800e97c <_fflush_r+0xc>
 800e9c8:	4b05      	ldr	r3, [pc, #20]	; (800e9e0 <_fflush_r+0x70>)
 800e9ca:	429c      	cmp	r4, r3
 800e9cc:	d101      	bne.n	800e9d2 <_fflush_r+0x62>
 800e9ce:	68ac      	ldr	r4, [r5, #8]
 800e9d0:	e7df      	b.n	800e992 <_fflush_r+0x22>
 800e9d2:	4b04      	ldr	r3, [pc, #16]	; (800e9e4 <_fflush_r+0x74>)
 800e9d4:	429c      	cmp	r4, r3
 800e9d6:	bf08      	it	eq
 800e9d8:	68ec      	ldreq	r4, [r5, #12]
 800e9da:	e7da      	b.n	800e992 <_fflush_r+0x22>
 800e9dc:	08011a3c 	.word	0x08011a3c
 800e9e0:	08011a5c 	.word	0x08011a5c
 800e9e4:	08011a1c 	.word	0x08011a1c

0800e9e8 <fiprintf>:
 800e9e8:	b40e      	push	{r1, r2, r3}
 800e9ea:	b503      	push	{r0, r1, lr}
 800e9ec:	4601      	mov	r1, r0
 800e9ee:	ab03      	add	r3, sp, #12
 800e9f0:	4805      	ldr	r0, [pc, #20]	; (800ea08 <fiprintf+0x20>)
 800e9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9f6:	6800      	ldr	r0, [r0, #0]
 800e9f8:	9301      	str	r3, [sp, #4]
 800e9fa:	f7ff fc85 	bl	800e308 <_vfiprintf_r>
 800e9fe:	b002      	add	sp, #8
 800ea00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea04:	b003      	add	sp, #12
 800ea06:	4770      	bx	lr
 800ea08:	20000030 	.word	0x20000030

0800ea0c <_lseek_r>:
 800ea0c:	b538      	push	{r3, r4, r5, lr}
 800ea0e:	4d07      	ldr	r5, [pc, #28]	; (800ea2c <_lseek_r+0x20>)
 800ea10:	4604      	mov	r4, r0
 800ea12:	4608      	mov	r0, r1
 800ea14:	4611      	mov	r1, r2
 800ea16:	2200      	movs	r2, #0
 800ea18:	602a      	str	r2, [r5, #0]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	f7f8 f80c 	bl	8006a38 <_lseek>
 800ea20:	1c43      	adds	r3, r0, #1
 800ea22:	d102      	bne.n	800ea2a <_lseek_r+0x1e>
 800ea24:	682b      	ldr	r3, [r5, #0]
 800ea26:	b103      	cbz	r3, 800ea2a <_lseek_r+0x1e>
 800ea28:	6023      	str	r3, [r4, #0]
 800ea2a:	bd38      	pop	{r3, r4, r5, pc}
 800ea2c:	20000590 	.word	0x20000590

0800ea30 <__swhatbuf_r>:
 800ea30:	b570      	push	{r4, r5, r6, lr}
 800ea32:	460e      	mov	r6, r1
 800ea34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea38:	2900      	cmp	r1, #0
 800ea3a:	b096      	sub	sp, #88	; 0x58
 800ea3c:	4614      	mov	r4, r2
 800ea3e:	461d      	mov	r5, r3
 800ea40:	da08      	bge.n	800ea54 <__swhatbuf_r+0x24>
 800ea42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea46:	2200      	movs	r2, #0
 800ea48:	602a      	str	r2, [r5, #0]
 800ea4a:	061a      	lsls	r2, r3, #24
 800ea4c:	d410      	bmi.n	800ea70 <__swhatbuf_r+0x40>
 800ea4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea52:	e00e      	b.n	800ea72 <__swhatbuf_r+0x42>
 800ea54:	466a      	mov	r2, sp
 800ea56:	f000 f8c1 	bl	800ebdc <_fstat_r>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	dbf1      	blt.n	800ea42 <__swhatbuf_r+0x12>
 800ea5e:	9a01      	ldr	r2, [sp, #4]
 800ea60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea68:	425a      	negs	r2, r3
 800ea6a:	415a      	adcs	r2, r3
 800ea6c:	602a      	str	r2, [r5, #0]
 800ea6e:	e7ee      	b.n	800ea4e <__swhatbuf_r+0x1e>
 800ea70:	2340      	movs	r3, #64	; 0x40
 800ea72:	2000      	movs	r0, #0
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	b016      	add	sp, #88	; 0x58
 800ea78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea7c <__smakebuf_r>:
 800ea7c:	898b      	ldrh	r3, [r1, #12]
 800ea7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea80:	079d      	lsls	r5, r3, #30
 800ea82:	4606      	mov	r6, r0
 800ea84:	460c      	mov	r4, r1
 800ea86:	d507      	bpl.n	800ea98 <__smakebuf_r+0x1c>
 800ea88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea8c:	6023      	str	r3, [r4, #0]
 800ea8e:	6123      	str	r3, [r4, #16]
 800ea90:	2301      	movs	r3, #1
 800ea92:	6163      	str	r3, [r4, #20]
 800ea94:	b002      	add	sp, #8
 800ea96:	bd70      	pop	{r4, r5, r6, pc}
 800ea98:	ab01      	add	r3, sp, #4
 800ea9a:	466a      	mov	r2, sp
 800ea9c:	f7ff ffc8 	bl	800ea30 <__swhatbuf_r>
 800eaa0:	9900      	ldr	r1, [sp, #0]
 800eaa2:	4605      	mov	r5, r0
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	f7ff fa35 	bl	800df14 <_malloc_r>
 800eaaa:	b948      	cbnz	r0, 800eac0 <__smakebuf_r+0x44>
 800eaac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab0:	059a      	lsls	r2, r3, #22
 800eab2:	d4ef      	bmi.n	800ea94 <__smakebuf_r+0x18>
 800eab4:	f023 0303 	bic.w	r3, r3, #3
 800eab8:	f043 0302 	orr.w	r3, r3, #2
 800eabc:	81a3      	strh	r3, [r4, #12]
 800eabe:	e7e3      	b.n	800ea88 <__smakebuf_r+0xc>
 800eac0:	4b0d      	ldr	r3, [pc, #52]	; (800eaf8 <__smakebuf_r+0x7c>)
 800eac2:	62b3      	str	r3, [r6, #40]	; 0x28
 800eac4:	89a3      	ldrh	r3, [r4, #12]
 800eac6:	6020      	str	r0, [r4, #0]
 800eac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eacc:	81a3      	strh	r3, [r4, #12]
 800eace:	9b00      	ldr	r3, [sp, #0]
 800ead0:	6163      	str	r3, [r4, #20]
 800ead2:	9b01      	ldr	r3, [sp, #4]
 800ead4:	6120      	str	r0, [r4, #16]
 800ead6:	b15b      	cbz	r3, 800eaf0 <__smakebuf_r+0x74>
 800ead8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eadc:	4630      	mov	r0, r6
 800eade:	f000 f88f 	bl	800ec00 <_isatty_r>
 800eae2:	b128      	cbz	r0, 800eaf0 <__smakebuf_r+0x74>
 800eae4:	89a3      	ldrh	r3, [r4, #12]
 800eae6:	f023 0303 	bic.w	r3, r3, #3
 800eaea:	f043 0301 	orr.w	r3, r3, #1
 800eaee:	81a3      	strh	r3, [r4, #12]
 800eaf0:	89a0      	ldrh	r0, [r4, #12]
 800eaf2:	4305      	orrs	r5, r0
 800eaf4:	81a5      	strh	r5, [r4, #12]
 800eaf6:	e7cd      	b.n	800ea94 <__smakebuf_r+0x18>
 800eaf8:	0800cbad 	.word	0x0800cbad

0800eafc <memmove>:
 800eafc:	4288      	cmp	r0, r1
 800eafe:	b510      	push	{r4, lr}
 800eb00:	eb01 0402 	add.w	r4, r1, r2
 800eb04:	d902      	bls.n	800eb0c <memmove+0x10>
 800eb06:	4284      	cmp	r4, r0
 800eb08:	4623      	mov	r3, r4
 800eb0a:	d807      	bhi.n	800eb1c <memmove+0x20>
 800eb0c:	1e43      	subs	r3, r0, #1
 800eb0e:	42a1      	cmp	r1, r4
 800eb10:	d008      	beq.n	800eb24 <memmove+0x28>
 800eb12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb1a:	e7f8      	b.n	800eb0e <memmove+0x12>
 800eb1c:	4402      	add	r2, r0
 800eb1e:	4601      	mov	r1, r0
 800eb20:	428a      	cmp	r2, r1
 800eb22:	d100      	bne.n	800eb26 <memmove+0x2a>
 800eb24:	bd10      	pop	{r4, pc}
 800eb26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb2e:	e7f7      	b.n	800eb20 <memmove+0x24>

0800eb30 <__malloc_lock>:
 800eb30:	4801      	ldr	r0, [pc, #4]	; (800eb38 <__malloc_lock+0x8>)
 800eb32:	f7fe bc80 	b.w	800d436 <__retarget_lock_acquire_recursive>
 800eb36:	bf00      	nop
 800eb38:	20000584 	.word	0x20000584

0800eb3c <__malloc_unlock>:
 800eb3c:	4801      	ldr	r0, [pc, #4]	; (800eb44 <__malloc_unlock+0x8>)
 800eb3e:	f7fe bc7b 	b.w	800d438 <__retarget_lock_release_recursive>
 800eb42:	bf00      	nop
 800eb44:	20000584 	.word	0x20000584

0800eb48 <_realloc_r>:
 800eb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4c:	4680      	mov	r8, r0
 800eb4e:	4614      	mov	r4, r2
 800eb50:	460e      	mov	r6, r1
 800eb52:	b921      	cbnz	r1, 800eb5e <_realloc_r+0x16>
 800eb54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb58:	4611      	mov	r1, r2
 800eb5a:	f7ff b9db 	b.w	800df14 <_malloc_r>
 800eb5e:	b92a      	cbnz	r2, 800eb6c <_realloc_r+0x24>
 800eb60:	f7ff f96c 	bl	800de3c <_free_r>
 800eb64:	4625      	mov	r5, r4
 800eb66:	4628      	mov	r0, r5
 800eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6c:	f000 f858 	bl	800ec20 <_malloc_usable_size_r>
 800eb70:	4284      	cmp	r4, r0
 800eb72:	4607      	mov	r7, r0
 800eb74:	d802      	bhi.n	800eb7c <_realloc_r+0x34>
 800eb76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb7a:	d812      	bhi.n	800eba2 <_realloc_r+0x5a>
 800eb7c:	4621      	mov	r1, r4
 800eb7e:	4640      	mov	r0, r8
 800eb80:	f7ff f9c8 	bl	800df14 <_malloc_r>
 800eb84:	4605      	mov	r5, r0
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d0ed      	beq.n	800eb66 <_realloc_r+0x1e>
 800eb8a:	42bc      	cmp	r4, r7
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	4631      	mov	r1, r6
 800eb90:	bf28      	it	cs
 800eb92:	463a      	movcs	r2, r7
 800eb94:	f7fe fc6c 	bl	800d470 <memcpy>
 800eb98:	4631      	mov	r1, r6
 800eb9a:	4640      	mov	r0, r8
 800eb9c:	f7ff f94e 	bl	800de3c <_free_r>
 800eba0:	e7e1      	b.n	800eb66 <_realloc_r+0x1e>
 800eba2:	4635      	mov	r5, r6
 800eba4:	e7df      	b.n	800eb66 <_realloc_r+0x1e>
	...

0800eba8 <_read_r>:
 800eba8:	b538      	push	{r3, r4, r5, lr}
 800ebaa:	4d07      	ldr	r5, [pc, #28]	; (800ebc8 <_read_r+0x20>)
 800ebac:	4604      	mov	r4, r0
 800ebae:	4608      	mov	r0, r1
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	602a      	str	r2, [r5, #0]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	f7f7 fefa 	bl	80069b0 <_read>
 800ebbc:	1c43      	adds	r3, r0, #1
 800ebbe:	d102      	bne.n	800ebc6 <_read_r+0x1e>
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	b103      	cbz	r3, 800ebc6 <_read_r+0x1e>
 800ebc4:	6023      	str	r3, [r4, #0]
 800ebc6:	bd38      	pop	{r3, r4, r5, pc}
 800ebc8:	20000590 	.word	0x20000590

0800ebcc <abort>:
 800ebcc:	b508      	push	{r3, lr}
 800ebce:	2006      	movs	r0, #6
 800ebd0:	f000 f856 	bl	800ec80 <raise>
 800ebd4:	2001      	movs	r0, #1
 800ebd6:	f7f7 fee1 	bl	800699c <_exit>
	...

0800ebdc <_fstat_r>:
 800ebdc:	b538      	push	{r3, r4, r5, lr}
 800ebde:	4d07      	ldr	r5, [pc, #28]	; (800ebfc <_fstat_r+0x20>)
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	4608      	mov	r0, r1
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	602b      	str	r3, [r5, #0]
 800ebea:	f7f7 ff0a 	bl	8006a02 <_fstat>
 800ebee:	1c43      	adds	r3, r0, #1
 800ebf0:	d102      	bne.n	800ebf8 <_fstat_r+0x1c>
 800ebf2:	682b      	ldr	r3, [r5, #0]
 800ebf4:	b103      	cbz	r3, 800ebf8 <_fstat_r+0x1c>
 800ebf6:	6023      	str	r3, [r4, #0]
 800ebf8:	bd38      	pop	{r3, r4, r5, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20000590 	.word	0x20000590

0800ec00 <_isatty_r>:
 800ec00:	b538      	push	{r3, r4, r5, lr}
 800ec02:	4d06      	ldr	r5, [pc, #24]	; (800ec1c <_isatty_r+0x1c>)
 800ec04:	2300      	movs	r3, #0
 800ec06:	4604      	mov	r4, r0
 800ec08:	4608      	mov	r0, r1
 800ec0a:	602b      	str	r3, [r5, #0]
 800ec0c:	f7f7 ff09 	bl	8006a22 <_isatty>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	d102      	bne.n	800ec1a <_isatty_r+0x1a>
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	b103      	cbz	r3, 800ec1a <_isatty_r+0x1a>
 800ec18:	6023      	str	r3, [r4, #0]
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	20000590 	.word	0x20000590

0800ec20 <_malloc_usable_size_r>:
 800ec20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec24:	1f18      	subs	r0, r3, #4
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	bfbc      	itt	lt
 800ec2a:	580b      	ldrlt	r3, [r1, r0]
 800ec2c:	18c0      	addlt	r0, r0, r3
 800ec2e:	4770      	bx	lr

0800ec30 <_raise_r>:
 800ec30:	291f      	cmp	r1, #31
 800ec32:	b538      	push	{r3, r4, r5, lr}
 800ec34:	4604      	mov	r4, r0
 800ec36:	460d      	mov	r5, r1
 800ec38:	d904      	bls.n	800ec44 <_raise_r+0x14>
 800ec3a:	2316      	movs	r3, #22
 800ec3c:	6003      	str	r3, [r0, #0]
 800ec3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec42:	bd38      	pop	{r3, r4, r5, pc}
 800ec44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec46:	b112      	cbz	r2, 800ec4e <_raise_r+0x1e>
 800ec48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec4c:	b94b      	cbnz	r3, 800ec62 <_raise_r+0x32>
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f000 f830 	bl	800ecb4 <_getpid_r>
 800ec54:	462a      	mov	r2, r5
 800ec56:	4601      	mov	r1, r0
 800ec58:	4620      	mov	r0, r4
 800ec5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec5e:	f000 b817 	b.w	800ec90 <_kill_r>
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d00a      	beq.n	800ec7c <_raise_r+0x4c>
 800ec66:	1c59      	adds	r1, r3, #1
 800ec68:	d103      	bne.n	800ec72 <_raise_r+0x42>
 800ec6a:	2316      	movs	r3, #22
 800ec6c:	6003      	str	r3, [r0, #0]
 800ec6e:	2001      	movs	r0, #1
 800ec70:	e7e7      	b.n	800ec42 <_raise_r+0x12>
 800ec72:	2400      	movs	r4, #0
 800ec74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec78:	4628      	mov	r0, r5
 800ec7a:	4798      	blx	r3
 800ec7c:	2000      	movs	r0, #0
 800ec7e:	e7e0      	b.n	800ec42 <_raise_r+0x12>

0800ec80 <raise>:
 800ec80:	4b02      	ldr	r3, [pc, #8]	; (800ec8c <raise+0xc>)
 800ec82:	4601      	mov	r1, r0
 800ec84:	6818      	ldr	r0, [r3, #0]
 800ec86:	f7ff bfd3 	b.w	800ec30 <_raise_r>
 800ec8a:	bf00      	nop
 800ec8c:	20000030 	.word	0x20000030

0800ec90 <_kill_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4d07      	ldr	r5, [pc, #28]	; (800ecb0 <_kill_r+0x20>)
 800ec94:	2300      	movs	r3, #0
 800ec96:	4604      	mov	r4, r0
 800ec98:	4608      	mov	r0, r1
 800ec9a:	4611      	mov	r1, r2
 800ec9c:	602b      	str	r3, [r5, #0]
 800ec9e:	f7f7 fe6d 	bl	800697c <_kill>
 800eca2:	1c43      	adds	r3, r0, #1
 800eca4:	d102      	bne.n	800ecac <_kill_r+0x1c>
 800eca6:	682b      	ldr	r3, [r5, #0]
 800eca8:	b103      	cbz	r3, 800ecac <_kill_r+0x1c>
 800ecaa:	6023      	str	r3, [r4, #0]
 800ecac:	bd38      	pop	{r3, r4, r5, pc}
 800ecae:	bf00      	nop
 800ecb0:	20000590 	.word	0x20000590

0800ecb4 <_getpid_r>:
 800ecb4:	f7f7 be5a 	b.w	800696c <_getpid>

0800ecb8 <cosf>:
 800ecb8:	ee10 3a10 	vmov	r3, s0
 800ecbc:	b507      	push	{r0, r1, r2, lr}
 800ecbe:	4a1e      	ldr	r2, [pc, #120]	; (800ed38 <cosf+0x80>)
 800ecc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	dc06      	bgt.n	800ecd6 <cosf+0x1e>
 800ecc8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ed3c <cosf+0x84>
 800eccc:	b003      	add	sp, #12
 800ecce:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecd2:	f001 bd4b 	b.w	801076c <__kernel_cosf>
 800ecd6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ecda:	db04      	blt.n	800ece6 <cosf+0x2e>
 800ecdc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ece0:	b003      	add	sp, #12
 800ece2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ece6:	4668      	mov	r0, sp
 800ece8:	f001 fc00 	bl	80104ec <__ieee754_rem_pio2f>
 800ecec:	f000 0003 	and.w	r0, r0, #3
 800ecf0:	2801      	cmp	r0, #1
 800ecf2:	d009      	beq.n	800ed08 <cosf+0x50>
 800ecf4:	2802      	cmp	r0, #2
 800ecf6:	d010      	beq.n	800ed1a <cosf+0x62>
 800ecf8:	b9b0      	cbnz	r0, 800ed28 <cosf+0x70>
 800ecfa:	eddd 0a01 	vldr	s1, [sp, #4]
 800ecfe:	ed9d 0a00 	vldr	s0, [sp]
 800ed02:	f001 fd33 	bl	801076c <__kernel_cosf>
 800ed06:	e7eb      	b.n	800ece0 <cosf+0x28>
 800ed08:	eddd 0a01 	vldr	s1, [sp, #4]
 800ed0c:	ed9d 0a00 	vldr	s0, [sp]
 800ed10:	f002 f802 	bl	8010d18 <__kernel_sinf>
 800ed14:	eeb1 0a40 	vneg.f32	s0, s0
 800ed18:	e7e2      	b.n	800ece0 <cosf+0x28>
 800ed1a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ed1e:	ed9d 0a00 	vldr	s0, [sp]
 800ed22:	f001 fd23 	bl	801076c <__kernel_cosf>
 800ed26:	e7f5      	b.n	800ed14 <cosf+0x5c>
 800ed28:	eddd 0a01 	vldr	s1, [sp, #4]
 800ed2c:	ed9d 0a00 	vldr	s0, [sp]
 800ed30:	2001      	movs	r0, #1
 800ed32:	f001 fff1 	bl	8010d18 <__kernel_sinf>
 800ed36:	e7d3      	b.n	800ece0 <cosf+0x28>
 800ed38:	3f490fd8 	.word	0x3f490fd8
 800ed3c:	00000000 	.word	0x00000000

0800ed40 <sinf>:
 800ed40:	ee10 3a10 	vmov	r3, s0
 800ed44:	b507      	push	{r0, r1, r2, lr}
 800ed46:	4a1f      	ldr	r2, [pc, #124]	; (800edc4 <sinf+0x84>)
 800ed48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	dc07      	bgt.n	800ed60 <sinf+0x20>
 800ed50:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800edc8 <sinf+0x88>
 800ed54:	2000      	movs	r0, #0
 800ed56:	b003      	add	sp, #12
 800ed58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed5c:	f001 bfdc 	b.w	8010d18 <__kernel_sinf>
 800ed60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ed64:	db04      	blt.n	800ed70 <sinf+0x30>
 800ed66:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ed6a:	b003      	add	sp, #12
 800ed6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed70:	4668      	mov	r0, sp
 800ed72:	f001 fbbb 	bl	80104ec <__ieee754_rem_pio2f>
 800ed76:	f000 0003 	and.w	r0, r0, #3
 800ed7a:	2801      	cmp	r0, #1
 800ed7c:	d00a      	beq.n	800ed94 <sinf+0x54>
 800ed7e:	2802      	cmp	r0, #2
 800ed80:	d00f      	beq.n	800eda2 <sinf+0x62>
 800ed82:	b9c0      	cbnz	r0, 800edb6 <sinf+0x76>
 800ed84:	eddd 0a01 	vldr	s1, [sp, #4]
 800ed88:	ed9d 0a00 	vldr	s0, [sp]
 800ed8c:	2001      	movs	r0, #1
 800ed8e:	f001 ffc3 	bl	8010d18 <__kernel_sinf>
 800ed92:	e7ea      	b.n	800ed6a <sinf+0x2a>
 800ed94:	eddd 0a01 	vldr	s1, [sp, #4]
 800ed98:	ed9d 0a00 	vldr	s0, [sp]
 800ed9c:	f001 fce6 	bl	801076c <__kernel_cosf>
 800eda0:	e7e3      	b.n	800ed6a <sinf+0x2a>
 800eda2:	eddd 0a01 	vldr	s1, [sp, #4]
 800eda6:	ed9d 0a00 	vldr	s0, [sp]
 800edaa:	2001      	movs	r0, #1
 800edac:	f001 ffb4 	bl	8010d18 <__kernel_sinf>
 800edb0:	eeb1 0a40 	vneg.f32	s0, s0
 800edb4:	e7d9      	b.n	800ed6a <sinf+0x2a>
 800edb6:	eddd 0a01 	vldr	s1, [sp, #4]
 800edba:	ed9d 0a00 	vldr	s0, [sp]
 800edbe:	f001 fcd5 	bl	801076c <__kernel_cosf>
 800edc2:	e7f5      	b.n	800edb0 <sinf+0x70>
 800edc4:	3f490fd8 	.word	0x3f490fd8
 800edc8:	00000000 	.word	0x00000000

0800edcc <tanf>:
 800edcc:	ee10 3a10 	vmov	r3, s0
 800edd0:	b507      	push	{r0, r1, r2, lr}
 800edd2:	4a12      	ldr	r2, [pc, #72]	; (800ee1c <tanf+0x50>)
 800edd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800edd8:	4293      	cmp	r3, r2
 800edda:	dc07      	bgt.n	800edec <tanf+0x20>
 800eddc:	eddf 0a10 	vldr	s1, [pc, #64]	; 800ee20 <tanf+0x54>
 800ede0:	2001      	movs	r0, #1
 800ede2:	b003      	add	sp, #12
 800ede4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ede8:	f001 bfde 	b.w	8010da8 <__kernel_tanf>
 800edec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800edf0:	db04      	blt.n	800edfc <tanf+0x30>
 800edf2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800edf6:	b003      	add	sp, #12
 800edf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800edfc:	4668      	mov	r0, sp
 800edfe:	f001 fb75 	bl	80104ec <__ieee754_rem_pio2f>
 800ee02:	0040      	lsls	r0, r0, #1
 800ee04:	f000 0002 	and.w	r0, r0, #2
 800ee08:	eddd 0a01 	vldr	s1, [sp, #4]
 800ee0c:	ed9d 0a00 	vldr	s0, [sp]
 800ee10:	f1c0 0001 	rsb	r0, r0, #1
 800ee14:	f001 ffc8 	bl	8010da8 <__kernel_tanf>
 800ee18:	e7ed      	b.n	800edf6 <tanf+0x2a>
 800ee1a:	bf00      	nop
 800ee1c:	3f490fda 	.word	0x3f490fda
 800ee20:	00000000 	.word	0x00000000

0800ee24 <asin>:
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	ed2d 8b02 	vpush	{d8}
 800ee2a:	ec55 4b10 	vmov	r4, r5, d0
 800ee2e:	f000 f917 	bl	800f060 <__ieee754_asin>
 800ee32:	4622      	mov	r2, r4
 800ee34:	462b      	mov	r3, r5
 800ee36:	4620      	mov	r0, r4
 800ee38:	4629      	mov	r1, r5
 800ee3a:	eeb0 8a40 	vmov.f32	s16, s0
 800ee3e:	eef0 8a60 	vmov.f32	s17, s1
 800ee42:	f7f1 fe9b 	bl	8000b7c <__aeabi_dcmpun>
 800ee46:	b9a8      	cbnz	r0, 800ee74 <asin+0x50>
 800ee48:	ec45 4b10 	vmov	d0, r4, r5
 800ee4c:	f002 fa5c 	bl	8011308 <fabs>
 800ee50:	4b0c      	ldr	r3, [pc, #48]	; (800ee84 <asin+0x60>)
 800ee52:	ec51 0b10 	vmov	r0, r1, d0
 800ee56:	2200      	movs	r2, #0
 800ee58:	f7f1 fe86 	bl	8000b68 <__aeabi_dcmpgt>
 800ee5c:	b150      	cbz	r0, 800ee74 <asin+0x50>
 800ee5e:	f7fb fa6f 	bl	800a340 <__errno>
 800ee62:	ecbd 8b02 	vpop	{d8}
 800ee66:	2321      	movs	r3, #33	; 0x21
 800ee68:	6003      	str	r3, [r0, #0]
 800ee6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee6e:	4806      	ldr	r0, [pc, #24]	; (800ee88 <asin+0x64>)
 800ee70:	f7ff bb7a 	b.w	800e568 <nan>
 800ee74:	eeb0 0a48 	vmov.f32	s0, s16
 800ee78:	eef0 0a68 	vmov.f32	s1, s17
 800ee7c:	ecbd 8b02 	vpop	{d8}
 800ee80:	bd38      	pop	{r3, r4, r5, pc}
 800ee82:	bf00      	nop
 800ee84:	3ff00000 	.word	0x3ff00000
 800ee88:	08011ca0 	.word	0x08011ca0

0800ee8c <atan2>:
 800ee8c:	f000 bafc 	b.w	800f488 <__ieee754_atan2>

0800ee90 <pow>:
 800ee90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee92:	ed2d 8b02 	vpush	{d8}
 800ee96:	eeb0 8a40 	vmov.f32	s16, s0
 800ee9a:	eef0 8a60 	vmov.f32	s17, s1
 800ee9e:	ec55 4b11 	vmov	r4, r5, d1
 800eea2:	f000 fbbd 	bl	800f620 <__ieee754_pow>
 800eea6:	4622      	mov	r2, r4
 800eea8:	462b      	mov	r3, r5
 800eeaa:	4620      	mov	r0, r4
 800eeac:	4629      	mov	r1, r5
 800eeae:	ec57 6b10 	vmov	r6, r7, d0
 800eeb2:	f7f1 fe63 	bl	8000b7c <__aeabi_dcmpun>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d13b      	bne.n	800ef32 <pow+0xa2>
 800eeba:	ec51 0b18 	vmov	r0, r1, d8
 800eebe:	2200      	movs	r2, #0
 800eec0:	2300      	movs	r3, #0
 800eec2:	f7f1 fe29 	bl	8000b18 <__aeabi_dcmpeq>
 800eec6:	b1b8      	cbz	r0, 800eef8 <pow+0x68>
 800eec8:	2200      	movs	r2, #0
 800eeca:	2300      	movs	r3, #0
 800eecc:	4620      	mov	r0, r4
 800eece:	4629      	mov	r1, r5
 800eed0:	f7f1 fe22 	bl	8000b18 <__aeabi_dcmpeq>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d146      	bne.n	800ef66 <pow+0xd6>
 800eed8:	ec45 4b10 	vmov	d0, r4, r5
 800eedc:	f002 fa1d 	bl	801131a <finite>
 800eee0:	b338      	cbz	r0, 800ef32 <pow+0xa2>
 800eee2:	2200      	movs	r2, #0
 800eee4:	2300      	movs	r3, #0
 800eee6:	4620      	mov	r0, r4
 800eee8:	4629      	mov	r1, r5
 800eeea:	f7f1 fe1f 	bl	8000b2c <__aeabi_dcmplt>
 800eeee:	b300      	cbz	r0, 800ef32 <pow+0xa2>
 800eef0:	f7fb fa26 	bl	800a340 <__errno>
 800eef4:	2322      	movs	r3, #34	; 0x22
 800eef6:	e01b      	b.n	800ef30 <pow+0xa0>
 800eef8:	ec47 6b10 	vmov	d0, r6, r7
 800eefc:	f002 fa0d 	bl	801131a <finite>
 800ef00:	b9e0      	cbnz	r0, 800ef3c <pow+0xac>
 800ef02:	eeb0 0a48 	vmov.f32	s0, s16
 800ef06:	eef0 0a68 	vmov.f32	s1, s17
 800ef0a:	f002 fa06 	bl	801131a <finite>
 800ef0e:	b1a8      	cbz	r0, 800ef3c <pow+0xac>
 800ef10:	ec45 4b10 	vmov	d0, r4, r5
 800ef14:	f002 fa01 	bl	801131a <finite>
 800ef18:	b180      	cbz	r0, 800ef3c <pow+0xac>
 800ef1a:	4632      	mov	r2, r6
 800ef1c:	463b      	mov	r3, r7
 800ef1e:	4630      	mov	r0, r6
 800ef20:	4639      	mov	r1, r7
 800ef22:	f7f1 fe2b 	bl	8000b7c <__aeabi_dcmpun>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d0e2      	beq.n	800eef0 <pow+0x60>
 800ef2a:	f7fb fa09 	bl	800a340 <__errno>
 800ef2e:	2321      	movs	r3, #33	; 0x21
 800ef30:	6003      	str	r3, [r0, #0]
 800ef32:	ecbd 8b02 	vpop	{d8}
 800ef36:	ec47 6b10 	vmov	d0, r6, r7
 800ef3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	2300      	movs	r3, #0
 800ef40:	4630      	mov	r0, r6
 800ef42:	4639      	mov	r1, r7
 800ef44:	f7f1 fde8 	bl	8000b18 <__aeabi_dcmpeq>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d0f2      	beq.n	800ef32 <pow+0xa2>
 800ef4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ef50:	eef0 0a68 	vmov.f32	s1, s17
 800ef54:	f002 f9e1 	bl	801131a <finite>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d0ea      	beq.n	800ef32 <pow+0xa2>
 800ef5c:	ec45 4b10 	vmov	d0, r4, r5
 800ef60:	f002 f9db 	bl	801131a <finite>
 800ef64:	e7c3      	b.n	800eeee <pow+0x5e>
 800ef66:	4f01      	ldr	r7, [pc, #4]	; (800ef6c <pow+0xdc>)
 800ef68:	2600      	movs	r6, #0
 800ef6a:	e7e2      	b.n	800ef32 <pow+0xa2>
 800ef6c:	3ff00000 	.word	0x3ff00000

0800ef70 <sqrt>:
 800ef70:	b538      	push	{r3, r4, r5, lr}
 800ef72:	ed2d 8b02 	vpush	{d8}
 800ef76:	ec55 4b10 	vmov	r4, r5, d0
 800ef7a:	f001 f87f 	bl	801007c <__ieee754_sqrt>
 800ef7e:	4622      	mov	r2, r4
 800ef80:	462b      	mov	r3, r5
 800ef82:	4620      	mov	r0, r4
 800ef84:	4629      	mov	r1, r5
 800ef86:	eeb0 8a40 	vmov.f32	s16, s0
 800ef8a:	eef0 8a60 	vmov.f32	s17, s1
 800ef8e:	f7f1 fdf5 	bl	8000b7c <__aeabi_dcmpun>
 800ef92:	b990      	cbnz	r0, 800efba <sqrt+0x4a>
 800ef94:	2200      	movs	r2, #0
 800ef96:	2300      	movs	r3, #0
 800ef98:	4620      	mov	r0, r4
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	f7f1 fdc6 	bl	8000b2c <__aeabi_dcmplt>
 800efa0:	b158      	cbz	r0, 800efba <sqrt+0x4a>
 800efa2:	f7fb f9cd 	bl	800a340 <__errno>
 800efa6:	2321      	movs	r3, #33	; 0x21
 800efa8:	6003      	str	r3, [r0, #0]
 800efaa:	2200      	movs	r2, #0
 800efac:	2300      	movs	r3, #0
 800efae:	4610      	mov	r0, r2
 800efb0:	4619      	mov	r1, r3
 800efb2:	f7f1 fc73 	bl	800089c <__aeabi_ddiv>
 800efb6:	ec41 0b18 	vmov	d8, r0, r1
 800efba:	eeb0 0a48 	vmov.f32	s0, s16
 800efbe:	eef0 0a68 	vmov.f32	s1, s17
 800efc2:	ecbd 8b02 	vpop	{d8}
 800efc6:	bd38      	pop	{r3, r4, r5, pc}

0800efc8 <asinf>:
 800efc8:	b508      	push	{r3, lr}
 800efca:	ed2d 8b02 	vpush	{d8}
 800efce:	eeb0 8a40 	vmov.f32	s16, s0
 800efd2:	f001 f905 	bl	80101e0 <__ieee754_asinf>
 800efd6:	eeb4 8a48 	vcmp.f32	s16, s16
 800efda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efde:	eef0 8a40 	vmov.f32	s17, s0
 800efe2:	d615      	bvs.n	800f010 <asinf+0x48>
 800efe4:	eeb0 0a48 	vmov.f32	s0, s16
 800efe8:	f002 fafc 	bl	80115e4 <fabsf>
 800efec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eff0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800eff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff8:	dd0a      	ble.n	800f010 <asinf+0x48>
 800effa:	f7fb f9a1 	bl	800a340 <__errno>
 800effe:	ecbd 8b02 	vpop	{d8}
 800f002:	2321      	movs	r3, #33	; 0x21
 800f004:	6003      	str	r3, [r0, #0]
 800f006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f00a:	4804      	ldr	r0, [pc, #16]	; (800f01c <asinf+0x54>)
 800f00c:	f7fc b85c 	b.w	800b0c8 <nanf>
 800f010:	eeb0 0a68 	vmov.f32	s0, s17
 800f014:	ecbd 8b02 	vpop	{d8}
 800f018:	bd08      	pop	{r3, pc}
 800f01a:	bf00      	nop
 800f01c:	08011ca0 	.word	0x08011ca0

0800f020 <atan2f>:
 800f020:	f001 b9c4 	b.w	80103ac <__ieee754_atan2f>

0800f024 <sqrtf>:
 800f024:	b508      	push	{r3, lr}
 800f026:	ed2d 8b02 	vpush	{d8}
 800f02a:	eeb0 8a40 	vmov.f32	s16, s0
 800f02e:	f001 fb99 	bl	8010764 <__ieee754_sqrtf>
 800f032:	eeb4 8a48 	vcmp.f32	s16, s16
 800f036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03a:	d60c      	bvs.n	800f056 <sqrtf+0x32>
 800f03c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f05c <sqrtf+0x38>
 800f040:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f048:	d505      	bpl.n	800f056 <sqrtf+0x32>
 800f04a:	f7fb f979 	bl	800a340 <__errno>
 800f04e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f052:	2321      	movs	r3, #33	; 0x21
 800f054:	6003      	str	r3, [r0, #0]
 800f056:	ecbd 8b02 	vpop	{d8}
 800f05a:	bd08      	pop	{r3, pc}
 800f05c:	00000000 	.word	0x00000000

0800f060 <__ieee754_asin>:
 800f060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f064:	ed2d 8b04 	vpush	{d8-d9}
 800f068:	ec55 4b10 	vmov	r4, r5, d0
 800f06c:	4bcc      	ldr	r3, [pc, #816]	; (800f3a0 <__ieee754_asin+0x340>)
 800f06e:	b083      	sub	sp, #12
 800f070:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f074:	4598      	cmp	r8, r3
 800f076:	9501      	str	r5, [sp, #4]
 800f078:	dd35      	ble.n	800f0e6 <__ieee754_asin+0x86>
 800f07a:	ee10 3a10 	vmov	r3, s0
 800f07e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800f082:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800f086:	ea58 0303 	orrs.w	r3, r8, r3
 800f08a:	d117      	bne.n	800f0bc <__ieee754_asin+0x5c>
 800f08c:	a3aa      	add	r3, pc, #680	; (adr r3, 800f338 <__ieee754_asin+0x2d8>)
 800f08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f092:	ee10 0a10 	vmov	r0, s0
 800f096:	4629      	mov	r1, r5
 800f098:	f7f1 fad6 	bl	8000648 <__aeabi_dmul>
 800f09c:	a3a8      	add	r3, pc, #672	; (adr r3, 800f340 <__ieee754_asin+0x2e0>)
 800f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	460f      	mov	r7, r1
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	f7f1 facd 	bl	8000648 <__aeabi_dmul>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	f7f1 f911 	bl	80002dc <__adddf3>
 800f0ba:	e00b      	b.n	800f0d4 <__ieee754_asin+0x74>
 800f0bc:	ee10 2a10 	vmov	r2, s0
 800f0c0:	462b      	mov	r3, r5
 800f0c2:	ee10 0a10 	vmov	r0, s0
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	f7f1 f906 	bl	80002d8 <__aeabi_dsub>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	f7f1 fbe4 	bl	800089c <__aeabi_ddiv>
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	460d      	mov	r5, r1
 800f0d8:	ec45 4b10 	vmov	d0, r4, r5
 800f0dc:	b003      	add	sp, #12
 800f0de:	ecbd 8b04 	vpop	{d8-d9}
 800f0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e6:	4baf      	ldr	r3, [pc, #700]	; (800f3a4 <__ieee754_asin+0x344>)
 800f0e8:	4598      	cmp	r8, r3
 800f0ea:	dc11      	bgt.n	800f110 <__ieee754_asin+0xb0>
 800f0ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f0f0:	f280 80ae 	bge.w	800f250 <__ieee754_asin+0x1f0>
 800f0f4:	a394      	add	r3, pc, #592	; (adr r3, 800f348 <__ieee754_asin+0x2e8>)
 800f0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fa:	ee10 0a10 	vmov	r0, s0
 800f0fe:	4629      	mov	r1, r5
 800f100:	f7f1 f8ec 	bl	80002dc <__adddf3>
 800f104:	4ba8      	ldr	r3, [pc, #672]	; (800f3a8 <__ieee754_asin+0x348>)
 800f106:	2200      	movs	r2, #0
 800f108:	f7f1 fd2e 	bl	8000b68 <__aeabi_dcmpgt>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d1e3      	bne.n	800f0d8 <__ieee754_asin+0x78>
 800f110:	ec45 4b10 	vmov	d0, r4, r5
 800f114:	f002 f8f8 	bl	8011308 <fabs>
 800f118:	49a3      	ldr	r1, [pc, #652]	; (800f3a8 <__ieee754_asin+0x348>)
 800f11a:	ec53 2b10 	vmov	r2, r3, d0
 800f11e:	2000      	movs	r0, #0
 800f120:	f7f1 f8da 	bl	80002d8 <__aeabi_dsub>
 800f124:	4ba1      	ldr	r3, [pc, #644]	; (800f3ac <__ieee754_asin+0x34c>)
 800f126:	2200      	movs	r2, #0
 800f128:	f7f1 fa8e 	bl	8000648 <__aeabi_dmul>
 800f12c:	a388      	add	r3, pc, #544	; (adr r3, 800f350 <__ieee754_asin+0x2f0>)
 800f12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f132:	4604      	mov	r4, r0
 800f134:	460d      	mov	r5, r1
 800f136:	f7f1 fa87 	bl	8000648 <__aeabi_dmul>
 800f13a:	a387      	add	r3, pc, #540	; (adr r3, 800f358 <__ieee754_asin+0x2f8>)
 800f13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f140:	f7f1 f8cc 	bl	80002dc <__adddf3>
 800f144:	4622      	mov	r2, r4
 800f146:	462b      	mov	r3, r5
 800f148:	f7f1 fa7e 	bl	8000648 <__aeabi_dmul>
 800f14c:	a384      	add	r3, pc, #528	; (adr r3, 800f360 <__ieee754_asin+0x300>)
 800f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f152:	f7f1 f8c1 	bl	80002d8 <__aeabi_dsub>
 800f156:	4622      	mov	r2, r4
 800f158:	462b      	mov	r3, r5
 800f15a:	f7f1 fa75 	bl	8000648 <__aeabi_dmul>
 800f15e:	a382      	add	r3, pc, #520	; (adr r3, 800f368 <__ieee754_asin+0x308>)
 800f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f164:	f7f1 f8ba 	bl	80002dc <__adddf3>
 800f168:	4622      	mov	r2, r4
 800f16a:	462b      	mov	r3, r5
 800f16c:	f7f1 fa6c 	bl	8000648 <__aeabi_dmul>
 800f170:	a37f      	add	r3, pc, #508	; (adr r3, 800f370 <__ieee754_asin+0x310>)
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	f7f1 f8af 	bl	80002d8 <__aeabi_dsub>
 800f17a:	4622      	mov	r2, r4
 800f17c:	462b      	mov	r3, r5
 800f17e:	f7f1 fa63 	bl	8000648 <__aeabi_dmul>
 800f182:	a37d      	add	r3, pc, #500	; (adr r3, 800f378 <__ieee754_asin+0x318>)
 800f184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f188:	f7f1 f8a8 	bl	80002dc <__adddf3>
 800f18c:	4622      	mov	r2, r4
 800f18e:	462b      	mov	r3, r5
 800f190:	f7f1 fa5a 	bl	8000648 <__aeabi_dmul>
 800f194:	a37a      	add	r3, pc, #488	; (adr r3, 800f380 <__ieee754_asin+0x320>)
 800f196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19a:	ec41 0b18 	vmov	d8, r0, r1
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	f7f1 fa51 	bl	8000648 <__aeabi_dmul>
 800f1a6:	a378      	add	r3, pc, #480	; (adr r3, 800f388 <__ieee754_asin+0x328>)
 800f1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ac:	f7f1 f894 	bl	80002d8 <__aeabi_dsub>
 800f1b0:	4622      	mov	r2, r4
 800f1b2:	462b      	mov	r3, r5
 800f1b4:	f7f1 fa48 	bl	8000648 <__aeabi_dmul>
 800f1b8:	a375      	add	r3, pc, #468	; (adr r3, 800f390 <__ieee754_asin+0x330>)
 800f1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1be:	f7f1 f88d 	bl	80002dc <__adddf3>
 800f1c2:	4622      	mov	r2, r4
 800f1c4:	462b      	mov	r3, r5
 800f1c6:	f7f1 fa3f 	bl	8000648 <__aeabi_dmul>
 800f1ca:	a373      	add	r3, pc, #460	; (adr r3, 800f398 <__ieee754_asin+0x338>)
 800f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d0:	f7f1 f882 	bl	80002d8 <__aeabi_dsub>
 800f1d4:	4622      	mov	r2, r4
 800f1d6:	462b      	mov	r3, r5
 800f1d8:	f7f1 fa36 	bl	8000648 <__aeabi_dmul>
 800f1dc:	4b72      	ldr	r3, [pc, #456]	; (800f3a8 <__ieee754_asin+0x348>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f7f1 f87c 	bl	80002dc <__adddf3>
 800f1e4:	ec45 4b10 	vmov	d0, r4, r5
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	460f      	mov	r7, r1
 800f1ec:	f000 ff46 	bl	801007c <__ieee754_sqrt>
 800f1f0:	4b6f      	ldr	r3, [pc, #444]	; (800f3b0 <__ieee754_asin+0x350>)
 800f1f2:	4598      	cmp	r8, r3
 800f1f4:	ec5b ab10 	vmov	sl, fp, d0
 800f1f8:	f340 80dc 	ble.w	800f3b4 <__ieee754_asin+0x354>
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	463b      	mov	r3, r7
 800f200:	ec51 0b18 	vmov	r0, r1, d8
 800f204:	f7f1 fb4a 	bl	800089c <__aeabi_ddiv>
 800f208:	4652      	mov	r2, sl
 800f20a:	465b      	mov	r3, fp
 800f20c:	f7f1 fa1c 	bl	8000648 <__aeabi_dmul>
 800f210:	4652      	mov	r2, sl
 800f212:	465b      	mov	r3, fp
 800f214:	f7f1 f862 	bl	80002dc <__adddf3>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	f7f1 f85e 	bl	80002dc <__adddf3>
 800f220:	a347      	add	r3, pc, #284	; (adr r3, 800f340 <__ieee754_asin+0x2e0>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 f857 	bl	80002d8 <__aeabi_dsub>
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	a142      	add	r1, pc, #264	; (adr r1, 800f338 <__ieee754_asin+0x2d8>)
 800f230:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f234:	f7f1 f850 	bl	80002d8 <__aeabi_dsub>
 800f238:	9b01      	ldr	r3, [sp, #4]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bfdc      	itt	le
 800f23e:	4602      	movle	r2, r0
 800f240:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800f244:	4604      	mov	r4, r0
 800f246:	460d      	mov	r5, r1
 800f248:	bfdc      	itt	le
 800f24a:	4614      	movle	r4, r2
 800f24c:	461d      	movle	r5, r3
 800f24e:	e743      	b.n	800f0d8 <__ieee754_asin+0x78>
 800f250:	ee10 2a10 	vmov	r2, s0
 800f254:	ee10 0a10 	vmov	r0, s0
 800f258:	462b      	mov	r3, r5
 800f25a:	4629      	mov	r1, r5
 800f25c:	f7f1 f9f4 	bl	8000648 <__aeabi_dmul>
 800f260:	a33b      	add	r3, pc, #236	; (adr r3, 800f350 <__ieee754_asin+0x2f0>)
 800f262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f266:	4606      	mov	r6, r0
 800f268:	460f      	mov	r7, r1
 800f26a:	f7f1 f9ed 	bl	8000648 <__aeabi_dmul>
 800f26e:	a33a      	add	r3, pc, #232	; (adr r3, 800f358 <__ieee754_asin+0x2f8>)
 800f270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f274:	f7f1 f832 	bl	80002dc <__adddf3>
 800f278:	4632      	mov	r2, r6
 800f27a:	463b      	mov	r3, r7
 800f27c:	f7f1 f9e4 	bl	8000648 <__aeabi_dmul>
 800f280:	a337      	add	r3, pc, #220	; (adr r3, 800f360 <__ieee754_asin+0x300>)
 800f282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f286:	f7f1 f827 	bl	80002d8 <__aeabi_dsub>
 800f28a:	4632      	mov	r2, r6
 800f28c:	463b      	mov	r3, r7
 800f28e:	f7f1 f9db 	bl	8000648 <__aeabi_dmul>
 800f292:	a335      	add	r3, pc, #212	; (adr r3, 800f368 <__ieee754_asin+0x308>)
 800f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f298:	f7f1 f820 	bl	80002dc <__adddf3>
 800f29c:	4632      	mov	r2, r6
 800f29e:	463b      	mov	r3, r7
 800f2a0:	f7f1 f9d2 	bl	8000648 <__aeabi_dmul>
 800f2a4:	a332      	add	r3, pc, #200	; (adr r3, 800f370 <__ieee754_asin+0x310>)
 800f2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2aa:	f7f1 f815 	bl	80002d8 <__aeabi_dsub>
 800f2ae:	4632      	mov	r2, r6
 800f2b0:	463b      	mov	r3, r7
 800f2b2:	f7f1 f9c9 	bl	8000648 <__aeabi_dmul>
 800f2b6:	a330      	add	r3, pc, #192	; (adr r3, 800f378 <__ieee754_asin+0x318>)
 800f2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2bc:	f7f1 f80e 	bl	80002dc <__adddf3>
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	463b      	mov	r3, r7
 800f2c4:	f7f1 f9c0 	bl	8000648 <__aeabi_dmul>
 800f2c8:	a32d      	add	r3, pc, #180	; (adr r3, 800f380 <__ieee754_asin+0x320>)
 800f2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ce:	4680      	mov	r8, r0
 800f2d0:	4689      	mov	r9, r1
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	4639      	mov	r1, r7
 800f2d6:	f7f1 f9b7 	bl	8000648 <__aeabi_dmul>
 800f2da:	a32b      	add	r3, pc, #172	; (adr r3, 800f388 <__ieee754_asin+0x328>)
 800f2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e0:	f7f0 fffa 	bl	80002d8 <__aeabi_dsub>
 800f2e4:	4632      	mov	r2, r6
 800f2e6:	463b      	mov	r3, r7
 800f2e8:	f7f1 f9ae 	bl	8000648 <__aeabi_dmul>
 800f2ec:	a328      	add	r3, pc, #160	; (adr r3, 800f390 <__ieee754_asin+0x330>)
 800f2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f2:	f7f0 fff3 	bl	80002dc <__adddf3>
 800f2f6:	4632      	mov	r2, r6
 800f2f8:	463b      	mov	r3, r7
 800f2fa:	f7f1 f9a5 	bl	8000648 <__aeabi_dmul>
 800f2fe:	a326      	add	r3, pc, #152	; (adr r3, 800f398 <__ieee754_asin+0x338>)
 800f300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f304:	f7f0 ffe8 	bl	80002d8 <__aeabi_dsub>
 800f308:	4632      	mov	r2, r6
 800f30a:	463b      	mov	r3, r7
 800f30c:	f7f1 f99c 	bl	8000648 <__aeabi_dmul>
 800f310:	4b25      	ldr	r3, [pc, #148]	; (800f3a8 <__ieee754_asin+0x348>)
 800f312:	2200      	movs	r2, #0
 800f314:	f7f0 ffe2 	bl	80002dc <__adddf3>
 800f318:	4602      	mov	r2, r0
 800f31a:	460b      	mov	r3, r1
 800f31c:	4640      	mov	r0, r8
 800f31e:	4649      	mov	r1, r9
 800f320:	f7f1 fabc 	bl	800089c <__aeabi_ddiv>
 800f324:	4622      	mov	r2, r4
 800f326:	462b      	mov	r3, r5
 800f328:	f7f1 f98e 	bl	8000648 <__aeabi_dmul>
 800f32c:	4602      	mov	r2, r0
 800f32e:	460b      	mov	r3, r1
 800f330:	4620      	mov	r0, r4
 800f332:	4629      	mov	r1, r5
 800f334:	e6bf      	b.n	800f0b6 <__ieee754_asin+0x56>
 800f336:	bf00      	nop
 800f338:	54442d18 	.word	0x54442d18
 800f33c:	3ff921fb 	.word	0x3ff921fb
 800f340:	33145c07 	.word	0x33145c07
 800f344:	3c91a626 	.word	0x3c91a626
 800f348:	8800759c 	.word	0x8800759c
 800f34c:	7e37e43c 	.word	0x7e37e43c
 800f350:	0dfdf709 	.word	0x0dfdf709
 800f354:	3f023de1 	.word	0x3f023de1
 800f358:	7501b288 	.word	0x7501b288
 800f35c:	3f49efe0 	.word	0x3f49efe0
 800f360:	b5688f3b 	.word	0xb5688f3b
 800f364:	3fa48228 	.word	0x3fa48228
 800f368:	0e884455 	.word	0x0e884455
 800f36c:	3fc9c155 	.word	0x3fc9c155
 800f370:	03eb6f7d 	.word	0x03eb6f7d
 800f374:	3fd4d612 	.word	0x3fd4d612
 800f378:	55555555 	.word	0x55555555
 800f37c:	3fc55555 	.word	0x3fc55555
 800f380:	b12e9282 	.word	0xb12e9282
 800f384:	3fb3b8c5 	.word	0x3fb3b8c5
 800f388:	1b8d0159 	.word	0x1b8d0159
 800f38c:	3fe6066c 	.word	0x3fe6066c
 800f390:	9c598ac8 	.word	0x9c598ac8
 800f394:	40002ae5 	.word	0x40002ae5
 800f398:	1c8a2d4b 	.word	0x1c8a2d4b
 800f39c:	40033a27 	.word	0x40033a27
 800f3a0:	3fefffff 	.word	0x3fefffff
 800f3a4:	3fdfffff 	.word	0x3fdfffff
 800f3a8:	3ff00000 	.word	0x3ff00000
 800f3ac:	3fe00000 	.word	0x3fe00000
 800f3b0:	3fef3332 	.word	0x3fef3332
 800f3b4:	ee10 2a10 	vmov	r2, s0
 800f3b8:	ee10 0a10 	vmov	r0, s0
 800f3bc:	465b      	mov	r3, fp
 800f3be:	4659      	mov	r1, fp
 800f3c0:	f7f0 ff8c 	bl	80002dc <__adddf3>
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	463b      	mov	r3, r7
 800f3c8:	ec41 0b19 	vmov	d9, r0, r1
 800f3cc:	ec51 0b18 	vmov	r0, r1, d8
 800f3d0:	f7f1 fa64 	bl	800089c <__aeabi_ddiv>
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	ec51 0b19 	vmov	r0, r1, d9
 800f3dc:	f7f1 f934 	bl	8000648 <__aeabi_dmul>
 800f3e0:	f04f 0800 	mov.w	r8, #0
 800f3e4:	4606      	mov	r6, r0
 800f3e6:	460f      	mov	r7, r1
 800f3e8:	4642      	mov	r2, r8
 800f3ea:	465b      	mov	r3, fp
 800f3ec:	4640      	mov	r0, r8
 800f3ee:	4659      	mov	r1, fp
 800f3f0:	f7f1 f92a 	bl	8000648 <__aeabi_dmul>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	f7f0 ff6c 	bl	80002d8 <__aeabi_dsub>
 800f400:	4642      	mov	r2, r8
 800f402:	4604      	mov	r4, r0
 800f404:	460d      	mov	r5, r1
 800f406:	465b      	mov	r3, fp
 800f408:	4650      	mov	r0, sl
 800f40a:	4659      	mov	r1, fp
 800f40c:	f7f0 ff66 	bl	80002dc <__adddf3>
 800f410:	4602      	mov	r2, r0
 800f412:	460b      	mov	r3, r1
 800f414:	4620      	mov	r0, r4
 800f416:	4629      	mov	r1, r5
 800f418:	f7f1 fa40 	bl	800089c <__aeabi_ddiv>
 800f41c:	4602      	mov	r2, r0
 800f41e:	460b      	mov	r3, r1
 800f420:	f7f0 ff5c 	bl	80002dc <__adddf3>
 800f424:	4602      	mov	r2, r0
 800f426:	460b      	mov	r3, r1
 800f428:	a113      	add	r1, pc, #76	; (adr r1, 800f478 <__ieee754_asin+0x418>)
 800f42a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f42e:	f7f0 ff53 	bl	80002d8 <__aeabi_dsub>
 800f432:	4602      	mov	r2, r0
 800f434:	460b      	mov	r3, r1
 800f436:	4630      	mov	r0, r6
 800f438:	4639      	mov	r1, r7
 800f43a:	f7f0 ff4d 	bl	80002d8 <__aeabi_dsub>
 800f43e:	4642      	mov	r2, r8
 800f440:	4604      	mov	r4, r0
 800f442:	460d      	mov	r5, r1
 800f444:	465b      	mov	r3, fp
 800f446:	4640      	mov	r0, r8
 800f448:	4659      	mov	r1, fp
 800f44a:	f7f0 ff47 	bl	80002dc <__adddf3>
 800f44e:	4602      	mov	r2, r0
 800f450:	460b      	mov	r3, r1
 800f452:	a10b      	add	r1, pc, #44	; (adr r1, 800f480 <__ieee754_asin+0x420>)
 800f454:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f458:	f7f0 ff3e 	bl	80002d8 <__aeabi_dsub>
 800f45c:	4602      	mov	r2, r0
 800f45e:	460b      	mov	r3, r1
 800f460:	4620      	mov	r0, r4
 800f462:	4629      	mov	r1, r5
 800f464:	f7f0 ff38 	bl	80002d8 <__aeabi_dsub>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	a104      	add	r1, pc, #16	; (adr r1, 800f480 <__ieee754_asin+0x420>)
 800f46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f472:	e6df      	b.n	800f234 <__ieee754_asin+0x1d4>
 800f474:	f3af 8000 	nop.w
 800f478:	33145c07 	.word	0x33145c07
 800f47c:	3c91a626 	.word	0x3c91a626
 800f480:	54442d18 	.word	0x54442d18
 800f484:	3fe921fb 	.word	0x3fe921fb

0800f488 <__ieee754_atan2>:
 800f488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f48c:	ec57 6b11 	vmov	r6, r7, d1
 800f490:	4273      	negs	r3, r6
 800f492:	f8df e184 	ldr.w	lr, [pc, #388]	; 800f618 <__ieee754_atan2+0x190>
 800f496:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f49a:	4333      	orrs	r3, r6
 800f49c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f4a0:	4573      	cmp	r3, lr
 800f4a2:	ec51 0b10 	vmov	r0, r1, d0
 800f4a6:	ee11 8a10 	vmov	r8, s2
 800f4aa:	d80a      	bhi.n	800f4c2 <__ieee754_atan2+0x3a>
 800f4ac:	4244      	negs	r4, r0
 800f4ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4b2:	4304      	orrs	r4, r0
 800f4b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f4b8:	4574      	cmp	r4, lr
 800f4ba:	ee10 9a10 	vmov	r9, s0
 800f4be:	468c      	mov	ip, r1
 800f4c0:	d907      	bls.n	800f4d2 <__ieee754_atan2+0x4a>
 800f4c2:	4632      	mov	r2, r6
 800f4c4:	463b      	mov	r3, r7
 800f4c6:	f7f0 ff09 	bl	80002dc <__adddf3>
 800f4ca:	ec41 0b10 	vmov	d0, r0, r1
 800f4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f4d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f4da:	4334      	orrs	r4, r6
 800f4dc:	d103      	bne.n	800f4e6 <__ieee754_atan2+0x5e>
 800f4de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e2:	f001 bd71 	b.w	8010fc8 <atan>
 800f4e6:	17bc      	asrs	r4, r7, #30
 800f4e8:	f004 0402 	and.w	r4, r4, #2
 800f4ec:	ea53 0909 	orrs.w	r9, r3, r9
 800f4f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f4f4:	d107      	bne.n	800f506 <__ieee754_atan2+0x7e>
 800f4f6:	2c02      	cmp	r4, #2
 800f4f8:	d060      	beq.n	800f5bc <__ieee754_atan2+0x134>
 800f4fa:	2c03      	cmp	r4, #3
 800f4fc:	d1e5      	bne.n	800f4ca <__ieee754_atan2+0x42>
 800f4fe:	a142      	add	r1, pc, #264	; (adr r1, 800f608 <__ieee754_atan2+0x180>)
 800f500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f504:	e7e1      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f506:	ea52 0808 	orrs.w	r8, r2, r8
 800f50a:	d106      	bne.n	800f51a <__ieee754_atan2+0x92>
 800f50c:	f1bc 0f00 	cmp.w	ip, #0
 800f510:	da5f      	bge.n	800f5d2 <__ieee754_atan2+0x14a>
 800f512:	a13f      	add	r1, pc, #252	; (adr r1, 800f610 <__ieee754_atan2+0x188>)
 800f514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f518:	e7d7      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f51a:	4572      	cmp	r2, lr
 800f51c:	d10f      	bne.n	800f53e <__ieee754_atan2+0xb6>
 800f51e:	4293      	cmp	r3, r2
 800f520:	f104 34ff 	add.w	r4, r4, #4294967295
 800f524:	d107      	bne.n	800f536 <__ieee754_atan2+0xae>
 800f526:	2c02      	cmp	r4, #2
 800f528:	d84c      	bhi.n	800f5c4 <__ieee754_atan2+0x13c>
 800f52a:	4b35      	ldr	r3, [pc, #212]	; (800f600 <__ieee754_atan2+0x178>)
 800f52c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f530:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f534:	e7c9      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f536:	2c02      	cmp	r4, #2
 800f538:	d848      	bhi.n	800f5cc <__ieee754_atan2+0x144>
 800f53a:	4b32      	ldr	r3, [pc, #200]	; (800f604 <__ieee754_atan2+0x17c>)
 800f53c:	e7f6      	b.n	800f52c <__ieee754_atan2+0xa4>
 800f53e:	4573      	cmp	r3, lr
 800f540:	d0e4      	beq.n	800f50c <__ieee754_atan2+0x84>
 800f542:	1a9b      	subs	r3, r3, r2
 800f544:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f548:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f54c:	da1e      	bge.n	800f58c <__ieee754_atan2+0x104>
 800f54e:	2f00      	cmp	r7, #0
 800f550:	da01      	bge.n	800f556 <__ieee754_atan2+0xce>
 800f552:	323c      	adds	r2, #60	; 0x3c
 800f554:	db1e      	blt.n	800f594 <__ieee754_atan2+0x10c>
 800f556:	4632      	mov	r2, r6
 800f558:	463b      	mov	r3, r7
 800f55a:	f7f1 f99f 	bl	800089c <__aeabi_ddiv>
 800f55e:	ec41 0b10 	vmov	d0, r0, r1
 800f562:	f001 fed1 	bl	8011308 <fabs>
 800f566:	f001 fd2f 	bl	8010fc8 <atan>
 800f56a:	ec51 0b10 	vmov	r0, r1, d0
 800f56e:	2c01      	cmp	r4, #1
 800f570:	d013      	beq.n	800f59a <__ieee754_atan2+0x112>
 800f572:	2c02      	cmp	r4, #2
 800f574:	d015      	beq.n	800f5a2 <__ieee754_atan2+0x11a>
 800f576:	2c00      	cmp	r4, #0
 800f578:	d0a7      	beq.n	800f4ca <__ieee754_atan2+0x42>
 800f57a:	a319      	add	r3, pc, #100	; (adr r3, 800f5e0 <__ieee754_atan2+0x158>)
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	f7f0 feaa 	bl	80002d8 <__aeabi_dsub>
 800f584:	a318      	add	r3, pc, #96	; (adr r3, 800f5e8 <__ieee754_atan2+0x160>)
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	e014      	b.n	800f5b6 <__ieee754_atan2+0x12e>
 800f58c:	a118      	add	r1, pc, #96	; (adr r1, 800f5f0 <__ieee754_atan2+0x168>)
 800f58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f592:	e7ec      	b.n	800f56e <__ieee754_atan2+0xe6>
 800f594:	2000      	movs	r0, #0
 800f596:	2100      	movs	r1, #0
 800f598:	e7e9      	b.n	800f56e <__ieee754_atan2+0xe6>
 800f59a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f59e:	4619      	mov	r1, r3
 800f5a0:	e793      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f5a2:	a30f      	add	r3, pc, #60	; (adr r3, 800f5e0 <__ieee754_atan2+0x158>)
 800f5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a8:	f7f0 fe96 	bl	80002d8 <__aeabi_dsub>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	a10d      	add	r1, pc, #52	; (adr r1, 800f5e8 <__ieee754_atan2+0x160>)
 800f5b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5b6:	f7f0 fe8f 	bl	80002d8 <__aeabi_dsub>
 800f5ba:	e786      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f5bc:	a10a      	add	r1, pc, #40	; (adr r1, 800f5e8 <__ieee754_atan2+0x160>)
 800f5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5c2:	e782      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f5c4:	a10c      	add	r1, pc, #48	; (adr r1, 800f5f8 <__ieee754_atan2+0x170>)
 800f5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5ca:	e77e      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	e77b      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f5d2:	a107      	add	r1, pc, #28	; (adr r1, 800f5f0 <__ieee754_atan2+0x168>)
 800f5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5d8:	e777      	b.n	800f4ca <__ieee754_atan2+0x42>
 800f5da:	bf00      	nop
 800f5dc:	f3af 8000 	nop.w
 800f5e0:	33145c07 	.word	0x33145c07
 800f5e4:	3ca1a626 	.word	0x3ca1a626
 800f5e8:	54442d18 	.word	0x54442d18
 800f5ec:	400921fb 	.word	0x400921fb
 800f5f0:	54442d18 	.word	0x54442d18
 800f5f4:	3ff921fb 	.word	0x3ff921fb
 800f5f8:	54442d18 	.word	0x54442d18
 800f5fc:	3fe921fb 	.word	0x3fe921fb
 800f600:	08011ca8 	.word	0x08011ca8
 800f604:	08011cc0 	.word	0x08011cc0
 800f608:	54442d18 	.word	0x54442d18
 800f60c:	c00921fb 	.word	0xc00921fb
 800f610:	54442d18 	.word	0x54442d18
 800f614:	bff921fb 	.word	0xbff921fb
 800f618:	7ff00000 	.word	0x7ff00000
 800f61c:	00000000 	.word	0x00000000

0800f620 <__ieee754_pow>:
 800f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f624:	ed2d 8b06 	vpush	{d8-d10}
 800f628:	b089      	sub	sp, #36	; 0x24
 800f62a:	ed8d 1b00 	vstr	d1, [sp]
 800f62e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f632:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f636:	ea58 0102 	orrs.w	r1, r8, r2
 800f63a:	ec57 6b10 	vmov	r6, r7, d0
 800f63e:	d115      	bne.n	800f66c <__ieee754_pow+0x4c>
 800f640:	19b3      	adds	r3, r6, r6
 800f642:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f646:	4152      	adcs	r2, r2
 800f648:	4299      	cmp	r1, r3
 800f64a:	4b89      	ldr	r3, [pc, #548]	; (800f870 <__ieee754_pow+0x250>)
 800f64c:	4193      	sbcs	r3, r2
 800f64e:	f080 84d2 	bcs.w	800fff6 <__ieee754_pow+0x9d6>
 800f652:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f656:	4630      	mov	r0, r6
 800f658:	4639      	mov	r1, r7
 800f65a:	f7f0 fe3f 	bl	80002dc <__adddf3>
 800f65e:	ec41 0b10 	vmov	d0, r0, r1
 800f662:	b009      	add	sp, #36	; 0x24
 800f664:	ecbd 8b06 	vpop	{d8-d10}
 800f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66c:	4b81      	ldr	r3, [pc, #516]	; (800f874 <__ieee754_pow+0x254>)
 800f66e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f672:	429c      	cmp	r4, r3
 800f674:	ee10 aa10 	vmov	sl, s0
 800f678:	463d      	mov	r5, r7
 800f67a:	dc06      	bgt.n	800f68a <__ieee754_pow+0x6a>
 800f67c:	d101      	bne.n	800f682 <__ieee754_pow+0x62>
 800f67e:	2e00      	cmp	r6, #0
 800f680:	d1e7      	bne.n	800f652 <__ieee754_pow+0x32>
 800f682:	4598      	cmp	r8, r3
 800f684:	dc01      	bgt.n	800f68a <__ieee754_pow+0x6a>
 800f686:	d10f      	bne.n	800f6a8 <__ieee754_pow+0x88>
 800f688:	b172      	cbz	r2, 800f6a8 <__ieee754_pow+0x88>
 800f68a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f68e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f692:	ea55 050a 	orrs.w	r5, r5, sl
 800f696:	d1dc      	bne.n	800f652 <__ieee754_pow+0x32>
 800f698:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f69c:	18db      	adds	r3, r3, r3
 800f69e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f6a2:	4152      	adcs	r2, r2
 800f6a4:	429d      	cmp	r5, r3
 800f6a6:	e7d0      	b.n	800f64a <__ieee754_pow+0x2a>
 800f6a8:	2d00      	cmp	r5, #0
 800f6aa:	da3b      	bge.n	800f724 <__ieee754_pow+0x104>
 800f6ac:	4b72      	ldr	r3, [pc, #456]	; (800f878 <__ieee754_pow+0x258>)
 800f6ae:	4598      	cmp	r8, r3
 800f6b0:	dc51      	bgt.n	800f756 <__ieee754_pow+0x136>
 800f6b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f6b6:	4598      	cmp	r8, r3
 800f6b8:	f340 84ac 	ble.w	8010014 <__ieee754_pow+0x9f4>
 800f6bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f6c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f6c4:	2b14      	cmp	r3, #20
 800f6c6:	dd0f      	ble.n	800f6e8 <__ieee754_pow+0xc8>
 800f6c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f6cc:	fa22 f103 	lsr.w	r1, r2, r3
 800f6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	f040 849d 	bne.w	8010014 <__ieee754_pow+0x9f4>
 800f6da:	f001 0101 	and.w	r1, r1, #1
 800f6de:	f1c1 0302 	rsb	r3, r1, #2
 800f6e2:	9304      	str	r3, [sp, #16]
 800f6e4:	b182      	cbz	r2, 800f708 <__ieee754_pow+0xe8>
 800f6e6:	e05f      	b.n	800f7a8 <__ieee754_pow+0x188>
 800f6e8:	2a00      	cmp	r2, #0
 800f6ea:	d15b      	bne.n	800f7a4 <__ieee754_pow+0x184>
 800f6ec:	f1c3 0314 	rsb	r3, r3, #20
 800f6f0:	fa48 f103 	asr.w	r1, r8, r3
 800f6f4:	fa01 f303 	lsl.w	r3, r1, r3
 800f6f8:	4543      	cmp	r3, r8
 800f6fa:	f040 8488 	bne.w	801000e <__ieee754_pow+0x9ee>
 800f6fe:	f001 0101 	and.w	r1, r1, #1
 800f702:	f1c1 0302 	rsb	r3, r1, #2
 800f706:	9304      	str	r3, [sp, #16]
 800f708:	4b5c      	ldr	r3, [pc, #368]	; (800f87c <__ieee754_pow+0x25c>)
 800f70a:	4598      	cmp	r8, r3
 800f70c:	d132      	bne.n	800f774 <__ieee754_pow+0x154>
 800f70e:	f1b9 0f00 	cmp.w	r9, #0
 800f712:	f280 8478 	bge.w	8010006 <__ieee754_pow+0x9e6>
 800f716:	4959      	ldr	r1, [pc, #356]	; (800f87c <__ieee754_pow+0x25c>)
 800f718:	4632      	mov	r2, r6
 800f71a:	463b      	mov	r3, r7
 800f71c:	2000      	movs	r0, #0
 800f71e:	f7f1 f8bd 	bl	800089c <__aeabi_ddiv>
 800f722:	e79c      	b.n	800f65e <__ieee754_pow+0x3e>
 800f724:	2300      	movs	r3, #0
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	2a00      	cmp	r2, #0
 800f72a:	d13d      	bne.n	800f7a8 <__ieee754_pow+0x188>
 800f72c:	4b51      	ldr	r3, [pc, #324]	; (800f874 <__ieee754_pow+0x254>)
 800f72e:	4598      	cmp	r8, r3
 800f730:	d1ea      	bne.n	800f708 <__ieee754_pow+0xe8>
 800f732:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f736:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f73a:	ea53 030a 	orrs.w	r3, r3, sl
 800f73e:	f000 845a 	beq.w	800fff6 <__ieee754_pow+0x9d6>
 800f742:	4b4f      	ldr	r3, [pc, #316]	; (800f880 <__ieee754_pow+0x260>)
 800f744:	429c      	cmp	r4, r3
 800f746:	dd08      	ble.n	800f75a <__ieee754_pow+0x13a>
 800f748:	f1b9 0f00 	cmp.w	r9, #0
 800f74c:	f2c0 8457 	blt.w	800fffe <__ieee754_pow+0x9de>
 800f750:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f754:	e783      	b.n	800f65e <__ieee754_pow+0x3e>
 800f756:	2302      	movs	r3, #2
 800f758:	e7e5      	b.n	800f726 <__ieee754_pow+0x106>
 800f75a:	f1b9 0f00 	cmp.w	r9, #0
 800f75e:	f04f 0000 	mov.w	r0, #0
 800f762:	f04f 0100 	mov.w	r1, #0
 800f766:	f6bf af7a 	bge.w	800f65e <__ieee754_pow+0x3e>
 800f76a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f76e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f772:	e774      	b.n	800f65e <__ieee754_pow+0x3e>
 800f774:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f778:	d106      	bne.n	800f788 <__ieee754_pow+0x168>
 800f77a:	4632      	mov	r2, r6
 800f77c:	463b      	mov	r3, r7
 800f77e:	4630      	mov	r0, r6
 800f780:	4639      	mov	r1, r7
 800f782:	f7f0 ff61 	bl	8000648 <__aeabi_dmul>
 800f786:	e76a      	b.n	800f65e <__ieee754_pow+0x3e>
 800f788:	4b3e      	ldr	r3, [pc, #248]	; (800f884 <__ieee754_pow+0x264>)
 800f78a:	4599      	cmp	r9, r3
 800f78c:	d10c      	bne.n	800f7a8 <__ieee754_pow+0x188>
 800f78e:	2d00      	cmp	r5, #0
 800f790:	db0a      	blt.n	800f7a8 <__ieee754_pow+0x188>
 800f792:	ec47 6b10 	vmov	d0, r6, r7
 800f796:	b009      	add	sp, #36	; 0x24
 800f798:	ecbd 8b06 	vpop	{d8-d10}
 800f79c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a0:	f000 bc6c 	b.w	801007c <__ieee754_sqrt>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	9304      	str	r3, [sp, #16]
 800f7a8:	ec47 6b10 	vmov	d0, r6, r7
 800f7ac:	f001 fdac 	bl	8011308 <fabs>
 800f7b0:	ec51 0b10 	vmov	r0, r1, d0
 800f7b4:	f1ba 0f00 	cmp.w	sl, #0
 800f7b8:	d129      	bne.n	800f80e <__ieee754_pow+0x1ee>
 800f7ba:	b124      	cbz	r4, 800f7c6 <__ieee754_pow+0x1a6>
 800f7bc:	4b2f      	ldr	r3, [pc, #188]	; (800f87c <__ieee754_pow+0x25c>)
 800f7be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d123      	bne.n	800f80e <__ieee754_pow+0x1ee>
 800f7c6:	f1b9 0f00 	cmp.w	r9, #0
 800f7ca:	da05      	bge.n	800f7d8 <__ieee754_pow+0x1b8>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	2000      	movs	r0, #0
 800f7d2:	492a      	ldr	r1, [pc, #168]	; (800f87c <__ieee754_pow+0x25c>)
 800f7d4:	f7f1 f862 	bl	800089c <__aeabi_ddiv>
 800f7d8:	2d00      	cmp	r5, #0
 800f7da:	f6bf af40 	bge.w	800f65e <__ieee754_pow+0x3e>
 800f7de:	9b04      	ldr	r3, [sp, #16]
 800f7e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f7e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f7e8:	4323      	orrs	r3, r4
 800f7ea:	d108      	bne.n	800f7fe <__ieee754_pow+0x1de>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	4610      	mov	r0, r2
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	f7f0 fd70 	bl	80002d8 <__aeabi_dsub>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	e78f      	b.n	800f71e <__ieee754_pow+0xfe>
 800f7fe:	9b04      	ldr	r3, [sp, #16]
 800f800:	2b01      	cmp	r3, #1
 800f802:	f47f af2c 	bne.w	800f65e <__ieee754_pow+0x3e>
 800f806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f80a:	4619      	mov	r1, r3
 800f80c:	e727      	b.n	800f65e <__ieee754_pow+0x3e>
 800f80e:	0feb      	lsrs	r3, r5, #31
 800f810:	3b01      	subs	r3, #1
 800f812:	9306      	str	r3, [sp, #24]
 800f814:	9a06      	ldr	r2, [sp, #24]
 800f816:	9b04      	ldr	r3, [sp, #16]
 800f818:	4313      	orrs	r3, r2
 800f81a:	d102      	bne.n	800f822 <__ieee754_pow+0x202>
 800f81c:	4632      	mov	r2, r6
 800f81e:	463b      	mov	r3, r7
 800f820:	e7e6      	b.n	800f7f0 <__ieee754_pow+0x1d0>
 800f822:	4b19      	ldr	r3, [pc, #100]	; (800f888 <__ieee754_pow+0x268>)
 800f824:	4598      	cmp	r8, r3
 800f826:	f340 80fb 	ble.w	800fa20 <__ieee754_pow+0x400>
 800f82a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f82e:	4598      	cmp	r8, r3
 800f830:	4b13      	ldr	r3, [pc, #76]	; (800f880 <__ieee754_pow+0x260>)
 800f832:	dd0c      	ble.n	800f84e <__ieee754_pow+0x22e>
 800f834:	429c      	cmp	r4, r3
 800f836:	dc0f      	bgt.n	800f858 <__ieee754_pow+0x238>
 800f838:	f1b9 0f00 	cmp.w	r9, #0
 800f83c:	da0f      	bge.n	800f85e <__ieee754_pow+0x23e>
 800f83e:	2000      	movs	r0, #0
 800f840:	b009      	add	sp, #36	; 0x24
 800f842:	ecbd 8b06 	vpop	{d8-d10}
 800f846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84a:	f001 bbb4 	b.w	8010fb6 <__math_oflow>
 800f84e:	429c      	cmp	r4, r3
 800f850:	dbf2      	blt.n	800f838 <__ieee754_pow+0x218>
 800f852:	4b0a      	ldr	r3, [pc, #40]	; (800f87c <__ieee754_pow+0x25c>)
 800f854:	429c      	cmp	r4, r3
 800f856:	dd19      	ble.n	800f88c <__ieee754_pow+0x26c>
 800f858:	f1b9 0f00 	cmp.w	r9, #0
 800f85c:	dcef      	bgt.n	800f83e <__ieee754_pow+0x21e>
 800f85e:	2000      	movs	r0, #0
 800f860:	b009      	add	sp, #36	; 0x24
 800f862:	ecbd 8b06 	vpop	{d8-d10}
 800f866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86a:	f001 bb9b 	b.w	8010fa4 <__math_uflow>
 800f86e:	bf00      	nop
 800f870:	fff00000 	.word	0xfff00000
 800f874:	7ff00000 	.word	0x7ff00000
 800f878:	433fffff 	.word	0x433fffff
 800f87c:	3ff00000 	.word	0x3ff00000
 800f880:	3fefffff 	.word	0x3fefffff
 800f884:	3fe00000 	.word	0x3fe00000
 800f888:	41e00000 	.word	0x41e00000
 800f88c:	4b60      	ldr	r3, [pc, #384]	; (800fa10 <__ieee754_pow+0x3f0>)
 800f88e:	2200      	movs	r2, #0
 800f890:	f7f0 fd22 	bl	80002d8 <__aeabi_dsub>
 800f894:	a354      	add	r3, pc, #336	; (adr r3, 800f9e8 <__ieee754_pow+0x3c8>)
 800f896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89a:	4604      	mov	r4, r0
 800f89c:	460d      	mov	r5, r1
 800f89e:	f7f0 fed3 	bl	8000648 <__aeabi_dmul>
 800f8a2:	a353      	add	r3, pc, #332	; (adr r3, 800f9f0 <__ieee754_pow+0x3d0>)
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	4606      	mov	r6, r0
 800f8aa:	460f      	mov	r7, r1
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	f7f0 feca 	bl	8000648 <__aeabi_dmul>
 800f8b4:	4b57      	ldr	r3, [pc, #348]	; (800fa14 <__ieee754_pow+0x3f4>)
 800f8b6:	4682      	mov	sl, r0
 800f8b8:	468b      	mov	fp, r1
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	4620      	mov	r0, r4
 800f8be:	4629      	mov	r1, r5
 800f8c0:	f7f0 fec2 	bl	8000648 <__aeabi_dmul>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	460b      	mov	r3, r1
 800f8c8:	a14b      	add	r1, pc, #300	; (adr r1, 800f9f8 <__ieee754_pow+0x3d8>)
 800f8ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8ce:	f7f0 fd03 	bl	80002d8 <__aeabi_dsub>
 800f8d2:	4622      	mov	r2, r4
 800f8d4:	462b      	mov	r3, r5
 800f8d6:	f7f0 feb7 	bl	8000648 <__aeabi_dmul>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	2000      	movs	r0, #0
 800f8e0:	494d      	ldr	r1, [pc, #308]	; (800fa18 <__ieee754_pow+0x3f8>)
 800f8e2:	f7f0 fcf9 	bl	80002d8 <__aeabi_dsub>
 800f8e6:	4622      	mov	r2, r4
 800f8e8:	4680      	mov	r8, r0
 800f8ea:	4689      	mov	r9, r1
 800f8ec:	462b      	mov	r3, r5
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	4629      	mov	r1, r5
 800f8f2:	f7f0 fea9 	bl	8000648 <__aeabi_dmul>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	4640      	mov	r0, r8
 800f8fc:	4649      	mov	r1, r9
 800f8fe:	f7f0 fea3 	bl	8000648 <__aeabi_dmul>
 800f902:	a33f      	add	r3, pc, #252	; (adr r3, 800fa00 <__ieee754_pow+0x3e0>)
 800f904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f908:	f7f0 fe9e 	bl	8000648 <__aeabi_dmul>
 800f90c:	4602      	mov	r2, r0
 800f90e:	460b      	mov	r3, r1
 800f910:	4650      	mov	r0, sl
 800f912:	4659      	mov	r1, fp
 800f914:	f7f0 fce0 	bl	80002d8 <__aeabi_dsub>
 800f918:	4602      	mov	r2, r0
 800f91a:	460b      	mov	r3, r1
 800f91c:	4680      	mov	r8, r0
 800f91e:	4689      	mov	r9, r1
 800f920:	4630      	mov	r0, r6
 800f922:	4639      	mov	r1, r7
 800f924:	f7f0 fcda 	bl	80002dc <__adddf3>
 800f928:	2000      	movs	r0, #0
 800f92a:	4632      	mov	r2, r6
 800f92c:	463b      	mov	r3, r7
 800f92e:	4604      	mov	r4, r0
 800f930:	460d      	mov	r5, r1
 800f932:	f7f0 fcd1 	bl	80002d8 <__aeabi_dsub>
 800f936:	4602      	mov	r2, r0
 800f938:	460b      	mov	r3, r1
 800f93a:	4640      	mov	r0, r8
 800f93c:	4649      	mov	r1, r9
 800f93e:	f7f0 fccb 	bl	80002d8 <__aeabi_dsub>
 800f942:	9b04      	ldr	r3, [sp, #16]
 800f944:	9a06      	ldr	r2, [sp, #24]
 800f946:	3b01      	subs	r3, #1
 800f948:	4313      	orrs	r3, r2
 800f94a:	4682      	mov	sl, r0
 800f94c:	468b      	mov	fp, r1
 800f94e:	f040 81e7 	bne.w	800fd20 <__ieee754_pow+0x700>
 800f952:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fa08 <__ieee754_pow+0x3e8>
 800f956:	eeb0 8a47 	vmov.f32	s16, s14
 800f95a:	eef0 8a67 	vmov.f32	s17, s15
 800f95e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f962:	2600      	movs	r6, #0
 800f964:	4632      	mov	r2, r6
 800f966:	463b      	mov	r3, r7
 800f968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f96c:	f7f0 fcb4 	bl	80002d8 <__aeabi_dsub>
 800f970:	4622      	mov	r2, r4
 800f972:	462b      	mov	r3, r5
 800f974:	f7f0 fe68 	bl	8000648 <__aeabi_dmul>
 800f978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f97c:	4680      	mov	r8, r0
 800f97e:	4689      	mov	r9, r1
 800f980:	4650      	mov	r0, sl
 800f982:	4659      	mov	r1, fp
 800f984:	f7f0 fe60 	bl	8000648 <__aeabi_dmul>
 800f988:	4602      	mov	r2, r0
 800f98a:	460b      	mov	r3, r1
 800f98c:	4640      	mov	r0, r8
 800f98e:	4649      	mov	r1, r9
 800f990:	f7f0 fca4 	bl	80002dc <__adddf3>
 800f994:	4632      	mov	r2, r6
 800f996:	463b      	mov	r3, r7
 800f998:	4680      	mov	r8, r0
 800f99a:	4689      	mov	r9, r1
 800f99c:	4620      	mov	r0, r4
 800f99e:	4629      	mov	r1, r5
 800f9a0:	f7f0 fe52 	bl	8000648 <__aeabi_dmul>
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	460d      	mov	r5, r1
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	4649      	mov	r1, r9
 800f9ae:	4640      	mov	r0, r8
 800f9b0:	f7f0 fc94 	bl	80002dc <__adddf3>
 800f9b4:	4b19      	ldr	r3, [pc, #100]	; (800fa1c <__ieee754_pow+0x3fc>)
 800f9b6:	4299      	cmp	r1, r3
 800f9b8:	ec45 4b19 	vmov	d9, r4, r5
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	468b      	mov	fp, r1
 800f9c2:	f340 82f1 	ble.w	800ffa8 <__ieee754_pow+0x988>
 800f9c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f9ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f9ce:	4303      	orrs	r3, r0
 800f9d0:	f000 81e4 	beq.w	800fd9c <__ieee754_pow+0x77c>
 800f9d4:	ec51 0b18 	vmov	r0, r1, d8
 800f9d8:	2200      	movs	r2, #0
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f7f1 f8a6 	bl	8000b2c <__aeabi_dcmplt>
 800f9e0:	3800      	subs	r0, #0
 800f9e2:	bf18      	it	ne
 800f9e4:	2001      	movne	r0, #1
 800f9e6:	e72b      	b.n	800f840 <__ieee754_pow+0x220>
 800f9e8:	60000000 	.word	0x60000000
 800f9ec:	3ff71547 	.word	0x3ff71547
 800f9f0:	f85ddf44 	.word	0xf85ddf44
 800f9f4:	3e54ae0b 	.word	0x3e54ae0b
 800f9f8:	55555555 	.word	0x55555555
 800f9fc:	3fd55555 	.word	0x3fd55555
 800fa00:	652b82fe 	.word	0x652b82fe
 800fa04:	3ff71547 	.word	0x3ff71547
 800fa08:	00000000 	.word	0x00000000
 800fa0c:	bff00000 	.word	0xbff00000
 800fa10:	3ff00000 	.word	0x3ff00000
 800fa14:	3fd00000 	.word	0x3fd00000
 800fa18:	3fe00000 	.word	0x3fe00000
 800fa1c:	408fffff 	.word	0x408fffff
 800fa20:	4bd5      	ldr	r3, [pc, #852]	; (800fd78 <__ieee754_pow+0x758>)
 800fa22:	402b      	ands	r3, r5
 800fa24:	2200      	movs	r2, #0
 800fa26:	b92b      	cbnz	r3, 800fa34 <__ieee754_pow+0x414>
 800fa28:	4bd4      	ldr	r3, [pc, #848]	; (800fd7c <__ieee754_pow+0x75c>)
 800fa2a:	f7f0 fe0d 	bl	8000648 <__aeabi_dmul>
 800fa2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fa32:	460c      	mov	r4, r1
 800fa34:	1523      	asrs	r3, r4, #20
 800fa36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fa3a:	4413      	add	r3, r2
 800fa3c:	9305      	str	r3, [sp, #20]
 800fa3e:	4bd0      	ldr	r3, [pc, #832]	; (800fd80 <__ieee754_pow+0x760>)
 800fa40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fa44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fa48:	429c      	cmp	r4, r3
 800fa4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fa4e:	dd08      	ble.n	800fa62 <__ieee754_pow+0x442>
 800fa50:	4bcc      	ldr	r3, [pc, #816]	; (800fd84 <__ieee754_pow+0x764>)
 800fa52:	429c      	cmp	r4, r3
 800fa54:	f340 8162 	ble.w	800fd1c <__ieee754_pow+0x6fc>
 800fa58:	9b05      	ldr	r3, [sp, #20]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	9305      	str	r3, [sp, #20]
 800fa5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fa62:	2400      	movs	r4, #0
 800fa64:	00e3      	lsls	r3, r4, #3
 800fa66:	9307      	str	r3, [sp, #28]
 800fa68:	4bc7      	ldr	r3, [pc, #796]	; (800fd88 <__ieee754_pow+0x768>)
 800fa6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa6e:	ed93 7b00 	vldr	d7, [r3]
 800fa72:	4629      	mov	r1, r5
 800fa74:	ec53 2b17 	vmov	r2, r3, d7
 800fa78:	eeb0 9a47 	vmov.f32	s18, s14
 800fa7c:	eef0 9a67 	vmov.f32	s19, s15
 800fa80:	4682      	mov	sl, r0
 800fa82:	f7f0 fc29 	bl	80002d8 <__aeabi_dsub>
 800fa86:	4652      	mov	r2, sl
 800fa88:	4606      	mov	r6, r0
 800fa8a:	460f      	mov	r7, r1
 800fa8c:	462b      	mov	r3, r5
 800fa8e:	ec51 0b19 	vmov	r0, r1, d9
 800fa92:	f7f0 fc23 	bl	80002dc <__adddf3>
 800fa96:	4602      	mov	r2, r0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	49bb      	ldr	r1, [pc, #748]	; (800fd8c <__ieee754_pow+0x76c>)
 800fa9e:	f7f0 fefd 	bl	800089c <__aeabi_ddiv>
 800faa2:	ec41 0b1a 	vmov	d10, r0, r1
 800faa6:	4602      	mov	r2, r0
 800faa8:	460b      	mov	r3, r1
 800faaa:	4630      	mov	r0, r6
 800faac:	4639      	mov	r1, r7
 800faae:	f7f0 fdcb 	bl	8000648 <__aeabi_dmul>
 800fab2:	2300      	movs	r3, #0
 800fab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fab8:	9302      	str	r3, [sp, #8]
 800faba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fabe:	46ab      	mov	fp, r5
 800fac0:	106d      	asrs	r5, r5, #1
 800fac2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fac6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800faca:	ec41 0b18 	vmov	d8, r0, r1
 800face:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fad2:	2200      	movs	r2, #0
 800fad4:	4640      	mov	r0, r8
 800fad6:	4649      	mov	r1, r9
 800fad8:	4614      	mov	r4, r2
 800fada:	461d      	mov	r5, r3
 800fadc:	f7f0 fdb4 	bl	8000648 <__aeabi_dmul>
 800fae0:	4602      	mov	r2, r0
 800fae2:	460b      	mov	r3, r1
 800fae4:	4630      	mov	r0, r6
 800fae6:	4639      	mov	r1, r7
 800fae8:	f7f0 fbf6 	bl	80002d8 <__aeabi_dsub>
 800faec:	ec53 2b19 	vmov	r2, r3, d9
 800faf0:	4606      	mov	r6, r0
 800faf2:	460f      	mov	r7, r1
 800faf4:	4620      	mov	r0, r4
 800faf6:	4629      	mov	r1, r5
 800faf8:	f7f0 fbee 	bl	80002d8 <__aeabi_dsub>
 800fafc:	4602      	mov	r2, r0
 800fafe:	460b      	mov	r3, r1
 800fb00:	4650      	mov	r0, sl
 800fb02:	4659      	mov	r1, fp
 800fb04:	f7f0 fbe8 	bl	80002d8 <__aeabi_dsub>
 800fb08:	4642      	mov	r2, r8
 800fb0a:	464b      	mov	r3, r9
 800fb0c:	f7f0 fd9c 	bl	8000648 <__aeabi_dmul>
 800fb10:	4602      	mov	r2, r0
 800fb12:	460b      	mov	r3, r1
 800fb14:	4630      	mov	r0, r6
 800fb16:	4639      	mov	r1, r7
 800fb18:	f7f0 fbde 	bl	80002d8 <__aeabi_dsub>
 800fb1c:	ec53 2b1a 	vmov	r2, r3, d10
 800fb20:	f7f0 fd92 	bl	8000648 <__aeabi_dmul>
 800fb24:	ec53 2b18 	vmov	r2, r3, d8
 800fb28:	ec41 0b19 	vmov	d9, r0, r1
 800fb2c:	ec51 0b18 	vmov	r0, r1, d8
 800fb30:	f7f0 fd8a 	bl	8000648 <__aeabi_dmul>
 800fb34:	a37c      	add	r3, pc, #496	; (adr r3, 800fd28 <__ieee754_pow+0x708>)
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	460d      	mov	r5, r1
 800fb3e:	f7f0 fd83 	bl	8000648 <__aeabi_dmul>
 800fb42:	a37b      	add	r3, pc, #492	; (adr r3, 800fd30 <__ieee754_pow+0x710>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f7f0 fbc8 	bl	80002dc <__adddf3>
 800fb4c:	4622      	mov	r2, r4
 800fb4e:	462b      	mov	r3, r5
 800fb50:	f7f0 fd7a 	bl	8000648 <__aeabi_dmul>
 800fb54:	a378      	add	r3, pc, #480	; (adr r3, 800fd38 <__ieee754_pow+0x718>)
 800fb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5a:	f7f0 fbbf 	bl	80002dc <__adddf3>
 800fb5e:	4622      	mov	r2, r4
 800fb60:	462b      	mov	r3, r5
 800fb62:	f7f0 fd71 	bl	8000648 <__aeabi_dmul>
 800fb66:	a376      	add	r3, pc, #472	; (adr r3, 800fd40 <__ieee754_pow+0x720>)
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	f7f0 fbb6 	bl	80002dc <__adddf3>
 800fb70:	4622      	mov	r2, r4
 800fb72:	462b      	mov	r3, r5
 800fb74:	f7f0 fd68 	bl	8000648 <__aeabi_dmul>
 800fb78:	a373      	add	r3, pc, #460	; (adr r3, 800fd48 <__ieee754_pow+0x728>)
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	f7f0 fbad 	bl	80002dc <__adddf3>
 800fb82:	4622      	mov	r2, r4
 800fb84:	462b      	mov	r3, r5
 800fb86:	f7f0 fd5f 	bl	8000648 <__aeabi_dmul>
 800fb8a:	a371      	add	r3, pc, #452	; (adr r3, 800fd50 <__ieee754_pow+0x730>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	f7f0 fba4 	bl	80002dc <__adddf3>
 800fb94:	4622      	mov	r2, r4
 800fb96:	4606      	mov	r6, r0
 800fb98:	460f      	mov	r7, r1
 800fb9a:	462b      	mov	r3, r5
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	4629      	mov	r1, r5
 800fba0:	f7f0 fd52 	bl	8000648 <__aeabi_dmul>
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	4630      	mov	r0, r6
 800fbaa:	4639      	mov	r1, r7
 800fbac:	f7f0 fd4c 	bl	8000648 <__aeabi_dmul>
 800fbb0:	4642      	mov	r2, r8
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	460d      	mov	r5, r1
 800fbb6:	464b      	mov	r3, r9
 800fbb8:	ec51 0b18 	vmov	r0, r1, d8
 800fbbc:	f7f0 fb8e 	bl	80002dc <__adddf3>
 800fbc0:	ec53 2b19 	vmov	r2, r3, d9
 800fbc4:	f7f0 fd40 	bl	8000648 <__aeabi_dmul>
 800fbc8:	4622      	mov	r2, r4
 800fbca:	462b      	mov	r3, r5
 800fbcc:	f7f0 fb86 	bl	80002dc <__adddf3>
 800fbd0:	4642      	mov	r2, r8
 800fbd2:	4682      	mov	sl, r0
 800fbd4:	468b      	mov	fp, r1
 800fbd6:	464b      	mov	r3, r9
 800fbd8:	4640      	mov	r0, r8
 800fbda:	4649      	mov	r1, r9
 800fbdc:	f7f0 fd34 	bl	8000648 <__aeabi_dmul>
 800fbe0:	4b6b      	ldr	r3, [pc, #428]	; (800fd90 <__ieee754_pow+0x770>)
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	460f      	mov	r7, r1
 800fbe8:	f7f0 fb78 	bl	80002dc <__adddf3>
 800fbec:	4652      	mov	r2, sl
 800fbee:	465b      	mov	r3, fp
 800fbf0:	f7f0 fb74 	bl	80002dc <__adddf3>
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	460d      	mov	r5, r1
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	4640      	mov	r0, r8
 800fc00:	4649      	mov	r1, r9
 800fc02:	f7f0 fd21 	bl	8000648 <__aeabi_dmul>
 800fc06:	4b62      	ldr	r3, [pc, #392]	; (800fd90 <__ieee754_pow+0x770>)
 800fc08:	4680      	mov	r8, r0
 800fc0a:	4689      	mov	r9, r1
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	4620      	mov	r0, r4
 800fc10:	4629      	mov	r1, r5
 800fc12:	f7f0 fb61 	bl	80002d8 <__aeabi_dsub>
 800fc16:	4632      	mov	r2, r6
 800fc18:	463b      	mov	r3, r7
 800fc1a:	f7f0 fb5d 	bl	80002d8 <__aeabi_dsub>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	460b      	mov	r3, r1
 800fc22:	4650      	mov	r0, sl
 800fc24:	4659      	mov	r1, fp
 800fc26:	f7f0 fb57 	bl	80002d8 <__aeabi_dsub>
 800fc2a:	ec53 2b18 	vmov	r2, r3, d8
 800fc2e:	f7f0 fd0b 	bl	8000648 <__aeabi_dmul>
 800fc32:	4622      	mov	r2, r4
 800fc34:	4606      	mov	r6, r0
 800fc36:	460f      	mov	r7, r1
 800fc38:	462b      	mov	r3, r5
 800fc3a:	ec51 0b19 	vmov	r0, r1, d9
 800fc3e:	f7f0 fd03 	bl	8000648 <__aeabi_dmul>
 800fc42:	4602      	mov	r2, r0
 800fc44:	460b      	mov	r3, r1
 800fc46:	4630      	mov	r0, r6
 800fc48:	4639      	mov	r1, r7
 800fc4a:	f7f0 fb47 	bl	80002dc <__adddf3>
 800fc4e:	4606      	mov	r6, r0
 800fc50:	460f      	mov	r7, r1
 800fc52:	4602      	mov	r2, r0
 800fc54:	460b      	mov	r3, r1
 800fc56:	4640      	mov	r0, r8
 800fc58:	4649      	mov	r1, r9
 800fc5a:	f7f0 fb3f 	bl	80002dc <__adddf3>
 800fc5e:	a33e      	add	r3, pc, #248	; (adr r3, 800fd58 <__ieee754_pow+0x738>)
 800fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc64:	2000      	movs	r0, #0
 800fc66:	4604      	mov	r4, r0
 800fc68:	460d      	mov	r5, r1
 800fc6a:	f7f0 fced 	bl	8000648 <__aeabi_dmul>
 800fc6e:	4642      	mov	r2, r8
 800fc70:	ec41 0b18 	vmov	d8, r0, r1
 800fc74:	464b      	mov	r3, r9
 800fc76:	4620      	mov	r0, r4
 800fc78:	4629      	mov	r1, r5
 800fc7a:	f7f0 fb2d 	bl	80002d8 <__aeabi_dsub>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	460b      	mov	r3, r1
 800fc82:	4630      	mov	r0, r6
 800fc84:	4639      	mov	r1, r7
 800fc86:	f7f0 fb27 	bl	80002d8 <__aeabi_dsub>
 800fc8a:	a335      	add	r3, pc, #212	; (adr r3, 800fd60 <__ieee754_pow+0x740>)
 800fc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc90:	f7f0 fcda 	bl	8000648 <__aeabi_dmul>
 800fc94:	a334      	add	r3, pc, #208	; (adr r3, 800fd68 <__ieee754_pow+0x748>)
 800fc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	460f      	mov	r7, r1
 800fc9e:	4620      	mov	r0, r4
 800fca0:	4629      	mov	r1, r5
 800fca2:	f7f0 fcd1 	bl	8000648 <__aeabi_dmul>
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	4630      	mov	r0, r6
 800fcac:	4639      	mov	r1, r7
 800fcae:	f7f0 fb15 	bl	80002dc <__adddf3>
 800fcb2:	9a07      	ldr	r2, [sp, #28]
 800fcb4:	4b37      	ldr	r3, [pc, #220]	; (800fd94 <__ieee754_pow+0x774>)
 800fcb6:	4413      	add	r3, r2
 800fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcbc:	f7f0 fb0e 	bl	80002dc <__adddf3>
 800fcc0:	4682      	mov	sl, r0
 800fcc2:	9805      	ldr	r0, [sp, #20]
 800fcc4:	468b      	mov	fp, r1
 800fcc6:	f7f0 fc55 	bl	8000574 <__aeabi_i2d>
 800fcca:	9a07      	ldr	r2, [sp, #28]
 800fccc:	4b32      	ldr	r3, [pc, #200]	; (800fd98 <__ieee754_pow+0x778>)
 800fcce:	4413      	add	r3, r2
 800fcd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	460f      	mov	r7, r1
 800fcd8:	4652      	mov	r2, sl
 800fcda:	465b      	mov	r3, fp
 800fcdc:	ec51 0b18 	vmov	r0, r1, d8
 800fce0:	f7f0 fafc 	bl	80002dc <__adddf3>
 800fce4:	4642      	mov	r2, r8
 800fce6:	464b      	mov	r3, r9
 800fce8:	f7f0 faf8 	bl	80002dc <__adddf3>
 800fcec:	4632      	mov	r2, r6
 800fcee:	463b      	mov	r3, r7
 800fcf0:	f7f0 faf4 	bl	80002dc <__adddf3>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	4632      	mov	r2, r6
 800fcf8:	463b      	mov	r3, r7
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	460d      	mov	r5, r1
 800fcfe:	f7f0 faeb 	bl	80002d8 <__aeabi_dsub>
 800fd02:	4642      	mov	r2, r8
 800fd04:	464b      	mov	r3, r9
 800fd06:	f7f0 fae7 	bl	80002d8 <__aeabi_dsub>
 800fd0a:	ec53 2b18 	vmov	r2, r3, d8
 800fd0e:	f7f0 fae3 	bl	80002d8 <__aeabi_dsub>
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4650      	mov	r0, sl
 800fd18:	4659      	mov	r1, fp
 800fd1a:	e610      	b.n	800f93e <__ieee754_pow+0x31e>
 800fd1c:	2401      	movs	r4, #1
 800fd1e:	e6a1      	b.n	800fa64 <__ieee754_pow+0x444>
 800fd20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fd70 <__ieee754_pow+0x750>
 800fd24:	e617      	b.n	800f956 <__ieee754_pow+0x336>
 800fd26:	bf00      	nop
 800fd28:	4a454eef 	.word	0x4a454eef
 800fd2c:	3fca7e28 	.word	0x3fca7e28
 800fd30:	93c9db65 	.word	0x93c9db65
 800fd34:	3fcd864a 	.word	0x3fcd864a
 800fd38:	a91d4101 	.word	0xa91d4101
 800fd3c:	3fd17460 	.word	0x3fd17460
 800fd40:	518f264d 	.word	0x518f264d
 800fd44:	3fd55555 	.word	0x3fd55555
 800fd48:	db6fabff 	.word	0xdb6fabff
 800fd4c:	3fdb6db6 	.word	0x3fdb6db6
 800fd50:	33333303 	.word	0x33333303
 800fd54:	3fe33333 	.word	0x3fe33333
 800fd58:	e0000000 	.word	0xe0000000
 800fd5c:	3feec709 	.word	0x3feec709
 800fd60:	dc3a03fd 	.word	0xdc3a03fd
 800fd64:	3feec709 	.word	0x3feec709
 800fd68:	145b01f5 	.word	0x145b01f5
 800fd6c:	be3e2fe0 	.word	0xbe3e2fe0
 800fd70:	00000000 	.word	0x00000000
 800fd74:	3ff00000 	.word	0x3ff00000
 800fd78:	7ff00000 	.word	0x7ff00000
 800fd7c:	43400000 	.word	0x43400000
 800fd80:	0003988e 	.word	0x0003988e
 800fd84:	000bb679 	.word	0x000bb679
 800fd88:	08011cd8 	.word	0x08011cd8
 800fd8c:	3ff00000 	.word	0x3ff00000
 800fd90:	40080000 	.word	0x40080000
 800fd94:	08011cf8 	.word	0x08011cf8
 800fd98:	08011ce8 	.word	0x08011ce8
 800fd9c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010074 <__ieee754_pow+0xa54>)
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	4640      	mov	r0, r8
 800fda4:	4649      	mov	r1, r9
 800fda6:	f7f0 fa99 	bl	80002dc <__adddf3>
 800fdaa:	4622      	mov	r2, r4
 800fdac:	ec41 0b1a 	vmov	d10, r0, r1
 800fdb0:	462b      	mov	r3, r5
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	4639      	mov	r1, r7
 800fdb6:	f7f0 fa8f 	bl	80002d8 <__aeabi_dsub>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	ec51 0b1a 	vmov	r0, r1, d10
 800fdc2:	f7f0 fed1 	bl	8000b68 <__aeabi_dcmpgt>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	f47f ae04 	bne.w	800f9d4 <__ieee754_pow+0x3b4>
 800fdcc:	4aa4      	ldr	r2, [pc, #656]	; (8010060 <__ieee754_pow+0xa40>)
 800fdce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	f340 8108 	ble.w	800ffe8 <__ieee754_pow+0x9c8>
 800fdd8:	151b      	asrs	r3, r3, #20
 800fdda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fdde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fde2:	fa4a f303 	asr.w	r3, sl, r3
 800fde6:	445b      	add	r3, fp
 800fde8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fdec:	4e9d      	ldr	r6, [pc, #628]	; (8010064 <__ieee754_pow+0xa44>)
 800fdee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fdf2:	4116      	asrs	r6, r2
 800fdf4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	ea23 0106 	bic.w	r1, r3, r6
 800fdfe:	f1c2 0214 	rsb	r2, r2, #20
 800fe02:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fe06:	fa4a fa02 	asr.w	sl, sl, r2
 800fe0a:	f1bb 0f00 	cmp.w	fp, #0
 800fe0e:	4602      	mov	r2, r0
 800fe10:	460b      	mov	r3, r1
 800fe12:	4620      	mov	r0, r4
 800fe14:	4629      	mov	r1, r5
 800fe16:	bfb8      	it	lt
 800fe18:	f1ca 0a00 	rsblt	sl, sl, #0
 800fe1c:	f7f0 fa5c 	bl	80002d8 <__aeabi_dsub>
 800fe20:	ec41 0b19 	vmov	d9, r0, r1
 800fe24:	4642      	mov	r2, r8
 800fe26:	464b      	mov	r3, r9
 800fe28:	ec51 0b19 	vmov	r0, r1, d9
 800fe2c:	f7f0 fa56 	bl	80002dc <__adddf3>
 800fe30:	a37b      	add	r3, pc, #492	; (adr r3, 8010020 <__ieee754_pow+0xa00>)
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	2000      	movs	r0, #0
 800fe38:	4604      	mov	r4, r0
 800fe3a:	460d      	mov	r5, r1
 800fe3c:	f7f0 fc04 	bl	8000648 <__aeabi_dmul>
 800fe40:	ec53 2b19 	vmov	r2, r3, d9
 800fe44:	4606      	mov	r6, r0
 800fe46:	460f      	mov	r7, r1
 800fe48:	4620      	mov	r0, r4
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	f7f0 fa44 	bl	80002d8 <__aeabi_dsub>
 800fe50:	4602      	mov	r2, r0
 800fe52:	460b      	mov	r3, r1
 800fe54:	4640      	mov	r0, r8
 800fe56:	4649      	mov	r1, r9
 800fe58:	f7f0 fa3e 	bl	80002d8 <__aeabi_dsub>
 800fe5c:	a372      	add	r3, pc, #456	; (adr r3, 8010028 <__ieee754_pow+0xa08>)
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	f7f0 fbf1 	bl	8000648 <__aeabi_dmul>
 800fe66:	a372      	add	r3, pc, #456	; (adr r3, 8010030 <__ieee754_pow+0xa10>)
 800fe68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6c:	4680      	mov	r8, r0
 800fe6e:	4689      	mov	r9, r1
 800fe70:	4620      	mov	r0, r4
 800fe72:	4629      	mov	r1, r5
 800fe74:	f7f0 fbe8 	bl	8000648 <__aeabi_dmul>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	460b      	mov	r3, r1
 800fe7c:	4640      	mov	r0, r8
 800fe7e:	4649      	mov	r1, r9
 800fe80:	f7f0 fa2c 	bl	80002dc <__adddf3>
 800fe84:	4604      	mov	r4, r0
 800fe86:	460d      	mov	r5, r1
 800fe88:	4602      	mov	r2, r0
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	4639      	mov	r1, r7
 800fe90:	f7f0 fa24 	bl	80002dc <__adddf3>
 800fe94:	4632      	mov	r2, r6
 800fe96:	463b      	mov	r3, r7
 800fe98:	4680      	mov	r8, r0
 800fe9a:	4689      	mov	r9, r1
 800fe9c:	f7f0 fa1c 	bl	80002d8 <__aeabi_dsub>
 800fea0:	4602      	mov	r2, r0
 800fea2:	460b      	mov	r3, r1
 800fea4:	4620      	mov	r0, r4
 800fea6:	4629      	mov	r1, r5
 800fea8:	f7f0 fa16 	bl	80002d8 <__aeabi_dsub>
 800feac:	4642      	mov	r2, r8
 800feae:	4606      	mov	r6, r0
 800feb0:	460f      	mov	r7, r1
 800feb2:	464b      	mov	r3, r9
 800feb4:	4640      	mov	r0, r8
 800feb6:	4649      	mov	r1, r9
 800feb8:	f7f0 fbc6 	bl	8000648 <__aeabi_dmul>
 800febc:	a35e      	add	r3, pc, #376	; (adr r3, 8010038 <__ieee754_pow+0xa18>)
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	4604      	mov	r4, r0
 800fec4:	460d      	mov	r5, r1
 800fec6:	f7f0 fbbf 	bl	8000648 <__aeabi_dmul>
 800feca:	a35d      	add	r3, pc, #372	; (adr r3, 8010040 <__ieee754_pow+0xa20>)
 800fecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed0:	f7f0 fa02 	bl	80002d8 <__aeabi_dsub>
 800fed4:	4622      	mov	r2, r4
 800fed6:	462b      	mov	r3, r5
 800fed8:	f7f0 fbb6 	bl	8000648 <__aeabi_dmul>
 800fedc:	a35a      	add	r3, pc, #360	; (adr r3, 8010048 <__ieee754_pow+0xa28>)
 800fede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee2:	f7f0 f9fb 	bl	80002dc <__adddf3>
 800fee6:	4622      	mov	r2, r4
 800fee8:	462b      	mov	r3, r5
 800feea:	f7f0 fbad 	bl	8000648 <__aeabi_dmul>
 800feee:	a358      	add	r3, pc, #352	; (adr r3, 8010050 <__ieee754_pow+0xa30>)
 800fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef4:	f7f0 f9f0 	bl	80002d8 <__aeabi_dsub>
 800fef8:	4622      	mov	r2, r4
 800fefa:	462b      	mov	r3, r5
 800fefc:	f7f0 fba4 	bl	8000648 <__aeabi_dmul>
 800ff00:	a355      	add	r3, pc, #340	; (adr r3, 8010058 <__ieee754_pow+0xa38>)
 800ff02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff06:	f7f0 f9e9 	bl	80002dc <__adddf3>
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	462b      	mov	r3, r5
 800ff0e:	f7f0 fb9b 	bl	8000648 <__aeabi_dmul>
 800ff12:	4602      	mov	r2, r0
 800ff14:	460b      	mov	r3, r1
 800ff16:	4640      	mov	r0, r8
 800ff18:	4649      	mov	r1, r9
 800ff1a:	f7f0 f9dd 	bl	80002d8 <__aeabi_dsub>
 800ff1e:	4604      	mov	r4, r0
 800ff20:	460d      	mov	r5, r1
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	4640      	mov	r0, r8
 800ff28:	4649      	mov	r1, r9
 800ff2a:	f7f0 fb8d 	bl	8000648 <__aeabi_dmul>
 800ff2e:	2200      	movs	r2, #0
 800ff30:	ec41 0b19 	vmov	d9, r0, r1
 800ff34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff38:	4620      	mov	r0, r4
 800ff3a:	4629      	mov	r1, r5
 800ff3c:	f7f0 f9cc 	bl	80002d8 <__aeabi_dsub>
 800ff40:	4602      	mov	r2, r0
 800ff42:	460b      	mov	r3, r1
 800ff44:	ec51 0b19 	vmov	r0, r1, d9
 800ff48:	f7f0 fca8 	bl	800089c <__aeabi_ddiv>
 800ff4c:	4632      	mov	r2, r6
 800ff4e:	4604      	mov	r4, r0
 800ff50:	460d      	mov	r5, r1
 800ff52:	463b      	mov	r3, r7
 800ff54:	4640      	mov	r0, r8
 800ff56:	4649      	mov	r1, r9
 800ff58:	f7f0 fb76 	bl	8000648 <__aeabi_dmul>
 800ff5c:	4632      	mov	r2, r6
 800ff5e:	463b      	mov	r3, r7
 800ff60:	f7f0 f9bc 	bl	80002dc <__adddf3>
 800ff64:	4602      	mov	r2, r0
 800ff66:	460b      	mov	r3, r1
 800ff68:	4620      	mov	r0, r4
 800ff6a:	4629      	mov	r1, r5
 800ff6c:	f7f0 f9b4 	bl	80002d8 <__aeabi_dsub>
 800ff70:	4642      	mov	r2, r8
 800ff72:	464b      	mov	r3, r9
 800ff74:	f7f0 f9b0 	bl	80002d8 <__aeabi_dsub>
 800ff78:	460b      	mov	r3, r1
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	493a      	ldr	r1, [pc, #232]	; (8010068 <__ieee754_pow+0xa48>)
 800ff7e:	2000      	movs	r0, #0
 800ff80:	f7f0 f9aa 	bl	80002d8 <__aeabi_dsub>
 800ff84:	ec41 0b10 	vmov	d0, r0, r1
 800ff88:	ee10 3a90 	vmov	r3, s1
 800ff8c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ff90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff94:	da2b      	bge.n	800ffee <__ieee754_pow+0x9ce>
 800ff96:	4650      	mov	r0, sl
 800ff98:	f001 f9ca 	bl	8011330 <scalbn>
 800ff9c:	ec51 0b10 	vmov	r0, r1, d0
 800ffa0:	ec53 2b18 	vmov	r2, r3, d8
 800ffa4:	f7ff bbed 	b.w	800f782 <__ieee754_pow+0x162>
 800ffa8:	4b30      	ldr	r3, [pc, #192]	; (801006c <__ieee754_pow+0xa4c>)
 800ffaa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ffae:	429e      	cmp	r6, r3
 800ffb0:	f77f af0c 	ble.w	800fdcc <__ieee754_pow+0x7ac>
 800ffb4:	4b2e      	ldr	r3, [pc, #184]	; (8010070 <__ieee754_pow+0xa50>)
 800ffb6:	440b      	add	r3, r1
 800ffb8:	4303      	orrs	r3, r0
 800ffba:	d009      	beq.n	800ffd0 <__ieee754_pow+0x9b0>
 800ffbc:	ec51 0b18 	vmov	r0, r1, d8
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f7f0 fdb2 	bl	8000b2c <__aeabi_dcmplt>
 800ffc8:	3800      	subs	r0, #0
 800ffca:	bf18      	it	ne
 800ffcc:	2001      	movne	r0, #1
 800ffce:	e447      	b.n	800f860 <__ieee754_pow+0x240>
 800ffd0:	4622      	mov	r2, r4
 800ffd2:	462b      	mov	r3, r5
 800ffd4:	f7f0 f980 	bl	80002d8 <__aeabi_dsub>
 800ffd8:	4642      	mov	r2, r8
 800ffda:	464b      	mov	r3, r9
 800ffdc:	f7f0 fdba 	bl	8000b54 <__aeabi_dcmpge>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	f43f aef3 	beq.w	800fdcc <__ieee754_pow+0x7ac>
 800ffe6:	e7e9      	b.n	800ffbc <__ieee754_pow+0x99c>
 800ffe8:	f04f 0a00 	mov.w	sl, #0
 800ffec:	e71a      	b.n	800fe24 <__ieee754_pow+0x804>
 800ffee:	ec51 0b10 	vmov	r0, r1, d0
 800fff2:	4619      	mov	r1, r3
 800fff4:	e7d4      	b.n	800ffa0 <__ieee754_pow+0x980>
 800fff6:	491c      	ldr	r1, [pc, #112]	; (8010068 <__ieee754_pow+0xa48>)
 800fff8:	2000      	movs	r0, #0
 800fffa:	f7ff bb30 	b.w	800f65e <__ieee754_pow+0x3e>
 800fffe:	2000      	movs	r0, #0
 8010000:	2100      	movs	r1, #0
 8010002:	f7ff bb2c 	b.w	800f65e <__ieee754_pow+0x3e>
 8010006:	4630      	mov	r0, r6
 8010008:	4639      	mov	r1, r7
 801000a:	f7ff bb28 	b.w	800f65e <__ieee754_pow+0x3e>
 801000e:	9204      	str	r2, [sp, #16]
 8010010:	f7ff bb7a 	b.w	800f708 <__ieee754_pow+0xe8>
 8010014:	2300      	movs	r3, #0
 8010016:	f7ff bb64 	b.w	800f6e2 <__ieee754_pow+0xc2>
 801001a:	bf00      	nop
 801001c:	f3af 8000 	nop.w
 8010020:	00000000 	.word	0x00000000
 8010024:	3fe62e43 	.word	0x3fe62e43
 8010028:	fefa39ef 	.word	0xfefa39ef
 801002c:	3fe62e42 	.word	0x3fe62e42
 8010030:	0ca86c39 	.word	0x0ca86c39
 8010034:	be205c61 	.word	0xbe205c61
 8010038:	72bea4d0 	.word	0x72bea4d0
 801003c:	3e663769 	.word	0x3e663769
 8010040:	c5d26bf1 	.word	0xc5d26bf1
 8010044:	3ebbbd41 	.word	0x3ebbbd41
 8010048:	af25de2c 	.word	0xaf25de2c
 801004c:	3f11566a 	.word	0x3f11566a
 8010050:	16bebd93 	.word	0x16bebd93
 8010054:	3f66c16c 	.word	0x3f66c16c
 8010058:	5555553e 	.word	0x5555553e
 801005c:	3fc55555 	.word	0x3fc55555
 8010060:	3fe00000 	.word	0x3fe00000
 8010064:	000fffff 	.word	0x000fffff
 8010068:	3ff00000 	.word	0x3ff00000
 801006c:	4090cbff 	.word	0x4090cbff
 8010070:	3f6f3400 	.word	0x3f6f3400
 8010074:	652b82fe 	.word	0x652b82fe
 8010078:	3c971547 	.word	0x3c971547

0801007c <__ieee754_sqrt>:
 801007c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010080:	ec55 4b10 	vmov	r4, r5, d0
 8010084:	4e55      	ldr	r6, [pc, #340]	; (80101dc <__ieee754_sqrt+0x160>)
 8010086:	43ae      	bics	r6, r5
 8010088:	ee10 0a10 	vmov	r0, s0
 801008c:	ee10 3a10 	vmov	r3, s0
 8010090:	462a      	mov	r2, r5
 8010092:	4629      	mov	r1, r5
 8010094:	d110      	bne.n	80100b8 <__ieee754_sqrt+0x3c>
 8010096:	ee10 2a10 	vmov	r2, s0
 801009a:	462b      	mov	r3, r5
 801009c:	f7f0 fad4 	bl	8000648 <__aeabi_dmul>
 80100a0:	4602      	mov	r2, r0
 80100a2:	460b      	mov	r3, r1
 80100a4:	4620      	mov	r0, r4
 80100a6:	4629      	mov	r1, r5
 80100a8:	f7f0 f918 	bl	80002dc <__adddf3>
 80100ac:	4604      	mov	r4, r0
 80100ae:	460d      	mov	r5, r1
 80100b0:	ec45 4b10 	vmov	d0, r4, r5
 80100b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	dc10      	bgt.n	80100de <__ieee754_sqrt+0x62>
 80100bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80100c0:	4330      	orrs	r0, r6
 80100c2:	d0f5      	beq.n	80100b0 <__ieee754_sqrt+0x34>
 80100c4:	b15d      	cbz	r5, 80100de <__ieee754_sqrt+0x62>
 80100c6:	ee10 2a10 	vmov	r2, s0
 80100ca:	462b      	mov	r3, r5
 80100cc:	ee10 0a10 	vmov	r0, s0
 80100d0:	f7f0 f902 	bl	80002d8 <__aeabi_dsub>
 80100d4:	4602      	mov	r2, r0
 80100d6:	460b      	mov	r3, r1
 80100d8:	f7f0 fbe0 	bl	800089c <__aeabi_ddiv>
 80100dc:	e7e6      	b.n	80100ac <__ieee754_sqrt+0x30>
 80100de:	1512      	asrs	r2, r2, #20
 80100e0:	d074      	beq.n	80101cc <__ieee754_sqrt+0x150>
 80100e2:	07d4      	lsls	r4, r2, #31
 80100e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80100e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80100ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80100f0:	bf5e      	ittt	pl
 80100f2:	0fda      	lsrpl	r2, r3, #31
 80100f4:	005b      	lslpl	r3, r3, #1
 80100f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80100fa:	2400      	movs	r4, #0
 80100fc:	0fda      	lsrs	r2, r3, #31
 80100fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010102:	107f      	asrs	r7, r7, #1
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	2516      	movs	r5, #22
 8010108:	4620      	mov	r0, r4
 801010a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801010e:	1886      	adds	r6, r0, r2
 8010110:	428e      	cmp	r6, r1
 8010112:	bfde      	ittt	le
 8010114:	1b89      	suble	r1, r1, r6
 8010116:	18b0      	addle	r0, r6, r2
 8010118:	18a4      	addle	r4, r4, r2
 801011a:	0049      	lsls	r1, r1, #1
 801011c:	3d01      	subs	r5, #1
 801011e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010122:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010126:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801012a:	d1f0      	bne.n	801010e <__ieee754_sqrt+0x92>
 801012c:	462a      	mov	r2, r5
 801012e:	f04f 0e20 	mov.w	lr, #32
 8010132:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010136:	4281      	cmp	r1, r0
 8010138:	eb06 0c05 	add.w	ip, r6, r5
 801013c:	dc02      	bgt.n	8010144 <__ieee754_sqrt+0xc8>
 801013e:	d113      	bne.n	8010168 <__ieee754_sqrt+0xec>
 8010140:	459c      	cmp	ip, r3
 8010142:	d811      	bhi.n	8010168 <__ieee754_sqrt+0xec>
 8010144:	f1bc 0f00 	cmp.w	ip, #0
 8010148:	eb0c 0506 	add.w	r5, ip, r6
 801014c:	da43      	bge.n	80101d6 <__ieee754_sqrt+0x15a>
 801014e:	2d00      	cmp	r5, #0
 8010150:	db41      	blt.n	80101d6 <__ieee754_sqrt+0x15a>
 8010152:	f100 0801 	add.w	r8, r0, #1
 8010156:	1a09      	subs	r1, r1, r0
 8010158:	459c      	cmp	ip, r3
 801015a:	bf88      	it	hi
 801015c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010160:	eba3 030c 	sub.w	r3, r3, ip
 8010164:	4432      	add	r2, r6
 8010166:	4640      	mov	r0, r8
 8010168:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801016c:	f1be 0e01 	subs.w	lr, lr, #1
 8010170:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010174:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010178:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801017c:	d1db      	bne.n	8010136 <__ieee754_sqrt+0xba>
 801017e:	430b      	orrs	r3, r1
 8010180:	d006      	beq.n	8010190 <__ieee754_sqrt+0x114>
 8010182:	1c50      	adds	r0, r2, #1
 8010184:	bf13      	iteet	ne
 8010186:	3201      	addne	r2, #1
 8010188:	3401      	addeq	r4, #1
 801018a:	4672      	moveq	r2, lr
 801018c:	f022 0201 	bicne.w	r2, r2, #1
 8010190:	1063      	asrs	r3, r4, #1
 8010192:	0852      	lsrs	r2, r2, #1
 8010194:	07e1      	lsls	r1, r4, #31
 8010196:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801019a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801019e:	bf48      	it	mi
 80101a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80101a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80101a8:	4614      	mov	r4, r2
 80101aa:	e781      	b.n	80100b0 <__ieee754_sqrt+0x34>
 80101ac:	0ad9      	lsrs	r1, r3, #11
 80101ae:	3815      	subs	r0, #21
 80101b0:	055b      	lsls	r3, r3, #21
 80101b2:	2900      	cmp	r1, #0
 80101b4:	d0fa      	beq.n	80101ac <__ieee754_sqrt+0x130>
 80101b6:	02cd      	lsls	r5, r1, #11
 80101b8:	d50a      	bpl.n	80101d0 <__ieee754_sqrt+0x154>
 80101ba:	f1c2 0420 	rsb	r4, r2, #32
 80101be:	fa23 f404 	lsr.w	r4, r3, r4
 80101c2:	1e55      	subs	r5, r2, #1
 80101c4:	4093      	lsls	r3, r2
 80101c6:	4321      	orrs	r1, r4
 80101c8:	1b42      	subs	r2, r0, r5
 80101ca:	e78a      	b.n	80100e2 <__ieee754_sqrt+0x66>
 80101cc:	4610      	mov	r0, r2
 80101ce:	e7f0      	b.n	80101b2 <__ieee754_sqrt+0x136>
 80101d0:	0049      	lsls	r1, r1, #1
 80101d2:	3201      	adds	r2, #1
 80101d4:	e7ef      	b.n	80101b6 <__ieee754_sqrt+0x13a>
 80101d6:	4680      	mov	r8, r0
 80101d8:	e7bd      	b.n	8010156 <__ieee754_sqrt+0xda>
 80101da:	bf00      	nop
 80101dc:	7ff00000 	.word	0x7ff00000

080101e0 <__ieee754_asinf>:
 80101e0:	b538      	push	{r3, r4, r5, lr}
 80101e2:	ee10 5a10 	vmov	r5, s0
 80101e6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80101ea:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80101ee:	ed2d 8b04 	vpush	{d8-d9}
 80101f2:	d10c      	bne.n	801020e <__ieee754_asinf+0x2e>
 80101f4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801036c <__ieee754_asinf+0x18c>
 80101f8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8010370 <__ieee754_asinf+0x190>
 80101fc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010200:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010204:	eeb0 0a67 	vmov.f32	s0, s15
 8010208:	ecbd 8b04 	vpop	{d8-d9}
 801020c:	bd38      	pop	{r3, r4, r5, pc}
 801020e:	dd04      	ble.n	801021a <__ieee754_asinf+0x3a>
 8010210:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010214:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010218:	e7f6      	b.n	8010208 <__ieee754_asinf+0x28>
 801021a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801021e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010222:	da0b      	bge.n	801023c <__ieee754_asinf+0x5c>
 8010224:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8010228:	da52      	bge.n	80102d0 <__ieee754_asinf+0xf0>
 801022a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8010374 <__ieee754_asinf+0x194>
 801022e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010232:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023a:	dce5      	bgt.n	8010208 <__ieee754_asinf+0x28>
 801023c:	f001 f9d2 	bl	80115e4 <fabsf>
 8010240:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8010244:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8010248:	ee20 8a08 	vmul.f32	s16, s0, s16
 801024c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8010378 <__ieee754_asinf+0x198>
 8010250:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801037c <__ieee754_asinf+0x19c>
 8010254:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8010380 <__ieee754_asinf+0x1a0>
 8010258:	eea8 7a27 	vfma.f32	s14, s16, s15
 801025c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8010384 <__ieee754_asinf+0x1a4>
 8010260:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010264:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010388 <__ieee754_asinf+0x1a8>
 8010268:	eea7 7a88 	vfma.f32	s14, s15, s16
 801026c:	eddf 7a47 	vldr	s15, [pc, #284]	; 801038c <__ieee754_asinf+0x1ac>
 8010270:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010274:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8010390 <__ieee754_asinf+0x1b0>
 8010278:	eea7 9a88 	vfma.f32	s18, s15, s16
 801027c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8010394 <__ieee754_asinf+0x1b4>
 8010280:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010284:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8010398 <__ieee754_asinf+0x1b8>
 8010288:	eea7 7a88 	vfma.f32	s14, s15, s16
 801028c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801039c <__ieee754_asinf+0x1bc>
 8010290:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010294:	eeb0 0a48 	vmov.f32	s0, s16
 8010298:	eee7 8a88 	vfma.f32	s17, s15, s16
 801029c:	f000 fa62 	bl	8010764 <__ieee754_sqrtf>
 80102a0:	4b3f      	ldr	r3, [pc, #252]	; (80103a0 <__ieee754_asinf+0x1c0>)
 80102a2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80102a6:	429c      	cmp	r4, r3
 80102a8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80102ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80102b0:	dd3d      	ble.n	801032e <__ieee754_asinf+0x14e>
 80102b2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80102b6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80103a4 <__ieee754_asinf+0x1c4>
 80102ba:	eee0 7a26 	vfma.f32	s15, s0, s13
 80102be:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8010370 <__ieee754_asinf+0x190>
 80102c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80102c6:	2d00      	cmp	r5, #0
 80102c8:	bfd8      	it	le
 80102ca:	eeb1 0a40 	vnegle.f32	s0, s0
 80102ce:	e79b      	b.n	8010208 <__ieee754_asinf+0x28>
 80102d0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80102d4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8010378 <__ieee754_asinf+0x198>
 80102d8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801037c <__ieee754_asinf+0x19c>
 80102dc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010390 <__ieee754_asinf+0x1b0>
 80102e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80102e4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8010384 <__ieee754_asinf+0x1a4>
 80102e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80102ec:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8010388 <__ieee754_asinf+0x1a8>
 80102f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80102f4:	eddf 6a25 	vldr	s13, [pc, #148]	; 801038c <__ieee754_asinf+0x1ac>
 80102f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80102fc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8010380 <__ieee754_asinf+0x1a0>
 8010300:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010304:	eddf 6a23 	vldr	s13, [pc, #140]	; 8010394 <__ieee754_asinf+0x1b4>
 8010308:	eee7 6a86 	vfma.f32	s13, s15, s12
 801030c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8010398 <__ieee754_asinf+0x1b8>
 8010310:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010314:	eddf 6a21 	vldr	s13, [pc, #132]	; 801039c <__ieee754_asinf+0x1bc>
 8010318:	eee6 6a27 	vfma.f32	s13, s12, s15
 801031c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010320:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010324:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010328:	eea0 0a27 	vfma.f32	s0, s0, s15
 801032c:	e76c      	b.n	8010208 <__ieee754_asinf+0x28>
 801032e:	ee10 3a10 	vmov	r3, s0
 8010332:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010336:	f023 030f 	bic.w	r3, r3, #15
 801033a:	ee07 3a10 	vmov	s14, r3
 801033e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8010342:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010346:	ee30 0a00 	vadd.f32	s0, s0, s0
 801034a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801034e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801036c <__ieee754_asinf+0x18c>
 8010352:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8010356:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801035a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80103a8 <__ieee754_asinf+0x1c8>
 801035e:	eeb0 6a40 	vmov.f32	s12, s0
 8010362:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010366:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801036a:	e7aa      	b.n	80102c2 <__ieee754_asinf+0xe2>
 801036c:	b33bbd2e 	.word	0xb33bbd2e
 8010370:	3fc90fdb 	.word	0x3fc90fdb
 8010374:	7149f2ca 	.word	0x7149f2ca
 8010378:	3811ef08 	.word	0x3811ef08
 801037c:	3a4f7f04 	.word	0x3a4f7f04
 8010380:	3e2aaaab 	.word	0x3e2aaaab
 8010384:	bd241146 	.word	0xbd241146
 8010388:	3e4e0aa8 	.word	0x3e4e0aa8
 801038c:	bea6b090 	.word	0xbea6b090
 8010390:	3d9dc62e 	.word	0x3d9dc62e
 8010394:	bf303361 	.word	0xbf303361
 8010398:	4001572d 	.word	0x4001572d
 801039c:	c019d139 	.word	0xc019d139
 80103a0:	3f799999 	.word	0x3f799999
 80103a4:	333bbd2e 	.word	0x333bbd2e
 80103a8:	3f490fdb 	.word	0x3f490fdb

080103ac <__ieee754_atan2f>:
 80103ac:	ee10 2a90 	vmov	r2, s1
 80103b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80103b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80103b8:	b510      	push	{r4, lr}
 80103ba:	eef0 7a40 	vmov.f32	s15, s0
 80103be:	dc06      	bgt.n	80103ce <__ieee754_atan2f+0x22>
 80103c0:	ee10 0a10 	vmov	r0, s0
 80103c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80103c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80103cc:	dd04      	ble.n	80103d8 <__ieee754_atan2f+0x2c>
 80103ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80103d2:	eeb0 0a67 	vmov.f32	s0, s15
 80103d6:	bd10      	pop	{r4, pc}
 80103d8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80103dc:	d103      	bne.n	80103e6 <__ieee754_atan2f+0x3a>
 80103de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e2:	f001 b82b 	b.w	801143c <atanf>
 80103e6:	1794      	asrs	r4, r2, #30
 80103e8:	f004 0402 	and.w	r4, r4, #2
 80103ec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80103f0:	b943      	cbnz	r3, 8010404 <__ieee754_atan2f+0x58>
 80103f2:	2c02      	cmp	r4, #2
 80103f4:	d05e      	beq.n	80104b4 <__ieee754_atan2f+0x108>
 80103f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80104c8 <__ieee754_atan2f+0x11c>
 80103fa:	2c03      	cmp	r4, #3
 80103fc:	bf08      	it	eq
 80103fe:	eef0 7a47 	vmoveq.f32	s15, s14
 8010402:	e7e6      	b.n	80103d2 <__ieee754_atan2f+0x26>
 8010404:	b941      	cbnz	r1, 8010418 <__ieee754_atan2f+0x6c>
 8010406:	eddf 7a31 	vldr	s15, [pc, #196]	; 80104cc <__ieee754_atan2f+0x120>
 801040a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80104d0 <__ieee754_atan2f+0x124>
 801040e:	2800      	cmp	r0, #0
 8010410:	bfb8      	it	lt
 8010412:	eef0 7a40 	vmovlt.f32	s15, s0
 8010416:	e7dc      	b.n	80103d2 <__ieee754_atan2f+0x26>
 8010418:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801041c:	d110      	bne.n	8010440 <__ieee754_atan2f+0x94>
 801041e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010422:	f104 34ff 	add.w	r4, r4, #4294967295
 8010426:	d107      	bne.n	8010438 <__ieee754_atan2f+0x8c>
 8010428:	2c02      	cmp	r4, #2
 801042a:	d846      	bhi.n	80104ba <__ieee754_atan2f+0x10e>
 801042c:	4b29      	ldr	r3, [pc, #164]	; (80104d4 <__ieee754_atan2f+0x128>)
 801042e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010432:	edd4 7a00 	vldr	s15, [r4]
 8010436:	e7cc      	b.n	80103d2 <__ieee754_atan2f+0x26>
 8010438:	2c02      	cmp	r4, #2
 801043a:	d841      	bhi.n	80104c0 <__ieee754_atan2f+0x114>
 801043c:	4b26      	ldr	r3, [pc, #152]	; (80104d8 <__ieee754_atan2f+0x12c>)
 801043e:	e7f6      	b.n	801042e <__ieee754_atan2f+0x82>
 8010440:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010444:	d0df      	beq.n	8010406 <__ieee754_atan2f+0x5a>
 8010446:	1a5b      	subs	r3, r3, r1
 8010448:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801044c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010450:	da1a      	bge.n	8010488 <__ieee754_atan2f+0xdc>
 8010452:	2a00      	cmp	r2, #0
 8010454:	da01      	bge.n	801045a <__ieee754_atan2f+0xae>
 8010456:	313c      	adds	r1, #60	; 0x3c
 8010458:	db19      	blt.n	801048e <__ieee754_atan2f+0xe2>
 801045a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801045e:	f001 f8c1 	bl	80115e4 <fabsf>
 8010462:	f000 ffeb 	bl	801143c <atanf>
 8010466:	eef0 7a40 	vmov.f32	s15, s0
 801046a:	2c01      	cmp	r4, #1
 801046c:	d012      	beq.n	8010494 <__ieee754_atan2f+0xe8>
 801046e:	2c02      	cmp	r4, #2
 8010470:	d017      	beq.n	80104a2 <__ieee754_atan2f+0xf6>
 8010472:	2c00      	cmp	r4, #0
 8010474:	d0ad      	beq.n	80103d2 <__ieee754_atan2f+0x26>
 8010476:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80104dc <__ieee754_atan2f+0x130>
 801047a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801047e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80104e0 <__ieee754_atan2f+0x134>
 8010482:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010486:	e7a4      	b.n	80103d2 <__ieee754_atan2f+0x26>
 8010488:	eddf 7a10 	vldr	s15, [pc, #64]	; 80104cc <__ieee754_atan2f+0x120>
 801048c:	e7ed      	b.n	801046a <__ieee754_atan2f+0xbe>
 801048e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80104e4 <__ieee754_atan2f+0x138>
 8010492:	e7ea      	b.n	801046a <__ieee754_atan2f+0xbe>
 8010494:	ee17 3a90 	vmov	r3, s15
 8010498:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801049c:	ee07 3a90 	vmov	s15, r3
 80104a0:	e797      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104a2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80104dc <__ieee754_atan2f+0x130>
 80104a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80104aa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80104e0 <__ieee754_atan2f+0x134>
 80104ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 80104b2:	e78e      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104b4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80104e0 <__ieee754_atan2f+0x134>
 80104b8:	e78b      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104ba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80104e8 <__ieee754_atan2f+0x13c>
 80104be:	e788      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104c0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80104e4 <__ieee754_atan2f+0x138>
 80104c4:	e785      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104c6:	bf00      	nop
 80104c8:	c0490fdb 	.word	0xc0490fdb
 80104cc:	3fc90fdb 	.word	0x3fc90fdb
 80104d0:	bfc90fdb 	.word	0xbfc90fdb
 80104d4:	08011d08 	.word	0x08011d08
 80104d8:	08011d14 	.word	0x08011d14
 80104dc:	33bbbd2e 	.word	0x33bbbd2e
 80104e0:	40490fdb 	.word	0x40490fdb
 80104e4:	00000000 	.word	0x00000000
 80104e8:	3f490fdb 	.word	0x3f490fdb

080104ec <__ieee754_rem_pio2f>:
 80104ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ee:	ee10 6a10 	vmov	r6, s0
 80104f2:	4b8e      	ldr	r3, [pc, #568]	; (801072c <__ieee754_rem_pio2f+0x240>)
 80104f4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80104f8:	429d      	cmp	r5, r3
 80104fa:	b087      	sub	sp, #28
 80104fc:	eef0 7a40 	vmov.f32	s15, s0
 8010500:	4604      	mov	r4, r0
 8010502:	dc05      	bgt.n	8010510 <__ieee754_rem_pio2f+0x24>
 8010504:	2300      	movs	r3, #0
 8010506:	ed80 0a00 	vstr	s0, [r0]
 801050a:	6043      	str	r3, [r0, #4]
 801050c:	2000      	movs	r0, #0
 801050e:	e01a      	b.n	8010546 <__ieee754_rem_pio2f+0x5a>
 8010510:	4b87      	ldr	r3, [pc, #540]	; (8010730 <__ieee754_rem_pio2f+0x244>)
 8010512:	429d      	cmp	r5, r3
 8010514:	dc46      	bgt.n	80105a4 <__ieee754_rem_pio2f+0xb8>
 8010516:	2e00      	cmp	r6, #0
 8010518:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8010734 <__ieee754_rem_pio2f+0x248>
 801051c:	4b86      	ldr	r3, [pc, #536]	; (8010738 <__ieee754_rem_pio2f+0x24c>)
 801051e:	f025 050f 	bic.w	r5, r5, #15
 8010522:	dd1f      	ble.n	8010564 <__ieee754_rem_pio2f+0x78>
 8010524:	429d      	cmp	r5, r3
 8010526:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801052a:	d00e      	beq.n	801054a <__ieee754_rem_pio2f+0x5e>
 801052c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801073c <__ieee754_rem_pio2f+0x250>
 8010530:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010534:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010538:	ed80 0a00 	vstr	s0, [r0]
 801053c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010540:	2001      	movs	r0, #1
 8010542:	edc4 7a01 	vstr	s15, [r4, #4]
 8010546:	b007      	add	sp, #28
 8010548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801054a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8010740 <__ieee754_rem_pio2f+0x254>
 801054e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8010744 <__ieee754_rem_pio2f+0x258>
 8010552:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010556:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801055a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801055e:	edc0 6a00 	vstr	s13, [r0]
 8010562:	e7eb      	b.n	801053c <__ieee754_rem_pio2f+0x50>
 8010564:	429d      	cmp	r5, r3
 8010566:	ee77 7a80 	vadd.f32	s15, s15, s0
 801056a:	d00e      	beq.n	801058a <__ieee754_rem_pio2f+0x9e>
 801056c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801073c <__ieee754_rem_pio2f+0x250>
 8010570:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010574:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010578:	ed80 0a00 	vstr	s0, [r0]
 801057c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010580:	f04f 30ff 	mov.w	r0, #4294967295
 8010584:	edc4 7a01 	vstr	s15, [r4, #4]
 8010588:	e7dd      	b.n	8010546 <__ieee754_rem_pio2f+0x5a>
 801058a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8010740 <__ieee754_rem_pio2f+0x254>
 801058e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8010744 <__ieee754_rem_pio2f+0x258>
 8010592:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010596:	ee77 6a87 	vadd.f32	s13, s15, s14
 801059a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801059e:	edc0 6a00 	vstr	s13, [r0]
 80105a2:	e7eb      	b.n	801057c <__ieee754_rem_pio2f+0x90>
 80105a4:	4b68      	ldr	r3, [pc, #416]	; (8010748 <__ieee754_rem_pio2f+0x25c>)
 80105a6:	429d      	cmp	r5, r3
 80105a8:	dc72      	bgt.n	8010690 <__ieee754_rem_pio2f+0x1a4>
 80105aa:	f001 f81b 	bl	80115e4 <fabsf>
 80105ae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801074c <__ieee754_rem_pio2f+0x260>
 80105b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80105b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80105ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80105c2:	ee17 0a90 	vmov	r0, s15
 80105c6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010734 <__ieee754_rem_pio2f+0x248>
 80105ca:	eea7 0a67 	vfms.f32	s0, s14, s15
 80105ce:	281f      	cmp	r0, #31
 80105d0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801073c <__ieee754_rem_pio2f+0x250>
 80105d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105d8:	eeb1 6a47 	vneg.f32	s12, s14
 80105dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80105e0:	ee16 2a90 	vmov	r2, s13
 80105e4:	dc1c      	bgt.n	8010620 <__ieee754_rem_pio2f+0x134>
 80105e6:	495a      	ldr	r1, [pc, #360]	; (8010750 <__ieee754_rem_pio2f+0x264>)
 80105e8:	1e47      	subs	r7, r0, #1
 80105ea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80105ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80105f2:	428b      	cmp	r3, r1
 80105f4:	d014      	beq.n	8010620 <__ieee754_rem_pio2f+0x134>
 80105f6:	6022      	str	r2, [r4, #0]
 80105f8:	ed94 7a00 	vldr	s14, [r4]
 80105fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010600:	2e00      	cmp	r6, #0
 8010602:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010606:	ed84 0a01 	vstr	s0, [r4, #4]
 801060a:	da9c      	bge.n	8010546 <__ieee754_rem_pio2f+0x5a>
 801060c:	eeb1 7a47 	vneg.f32	s14, s14
 8010610:	eeb1 0a40 	vneg.f32	s0, s0
 8010614:	ed84 7a00 	vstr	s14, [r4]
 8010618:	ed84 0a01 	vstr	s0, [r4, #4]
 801061c:	4240      	negs	r0, r0
 801061e:	e792      	b.n	8010546 <__ieee754_rem_pio2f+0x5a>
 8010620:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010624:	15eb      	asrs	r3, r5, #23
 8010626:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801062a:	2d08      	cmp	r5, #8
 801062c:	dde3      	ble.n	80105f6 <__ieee754_rem_pio2f+0x10a>
 801062e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8010740 <__ieee754_rem_pio2f+0x254>
 8010632:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010744 <__ieee754_rem_pio2f+0x258>
 8010636:	eef0 6a40 	vmov.f32	s13, s0
 801063a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801063e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010642:	eea6 0a27 	vfma.f32	s0, s12, s15
 8010646:	eef0 7a40 	vmov.f32	s15, s0
 801064a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801064e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010652:	ee15 2a90 	vmov	r2, s11
 8010656:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801065a:	1a5b      	subs	r3, r3, r1
 801065c:	2b19      	cmp	r3, #25
 801065e:	dc04      	bgt.n	801066a <__ieee754_rem_pio2f+0x17e>
 8010660:	edc4 5a00 	vstr	s11, [r4]
 8010664:	eeb0 0a66 	vmov.f32	s0, s13
 8010668:	e7c6      	b.n	80105f8 <__ieee754_rem_pio2f+0x10c>
 801066a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8010754 <__ieee754_rem_pio2f+0x268>
 801066e:	eeb0 0a66 	vmov.f32	s0, s13
 8010672:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010676:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801067a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8010758 <__ieee754_rem_pio2f+0x26c>
 801067e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010682:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010686:	ee30 7a67 	vsub.f32	s14, s0, s15
 801068a:	ed84 7a00 	vstr	s14, [r4]
 801068e:	e7b3      	b.n	80105f8 <__ieee754_rem_pio2f+0x10c>
 8010690:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010694:	db06      	blt.n	80106a4 <__ieee754_rem_pio2f+0x1b8>
 8010696:	ee70 7a40 	vsub.f32	s15, s0, s0
 801069a:	edc0 7a01 	vstr	s15, [r0, #4]
 801069e:	edc0 7a00 	vstr	s15, [r0]
 80106a2:	e733      	b.n	801050c <__ieee754_rem_pio2f+0x20>
 80106a4:	15ea      	asrs	r2, r5, #23
 80106a6:	3a86      	subs	r2, #134	; 0x86
 80106a8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80106ac:	ee07 3a90 	vmov	s15, r3
 80106b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80106b4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801075c <__ieee754_rem_pio2f+0x270>
 80106b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106c0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80106c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80106cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106d4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80106d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80106e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e4:	edcd 7a05 	vstr	s15, [sp, #20]
 80106e8:	d11e      	bne.n	8010728 <__ieee754_rem_pio2f+0x23c>
 80106ea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80106ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f2:	bf14      	ite	ne
 80106f4:	2302      	movne	r3, #2
 80106f6:	2301      	moveq	r3, #1
 80106f8:	4919      	ldr	r1, [pc, #100]	; (8010760 <__ieee754_rem_pio2f+0x274>)
 80106fa:	9101      	str	r1, [sp, #4]
 80106fc:	2102      	movs	r1, #2
 80106fe:	9100      	str	r1, [sp, #0]
 8010700:	a803      	add	r0, sp, #12
 8010702:	4621      	mov	r1, r4
 8010704:	f000 f892 	bl	801082c <__kernel_rem_pio2f>
 8010708:	2e00      	cmp	r6, #0
 801070a:	f6bf af1c 	bge.w	8010546 <__ieee754_rem_pio2f+0x5a>
 801070e:	edd4 7a00 	vldr	s15, [r4]
 8010712:	eef1 7a67 	vneg.f32	s15, s15
 8010716:	edc4 7a00 	vstr	s15, [r4]
 801071a:	edd4 7a01 	vldr	s15, [r4, #4]
 801071e:	eef1 7a67 	vneg.f32	s15, s15
 8010722:	edc4 7a01 	vstr	s15, [r4, #4]
 8010726:	e779      	b.n	801061c <__ieee754_rem_pio2f+0x130>
 8010728:	2303      	movs	r3, #3
 801072a:	e7e5      	b.n	80106f8 <__ieee754_rem_pio2f+0x20c>
 801072c:	3f490fd8 	.word	0x3f490fd8
 8010730:	4016cbe3 	.word	0x4016cbe3
 8010734:	3fc90f80 	.word	0x3fc90f80
 8010738:	3fc90fd0 	.word	0x3fc90fd0
 801073c:	37354443 	.word	0x37354443
 8010740:	37354400 	.word	0x37354400
 8010744:	2e85a308 	.word	0x2e85a308
 8010748:	43490f80 	.word	0x43490f80
 801074c:	3f22f984 	.word	0x3f22f984
 8010750:	08011d20 	.word	0x08011d20
 8010754:	2e85a300 	.word	0x2e85a300
 8010758:	248d3132 	.word	0x248d3132
 801075c:	43800000 	.word	0x43800000
 8010760:	08011da0 	.word	0x08011da0

08010764 <__ieee754_sqrtf>:
 8010764:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010768:	4770      	bx	lr
	...

0801076c <__kernel_cosf>:
 801076c:	ee10 3a10 	vmov	r3, s0
 8010770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010774:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010778:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801077c:	da05      	bge.n	801078a <__kernel_cosf+0x1e>
 801077e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010782:	ee17 2a90 	vmov	r2, s15
 8010786:	2a00      	cmp	r2, #0
 8010788:	d03d      	beq.n	8010806 <__kernel_cosf+0x9a>
 801078a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801078e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801080c <__kernel_cosf+0xa0>
 8010792:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8010810 <__kernel_cosf+0xa4>
 8010796:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8010814 <__kernel_cosf+0xa8>
 801079a:	4a1f      	ldr	r2, [pc, #124]	; (8010818 <__kernel_cosf+0xac>)
 801079c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80107a0:	4293      	cmp	r3, r2
 80107a2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801081c <__kernel_cosf+0xb0>
 80107a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80107aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8010820 <__kernel_cosf+0xb4>
 80107ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80107b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8010824 <__kernel_cosf+0xb8>
 80107b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80107ba:	eeb0 7a66 	vmov.f32	s14, s13
 80107be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80107c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80107c6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80107ca:	ee67 6a25 	vmul.f32	s13, s14, s11
 80107ce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80107d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80107d6:	dc04      	bgt.n	80107e2 <__kernel_cosf+0x76>
 80107d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80107dc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80107e0:	4770      	bx	lr
 80107e2:	4a11      	ldr	r2, [pc, #68]	; (8010828 <__kernel_cosf+0xbc>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	bfda      	itte	le
 80107e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80107ec:	ee06 3a90 	vmovle	s13, r3
 80107f0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80107f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80107f8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80107fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010800:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010804:	4770      	bx	lr
 8010806:	eeb0 0a46 	vmov.f32	s0, s12
 801080a:	4770      	bx	lr
 801080c:	ad47d74e 	.word	0xad47d74e
 8010810:	310f74f6 	.word	0x310f74f6
 8010814:	3d2aaaab 	.word	0x3d2aaaab
 8010818:	3e999999 	.word	0x3e999999
 801081c:	b493f27c 	.word	0xb493f27c
 8010820:	37d00d01 	.word	0x37d00d01
 8010824:	bab60b61 	.word	0xbab60b61
 8010828:	3f480000 	.word	0x3f480000

0801082c <__kernel_rem_pio2f>:
 801082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010830:	ed2d 8b04 	vpush	{d8-d9}
 8010834:	b0d9      	sub	sp, #356	; 0x164
 8010836:	4688      	mov	r8, r1
 8010838:	9002      	str	r0, [sp, #8]
 801083a:	49bb      	ldr	r1, [pc, #748]	; (8010b28 <__kernel_rem_pio2f+0x2fc>)
 801083c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801083e:	9301      	str	r3, [sp, #4]
 8010840:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8010844:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8010848:	1e59      	subs	r1, r3, #1
 801084a:	1d13      	adds	r3, r2, #4
 801084c:	db27      	blt.n	801089e <__kernel_rem_pio2f+0x72>
 801084e:	f1b2 0b03 	subs.w	fp, r2, #3
 8010852:	bf48      	it	mi
 8010854:	f102 0b04 	addmi.w	fp, r2, #4
 8010858:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801085c:	1c45      	adds	r5, r0, #1
 801085e:	00ec      	lsls	r4, r5, #3
 8010860:	1a47      	subs	r7, r0, r1
 8010862:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8010b38 <__kernel_rem_pio2f+0x30c>
 8010866:	9403      	str	r4, [sp, #12]
 8010868:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801086c:	eb0a 0c01 	add.w	ip, sl, r1
 8010870:	ae1c      	add	r6, sp, #112	; 0x70
 8010872:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8010876:	2400      	movs	r4, #0
 8010878:	4564      	cmp	r4, ip
 801087a:	dd12      	ble.n	80108a2 <__kernel_rem_pio2f+0x76>
 801087c:	9b01      	ldr	r3, [sp, #4]
 801087e:	ac1c      	add	r4, sp, #112	; 0x70
 8010880:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8010884:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8010888:	f04f 0c00 	mov.w	ip, #0
 801088c:	45d4      	cmp	ip, sl
 801088e:	dc27      	bgt.n	80108e0 <__kernel_rem_pio2f+0xb4>
 8010890:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8010894:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8010b38 <__kernel_rem_pio2f+0x30c>
 8010898:	4627      	mov	r7, r4
 801089a:	2600      	movs	r6, #0
 801089c:	e016      	b.n	80108cc <__kernel_rem_pio2f+0xa0>
 801089e:	2000      	movs	r0, #0
 80108a0:	e7dc      	b.n	801085c <__kernel_rem_pio2f+0x30>
 80108a2:	42e7      	cmn	r7, r4
 80108a4:	bf5d      	ittte	pl
 80108a6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80108aa:	ee07 3a90 	vmovpl	s15, r3
 80108ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80108b2:	eef0 7a47 	vmovmi.f32	s15, s14
 80108b6:	ece6 7a01 	vstmia	r6!, {s15}
 80108ba:	3401      	adds	r4, #1
 80108bc:	e7dc      	b.n	8010878 <__kernel_rem_pio2f+0x4c>
 80108be:	ecf9 6a01 	vldmia	r9!, {s13}
 80108c2:	ed97 7a00 	vldr	s14, [r7]
 80108c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80108ca:	3601      	adds	r6, #1
 80108cc:	428e      	cmp	r6, r1
 80108ce:	f1a7 0704 	sub.w	r7, r7, #4
 80108d2:	ddf4      	ble.n	80108be <__kernel_rem_pio2f+0x92>
 80108d4:	eceb 7a01 	vstmia	fp!, {s15}
 80108d8:	f10c 0c01 	add.w	ip, ip, #1
 80108dc:	3404      	adds	r4, #4
 80108de:	e7d5      	b.n	801088c <__kernel_rem_pio2f+0x60>
 80108e0:	ab08      	add	r3, sp, #32
 80108e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80108e6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8010b34 <__kernel_rem_pio2f+0x308>
 80108ea:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8010b30 <__kernel_rem_pio2f+0x304>
 80108ee:	9304      	str	r3, [sp, #16]
 80108f0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80108f4:	4656      	mov	r6, sl
 80108f6:	00b3      	lsls	r3, r6, #2
 80108f8:	9305      	str	r3, [sp, #20]
 80108fa:	ab58      	add	r3, sp, #352	; 0x160
 80108fc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8010900:	ac08      	add	r4, sp, #32
 8010902:	ab44      	add	r3, sp, #272	; 0x110
 8010904:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8010908:	46a4      	mov	ip, r4
 801090a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801090e:	4637      	mov	r7, r6
 8010910:	2f00      	cmp	r7, #0
 8010912:	f1a0 0004 	sub.w	r0, r0, #4
 8010916:	dc4f      	bgt.n	80109b8 <__kernel_rem_pio2f+0x18c>
 8010918:	4628      	mov	r0, r5
 801091a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801091e:	f000 feab 	bl	8011678 <scalbnf>
 8010922:	eeb0 8a40 	vmov.f32	s16, s0
 8010926:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801092a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801092e:	f000 fe61 	bl	80115f4 <floorf>
 8010932:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8010936:	eea0 8a67 	vfms.f32	s16, s0, s15
 801093a:	2d00      	cmp	r5, #0
 801093c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8010940:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010944:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8010948:	ee17 9a90 	vmov	r9, s15
 801094c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010950:	dd44      	ble.n	80109dc <__kernel_rem_pio2f+0x1b0>
 8010952:	f106 3cff 	add.w	ip, r6, #4294967295
 8010956:	ab08      	add	r3, sp, #32
 8010958:	f1c5 0e08 	rsb	lr, r5, #8
 801095c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8010960:	fa47 f00e 	asr.w	r0, r7, lr
 8010964:	4481      	add	r9, r0
 8010966:	fa00 f00e 	lsl.w	r0, r0, lr
 801096a:	1a3f      	subs	r7, r7, r0
 801096c:	f1c5 0007 	rsb	r0, r5, #7
 8010970:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8010974:	4107      	asrs	r7, r0
 8010976:	2f00      	cmp	r7, #0
 8010978:	dd3f      	ble.n	80109fa <__kernel_rem_pio2f+0x1ce>
 801097a:	f04f 0e00 	mov.w	lr, #0
 801097e:	f109 0901 	add.w	r9, r9, #1
 8010982:	4673      	mov	r3, lr
 8010984:	4576      	cmp	r6, lr
 8010986:	dc6b      	bgt.n	8010a60 <__kernel_rem_pio2f+0x234>
 8010988:	2d00      	cmp	r5, #0
 801098a:	dd04      	ble.n	8010996 <__kernel_rem_pio2f+0x16a>
 801098c:	2d01      	cmp	r5, #1
 801098e:	d078      	beq.n	8010a82 <__kernel_rem_pio2f+0x256>
 8010990:	2d02      	cmp	r5, #2
 8010992:	f000 8081 	beq.w	8010a98 <__kernel_rem_pio2f+0x26c>
 8010996:	2f02      	cmp	r7, #2
 8010998:	d12f      	bne.n	80109fa <__kernel_rem_pio2f+0x1ce>
 801099a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801099e:	ee30 8a48 	vsub.f32	s16, s0, s16
 80109a2:	b353      	cbz	r3, 80109fa <__kernel_rem_pio2f+0x1ce>
 80109a4:	4628      	mov	r0, r5
 80109a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80109aa:	f000 fe65 	bl	8011678 <scalbnf>
 80109ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80109b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80109b6:	e020      	b.n	80109fa <__kernel_rem_pio2f+0x1ce>
 80109b8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80109bc:	3f01      	subs	r7, #1
 80109be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80109c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109c6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80109ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80109ce:	ecac 0a01 	vstmia	ip!, {s0}
 80109d2:	ed90 0a00 	vldr	s0, [r0]
 80109d6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80109da:	e799      	b.n	8010910 <__kernel_rem_pio2f+0xe4>
 80109dc:	d105      	bne.n	80109ea <__kernel_rem_pio2f+0x1be>
 80109de:	1e70      	subs	r0, r6, #1
 80109e0:	ab08      	add	r3, sp, #32
 80109e2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80109e6:	11ff      	asrs	r7, r7, #7
 80109e8:	e7c5      	b.n	8010976 <__kernel_rem_pio2f+0x14a>
 80109ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80109ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80109f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f6:	da31      	bge.n	8010a5c <__kernel_rem_pio2f+0x230>
 80109f8:	2700      	movs	r7, #0
 80109fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80109fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a02:	f040 809b 	bne.w	8010b3c <__kernel_rem_pio2f+0x310>
 8010a06:	1e74      	subs	r4, r6, #1
 8010a08:	46a4      	mov	ip, r4
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	45d4      	cmp	ip, sl
 8010a0e:	da4a      	bge.n	8010aa6 <__kernel_rem_pio2f+0x27a>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d07a      	beq.n	8010b0a <__kernel_rem_pio2f+0x2de>
 8010a14:	ab08      	add	r3, sp, #32
 8010a16:	3d08      	subs	r5, #8
 8010a18:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f000 8081 	beq.w	8010b24 <__kernel_rem_pio2f+0x2f8>
 8010a22:	4628      	mov	r0, r5
 8010a24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010a28:	00a5      	lsls	r5, r4, #2
 8010a2a:	f000 fe25 	bl	8011678 <scalbnf>
 8010a2e:	aa44      	add	r2, sp, #272	; 0x110
 8010a30:	1d2b      	adds	r3, r5, #4
 8010a32:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8010b34 <__kernel_rem_pio2f+0x308>
 8010a36:	18d1      	adds	r1, r2, r3
 8010a38:	4622      	mov	r2, r4
 8010a3a:	2a00      	cmp	r2, #0
 8010a3c:	f280 80ae 	bge.w	8010b9c <__kernel_rem_pio2f+0x370>
 8010a40:	4622      	mov	r2, r4
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	f2c0 80cc 	blt.w	8010be0 <__kernel_rem_pio2f+0x3b4>
 8010a48:	a944      	add	r1, sp, #272	; 0x110
 8010a4a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8010a4e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8010b2c <__kernel_rem_pio2f+0x300>
 8010a52:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010b38 <__kernel_rem_pio2f+0x30c>
 8010a56:	2000      	movs	r0, #0
 8010a58:	1aa1      	subs	r1, r4, r2
 8010a5a:	e0b6      	b.n	8010bca <__kernel_rem_pio2f+0x39e>
 8010a5c:	2702      	movs	r7, #2
 8010a5e:	e78c      	b.n	801097a <__kernel_rem_pio2f+0x14e>
 8010a60:	6820      	ldr	r0, [r4, #0]
 8010a62:	b94b      	cbnz	r3, 8010a78 <__kernel_rem_pio2f+0x24c>
 8010a64:	b118      	cbz	r0, 8010a6e <__kernel_rem_pio2f+0x242>
 8010a66:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8010a6a:	6020      	str	r0, [r4, #0]
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	f10e 0e01 	add.w	lr, lr, #1
 8010a72:	3404      	adds	r4, #4
 8010a74:	4603      	mov	r3, r0
 8010a76:	e785      	b.n	8010984 <__kernel_rem_pio2f+0x158>
 8010a78:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8010a7c:	6020      	str	r0, [r4, #0]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	e7f5      	b.n	8010a6e <__kernel_rem_pio2f+0x242>
 8010a82:	1e74      	subs	r4, r6, #1
 8010a84:	a808      	add	r0, sp, #32
 8010a86:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010a8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8010a8e:	f10d 0c20 	add.w	ip, sp, #32
 8010a92:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8010a96:	e77e      	b.n	8010996 <__kernel_rem_pio2f+0x16a>
 8010a98:	1e74      	subs	r4, r6, #1
 8010a9a:	a808      	add	r0, sp, #32
 8010a9c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010aa0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010aa4:	e7f3      	b.n	8010a8e <__kernel_rem_pio2f+0x262>
 8010aa6:	ab08      	add	r3, sp, #32
 8010aa8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8010aac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ab0:	4318      	orrs	r0, r3
 8010ab2:	e7ab      	b.n	8010a0c <__kernel_rem_pio2f+0x1e0>
 8010ab4:	f10c 0c01 	add.w	ip, ip, #1
 8010ab8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8010abc:	2c00      	cmp	r4, #0
 8010abe:	d0f9      	beq.n	8010ab4 <__kernel_rem_pio2f+0x288>
 8010ac0:	9b05      	ldr	r3, [sp, #20]
 8010ac2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010ac6:	eb0d 0003 	add.w	r0, sp, r3
 8010aca:	9b01      	ldr	r3, [sp, #4]
 8010acc:	18f4      	adds	r4, r6, r3
 8010ace:	ab1c      	add	r3, sp, #112	; 0x70
 8010ad0:	1c77      	adds	r7, r6, #1
 8010ad2:	384c      	subs	r0, #76	; 0x4c
 8010ad4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010ad8:	4466      	add	r6, ip
 8010ada:	42be      	cmp	r6, r7
 8010adc:	f6ff af0b 	blt.w	80108f6 <__kernel_rem_pio2f+0xca>
 8010ae0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8010ae4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010ae8:	ee07 3a90 	vmov	s15, r3
 8010aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010af0:	f04f 0c00 	mov.w	ip, #0
 8010af4:	ece4 7a01 	vstmia	r4!, {s15}
 8010af8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8010b38 <__kernel_rem_pio2f+0x30c>
 8010afc:	46a1      	mov	r9, r4
 8010afe:	458c      	cmp	ip, r1
 8010b00:	dd07      	ble.n	8010b12 <__kernel_rem_pio2f+0x2e6>
 8010b02:	ece0 7a01 	vstmia	r0!, {s15}
 8010b06:	3701      	adds	r7, #1
 8010b08:	e7e7      	b.n	8010ada <__kernel_rem_pio2f+0x2ae>
 8010b0a:	9804      	ldr	r0, [sp, #16]
 8010b0c:	f04f 0c01 	mov.w	ip, #1
 8010b10:	e7d2      	b.n	8010ab8 <__kernel_rem_pio2f+0x28c>
 8010b12:	ecfe 6a01 	vldmia	lr!, {s13}
 8010b16:	ed39 7a01 	vldmdb	r9!, {s14}
 8010b1a:	f10c 0c01 	add.w	ip, ip, #1
 8010b1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010b22:	e7ec      	b.n	8010afe <__kernel_rem_pio2f+0x2d2>
 8010b24:	3c01      	subs	r4, #1
 8010b26:	e775      	b.n	8010a14 <__kernel_rem_pio2f+0x1e8>
 8010b28:	080120e4 	.word	0x080120e4
 8010b2c:	080120b8 	.word	0x080120b8
 8010b30:	43800000 	.word	0x43800000
 8010b34:	3b800000 	.word	0x3b800000
 8010b38:	00000000 	.word	0x00000000
 8010b3c:	9b03      	ldr	r3, [sp, #12]
 8010b3e:	eeb0 0a48 	vmov.f32	s0, s16
 8010b42:	1a98      	subs	r0, r3, r2
 8010b44:	f000 fd98 	bl	8011678 <scalbnf>
 8010b48:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8010b30 <__kernel_rem_pio2f+0x304>
 8010b4c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b54:	db19      	blt.n	8010b8a <__kernel_rem_pio2f+0x35e>
 8010b56:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8010b34 <__kernel_rem_pio2f+0x308>
 8010b5a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010b5e:	aa08      	add	r2, sp, #32
 8010b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b64:	1c74      	adds	r4, r6, #1
 8010b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b6a:	3508      	adds	r5, #8
 8010b6c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010b78:	ee10 3a10 	vmov	r3, s0
 8010b7c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010b80:	ee17 3a90 	vmov	r3, s15
 8010b84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010b88:	e74b      	b.n	8010a22 <__kernel_rem_pio2f+0x1f6>
 8010b8a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010b8e:	aa08      	add	r2, sp, #32
 8010b90:	ee10 3a10 	vmov	r3, s0
 8010b94:	4634      	mov	r4, r6
 8010b96:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010b9a:	e742      	b.n	8010a22 <__kernel_rem_pio2f+0x1f6>
 8010b9c:	a808      	add	r0, sp, #32
 8010b9e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010ba2:	9001      	str	r0, [sp, #4]
 8010ba4:	ee07 0a90 	vmov	s15, r0
 8010ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bac:	3a01      	subs	r2, #1
 8010bae:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010bb2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010bb6:	ed61 7a01 	vstmdb	r1!, {s15}
 8010bba:	e73e      	b.n	8010a3a <__kernel_rem_pio2f+0x20e>
 8010bbc:	ecfc 6a01 	vldmia	ip!, {s13}
 8010bc0:	ecb6 7a01 	vldmia	r6!, {s14}
 8010bc4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010bc8:	3001      	adds	r0, #1
 8010bca:	4550      	cmp	r0, sl
 8010bcc:	dc01      	bgt.n	8010bd2 <__kernel_rem_pio2f+0x3a6>
 8010bce:	4288      	cmp	r0, r1
 8010bd0:	ddf4      	ble.n	8010bbc <__kernel_rem_pio2f+0x390>
 8010bd2:	a858      	add	r0, sp, #352	; 0x160
 8010bd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010bd8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8010bdc:	3a01      	subs	r2, #1
 8010bde:	e730      	b.n	8010a42 <__kernel_rem_pio2f+0x216>
 8010be0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8010be2:	2a02      	cmp	r2, #2
 8010be4:	dc09      	bgt.n	8010bfa <__kernel_rem_pio2f+0x3ce>
 8010be6:	2a00      	cmp	r2, #0
 8010be8:	dc2a      	bgt.n	8010c40 <__kernel_rem_pio2f+0x414>
 8010bea:	d043      	beq.n	8010c74 <__kernel_rem_pio2f+0x448>
 8010bec:	f009 0007 	and.w	r0, r9, #7
 8010bf0:	b059      	add	sp, #356	; 0x164
 8010bf2:	ecbd 8b04 	vpop	{d8-d9}
 8010bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8010bfc:	2b03      	cmp	r3, #3
 8010bfe:	d1f5      	bne.n	8010bec <__kernel_rem_pio2f+0x3c0>
 8010c00:	ab30      	add	r3, sp, #192	; 0xc0
 8010c02:	442b      	add	r3, r5
 8010c04:	461a      	mov	r2, r3
 8010c06:	4619      	mov	r1, r3
 8010c08:	4620      	mov	r0, r4
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	f1a1 0104 	sub.w	r1, r1, #4
 8010c10:	dc51      	bgt.n	8010cb6 <__kernel_rem_pio2f+0x48a>
 8010c12:	4621      	mov	r1, r4
 8010c14:	2901      	cmp	r1, #1
 8010c16:	f1a2 0204 	sub.w	r2, r2, #4
 8010c1a:	dc5c      	bgt.n	8010cd6 <__kernel_rem_pio2f+0x4aa>
 8010c1c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8010b38 <__kernel_rem_pio2f+0x30c>
 8010c20:	3304      	adds	r3, #4
 8010c22:	2c01      	cmp	r4, #1
 8010c24:	dc67      	bgt.n	8010cf6 <__kernel_rem_pio2f+0x4ca>
 8010c26:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8010c2a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8010c2e:	2f00      	cmp	r7, #0
 8010c30:	d167      	bne.n	8010d02 <__kernel_rem_pio2f+0x4d6>
 8010c32:	edc8 6a00 	vstr	s13, [r8]
 8010c36:	ed88 7a01 	vstr	s14, [r8, #4]
 8010c3a:	edc8 7a02 	vstr	s15, [r8, #8]
 8010c3e:	e7d5      	b.n	8010bec <__kernel_rem_pio2f+0x3c0>
 8010c40:	aa30      	add	r2, sp, #192	; 0xc0
 8010c42:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8010b38 <__kernel_rem_pio2f+0x30c>
 8010c46:	4413      	add	r3, r2
 8010c48:	4622      	mov	r2, r4
 8010c4a:	2a00      	cmp	r2, #0
 8010c4c:	da24      	bge.n	8010c98 <__kernel_rem_pio2f+0x46c>
 8010c4e:	b34f      	cbz	r7, 8010ca4 <__kernel_rem_pio2f+0x478>
 8010c50:	eef1 7a47 	vneg.f32	s15, s14
 8010c54:	edc8 7a00 	vstr	s15, [r8]
 8010c58:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8010c5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c60:	aa31      	add	r2, sp, #196	; 0xc4
 8010c62:	2301      	movs	r3, #1
 8010c64:	429c      	cmp	r4, r3
 8010c66:	da20      	bge.n	8010caa <__kernel_rem_pio2f+0x47e>
 8010c68:	b10f      	cbz	r7, 8010c6e <__kernel_rem_pio2f+0x442>
 8010c6a:	eef1 7a67 	vneg.f32	s15, s15
 8010c6e:	edc8 7a01 	vstr	s15, [r8, #4]
 8010c72:	e7bb      	b.n	8010bec <__kernel_rem_pio2f+0x3c0>
 8010c74:	aa30      	add	r2, sp, #192	; 0xc0
 8010c76:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8010b38 <__kernel_rem_pio2f+0x30c>
 8010c7a:	4413      	add	r3, r2
 8010c7c:	2c00      	cmp	r4, #0
 8010c7e:	da05      	bge.n	8010c8c <__kernel_rem_pio2f+0x460>
 8010c80:	b10f      	cbz	r7, 8010c86 <__kernel_rem_pio2f+0x45a>
 8010c82:	eef1 7a67 	vneg.f32	s15, s15
 8010c86:	edc8 7a00 	vstr	s15, [r8]
 8010c8a:	e7af      	b.n	8010bec <__kernel_rem_pio2f+0x3c0>
 8010c8c:	ed33 7a01 	vldmdb	r3!, {s14}
 8010c90:	3c01      	subs	r4, #1
 8010c92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c96:	e7f1      	b.n	8010c7c <__kernel_rem_pio2f+0x450>
 8010c98:	ed73 7a01 	vldmdb	r3!, {s15}
 8010c9c:	3a01      	subs	r2, #1
 8010c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ca2:	e7d2      	b.n	8010c4a <__kernel_rem_pio2f+0x41e>
 8010ca4:	eef0 7a47 	vmov.f32	s15, s14
 8010ca8:	e7d4      	b.n	8010c54 <__kernel_rem_pio2f+0x428>
 8010caa:	ecb2 7a01 	vldmia	r2!, {s14}
 8010cae:	3301      	adds	r3, #1
 8010cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cb4:	e7d6      	b.n	8010c64 <__kernel_rem_pio2f+0x438>
 8010cb6:	edd1 7a00 	vldr	s15, [r1]
 8010cba:	edd1 6a01 	vldr	s13, [r1, #4]
 8010cbe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010cc2:	3801      	subs	r0, #1
 8010cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cc8:	ed81 7a00 	vstr	s14, [r1]
 8010ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cd0:	edc1 7a01 	vstr	s15, [r1, #4]
 8010cd4:	e799      	b.n	8010c0a <__kernel_rem_pio2f+0x3de>
 8010cd6:	edd2 7a00 	vldr	s15, [r2]
 8010cda:	edd2 6a01 	vldr	s13, [r2, #4]
 8010cde:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010ce2:	3901      	subs	r1, #1
 8010ce4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ce8:	ed82 7a00 	vstr	s14, [r2]
 8010cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cf0:	edc2 7a01 	vstr	s15, [r2, #4]
 8010cf4:	e78e      	b.n	8010c14 <__kernel_rem_pio2f+0x3e8>
 8010cf6:	ed33 7a01 	vldmdb	r3!, {s14}
 8010cfa:	3c01      	subs	r4, #1
 8010cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d00:	e78f      	b.n	8010c22 <__kernel_rem_pio2f+0x3f6>
 8010d02:	eef1 6a66 	vneg.f32	s13, s13
 8010d06:	eeb1 7a47 	vneg.f32	s14, s14
 8010d0a:	edc8 6a00 	vstr	s13, [r8]
 8010d0e:	ed88 7a01 	vstr	s14, [r8, #4]
 8010d12:	eef1 7a67 	vneg.f32	s15, s15
 8010d16:	e790      	b.n	8010c3a <__kernel_rem_pio2f+0x40e>

08010d18 <__kernel_sinf>:
 8010d18:	ee10 3a10 	vmov	r3, s0
 8010d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010d24:	da04      	bge.n	8010d30 <__kernel_sinf+0x18>
 8010d26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010d2a:	ee17 3a90 	vmov	r3, s15
 8010d2e:	b35b      	cbz	r3, 8010d88 <__kernel_sinf+0x70>
 8010d30:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010d34:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010d8c <__kernel_sinf+0x74>
 8010d38:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8010d90 <__kernel_sinf+0x78>
 8010d3c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010d40:	eddf 7a14 	vldr	s15, [pc, #80]	; 8010d94 <__kernel_sinf+0x7c>
 8010d44:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010d48:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8010d98 <__kernel_sinf+0x80>
 8010d4c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010d50:	eddf 7a12 	vldr	s15, [pc, #72]	; 8010d9c <__kernel_sinf+0x84>
 8010d54:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010d58:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010d5c:	b930      	cbnz	r0, 8010d6c <__kernel_sinf+0x54>
 8010d5e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8010da0 <__kernel_sinf+0x88>
 8010d62:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010d66:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010d6a:	4770      	bx	lr
 8010d6c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010d70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010d74:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010d78:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010d7c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010da4 <__kernel_sinf+0x8c>
 8010d80:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010d84:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010d88:	4770      	bx	lr
 8010d8a:	bf00      	nop
 8010d8c:	2f2ec9d3 	.word	0x2f2ec9d3
 8010d90:	b2d72f34 	.word	0xb2d72f34
 8010d94:	3638ef1b 	.word	0x3638ef1b
 8010d98:	b9500d01 	.word	0xb9500d01
 8010d9c:	3c088889 	.word	0x3c088889
 8010da0:	be2aaaab 	.word	0xbe2aaaab
 8010da4:	3e2aaaab 	.word	0x3e2aaaab

08010da8 <__kernel_tanf>:
 8010da8:	b508      	push	{r3, lr}
 8010daa:	ee10 3a10 	vmov	r3, s0
 8010dae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010db2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8010db6:	eef0 7a40 	vmov.f32	s15, s0
 8010dba:	da17      	bge.n	8010dec <__kernel_tanf+0x44>
 8010dbc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8010dc0:	ee17 1a10 	vmov	r1, s14
 8010dc4:	bb41      	cbnz	r1, 8010e18 <__kernel_tanf+0x70>
 8010dc6:	1c43      	adds	r3, r0, #1
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	d108      	bne.n	8010dde <__kernel_tanf+0x36>
 8010dcc:	f000 fc0a 	bl	80115e4 <fabsf>
 8010dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010dd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8010ddc:	bd08      	pop	{r3, pc}
 8010dde:	2801      	cmp	r0, #1
 8010de0:	d0fa      	beq.n	8010dd8 <__kernel_tanf+0x30>
 8010de2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010de6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010dea:	e7f5      	b.n	8010dd8 <__kernel_tanf+0x30>
 8010dec:	494c      	ldr	r1, [pc, #304]	; (8010f20 <__kernel_tanf+0x178>)
 8010dee:	428a      	cmp	r2, r1
 8010df0:	db12      	blt.n	8010e18 <__kernel_tanf+0x70>
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	bfb8      	it	lt
 8010df6:	eef1 7a40 	vneglt.f32	s15, s0
 8010dfa:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8010f24 <__kernel_tanf+0x17c>
 8010dfe:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010e02:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8010f28 <__kernel_tanf+0x180>
 8010e06:	bfb8      	it	lt
 8010e08:	eef1 0a60 	vneglt.f32	s1, s1
 8010e0c:	ee70 0a60 	vsub.f32	s1, s0, s1
 8010e10:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8010e14:	eddf 0a45 	vldr	s1, [pc, #276]	; 8010f2c <__kernel_tanf+0x184>
 8010e18:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010f30 <__kernel_tanf+0x188>
 8010e1c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8010f34 <__kernel_tanf+0x18c>
 8010e20:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8010f38 <__kernel_tanf+0x190>
 8010e24:	493e      	ldr	r1, [pc, #248]	; (8010f20 <__kernel_tanf+0x178>)
 8010e26:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010e2a:	428a      	cmp	r2, r1
 8010e2c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010e30:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010e34:	eddf 5a41 	vldr	s11, [pc, #260]	; 8010f3c <__kernel_tanf+0x194>
 8010e38:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010e3c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8010f40 <__kernel_tanf+0x198>
 8010e40:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010e44:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010f44 <__kernel_tanf+0x19c>
 8010e48:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010e4c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8010f48 <__kernel_tanf+0x1a0>
 8010e50:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010e54:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8010f4c <__kernel_tanf+0x1a4>
 8010e58:	eee7 5a05 	vfma.f32	s11, s14, s10
 8010e5c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8010f50 <__kernel_tanf+0x1a8>
 8010e60:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010e64:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8010f54 <__kernel_tanf+0x1ac>
 8010e68:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010e6c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8010f58 <__kernel_tanf+0x1b0>
 8010e70:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010e74:	eddf 5a39 	vldr	s11, [pc, #228]	; 8010f5c <__kernel_tanf+0x1b4>
 8010e78:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010e7c:	eeb0 7a46 	vmov.f32	s14, s12
 8010e80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010e84:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8010e88:	eeb0 6a60 	vmov.f32	s12, s1
 8010e8c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8010e90:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010f60 <__kernel_tanf+0x1b8>
 8010e94:	eee6 0a26 	vfma.f32	s1, s12, s13
 8010e98:	eee5 0a07 	vfma.f32	s1, s10, s14
 8010e9c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010ea0:	db1d      	blt.n	8010ede <__kernel_tanf+0x136>
 8010ea2:	ee06 0a90 	vmov	s13, r0
 8010ea6:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8010eaa:	ee27 6a07 	vmul.f32	s12, s14, s14
 8010eae:	ee37 7a00 	vadd.f32	s14, s14, s0
 8010eb2:	179b      	asrs	r3, r3, #30
 8010eb4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8010eb8:	f003 0302 	and.w	r3, r3, #2
 8010ebc:	f1c3 0301 	rsb	r3, r3, #1
 8010ec0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010ec4:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8010ec8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010ecc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010ed0:	ee07 3a90 	vmov	s15, r3
 8010ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ed8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010edc:	e77c      	b.n	8010dd8 <__kernel_tanf+0x30>
 8010ede:	2801      	cmp	r0, #1
 8010ee0:	d01b      	beq.n	8010f1a <__kernel_tanf+0x172>
 8010ee2:	4b20      	ldr	r3, [pc, #128]	; (8010f64 <__kernel_tanf+0x1bc>)
 8010ee4:	ee17 2a10 	vmov	r2, s14
 8010ee8:	401a      	ands	r2, r3
 8010eea:	ee06 2a10 	vmov	s12, r2
 8010eee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010ef2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010ef6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8010efa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010efe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f02:	ee16 2a90 	vmov	r2, s13
 8010f06:	4013      	ands	r3, r2
 8010f08:	ee07 3a90 	vmov	s15, r3
 8010f0c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010f10:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8010f14:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010f18:	e75e      	b.n	8010dd8 <__kernel_tanf+0x30>
 8010f1a:	eef0 7a47 	vmov.f32	s15, s14
 8010f1e:	e75b      	b.n	8010dd8 <__kernel_tanf+0x30>
 8010f20:	3f2ca140 	.word	0x3f2ca140
 8010f24:	3f490fda 	.word	0x3f490fda
 8010f28:	33222168 	.word	0x33222168
 8010f2c:	00000000 	.word	0x00000000
 8010f30:	b79bae5f 	.word	0xb79bae5f
 8010f34:	38a3f445 	.word	0x38a3f445
 8010f38:	37d95384 	.word	0x37d95384
 8010f3c:	3a1a26c8 	.word	0x3a1a26c8
 8010f40:	3b6b6916 	.word	0x3b6b6916
 8010f44:	3cb327a4 	.word	0x3cb327a4
 8010f48:	3e088889 	.word	0x3e088889
 8010f4c:	3895c07a 	.word	0x3895c07a
 8010f50:	398137b9 	.word	0x398137b9
 8010f54:	3abede48 	.word	0x3abede48
 8010f58:	3c11371f 	.word	0x3c11371f
 8010f5c:	3d5d0dd1 	.word	0x3d5d0dd1
 8010f60:	3eaaaaab 	.word	0x3eaaaaab
 8010f64:	fffff000 	.word	0xfffff000

08010f68 <with_errno>:
 8010f68:	b570      	push	{r4, r5, r6, lr}
 8010f6a:	4604      	mov	r4, r0
 8010f6c:	460d      	mov	r5, r1
 8010f6e:	4616      	mov	r6, r2
 8010f70:	f7f9 f9e6 	bl	800a340 <__errno>
 8010f74:	4629      	mov	r1, r5
 8010f76:	6006      	str	r6, [r0, #0]
 8010f78:	4620      	mov	r0, r4
 8010f7a:	bd70      	pop	{r4, r5, r6, pc}

08010f7c <xflow>:
 8010f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f7e:	4614      	mov	r4, r2
 8010f80:	461d      	mov	r5, r3
 8010f82:	b108      	cbz	r0, 8010f88 <xflow+0xc>
 8010f84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010f88:	e9cd 2300 	strd	r2, r3, [sp]
 8010f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f90:	4620      	mov	r0, r4
 8010f92:	4629      	mov	r1, r5
 8010f94:	f7ef fb58 	bl	8000648 <__aeabi_dmul>
 8010f98:	2222      	movs	r2, #34	; 0x22
 8010f9a:	b003      	add	sp, #12
 8010f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fa0:	f7ff bfe2 	b.w	8010f68 <with_errno>

08010fa4 <__math_uflow>:
 8010fa4:	b508      	push	{r3, lr}
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010fac:	f7ff ffe6 	bl	8010f7c <xflow>
 8010fb0:	ec41 0b10 	vmov	d0, r0, r1
 8010fb4:	bd08      	pop	{r3, pc}

08010fb6 <__math_oflow>:
 8010fb6:	b508      	push	{r3, lr}
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010fbe:	f7ff ffdd 	bl	8010f7c <xflow>
 8010fc2:	ec41 0b10 	vmov	d0, r0, r1
 8010fc6:	bd08      	pop	{r3, pc}

08010fc8 <atan>:
 8010fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fcc:	ec55 4b10 	vmov	r4, r5, d0
 8010fd0:	4bc3      	ldr	r3, [pc, #780]	; (80112e0 <atan+0x318>)
 8010fd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010fd6:	429e      	cmp	r6, r3
 8010fd8:	46ab      	mov	fp, r5
 8010fda:	dd18      	ble.n	801100e <atan+0x46>
 8010fdc:	4bc1      	ldr	r3, [pc, #772]	; (80112e4 <atan+0x31c>)
 8010fde:	429e      	cmp	r6, r3
 8010fe0:	dc01      	bgt.n	8010fe6 <atan+0x1e>
 8010fe2:	d109      	bne.n	8010ff8 <atan+0x30>
 8010fe4:	b144      	cbz	r4, 8010ff8 <atan+0x30>
 8010fe6:	4622      	mov	r2, r4
 8010fe8:	462b      	mov	r3, r5
 8010fea:	4620      	mov	r0, r4
 8010fec:	4629      	mov	r1, r5
 8010fee:	f7ef f975 	bl	80002dc <__adddf3>
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	460d      	mov	r5, r1
 8010ff6:	e006      	b.n	8011006 <atan+0x3e>
 8010ff8:	f1bb 0f00 	cmp.w	fp, #0
 8010ffc:	f300 8131 	bgt.w	8011262 <atan+0x29a>
 8011000:	a59b      	add	r5, pc, #620	; (adr r5, 8011270 <atan+0x2a8>)
 8011002:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011006:	ec45 4b10 	vmov	d0, r4, r5
 801100a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801100e:	4bb6      	ldr	r3, [pc, #728]	; (80112e8 <atan+0x320>)
 8011010:	429e      	cmp	r6, r3
 8011012:	dc14      	bgt.n	801103e <atan+0x76>
 8011014:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011018:	429e      	cmp	r6, r3
 801101a:	dc0d      	bgt.n	8011038 <atan+0x70>
 801101c:	a396      	add	r3, pc, #600	; (adr r3, 8011278 <atan+0x2b0>)
 801101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011022:	ee10 0a10 	vmov	r0, s0
 8011026:	4629      	mov	r1, r5
 8011028:	f7ef f958 	bl	80002dc <__adddf3>
 801102c:	4baf      	ldr	r3, [pc, #700]	; (80112ec <atan+0x324>)
 801102e:	2200      	movs	r2, #0
 8011030:	f7ef fd9a 	bl	8000b68 <__aeabi_dcmpgt>
 8011034:	2800      	cmp	r0, #0
 8011036:	d1e6      	bne.n	8011006 <atan+0x3e>
 8011038:	f04f 3aff 	mov.w	sl, #4294967295
 801103c:	e02b      	b.n	8011096 <atan+0xce>
 801103e:	f000 f963 	bl	8011308 <fabs>
 8011042:	4bab      	ldr	r3, [pc, #684]	; (80112f0 <atan+0x328>)
 8011044:	429e      	cmp	r6, r3
 8011046:	ec55 4b10 	vmov	r4, r5, d0
 801104a:	f300 80bf 	bgt.w	80111cc <atan+0x204>
 801104e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011052:	429e      	cmp	r6, r3
 8011054:	f300 80a0 	bgt.w	8011198 <atan+0x1d0>
 8011058:	ee10 2a10 	vmov	r2, s0
 801105c:	ee10 0a10 	vmov	r0, s0
 8011060:	462b      	mov	r3, r5
 8011062:	4629      	mov	r1, r5
 8011064:	f7ef f93a 	bl	80002dc <__adddf3>
 8011068:	4ba0      	ldr	r3, [pc, #640]	; (80112ec <atan+0x324>)
 801106a:	2200      	movs	r2, #0
 801106c:	f7ef f934 	bl	80002d8 <__aeabi_dsub>
 8011070:	2200      	movs	r2, #0
 8011072:	4606      	mov	r6, r0
 8011074:	460f      	mov	r7, r1
 8011076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801107a:	4620      	mov	r0, r4
 801107c:	4629      	mov	r1, r5
 801107e:	f7ef f92d 	bl	80002dc <__adddf3>
 8011082:	4602      	mov	r2, r0
 8011084:	460b      	mov	r3, r1
 8011086:	4630      	mov	r0, r6
 8011088:	4639      	mov	r1, r7
 801108a:	f7ef fc07 	bl	800089c <__aeabi_ddiv>
 801108e:	f04f 0a00 	mov.w	sl, #0
 8011092:	4604      	mov	r4, r0
 8011094:	460d      	mov	r5, r1
 8011096:	4622      	mov	r2, r4
 8011098:	462b      	mov	r3, r5
 801109a:	4620      	mov	r0, r4
 801109c:	4629      	mov	r1, r5
 801109e:	f7ef fad3 	bl	8000648 <__aeabi_dmul>
 80110a2:	4602      	mov	r2, r0
 80110a4:	460b      	mov	r3, r1
 80110a6:	4680      	mov	r8, r0
 80110a8:	4689      	mov	r9, r1
 80110aa:	f7ef facd 	bl	8000648 <__aeabi_dmul>
 80110ae:	a374      	add	r3, pc, #464	; (adr r3, 8011280 <atan+0x2b8>)
 80110b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b4:	4606      	mov	r6, r0
 80110b6:	460f      	mov	r7, r1
 80110b8:	f7ef fac6 	bl	8000648 <__aeabi_dmul>
 80110bc:	a372      	add	r3, pc, #456	; (adr r3, 8011288 <atan+0x2c0>)
 80110be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c2:	f7ef f90b 	bl	80002dc <__adddf3>
 80110c6:	4632      	mov	r2, r6
 80110c8:	463b      	mov	r3, r7
 80110ca:	f7ef fabd 	bl	8000648 <__aeabi_dmul>
 80110ce:	a370      	add	r3, pc, #448	; (adr r3, 8011290 <atan+0x2c8>)
 80110d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d4:	f7ef f902 	bl	80002dc <__adddf3>
 80110d8:	4632      	mov	r2, r6
 80110da:	463b      	mov	r3, r7
 80110dc:	f7ef fab4 	bl	8000648 <__aeabi_dmul>
 80110e0:	a36d      	add	r3, pc, #436	; (adr r3, 8011298 <atan+0x2d0>)
 80110e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e6:	f7ef f8f9 	bl	80002dc <__adddf3>
 80110ea:	4632      	mov	r2, r6
 80110ec:	463b      	mov	r3, r7
 80110ee:	f7ef faab 	bl	8000648 <__aeabi_dmul>
 80110f2:	a36b      	add	r3, pc, #428	; (adr r3, 80112a0 <atan+0x2d8>)
 80110f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f8:	f7ef f8f0 	bl	80002dc <__adddf3>
 80110fc:	4632      	mov	r2, r6
 80110fe:	463b      	mov	r3, r7
 8011100:	f7ef faa2 	bl	8000648 <__aeabi_dmul>
 8011104:	a368      	add	r3, pc, #416	; (adr r3, 80112a8 <atan+0x2e0>)
 8011106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110a:	f7ef f8e7 	bl	80002dc <__adddf3>
 801110e:	4642      	mov	r2, r8
 8011110:	464b      	mov	r3, r9
 8011112:	f7ef fa99 	bl	8000648 <__aeabi_dmul>
 8011116:	a366      	add	r3, pc, #408	; (adr r3, 80112b0 <atan+0x2e8>)
 8011118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111c:	4680      	mov	r8, r0
 801111e:	4689      	mov	r9, r1
 8011120:	4630      	mov	r0, r6
 8011122:	4639      	mov	r1, r7
 8011124:	f7ef fa90 	bl	8000648 <__aeabi_dmul>
 8011128:	a363      	add	r3, pc, #396	; (adr r3, 80112b8 <atan+0x2f0>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	f7ef f8d3 	bl	80002d8 <__aeabi_dsub>
 8011132:	4632      	mov	r2, r6
 8011134:	463b      	mov	r3, r7
 8011136:	f7ef fa87 	bl	8000648 <__aeabi_dmul>
 801113a:	a361      	add	r3, pc, #388	; (adr r3, 80112c0 <atan+0x2f8>)
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7ef f8ca 	bl	80002d8 <__aeabi_dsub>
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	f7ef fa7e 	bl	8000648 <__aeabi_dmul>
 801114c:	a35e      	add	r3, pc, #376	; (adr r3, 80112c8 <atan+0x300>)
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	f7ef f8c1 	bl	80002d8 <__aeabi_dsub>
 8011156:	4632      	mov	r2, r6
 8011158:	463b      	mov	r3, r7
 801115a:	f7ef fa75 	bl	8000648 <__aeabi_dmul>
 801115e:	a35c      	add	r3, pc, #368	; (adr r3, 80112d0 <atan+0x308>)
 8011160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011164:	f7ef f8b8 	bl	80002d8 <__aeabi_dsub>
 8011168:	4632      	mov	r2, r6
 801116a:	463b      	mov	r3, r7
 801116c:	f7ef fa6c 	bl	8000648 <__aeabi_dmul>
 8011170:	4602      	mov	r2, r0
 8011172:	460b      	mov	r3, r1
 8011174:	4640      	mov	r0, r8
 8011176:	4649      	mov	r1, r9
 8011178:	f7ef f8b0 	bl	80002dc <__adddf3>
 801117c:	4622      	mov	r2, r4
 801117e:	462b      	mov	r3, r5
 8011180:	f7ef fa62 	bl	8000648 <__aeabi_dmul>
 8011184:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011188:	4602      	mov	r2, r0
 801118a:	460b      	mov	r3, r1
 801118c:	d14b      	bne.n	8011226 <atan+0x25e>
 801118e:	4620      	mov	r0, r4
 8011190:	4629      	mov	r1, r5
 8011192:	f7ef f8a1 	bl	80002d8 <__aeabi_dsub>
 8011196:	e72c      	b.n	8010ff2 <atan+0x2a>
 8011198:	ee10 0a10 	vmov	r0, s0
 801119c:	4b53      	ldr	r3, [pc, #332]	; (80112ec <atan+0x324>)
 801119e:	2200      	movs	r2, #0
 80111a0:	4629      	mov	r1, r5
 80111a2:	f7ef f899 	bl	80002d8 <__aeabi_dsub>
 80111a6:	4b51      	ldr	r3, [pc, #324]	; (80112ec <atan+0x324>)
 80111a8:	4606      	mov	r6, r0
 80111aa:	460f      	mov	r7, r1
 80111ac:	2200      	movs	r2, #0
 80111ae:	4620      	mov	r0, r4
 80111b0:	4629      	mov	r1, r5
 80111b2:	f7ef f893 	bl	80002dc <__adddf3>
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	4630      	mov	r0, r6
 80111bc:	4639      	mov	r1, r7
 80111be:	f7ef fb6d 	bl	800089c <__aeabi_ddiv>
 80111c2:	f04f 0a01 	mov.w	sl, #1
 80111c6:	4604      	mov	r4, r0
 80111c8:	460d      	mov	r5, r1
 80111ca:	e764      	b.n	8011096 <atan+0xce>
 80111cc:	4b49      	ldr	r3, [pc, #292]	; (80112f4 <atan+0x32c>)
 80111ce:	429e      	cmp	r6, r3
 80111d0:	da1d      	bge.n	801120e <atan+0x246>
 80111d2:	ee10 0a10 	vmov	r0, s0
 80111d6:	4b48      	ldr	r3, [pc, #288]	; (80112f8 <atan+0x330>)
 80111d8:	2200      	movs	r2, #0
 80111da:	4629      	mov	r1, r5
 80111dc:	f7ef f87c 	bl	80002d8 <__aeabi_dsub>
 80111e0:	4b45      	ldr	r3, [pc, #276]	; (80112f8 <atan+0x330>)
 80111e2:	4606      	mov	r6, r0
 80111e4:	460f      	mov	r7, r1
 80111e6:	2200      	movs	r2, #0
 80111e8:	4620      	mov	r0, r4
 80111ea:	4629      	mov	r1, r5
 80111ec:	f7ef fa2c 	bl	8000648 <__aeabi_dmul>
 80111f0:	4b3e      	ldr	r3, [pc, #248]	; (80112ec <atan+0x324>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	f7ef f872 	bl	80002dc <__adddf3>
 80111f8:	4602      	mov	r2, r0
 80111fa:	460b      	mov	r3, r1
 80111fc:	4630      	mov	r0, r6
 80111fe:	4639      	mov	r1, r7
 8011200:	f7ef fb4c 	bl	800089c <__aeabi_ddiv>
 8011204:	f04f 0a02 	mov.w	sl, #2
 8011208:	4604      	mov	r4, r0
 801120a:	460d      	mov	r5, r1
 801120c:	e743      	b.n	8011096 <atan+0xce>
 801120e:	462b      	mov	r3, r5
 8011210:	ee10 2a10 	vmov	r2, s0
 8011214:	4939      	ldr	r1, [pc, #228]	; (80112fc <atan+0x334>)
 8011216:	2000      	movs	r0, #0
 8011218:	f7ef fb40 	bl	800089c <__aeabi_ddiv>
 801121c:	f04f 0a03 	mov.w	sl, #3
 8011220:	4604      	mov	r4, r0
 8011222:	460d      	mov	r5, r1
 8011224:	e737      	b.n	8011096 <atan+0xce>
 8011226:	4b36      	ldr	r3, [pc, #216]	; (8011300 <atan+0x338>)
 8011228:	4e36      	ldr	r6, [pc, #216]	; (8011304 <atan+0x33c>)
 801122a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801122e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8011232:	e9da 2300 	ldrd	r2, r3, [sl]
 8011236:	f7ef f84f 	bl	80002d8 <__aeabi_dsub>
 801123a:	4622      	mov	r2, r4
 801123c:	462b      	mov	r3, r5
 801123e:	f7ef f84b 	bl	80002d8 <__aeabi_dsub>
 8011242:	4602      	mov	r2, r0
 8011244:	460b      	mov	r3, r1
 8011246:	e9d6 0100 	ldrd	r0, r1, [r6]
 801124a:	f7ef f845 	bl	80002d8 <__aeabi_dsub>
 801124e:	f1bb 0f00 	cmp.w	fp, #0
 8011252:	4604      	mov	r4, r0
 8011254:	460d      	mov	r5, r1
 8011256:	f6bf aed6 	bge.w	8011006 <atan+0x3e>
 801125a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801125e:	461d      	mov	r5, r3
 8011260:	e6d1      	b.n	8011006 <atan+0x3e>
 8011262:	a51d      	add	r5, pc, #116	; (adr r5, 80112d8 <atan+0x310>)
 8011264:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011268:	e6cd      	b.n	8011006 <atan+0x3e>
 801126a:	bf00      	nop
 801126c:	f3af 8000 	nop.w
 8011270:	54442d18 	.word	0x54442d18
 8011274:	bff921fb 	.word	0xbff921fb
 8011278:	8800759c 	.word	0x8800759c
 801127c:	7e37e43c 	.word	0x7e37e43c
 8011280:	e322da11 	.word	0xe322da11
 8011284:	3f90ad3a 	.word	0x3f90ad3a
 8011288:	24760deb 	.word	0x24760deb
 801128c:	3fa97b4b 	.word	0x3fa97b4b
 8011290:	a0d03d51 	.word	0xa0d03d51
 8011294:	3fb10d66 	.word	0x3fb10d66
 8011298:	c54c206e 	.word	0xc54c206e
 801129c:	3fb745cd 	.word	0x3fb745cd
 80112a0:	920083ff 	.word	0x920083ff
 80112a4:	3fc24924 	.word	0x3fc24924
 80112a8:	5555550d 	.word	0x5555550d
 80112ac:	3fd55555 	.word	0x3fd55555
 80112b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80112b4:	bfa2b444 	.word	0xbfa2b444
 80112b8:	52defd9a 	.word	0x52defd9a
 80112bc:	3fadde2d 	.word	0x3fadde2d
 80112c0:	af749a6d 	.word	0xaf749a6d
 80112c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80112c8:	fe231671 	.word	0xfe231671
 80112cc:	3fbc71c6 	.word	0x3fbc71c6
 80112d0:	9998ebc4 	.word	0x9998ebc4
 80112d4:	3fc99999 	.word	0x3fc99999
 80112d8:	54442d18 	.word	0x54442d18
 80112dc:	3ff921fb 	.word	0x3ff921fb
 80112e0:	440fffff 	.word	0x440fffff
 80112e4:	7ff00000 	.word	0x7ff00000
 80112e8:	3fdbffff 	.word	0x3fdbffff
 80112ec:	3ff00000 	.word	0x3ff00000
 80112f0:	3ff2ffff 	.word	0x3ff2ffff
 80112f4:	40038000 	.word	0x40038000
 80112f8:	3ff80000 	.word	0x3ff80000
 80112fc:	bff00000 	.word	0xbff00000
 8011300:	08012110 	.word	0x08012110
 8011304:	080120f0 	.word	0x080120f0

08011308 <fabs>:
 8011308:	ec51 0b10 	vmov	r0, r1, d0
 801130c:	ee10 2a10 	vmov	r2, s0
 8011310:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011314:	ec43 2b10 	vmov	d0, r2, r3
 8011318:	4770      	bx	lr

0801131a <finite>:
 801131a:	b082      	sub	sp, #8
 801131c:	ed8d 0b00 	vstr	d0, [sp]
 8011320:	9801      	ldr	r0, [sp, #4]
 8011322:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011326:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801132a:	0fc0      	lsrs	r0, r0, #31
 801132c:	b002      	add	sp, #8
 801132e:	4770      	bx	lr

08011330 <scalbn>:
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	ec55 4b10 	vmov	r4, r5, d0
 8011336:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801133a:	4606      	mov	r6, r0
 801133c:	462b      	mov	r3, r5
 801133e:	b99a      	cbnz	r2, 8011368 <scalbn+0x38>
 8011340:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011344:	4323      	orrs	r3, r4
 8011346:	d036      	beq.n	80113b6 <scalbn+0x86>
 8011348:	4b39      	ldr	r3, [pc, #228]	; (8011430 <scalbn+0x100>)
 801134a:	4629      	mov	r1, r5
 801134c:	ee10 0a10 	vmov	r0, s0
 8011350:	2200      	movs	r2, #0
 8011352:	f7ef f979 	bl	8000648 <__aeabi_dmul>
 8011356:	4b37      	ldr	r3, [pc, #220]	; (8011434 <scalbn+0x104>)
 8011358:	429e      	cmp	r6, r3
 801135a:	4604      	mov	r4, r0
 801135c:	460d      	mov	r5, r1
 801135e:	da10      	bge.n	8011382 <scalbn+0x52>
 8011360:	a32b      	add	r3, pc, #172	; (adr r3, 8011410 <scalbn+0xe0>)
 8011362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011366:	e03a      	b.n	80113de <scalbn+0xae>
 8011368:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801136c:	428a      	cmp	r2, r1
 801136e:	d10c      	bne.n	801138a <scalbn+0x5a>
 8011370:	ee10 2a10 	vmov	r2, s0
 8011374:	4620      	mov	r0, r4
 8011376:	4629      	mov	r1, r5
 8011378:	f7ee ffb0 	bl	80002dc <__adddf3>
 801137c:	4604      	mov	r4, r0
 801137e:	460d      	mov	r5, r1
 8011380:	e019      	b.n	80113b6 <scalbn+0x86>
 8011382:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011386:	460b      	mov	r3, r1
 8011388:	3a36      	subs	r2, #54	; 0x36
 801138a:	4432      	add	r2, r6
 801138c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011390:	428a      	cmp	r2, r1
 8011392:	dd08      	ble.n	80113a6 <scalbn+0x76>
 8011394:	2d00      	cmp	r5, #0
 8011396:	a120      	add	r1, pc, #128	; (adr r1, 8011418 <scalbn+0xe8>)
 8011398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801139c:	da1c      	bge.n	80113d8 <scalbn+0xa8>
 801139e:	a120      	add	r1, pc, #128	; (adr r1, 8011420 <scalbn+0xf0>)
 80113a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113a4:	e018      	b.n	80113d8 <scalbn+0xa8>
 80113a6:	2a00      	cmp	r2, #0
 80113a8:	dd08      	ble.n	80113bc <scalbn+0x8c>
 80113aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80113ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80113b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80113b6:	ec45 4b10 	vmov	d0, r4, r5
 80113ba:	bd70      	pop	{r4, r5, r6, pc}
 80113bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80113c0:	da19      	bge.n	80113f6 <scalbn+0xc6>
 80113c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80113c6:	429e      	cmp	r6, r3
 80113c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80113cc:	dd0a      	ble.n	80113e4 <scalbn+0xb4>
 80113ce:	a112      	add	r1, pc, #72	; (adr r1, 8011418 <scalbn+0xe8>)
 80113d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1e2      	bne.n	801139e <scalbn+0x6e>
 80113d8:	a30f      	add	r3, pc, #60	; (adr r3, 8011418 <scalbn+0xe8>)
 80113da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113de:	f7ef f933 	bl	8000648 <__aeabi_dmul>
 80113e2:	e7cb      	b.n	801137c <scalbn+0x4c>
 80113e4:	a10a      	add	r1, pc, #40	; (adr r1, 8011410 <scalbn+0xe0>)
 80113e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d0b8      	beq.n	8011360 <scalbn+0x30>
 80113ee:	a10e      	add	r1, pc, #56	; (adr r1, 8011428 <scalbn+0xf8>)
 80113f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113f4:	e7b4      	b.n	8011360 <scalbn+0x30>
 80113f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80113fa:	3236      	adds	r2, #54	; 0x36
 80113fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011400:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011404:	4620      	mov	r0, r4
 8011406:	4b0c      	ldr	r3, [pc, #48]	; (8011438 <scalbn+0x108>)
 8011408:	2200      	movs	r2, #0
 801140a:	e7e8      	b.n	80113de <scalbn+0xae>
 801140c:	f3af 8000 	nop.w
 8011410:	c2f8f359 	.word	0xc2f8f359
 8011414:	01a56e1f 	.word	0x01a56e1f
 8011418:	8800759c 	.word	0x8800759c
 801141c:	7e37e43c 	.word	0x7e37e43c
 8011420:	8800759c 	.word	0x8800759c
 8011424:	fe37e43c 	.word	0xfe37e43c
 8011428:	c2f8f359 	.word	0xc2f8f359
 801142c:	81a56e1f 	.word	0x81a56e1f
 8011430:	43500000 	.word	0x43500000
 8011434:	ffff3cb0 	.word	0xffff3cb0
 8011438:	3c900000 	.word	0x3c900000

0801143c <atanf>:
 801143c:	b538      	push	{r3, r4, r5, lr}
 801143e:	ee10 5a10 	vmov	r5, s0
 8011442:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011446:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801144a:	eef0 7a40 	vmov.f32	s15, s0
 801144e:	db10      	blt.n	8011472 <atanf+0x36>
 8011450:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011454:	dd04      	ble.n	8011460 <atanf+0x24>
 8011456:	ee70 7a00 	vadd.f32	s15, s0, s0
 801145a:	eeb0 0a67 	vmov.f32	s0, s15
 801145e:	bd38      	pop	{r3, r4, r5, pc}
 8011460:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011598 <atanf+0x15c>
 8011464:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801159c <atanf+0x160>
 8011468:	2d00      	cmp	r5, #0
 801146a:	bfd8      	it	le
 801146c:	eef0 7a40 	vmovle.f32	s15, s0
 8011470:	e7f3      	b.n	801145a <atanf+0x1e>
 8011472:	4b4b      	ldr	r3, [pc, #300]	; (80115a0 <atanf+0x164>)
 8011474:	429c      	cmp	r4, r3
 8011476:	dc10      	bgt.n	801149a <atanf+0x5e>
 8011478:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801147c:	da0a      	bge.n	8011494 <atanf+0x58>
 801147e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80115a4 <atanf+0x168>
 8011482:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801148a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011492:	dce2      	bgt.n	801145a <atanf+0x1e>
 8011494:	f04f 33ff 	mov.w	r3, #4294967295
 8011498:	e013      	b.n	80114c2 <atanf+0x86>
 801149a:	f000 f8a3 	bl	80115e4 <fabsf>
 801149e:	4b42      	ldr	r3, [pc, #264]	; (80115a8 <atanf+0x16c>)
 80114a0:	429c      	cmp	r4, r3
 80114a2:	dc4f      	bgt.n	8011544 <atanf+0x108>
 80114a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80114a8:	429c      	cmp	r4, r3
 80114aa:	dc41      	bgt.n	8011530 <atanf+0xf4>
 80114ac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80114b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80114b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80114b8:	2300      	movs	r3, #0
 80114ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80114be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80114c2:	1c5a      	adds	r2, r3, #1
 80114c4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80114c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80115ac <atanf+0x170>
 80114cc:	eddf 5a38 	vldr	s11, [pc, #224]	; 80115b0 <atanf+0x174>
 80114d0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80115b4 <atanf+0x178>
 80114d4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80114d8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80114dc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80115b8 <atanf+0x17c>
 80114e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80114e4:	eddf 5a35 	vldr	s11, [pc, #212]	; 80115bc <atanf+0x180>
 80114e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80114ec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80115c0 <atanf+0x184>
 80114f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80114f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80115c4 <atanf+0x188>
 80114f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80114fc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80115c8 <atanf+0x18c>
 8011500:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011504:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80115cc <atanf+0x190>
 8011508:	eea5 7a26 	vfma.f32	s14, s10, s13
 801150c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80115d0 <atanf+0x194>
 8011510:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011514:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80115d4 <atanf+0x198>
 8011518:	eea5 7a26 	vfma.f32	s14, s10, s13
 801151c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011520:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011524:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011528:	d121      	bne.n	801156e <atanf+0x132>
 801152a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801152e:	e794      	b.n	801145a <atanf+0x1e>
 8011530:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011534:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011538:	ee30 0a27 	vadd.f32	s0, s0, s15
 801153c:	2301      	movs	r3, #1
 801153e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011542:	e7be      	b.n	80114c2 <atanf+0x86>
 8011544:	4b24      	ldr	r3, [pc, #144]	; (80115d8 <atanf+0x19c>)
 8011546:	429c      	cmp	r4, r3
 8011548:	dc0b      	bgt.n	8011562 <atanf+0x126>
 801154a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801154e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011552:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011556:	2302      	movs	r3, #2
 8011558:	ee70 6a67 	vsub.f32	s13, s0, s15
 801155c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011560:	e7af      	b.n	80114c2 <atanf+0x86>
 8011562:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011566:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801156a:	2303      	movs	r3, #3
 801156c:	e7a9      	b.n	80114c2 <atanf+0x86>
 801156e:	4a1b      	ldr	r2, [pc, #108]	; (80115dc <atanf+0x1a0>)
 8011570:	491b      	ldr	r1, [pc, #108]	; (80115e0 <atanf+0x1a4>)
 8011572:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011576:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801157a:	ed93 0a00 	vldr	s0, [r3]
 801157e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011582:	ed92 0a00 	vldr	s0, [r2]
 8011586:	ee77 7a67 	vsub.f32	s15, s14, s15
 801158a:	2d00      	cmp	r5, #0
 801158c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011590:	bfb8      	it	lt
 8011592:	eef1 7a67 	vneglt.f32	s15, s15
 8011596:	e760      	b.n	801145a <atanf+0x1e>
 8011598:	3fc90fdb 	.word	0x3fc90fdb
 801159c:	bfc90fdb 	.word	0xbfc90fdb
 80115a0:	3edfffff 	.word	0x3edfffff
 80115a4:	7149f2ca 	.word	0x7149f2ca
 80115a8:	3f97ffff 	.word	0x3f97ffff
 80115ac:	3c8569d7 	.word	0x3c8569d7
 80115b0:	3d4bda59 	.word	0x3d4bda59
 80115b4:	bd6ef16b 	.word	0xbd6ef16b
 80115b8:	3d886b35 	.word	0x3d886b35
 80115bc:	3dba2e6e 	.word	0x3dba2e6e
 80115c0:	3e124925 	.word	0x3e124925
 80115c4:	3eaaaaab 	.word	0x3eaaaaab
 80115c8:	bd15a221 	.word	0xbd15a221
 80115cc:	bd9d8795 	.word	0xbd9d8795
 80115d0:	bde38e38 	.word	0xbde38e38
 80115d4:	be4ccccd 	.word	0xbe4ccccd
 80115d8:	401bffff 	.word	0x401bffff
 80115dc:	08012130 	.word	0x08012130
 80115e0:	08012140 	.word	0x08012140

080115e4 <fabsf>:
 80115e4:	ee10 3a10 	vmov	r3, s0
 80115e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80115ec:	ee00 3a10 	vmov	s0, r3
 80115f0:	4770      	bx	lr
	...

080115f4 <floorf>:
 80115f4:	ee10 3a10 	vmov	r3, s0
 80115f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80115fc:	3a7f      	subs	r2, #127	; 0x7f
 80115fe:	2a16      	cmp	r2, #22
 8011600:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011604:	dc2a      	bgt.n	801165c <floorf+0x68>
 8011606:	2a00      	cmp	r2, #0
 8011608:	da11      	bge.n	801162e <floorf+0x3a>
 801160a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801166c <floorf+0x78>
 801160e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011612:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161a:	dd05      	ble.n	8011628 <floorf+0x34>
 801161c:	2b00      	cmp	r3, #0
 801161e:	da23      	bge.n	8011668 <floorf+0x74>
 8011620:	4a13      	ldr	r2, [pc, #76]	; (8011670 <floorf+0x7c>)
 8011622:	2900      	cmp	r1, #0
 8011624:	bf18      	it	ne
 8011626:	4613      	movne	r3, r2
 8011628:	ee00 3a10 	vmov	s0, r3
 801162c:	4770      	bx	lr
 801162e:	4911      	ldr	r1, [pc, #68]	; (8011674 <floorf+0x80>)
 8011630:	4111      	asrs	r1, r2
 8011632:	420b      	tst	r3, r1
 8011634:	d0fa      	beq.n	801162c <floorf+0x38>
 8011636:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801166c <floorf+0x78>
 801163a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801163e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011646:	ddef      	ble.n	8011628 <floorf+0x34>
 8011648:	2b00      	cmp	r3, #0
 801164a:	bfbe      	ittt	lt
 801164c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8011650:	fa40 f202 	asrlt.w	r2, r0, r2
 8011654:	189b      	addlt	r3, r3, r2
 8011656:	ea23 0301 	bic.w	r3, r3, r1
 801165a:	e7e5      	b.n	8011628 <floorf+0x34>
 801165c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011660:	d3e4      	bcc.n	801162c <floorf+0x38>
 8011662:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011666:	4770      	bx	lr
 8011668:	2300      	movs	r3, #0
 801166a:	e7dd      	b.n	8011628 <floorf+0x34>
 801166c:	7149f2ca 	.word	0x7149f2ca
 8011670:	bf800000 	.word	0xbf800000
 8011674:	007fffff 	.word	0x007fffff

08011678 <scalbnf>:
 8011678:	ee10 3a10 	vmov	r3, s0
 801167c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011680:	d025      	beq.n	80116ce <scalbnf+0x56>
 8011682:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011686:	d302      	bcc.n	801168e <scalbnf+0x16>
 8011688:	ee30 0a00 	vadd.f32	s0, s0, s0
 801168c:	4770      	bx	lr
 801168e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8011692:	d122      	bne.n	80116da <scalbnf+0x62>
 8011694:	4b2a      	ldr	r3, [pc, #168]	; (8011740 <scalbnf+0xc8>)
 8011696:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011744 <scalbnf+0xcc>
 801169a:	4298      	cmp	r0, r3
 801169c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80116a0:	db16      	blt.n	80116d0 <scalbnf+0x58>
 80116a2:	ee10 3a10 	vmov	r3, s0
 80116a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80116aa:	3a19      	subs	r2, #25
 80116ac:	4402      	add	r2, r0
 80116ae:	2afe      	cmp	r2, #254	; 0xfe
 80116b0:	dd15      	ble.n	80116de <scalbnf+0x66>
 80116b2:	ee10 3a10 	vmov	r3, s0
 80116b6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8011748 <scalbnf+0xd0>
 80116ba:	eddf 6a24 	vldr	s13, [pc, #144]	; 801174c <scalbnf+0xd4>
 80116be:	2b00      	cmp	r3, #0
 80116c0:	eeb0 7a67 	vmov.f32	s14, s15
 80116c4:	bfb8      	it	lt
 80116c6:	eef0 7a66 	vmovlt.f32	s15, s13
 80116ca:	ee27 0a27 	vmul.f32	s0, s14, s15
 80116ce:	4770      	bx	lr
 80116d0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011750 <scalbnf+0xd8>
 80116d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80116d8:	4770      	bx	lr
 80116da:	0dd2      	lsrs	r2, r2, #23
 80116dc:	e7e6      	b.n	80116ac <scalbnf+0x34>
 80116de:	2a00      	cmp	r2, #0
 80116e0:	dd06      	ble.n	80116f0 <scalbnf+0x78>
 80116e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80116e6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80116ea:	ee00 3a10 	vmov	s0, r3
 80116ee:	4770      	bx	lr
 80116f0:	f112 0f16 	cmn.w	r2, #22
 80116f4:	da1a      	bge.n	801172c <scalbnf+0xb4>
 80116f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80116fa:	4298      	cmp	r0, r3
 80116fc:	ee10 3a10 	vmov	r3, s0
 8011700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011704:	dd0a      	ble.n	801171c <scalbnf+0xa4>
 8011706:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8011748 <scalbnf+0xd0>
 801170a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801174c <scalbnf+0xd4>
 801170e:	eef0 7a40 	vmov.f32	s15, s0
 8011712:	2b00      	cmp	r3, #0
 8011714:	bf18      	it	ne
 8011716:	eeb0 0a47 	vmovne.f32	s0, s14
 801171a:	e7db      	b.n	80116d4 <scalbnf+0x5c>
 801171c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011750 <scalbnf+0xd8>
 8011720:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8011754 <scalbnf+0xdc>
 8011724:	eef0 7a40 	vmov.f32	s15, s0
 8011728:	2b00      	cmp	r3, #0
 801172a:	e7f3      	b.n	8011714 <scalbnf+0x9c>
 801172c:	3219      	adds	r2, #25
 801172e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011732:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011736:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011758 <scalbnf+0xe0>
 801173a:	ee07 3a10 	vmov	s14, r3
 801173e:	e7c4      	b.n	80116ca <scalbnf+0x52>
 8011740:	ffff3cb0 	.word	0xffff3cb0
 8011744:	4c000000 	.word	0x4c000000
 8011748:	7149f2ca 	.word	0x7149f2ca
 801174c:	f149f2ca 	.word	0xf149f2ca
 8011750:	0da24260 	.word	0x0da24260
 8011754:	8da24260 	.word	0x8da24260
 8011758:	33000000 	.word	0x33000000

0801175c <_init>:
 801175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175e:	bf00      	nop
 8011760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011762:	bc08      	pop	{r3}
 8011764:	469e      	mov	lr, r3
 8011766:	4770      	bx	lr

08011768 <_fini>:
 8011768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176a:	bf00      	nop
 801176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801176e:	bc08      	pop	{r3}
 8011770:	469e      	mov	lr, r3
 8011772:	4770      	bx	lr
