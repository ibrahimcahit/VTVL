
G474-AHRS-BMI160.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001292c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08012b10  08012b10  00022b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134c0  080134c0  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  080134c0  080134c0  000234c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080134c8  080134c8  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134c8  080134c8  000234c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080134cc  080134cc  000234cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080134d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000208  080136d4  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  080136d4  0003079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204c5  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1c  00000000  00000000  000506f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00054518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  00055f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b05b  00000000  00000000  00057720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff11  00000000  00000000  0008277b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107cf2  00000000  00000000  000a268c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008894  00000000  00000000  001aa3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012af4 	.word	0x08012af4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	08012af4 	.word	0x08012af4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	; 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	3a01      	subs	r2, #1
 8000d92:	bf28      	it	cs
 8000d94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d98:	d2ed      	bcs.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b9aa 	b.w	8001260 <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f83c 	bl	8000f90 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_d2lz>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	2200      	movs	r2, #0
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f7ff fdfd 	bl	8000b2c <__aeabi_dcmplt>
 8000f32:	b928      	cbnz	r0, 8000f40 <__aeabi_d2lz+0x1c>
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f3c:	f000 b80a 	b.w	8000f54 <__aeabi_d2ulz>
 8000f40:	4620      	mov	r0, r4
 8000f42:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f46:	f000 f805 	bl	8000f54 <__aeabi_d2ulz>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_d2ulz>:
 8000f54:	b5d0      	push	{r4, r6, r7, lr}
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__aeabi_d2ulz+0x34>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	f7ff fb73 	bl	8000648 <__aeabi_dmul>
 8000f62:	f7ff fe49 	bl	8000bf8 <__aeabi_d2uiz>
 8000f66:	4604      	mov	r4, r0
 8000f68:	f7ff faf4 	bl	8000554 <__aeabi_ui2d>
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <__aeabi_d2ulz+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f7ff fb6a 	bl	8000648 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4630      	mov	r0, r6
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f7ff f9ac 	bl	80002d8 <__aeabi_dsub>
 8000f80:	f7ff fe3a 	bl	8000bf8 <__aeabi_d2uiz>
 8000f84:	4621      	mov	r1, r4
 8000f86:	bdd0      	pop	{r4, r6, r7, pc}
 8000f88:	3df00000 	.word	0x3df00000
 8000f8c:	41f00000 	.word	0x41f00000

08000f90 <__udivmoddi4>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	9d08      	ldr	r5, [sp, #32]
 8000f96:	4604      	mov	r4, r0
 8000f98:	468e      	mov	lr, r1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d14d      	bne.n	800103a <__udivmoddi4+0xaa>
 8000f9e:	428a      	cmp	r2, r1
 8000fa0:	4694      	mov	ip, r2
 8000fa2:	d969      	bls.n	8001078 <__udivmoddi4+0xe8>
 8000fa4:	fab2 f282 	clz	r2, r2
 8000fa8:	b152      	cbz	r2, 8000fc0 <__udivmoddi4+0x30>
 8000faa:	fa01 f302 	lsl.w	r3, r1, r2
 8000fae:	f1c2 0120 	rsb	r1, r2, #32
 8000fb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000fb6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fba:	ea41 0e03 	orr.w	lr, r1, r3
 8000fbe:	4094      	lsls	r4, r2
 8000fc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fc4:	0c21      	lsrs	r1, r4, #16
 8000fc6:	fbbe f6f8 	udiv	r6, lr, r8
 8000fca:	fa1f f78c 	uxth.w	r7, ip
 8000fce:	fb08 e316 	mls	r3, r8, r6, lr
 8000fd2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fd6:	fb06 f107 	mul.w	r1, r6, r7
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x64>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000fe6:	f080 811f 	bcs.w	8001228 <__udivmoddi4+0x298>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 811c 	bls.w	8001228 <__udivmoddi4+0x298>
 8000ff0:	3e02      	subs	r6, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1a5b      	subs	r3, r3, r1
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ffc:	fb08 3310 	mls	r3, r8, r0, r3
 8001000:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001004:	fb00 f707 	mul.w	r7, r0, r7
 8001008:	42a7      	cmp	r7, r4
 800100a:	d90a      	bls.n	8001022 <__udivmoddi4+0x92>
 800100c:	eb1c 0404 	adds.w	r4, ip, r4
 8001010:	f100 33ff 	add.w	r3, r0, #4294967295
 8001014:	f080 810a 	bcs.w	800122c <__udivmoddi4+0x29c>
 8001018:	42a7      	cmp	r7, r4
 800101a:	f240 8107 	bls.w	800122c <__udivmoddi4+0x29c>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001026:	1be4      	subs	r4, r4, r7
 8001028:	2600      	movs	r6, #0
 800102a:	b11d      	cbz	r5, 8001034 <__udivmoddi4+0xa4>
 800102c:	40d4      	lsrs	r4, r2
 800102e:	2300      	movs	r3, #0
 8001030:	e9c5 4300 	strd	r4, r3, [r5]
 8001034:	4631      	mov	r1, r6
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d909      	bls.n	8001052 <__udivmoddi4+0xc2>
 800103e:	2d00      	cmp	r5, #0
 8001040:	f000 80ef 	beq.w	8001222 <__udivmoddi4+0x292>
 8001044:	2600      	movs	r6, #0
 8001046:	e9c5 0100 	strd	r0, r1, [r5]
 800104a:	4630      	mov	r0, r6
 800104c:	4631      	mov	r1, r6
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	fab3 f683 	clz	r6, r3
 8001056:	2e00      	cmp	r6, #0
 8001058:	d14a      	bne.n	80010f0 <__udivmoddi4+0x160>
 800105a:	428b      	cmp	r3, r1
 800105c:	d302      	bcc.n	8001064 <__udivmoddi4+0xd4>
 800105e:	4282      	cmp	r2, r0
 8001060:	f200 80f9 	bhi.w	8001256 <__udivmoddi4+0x2c6>
 8001064:	1a84      	subs	r4, r0, r2
 8001066:	eb61 0303 	sbc.w	r3, r1, r3
 800106a:	2001      	movs	r0, #1
 800106c:	469e      	mov	lr, r3
 800106e:	2d00      	cmp	r5, #0
 8001070:	d0e0      	beq.n	8001034 <__udivmoddi4+0xa4>
 8001072:	e9c5 4e00 	strd	r4, lr, [r5]
 8001076:	e7dd      	b.n	8001034 <__udivmoddi4+0xa4>
 8001078:	b902      	cbnz	r2, 800107c <__udivmoddi4+0xec>
 800107a:	deff      	udf	#255	; 0xff
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	2a00      	cmp	r2, #0
 8001082:	f040 8092 	bne.w	80011aa <__udivmoddi4+0x21a>
 8001086:	eba1 010c 	sub.w	r1, r1, ip
 800108a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800108e:	fa1f fe8c 	uxth.w	lr, ip
 8001092:	2601      	movs	r6, #1
 8001094:	0c20      	lsrs	r0, r4, #16
 8001096:	fbb1 f3f7 	udiv	r3, r1, r7
 800109a:	fb07 1113 	mls	r1, r7, r3, r1
 800109e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010a2:	fb0e f003 	mul.w	r0, lr, r3
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x12c>
 80010aa:	eb1c 0101 	adds.w	r1, ip, r1
 80010ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x12a>
 80010b4:	4288      	cmp	r0, r1
 80010b6:	f200 80cb 	bhi.w	8001250 <__udivmoddi4+0x2c0>
 80010ba:	4643      	mov	r3, r8
 80010bc:	1a09      	subs	r1, r1, r0
 80010be:	b2a4      	uxth	r4, r4
 80010c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80010c4:	fb07 1110 	mls	r1, r7, r0, r1
 80010c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010cc:	fb0e fe00 	mul.w	lr, lr, r0
 80010d0:	45a6      	cmp	lr, r4
 80010d2:	d908      	bls.n	80010e6 <__udivmoddi4+0x156>
 80010d4:	eb1c 0404 	adds.w	r4, ip, r4
 80010d8:	f100 31ff 	add.w	r1, r0, #4294967295
 80010dc:	d202      	bcs.n	80010e4 <__udivmoddi4+0x154>
 80010de:	45a6      	cmp	lr, r4
 80010e0:	f200 80bb 	bhi.w	800125a <__udivmoddi4+0x2ca>
 80010e4:	4608      	mov	r0, r1
 80010e6:	eba4 040e 	sub.w	r4, r4, lr
 80010ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010ee:	e79c      	b.n	800102a <__udivmoddi4+0x9a>
 80010f0:	f1c6 0720 	rsb	r7, r6, #32
 80010f4:	40b3      	lsls	r3, r6
 80010f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80010fe:	fa20 f407 	lsr.w	r4, r0, r7
 8001102:	fa01 f306 	lsl.w	r3, r1, r6
 8001106:	431c      	orrs	r4, r3
 8001108:	40f9      	lsrs	r1, r7
 800110a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800110e:	fa00 f306 	lsl.w	r3, r0, r6
 8001112:	fbb1 f8f9 	udiv	r8, r1, r9
 8001116:	0c20      	lsrs	r0, r4, #16
 8001118:	fa1f fe8c 	uxth.w	lr, ip
 800111c:	fb09 1118 	mls	r1, r9, r8, r1
 8001120:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001124:	fb08 f00e 	mul.w	r0, r8, lr
 8001128:	4288      	cmp	r0, r1
 800112a:	fa02 f206 	lsl.w	r2, r2, r6
 800112e:	d90b      	bls.n	8001148 <__udivmoddi4+0x1b8>
 8001130:	eb1c 0101 	adds.w	r1, ip, r1
 8001134:	f108 3aff 	add.w	sl, r8, #4294967295
 8001138:	f080 8088 	bcs.w	800124c <__udivmoddi4+0x2bc>
 800113c:	4288      	cmp	r0, r1
 800113e:	f240 8085 	bls.w	800124c <__udivmoddi4+0x2bc>
 8001142:	f1a8 0802 	sub.w	r8, r8, #2
 8001146:	4461      	add	r1, ip
 8001148:	1a09      	subs	r1, r1, r0
 800114a:	b2a4      	uxth	r4, r4
 800114c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001150:	fb09 1110 	mls	r1, r9, r0, r1
 8001154:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001158:	fb00 fe0e 	mul.w	lr, r0, lr
 800115c:	458e      	cmp	lr, r1
 800115e:	d908      	bls.n	8001172 <__udivmoddi4+0x1e2>
 8001160:	eb1c 0101 	adds.w	r1, ip, r1
 8001164:	f100 34ff 	add.w	r4, r0, #4294967295
 8001168:	d26c      	bcs.n	8001244 <__udivmoddi4+0x2b4>
 800116a:	458e      	cmp	lr, r1
 800116c:	d96a      	bls.n	8001244 <__udivmoddi4+0x2b4>
 800116e:	3802      	subs	r0, #2
 8001170:	4461      	add	r1, ip
 8001172:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001176:	fba0 9402 	umull	r9, r4, r0, r2
 800117a:	eba1 010e 	sub.w	r1, r1, lr
 800117e:	42a1      	cmp	r1, r4
 8001180:	46c8      	mov	r8, r9
 8001182:	46a6      	mov	lr, r4
 8001184:	d356      	bcc.n	8001234 <__udivmoddi4+0x2a4>
 8001186:	d053      	beq.n	8001230 <__udivmoddi4+0x2a0>
 8001188:	b15d      	cbz	r5, 80011a2 <__udivmoddi4+0x212>
 800118a:	ebb3 0208 	subs.w	r2, r3, r8
 800118e:	eb61 010e 	sbc.w	r1, r1, lr
 8001192:	fa01 f707 	lsl.w	r7, r1, r7
 8001196:	fa22 f306 	lsr.w	r3, r2, r6
 800119a:	40f1      	lsrs	r1, r6
 800119c:	431f      	orrs	r7, r3
 800119e:	e9c5 7100 	strd	r7, r1, [r5]
 80011a2:	2600      	movs	r6, #0
 80011a4:	4631      	mov	r1, r6
 80011a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011aa:	f1c2 0320 	rsb	r3, r2, #32
 80011ae:	40d8      	lsrs	r0, r3
 80011b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b4:	fa21 f303 	lsr.w	r3, r1, r3
 80011b8:	4091      	lsls	r1, r2
 80011ba:	4301      	orrs	r1, r0
 80011bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011c0:	fa1f fe8c 	uxth.w	lr, ip
 80011c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80011c8:	fb07 3610 	mls	r6, r7, r0, r3
 80011cc:	0c0b      	lsrs	r3, r1, #16
 80011ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011d2:	fb00 f60e 	mul.w	r6, r0, lr
 80011d6:	429e      	cmp	r6, r3
 80011d8:	fa04 f402 	lsl.w	r4, r4, r2
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x260>
 80011de:	eb1c 0303 	adds.w	r3, ip, r3
 80011e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80011e6:	d22f      	bcs.n	8001248 <__udivmoddi4+0x2b8>
 80011e8:	429e      	cmp	r6, r3
 80011ea:	d92d      	bls.n	8001248 <__udivmoddi4+0x2b8>
 80011ec:	3802      	subs	r0, #2
 80011ee:	4463      	add	r3, ip
 80011f0:	1b9b      	subs	r3, r3, r6
 80011f2:	b289      	uxth	r1, r1
 80011f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80011f8:	fb07 3316 	mls	r3, r7, r6, r3
 80011fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001200:	fb06 f30e 	mul.w	r3, r6, lr
 8001204:	428b      	cmp	r3, r1
 8001206:	d908      	bls.n	800121a <__udivmoddi4+0x28a>
 8001208:	eb1c 0101 	adds.w	r1, ip, r1
 800120c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001210:	d216      	bcs.n	8001240 <__udivmoddi4+0x2b0>
 8001212:	428b      	cmp	r3, r1
 8001214:	d914      	bls.n	8001240 <__udivmoddi4+0x2b0>
 8001216:	3e02      	subs	r6, #2
 8001218:	4461      	add	r1, ip
 800121a:	1ac9      	subs	r1, r1, r3
 800121c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001220:	e738      	b.n	8001094 <__udivmoddi4+0x104>
 8001222:	462e      	mov	r6, r5
 8001224:	4628      	mov	r0, r5
 8001226:	e705      	b.n	8001034 <__udivmoddi4+0xa4>
 8001228:	4606      	mov	r6, r0
 800122a:	e6e3      	b.n	8000ff4 <__udivmoddi4+0x64>
 800122c:	4618      	mov	r0, r3
 800122e:	e6f8      	b.n	8001022 <__udivmoddi4+0x92>
 8001230:	454b      	cmp	r3, r9
 8001232:	d2a9      	bcs.n	8001188 <__udivmoddi4+0x1f8>
 8001234:	ebb9 0802 	subs.w	r8, r9, r2
 8001238:	eb64 0e0c 	sbc.w	lr, r4, ip
 800123c:	3801      	subs	r0, #1
 800123e:	e7a3      	b.n	8001188 <__udivmoddi4+0x1f8>
 8001240:	4646      	mov	r6, r8
 8001242:	e7ea      	b.n	800121a <__udivmoddi4+0x28a>
 8001244:	4620      	mov	r0, r4
 8001246:	e794      	b.n	8001172 <__udivmoddi4+0x1e2>
 8001248:	4640      	mov	r0, r8
 800124a:	e7d1      	b.n	80011f0 <__udivmoddi4+0x260>
 800124c:	46d0      	mov	r8, sl
 800124e:	e77b      	b.n	8001148 <__udivmoddi4+0x1b8>
 8001250:	3b02      	subs	r3, #2
 8001252:	4461      	add	r1, ip
 8001254:	e732      	b.n	80010bc <__udivmoddi4+0x12c>
 8001256:	4630      	mov	r0, r6
 8001258:	e709      	b.n	800106e <__udivmoddi4+0xde>
 800125a:	4464      	add	r4, ip
 800125c:	3802      	subs	r0, #2
 800125e:	e742      	b.n	80010e6 <__udivmoddi4+0x156>

08001260 <__aeabi_idiv0>:
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8001264:	b480      	push	{r7}
 8001266:	b08b      	sub	sp, #44	; 0x2c
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <FusionAhrsInitialise+0x74>)
 8001282:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <FusionAhrsInitialise+0x78>)
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80012ca:	bf00      	nop
 80012cc:	372c      	adds	r7, #44	; 0x2c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	7f7fffff 	.word	0x7f7fffff
 80012dc:	41200000 	.word	0x41200000

080012e0 <FusionAhrsSetMagneticField>:
 * @brief Sets the minimum and maximum valid magnetic field magnitudes in uT.
 * @param fusionAhrs AHRS algorithm structure.
 * @param minimumMagneticField Minimum valid magnetic field magnitude.
 * @param maximumMagneticField Maximum valid magnetic field magnitude.
 */
void FusionAhrsSetMagneticField(FusionAhrs * const fusionAhrs, const float minimumMagneticField, const float maximumMagneticField) {
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012ec:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionAhrs->minimumMagneticFieldSquared = minimumMagneticField * minimumMagneticField;
 80012f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	edc3 7a01 	vstr	s15, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = maximumMagneticField * maximumMagneticField;
 80012fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001302:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8001318:	b490      	push	{r4, r7}
 800131a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800131e:	af00      	add	r7, sp, #0
 8001320:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001324:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001328:	6018      	str	r0, [r3, #0]
 800132a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800132e:	f5a3 6181 	sub.w	r1, r3, #1032	; 0x408
 8001332:	eeb0 5a61 	vmov.f32	s10, s3
 8001336:	eef0 5a42 	vmov.f32	s11, s4
 800133a:	eeb0 6a62 	vmov.f32	s12, s5
 800133e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001342:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8001346:	eef0 6a43 	vmov.f32	s13, s6
 800134a:	eeb0 7a63 	vmov.f32	s14, s7
 800134e:	eef0 7a44 	vmov.f32	s15, s8
 8001352:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001356:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800135a:	f507 6085 	add.w	r0, r7, #1064	; 0x428
 800135e:	f2a0 4024 	subw	r0, r0, #1060	; 0x424
 8001362:	edc0 4a00 	vstr	s9, [r0]
 8001366:	ed81 0a00 	vstr	s0, [r1]
 800136a:	edc1 0a01 	vstr	s1, [r1, #4]
 800136e:	ed81 1a02 	vstr	s2, [r1, #8]
 8001372:	ed82 5a00 	vstr	s10, [r2]
 8001376:	edc2 5a01 	vstr	s11, [r2, #4]
 800137a:	ed82 6a02 	vstr	s12, [r2, #8]
 800137e:	edc3 6a00 	vstr	s13, [r3]
 8001382:	ed83 7a01 	vstr	s14, [r3, #4]
 8001386:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 800138a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800138e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800139c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 80013b4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013b8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d116      	bne.n	80013f8 <FusionAhrsUpdate+0xe0>
 80013ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013ce:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80013d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d10b      	bne.n	80013f8 <FusionAhrsUpdate+0xe0>
 80013e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013e4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80013e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	f000 85b4 	beq.w	8001f60 <FusionAhrsUpdate+0xc48>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 80013f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013fc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	ed93 7a04 	vldr	s14, [r3, #16]
 8001406:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800140a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	edd3 7a06 	vldr	s15, [r3, #24]
 8001414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001418:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800141c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	edd3 6a03 	vldr	s13, [r3, #12]
 8001426:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800142a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	edd3 7a05 	vldr	s15, [r3, #20]
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 800143c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001440:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001444:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8001448:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800144c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	ed93 7a03 	vldr	s14, [r3, #12]
 8001456:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800145a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	edd3 7a04 	vldr	s15, [r3, #16]
 8001464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001468:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800146c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	edd3 6a05 	vldr	s13, [r3, #20]
 8001476:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800147a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	edd3 7a06 	vldr	s15, [r3, #24]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 800148c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001490:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001494:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8001498:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800149c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80014a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014aa:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014c4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	edd3 6a06 	vldr	s13, [r3, #24]
 80014ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014d2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 80014e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014e8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80014ec:	edc3 7a02 	vstr	s15, [r3, #8]
 80014f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014f4:	f5a3 7167 	sub.w	r1, r3, #924	; 0x39c
 80014f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014fc:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8001500:	460b      	mov	r3, r1
 8001502:	ca07      	ldmia	r2, {r0, r1, r2}
 8001504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001508:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800150c:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 8001510:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001514:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8001518:	460b      	mov	r3, r1
 800151a:	ca07      	ldmia	r2, {r0, r1, r2}
 800151c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001520:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001524:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001530:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800153c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001540:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001544:	edd3 6a01 	vldr	s13, [r3, #4]
 8001548:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800154c:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001550:	edd3 7a01 	vldr	s15, [r3, #4]
 8001554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001560:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001564:	edd3 6a02 	vldr	s13, [r3, #8]
 8001568:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800156c:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001570:	edd3 7a02 	vldr	s15, [r3, #8]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001580:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001584:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001594:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001598:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 800159c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015a0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80015a4:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80015ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015b6:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80015ba:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80015bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015c0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	105a      	asrs	r2, r3, #1
 80015c8:	4bd1      	ldr	r3, [pc, #836]	; (8001910 <FusionAhrsUpdate+0x5f8>)
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80015d0:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 80015d4:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80015d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015e0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80015e4:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80015e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015ea:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001602:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001616:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800161a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800162a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800162e:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001632:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001636:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800163a:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800163c:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001646:	f5a3 716f 	sub.w	r1, r3, #956	; 0x3bc
 800164a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800164e:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8001652:	460b      	mov	r3, r1
 8001654:	ca07      	ldmia	r2, {r0, r1, r2}
 8001656:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800165a:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001664:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001666:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800166a:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001682:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001686:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800168a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800168e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001692:	ed93 7a01 	vldr	s14, [r3, #4]
 8001696:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016a6:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80016aa:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80016ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016b2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80016b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ba:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016ca:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80016ce:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016d6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 80016da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016de:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 80016e2:	460b      	mov	r3, r1
 80016e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016ee:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80016f2:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80016f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80016fc:	bf00      	nop
 80016fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001702:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001706:	461c      	mov	r4, r3
 8001708:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800170c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001714:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001718:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 800171c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001720:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001724:	460b      	mov	r3, r1
 8001726:	ca07      	ldmia	r2, {r0, r1, r2}
 8001728:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800172c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001730:	f5a3 7175 	sub.w	r1, r3, #980	; 0x3d4
 8001734:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001738:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 800173c:	460b      	mov	r3, r1
 800173e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001744:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001748:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800174c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001750:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001754:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001758:	edd3 7a02 	vldr	s15, [r3, #8]
 800175c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001760:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001764:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001768:	edd3 6a02 	vldr	s13, [r3, #8]
 800176c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001770:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001774:	edd3 7a01 	vldr	s15, [r3, #4]
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001780:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001784:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001788:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 800178c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001790:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001794:	ed93 7a02 	vldr	s14, [r3, #8]
 8001798:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800179c:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017ac:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80017b0:	edd3 6a00 	vldr	s13, [r3]
 80017b4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017b8:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80017bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017cc:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80017d0:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80017d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017d8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017e4:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80017e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017f4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80017f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80017fc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001800:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001810:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001814:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001818:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800181c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001820:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 8001824:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001828:	f5a3 727b 	sub.w	r2, r3, #1004	; 0x3ec
 800182c:	460b      	mov	r3, r1
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001834:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001838:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 800183c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001840:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001844:	460b      	mov	r3, r1
 8001846:	ca07      	ldmia	r2, {r0, r1, r2}
 8001848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800184c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001850:	f5a3 717e 	sub.w	r1, r3, #1016	; 0x3f8
 8001854:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001858:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 800185c:	460b      	mov	r3, r1
 800185e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001860:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001864:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001868:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001874:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001884:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001888:	edd3 6a01 	vldr	s13, [r3, #4]
 800188c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001890:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001894:	edd3 7a01 	vldr	s15, [r3, #4]
 8001898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018a4:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80018a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80018ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018b0:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80018b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 80018c0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018c4:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 80018c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018cc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	f100 833c 	bmi.w	8001f62 <FusionAhrsUpdate+0xc4a>
 80018ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018ee:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	f300 832b 	bgt.w	8001f62 <FusionAhrsUpdate+0xc4a>
 800190c:	e002      	b.n	8001914 <FusionAhrsUpdate+0x5fc>
 800190e:	bf00      	nop
 8001910:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001914:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001918:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001922:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001926:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001938:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001942:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001946:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001958:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800195c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001960:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001964:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001968:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001972:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001976:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001988:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800198c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001990:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	edd3 6a05 	vldr	s13, [r3, #20]
 800199a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800199e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80019b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019b4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80019b8:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 80019bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019c0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	ed93 7a05 	vldr	s14, [r3, #20]
 80019ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ce:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80019d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019e0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80019ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ee:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80019f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fc:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001a00:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a04:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001a08:	edc3 7a02 	vstr	s15, [r3, #8]
 8001a0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a10:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8001a14:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a18:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a24:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a28:	f5a3 713e 	sub.w	r1, r3, #760	; 0x2f8
 8001a2c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a30:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 8001a34:	460b      	mov	r3, r1
 8001a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001a3c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a40:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001a44:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a48:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a4c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a58:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a5c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001a60:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a64:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a68:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a7c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001a80:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001a84:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a88:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001a8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a90:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a94:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001aa4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001aa8:	edd3 6a00 	vldr	s13, [r3]
 8001aac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ab0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001ab4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ac4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001ac8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001acc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ad0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001ad4:	ed93 7a00 	vldr	s14, [r3]
 8001ad8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001adc:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001ae0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001aec:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001af0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001af4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001af8:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b08:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b0c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001b10:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001b14:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b18:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8001b1c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b26:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b2a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b2e:	461c      	mov	r4, r3
 8001b30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b3c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b40:	f5a3 7147 	sub.w	r1, r3, #796	; 0x31c
 8001b44:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b48:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b54:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b58:	f5a3 714a 	sub.w	r1, r3, #808	; 0x328
 8001b5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b60:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001b64:	460b      	mov	r3, r1
 8001b66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001b6c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b70:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b7c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b88:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b8c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001b90:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b94:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b98:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001b9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bac:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001bb0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bb4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bb8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001bcc:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001bd0:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001be4:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001be8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bec:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001bf0:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001bf8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c02:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001c06:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001c08:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c0c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	105a      	asrs	r2, r3, #1
 8001c14:	4bd0      	ldr	r3, [pc, #832]	; (8001f58 <FusionAhrsUpdate+0xc40>)
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8001c1c:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8001c20:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001c22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c2c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c30:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001c32:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c36:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c3a:	ed93 7a00 	vldr	s14, [r3]
 8001c3e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c4e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c66:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c72:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c76:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001c7e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c82:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001c86:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001c88:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c92:	f5a3 714f 	sub.w	r1, r3, #828	; 0x33c
 8001c96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c9a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ca2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ca6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8001cb0:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001cb2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cb6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cce:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001cd2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001cd6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cda:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001cde:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ce2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cf2:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001cf6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001cfa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cfe:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001d02:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d06:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d16:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001d1a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001d1e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d22:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8001d26:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d30:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001d34:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8001d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001d3e:	bf00      	nop
 8001d40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d44:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d48:	461c      	mov	r4, r3
 8001d4a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001d4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d5a:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8001d5e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d62:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001d66:	460b      	mov	r3, r1
 8001d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d6e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d72:	f5a3 7155 	sub.w	r1, r3, #852	; 0x354
 8001d76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d7a:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001d86:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d8a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001d8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d92:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d96:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001da6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001daa:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001db2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001db6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dc6:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001dca:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001dce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dd2:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001dd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dde:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dee:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001df2:	edd3 6a00 	vldr	s13, [r3]
 8001df6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dfa:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001dfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e0e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001e12:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001e16:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e1a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e26:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001e2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e32:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e36:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001e3a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e3e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e42:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e56:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001e5a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001e5e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e62:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8001e66:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001e6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e70:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e78:	461c      	mov	r4, r3
 8001e7a:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001e7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e86:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e8a:	f5a3 7161 	sub.w	r1, r3, #900	; 0x384
 8001e8e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e92:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001e96:	460b      	mov	r3, r1
 8001e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e9e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ea2:	f5a3 715e 	sub.w	r1, r3, #888	; 0x378
 8001ea6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eaa:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8001eae:	460b      	mov	r3, r1
 8001eb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001eb6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eba:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ec6:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ed6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001eda:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001ede:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ee2:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001ee6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eee:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001ef2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001efe:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001f02:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001f06:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f0a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001f0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f12:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f16:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001f1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f26:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001f2a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001f2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f32:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8001f36:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001f3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f44:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f48:	461c      	mov	r4, r3
 8001f4a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001f4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f56:	e004      	b.n	8001f62 <FusionAhrsUpdate+0xc4a>
 8001f58:	5f3759df 	.word	0x5f3759df
 8001f5c:	3c8efa35 	.word	0x3c8efa35
            break;
 8001f60:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001f62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f66:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	d107      	bne.n	8001f8a <FusionAhrsUpdate+0xc72>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 8001f7a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f7e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 8001f8a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f8e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8001f9a:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001f9c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fa0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001faa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fae:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	dd2f      	ble.n	8002022 <FusionAhrsUpdate+0xd0a>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001fc2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fc6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001fd0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fd4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fe2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fe6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fea:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff6:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001ffa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002002:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002006:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8002010:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002014:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8002020:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8002022:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8001f5c <FusionAhrsUpdate+0xc44>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8002026:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002032:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8002036:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800203a:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 800203e:	460b      	mov	r3, r1
 8002040:	ca07      	ldmia	r2, {r0, r1, r2}
 8002042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002046:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 800204a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800204e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002062:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002066:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800206a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800206e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002072:	ed93 7a01 	vldr	s14, [r3, #4]
 8002076:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002082:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002086:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800208a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800208e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002092:	ed93 7a02 	vldr	s14, [r3, #8]
 8002096:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020a6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80020aa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020ae:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80020b2:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80020b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020c4:	461c      	mov	r4, r3
 80020c6:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80020ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020d6:	f5a3 71dc 	sub.w	r1, r3, #440	; 0x1b8
 80020da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020de:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80020e2:	460b      	mov	r3, r1
 80020e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020ea:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 80020f4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8002104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002108:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800210c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002110:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8002114:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002118:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800211c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002120:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800212c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002130:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8002134:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002138:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800213c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002140:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800214c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002150:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002154:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002158:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800215c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002160:	ca07      	ldmia	r2, {r0, r1, r2}
 8002162:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002166:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800216a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800216e:	461c      	mov	r4, r3
 8002170:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002174:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800217c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002180:	f5a3 71ee 	sub.w	r1, r3, #476	; 0x1dc
 8002184:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002188:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800218c:	460b      	mov	r3, r1
 800218e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002190:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002194:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002198:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 800219c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021a0:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 80021a4:	460b      	mov	r3, r1
 80021a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80021ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021d0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80021d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80021e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021f8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80021fc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002200:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002204:	ed93 7a02 	vldr	s14, [r3, #8]
 8002208:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800220c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002210:	edd3 7a02 	vldr	s15, [r3, #8]
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800221c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002220:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002224:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002228:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800222c:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8002230:	ca07      	ldmia	r2, {r0, r1, r2}
 8002232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002236:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800223a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800223e:	461c      	mov	r4, r3
 8002240:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8002244:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800224c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002250:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8002254:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002258:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800225c:	460b      	mov	r3, r1
 800225e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002268:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8002272:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002276:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800227a:	ed93 7a00 	vldr	s14, [r3]
 800227e:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800228a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800228e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8002292:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002296:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800229a:	ed93 7a01 	vldr	s14, [r3, #4]
 800229e:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022aa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80022ae:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80022b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022b6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80022ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80022be:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022ca:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80022ce:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80022d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022d6:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80022da:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80022de:	ca07      	ldmia	r2, {r0, r1, r2}
 80022e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ec:	461c      	mov	r4, r3
 80022ee:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80022f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022fe:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8002302:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002306:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4614      	mov	r4, r2
 800230e:	330c      	adds	r3, #12
 8002310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002316:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800231a:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 800231e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002322:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8002326:	460b      	mov	r3, r1
 8002328:	ca07      	ldmia	r2, {r0, r1, r2}
 800232a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 800232e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002332:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002336:	edd3 7a01 	vldr	s15, [r3, #4]
 800233a:	eeb1 7a67 	vneg.f32	s14, s15
 800233e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002342:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002352:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002356:	edd3 6a02 	vldr	s13, [r3, #8]
 800235a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800235e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002362:	edd3 7a01 	vldr	s15, [r3, #4]
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800236e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002372:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002376:	edd3 6a03 	vldr	s13, [r3, #12]
 800237a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800237e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002382:	edd3 7a02 	vldr	s15, [r3, #8]
 8002386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002392:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002396:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 800239a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800239e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023ba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023be:	edd3 6a02 	vldr	s13, [r3, #8]
 80023c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023c6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80023ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023da:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023de:	edd3 6a03 	vldr	s13, [r3, #12]
 80023e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80023ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023fa:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80023fe:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8002402:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002406:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002412:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002416:	edd3 7a01 	vldr	s15, [r3, #4]
 800241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002422:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002426:	edd3 6a01 	vldr	s13, [r3, #4]
 800242a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800242e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002432:	edd3 7a02 	vldr	s15, [r3, #8]
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002442:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002446:	edd3 6a03 	vldr	s13, [r3, #12]
 800244a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800244e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002462:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002466:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 800246a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800246e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002472:	ed93 7a00 	vldr	s14, [r3]
 8002476:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800247a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800247e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002486:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800248a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800248e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002492:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002496:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800249a:	edd3 7a01 	vldr	s15, [r3, #4]
 800249e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024aa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80024ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80024b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024ca:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80024ce:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80024d2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024d6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80024da:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 80024de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024ec:	461c      	mov	r4, r3
 80024ee:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80024f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024fc:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8002500:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002504:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4614      	mov	r4, r2
 800250c:	330c      	adds	r3, #12
 800250e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002514:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002518:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 800251c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002520:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002524:	4614      	mov	r4, r2
 8002526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 800252c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002530:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002534:	ed93 7a00 	vldr	s14, [r3]
 8002538:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800253c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002548:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800254c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002550:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8002554:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002558:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800255c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002560:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002564:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002568:	edd3 7a01 	vldr	s15, [r3, #4]
 800256c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002570:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002574:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002578:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 800257c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002584:	ed93 7a02 	vldr	s14, [r3, #8]
 8002588:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800258c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002590:	edd3 7a02 	vldr	s15, [r3, #8]
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800259c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025a0:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 80025a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80025ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80025b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025b4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80025b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025c4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025c8:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80025cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025d0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025d4:	f507 7466 	add.w	r4, r7, #920	; 0x398
 80025d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025de:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80025e6:	461c      	mov	r4, r3
 80025e8:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80025ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 80025f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025f6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8002600:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002604:	f103 040c 	add.w	r4, r3, #12
 8002608:	4613      	mov	r3, r2
 800260a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002610:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002614:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8002618:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800261c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4614      	mov	r4, r2
 8002624:	330c      	adds	r3, #12
 8002626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800262c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002630:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002634:	ed93 7a00 	vldr	s14, [r3]
 8002638:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800263c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800264c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002650:	edd3 6a01 	vldr	s13, [r3, #4]
 8002654:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002658:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800265c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002668:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800266c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002670:	edd3 6a02 	vldr	s13, [r3, #8]
 8002674:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002678:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800267c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002688:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800268c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002690:	edd3 6a03 	vldr	s13, [r3, #12]
 8002694:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002698:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800269c:	edd3 7a03 	vldr	s15, [r3, #12]
 80026a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a8:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 80026ac:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 80026b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b8:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 80026bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026c0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80026c4:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 80026c8:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80026ca:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026d4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80026d8:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80026da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026de:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	105a      	asrs	r2, r3, #1
 80026e6:	4bcc      	ldr	r3, [pc, #816]	; (8002a18 <FusionAhrsUpdate+0x1700>)
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80026ee:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80026f2:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80026f4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026fe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002702:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8002704:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002708:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800270c:	ed93 7a00 	vldr	s14, [r3]
 8002710:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8002714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002718:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800271c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800272c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002730:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002734:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002740:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002744:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002748:	edc3 7a00 	vstr	s15, [r3]
    return y;
 800274c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002750:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002754:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002756:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 800275a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800275e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002762:	ed93 7a00 	vldr	s14, [r3]
 8002766:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002772:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8002776:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 800277a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800277e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002782:	ed93 7a01 	vldr	s14, [r3, #4]
 8002786:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002792:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8002796:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 800279a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800279e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80027a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80027a6:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027b2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80027b6:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 80027ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027be:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80027c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80027c6:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80027d6:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 80027da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027de:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80027e2:	f507 7462 	add.w	r4, r7, #904	; 0x388
 80027e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027f0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80027f4:	461c      	mov	r4, r3
 80027f6:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80027fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8002800:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002804:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800280e:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 8002812:	f103 040c 	add.w	r4, r3, #12
 8002816:	4613      	mov	r3, r2
 8002818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800281a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 800281e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002822:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	ed93 7a04 	vldr	s14, [r3, #16]
 800282c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002830:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	edd3 7a06 	vldr	s15, [r3, #24]
 800283a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002842:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	edd3 6a03 	vldr	s13, [r3, #12]
 800284c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002850:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	edd3 7a05 	vldr	s15, [r3, #20]
 800285a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002862:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8002866:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800286a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800286e:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8002872:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002876:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002880:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002884:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	edd3 7a04 	vldr	s15, [r3, #16]
 800288e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002892:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002896:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	edd3 6a05 	vldr	s13, [r3, #20]
 80028a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028a4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 80028ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028c2:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 80028c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028ca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80028d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028d8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	edd3 7a03 	vldr	s15, [r3, #12]
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80028f2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80028fc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002900:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	edd3 7a06 	vldr	s15, [r3, #24]
 800290a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800290e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002912:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8002916:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800291a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800291e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002922:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002926:	f5a3 712f 	sub.w	r1, r3, #700	; 0x2bc
 800292a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800292e:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8002932:	460b      	mov	r3, r1
 8002934:	ca07      	ldmia	r2, {r0, r1, r2}
 8002936:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800293a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800293e:	f5a3 712c 	sub.w	r1, r3, #688	; 0x2b0
 8002942:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002946:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800294a:	460b      	mov	r3, r1
 800294c:	ca07      	ldmia	r2, {r0, r1, r2}
 800294e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002952:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002956:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002962:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002972:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002976:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800297a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800297e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002982:	ed93 7a01 	vldr	s14, [r3, #4]
 8002986:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800298a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800298e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002996:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800299a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800299e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80029a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029a6:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80029aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80029ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029b2:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 80029b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029c2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80029c6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80029ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029ce:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 80029d2:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80029d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80029d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029e0:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029e4:	461c      	mov	r4, r3
 80029e6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80029ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 80029f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80029f6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8002a00:	f5a2 7232 	sub.w	r2, r2, #712	; 0x2c8
 8002a04:	331c      	adds	r3, #28
 8002a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8002a0c:	bf00      	nop
 8002a0e:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc90      	pop	{r4, r7}
 8002a16:	4770      	bx	lr
 8002a18:	5f3759df 	.word	0x5f3759df

08002a1c <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	61f8      	str	r0, [r7, #28]
 8002a24:	eeb0 5a40 	vmov.f32	s10, s0
 8002a28:	eef0 5a60 	vmov.f32	s11, s1
 8002a2c:	eeb0 6a41 	vmov.f32	s12, s2
 8002a30:	eef0 6a61 	vmov.f32	s13, s3
 8002a34:	eeb0 7a42 	vmov.f32	s14, s4
 8002a38:	eef0 7a62 	vmov.f32	s15, s5
 8002a3c:	ed87 3a00 	vstr	s6, [r7]
 8002a40:	ed87 5a04 	vstr	s10, [r7, #16]
 8002a44:	edc7 5a05 	vstr	s11, [r7, #20]
 8002a48:	ed87 6a06 	vstr	s12, [r7, #24]
 8002a4c:	edc7 6a01 	vstr	s13, [r7, #4]
 8002a50:	ed87 7a02 	vstr	s14, [r7, #8]
 8002a54:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6a:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002a6e:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002a72:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8002a76:	ed97 5a01 	vldr	s10, [r7, #4]
 8002a7a:	edd7 5a02 	vldr	s11, [r7, #8]
 8002a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a82:	edd7 6a04 	vldr	s13, [r7, #16]
 8002a86:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a8e:	edd7 4a00 	vldr	s9, [r7]
 8002a92:	eef0 1a45 	vmov.f32	s3, s10
 8002a96:	eeb0 2a65 	vmov.f32	s4, s11
 8002a9a:	eef0 2a46 	vmov.f32	s5, s12
 8002a9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002aa2:	eef0 0a47 	vmov.f32	s1, s14
 8002aa6:	eeb0 1a67 	vmov.f32	s2, s15
 8002aaa:	69f8      	ldr	r0, [r7, #28]
 8002aac:	f7fe fc34 	bl	8001318 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 8002ab0:	69f8      	ldr	r0, [r7, #28]
 8002ab2:	f000 f862 	bl	8002b7a <FusionAhrsIsInitialising>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 8002ac4:	e00d      	b.n	8002ae2 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002ad0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002aec <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 8002ad4:	69f8      	ldr	r0, [r7, #28]
 8002ad6:	f000 f869 	bl	8002bac <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002ae2:	bf00      	nop
 8002ae4:	3730      	adds	r7, #48	; 0x30
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	00000000 	.word	0x00000000

08002af0 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8002af0:	b490      	push	{r4, r7}
 8002af2:	b096      	sub	sp, #88	; 0x58
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6178      	str	r0, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002afe:	330c      	adds	r3, #12
 8002b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 8002b0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b0e:	eef1 7a67 	vneg.f32	s15, s15
 8002b12:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 8002b16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002b1a:	eef1 7a67 	vneg.f32	s15, s15
 8002b1e:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8002b22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b26:	eef1 7a67 	vneg.f32	s15, s15
 8002b2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 8002b2e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002b32:	f107 0318 	add.w	r3, r7, #24
 8002b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b3c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8002b4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b52:	ee06 0a10 	vmov	s12, r0
 8002b56:	ee06 1a90 	vmov	s13, r1
 8002b5a:	ee07 2a10 	vmov	s14, r2
 8002b5e:	ee07 3a90 	vmov	s15, r3
}
 8002b62:	eeb0 0a46 	vmov.f32	s0, s12
 8002b66:	eef0 0a66 	vmov.f32	s1, s13
 8002b6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002b6e:	eef0 1a67 	vmov.f32	s3, s15
 8002b72:	3758      	adds	r7, #88	; 0x58
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc90      	pop	{r4, r7}
 8002b78:	4770      	bx	lr

08002b7a <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	bfcc      	ite	gt
 8002b98:	2301      	movgt	r3, #1
 8002b9a:	2300      	movle	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b0af      	sub	sp, #188	; 0xbc
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	ed87 0a00 	vstr	s0, [r7]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002bc6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002bca:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002bd6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be2:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002be6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf2:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002bf6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c02:	eeb0 0a67 	vmov.f32	s0, s15
 8002c06:	f00e f9c9 	bl	8010f9c <sqrtf>
 8002c0a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c16:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8002c1a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002c1e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8002c2a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002c2e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8002c3a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002c3e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8002c4a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002c4e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 8002c5a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c68:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002c6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 040c 	add.w	r4, r3, #12
 8002c7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	ed93 7a03 	vldr	s14, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cbe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	edd3 6a04 	vldr	s13, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd6:	eef0 0a67 	vmov.f32	s1, s15
 8002cda:	eeb0 0a46 	vmov.f32	s0, s12
 8002cde:	f00e f95b 	bl	8010f98 <atan2f>
 8002ce2:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 8002cec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002cf0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002e90 <FusionAhrsSetYaw+0x2e4>
 8002cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 8002cf8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d08:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 8002d0c:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002d10:	f00d fffe 	bl	8010d10 <cosf>
 8002d14:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 8002d18:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 8002d2a:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002d2e:	f00e f833 	bl	8010d98 <sinf>
 8002d32:	eef0 7a40 	vmov.f32	s15, s0
 8002d36:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 8002d3a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8002d3e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002d52:	330c      	adds	r3, #12
 8002d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 8002d5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d5e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d66:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002d6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d76:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002d7a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d86:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002d8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d96:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 8002d9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002daa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002dba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002dca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd6:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 8002dda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002dde:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002dea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002dfa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e06:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002e0a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e16:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 8002e1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e26:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002e2a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e36:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002e3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e46:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002e4a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e56:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 8002e5a:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e68:	f107 0418 	add.w	r4, r7, #24
 8002e6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f103 040c 	add.w	r4, r3, #12
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 8002e86:	bf00      	nop
 8002e88:	37bc      	adds	r7, #188	; 0xbc
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	3c8efa35 	.word	0x3c8efa35
 8002e94:	00000000 	.word	0x00000000

08002e98 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ea4:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd fb6d 	bl	8000598 <__aeabi_f2d>
 8002ebe:	a312      	add	r3, pc, #72	; (adr r3, 8002f08 <FusionBiasInitialise+0x70>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fbc0 	bl	8000648 <__aeabi_dmul>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7fd feb2 	bl	8000c38 <__aeabi_d2f>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	f3af 8000 	nop.w
 8002f08:	8c0eff43 	.word	0x8c0eff43
 8002f0c:	3fc015bf 	.word	0x3fc015bf

08002f10 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8002f10:	b490      	push	{r4, r7}
 8002f12:	b0b4      	sub	sp, #208	; 0xd0
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	61f8      	str	r0, [r7, #28]
 8002f18:	eef0 6a40 	vmov.f32	s13, s0
 8002f1c:	eeb0 7a60 	vmov.f32	s14, s1
 8002f20:	eef0 7a41 	vmov.f32	s15, s2
 8002f24:	edc7 6a04 	vstr	s13, [r7, #16]
 8002f28:	ed87 7a05 	vstr	s14, [r7, #20]
 8002f2c:	edc7 7a06 	vstr	s15, [r7, #24]
 8002f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f34:	f107 0210 	add.w	r2, r7, #16
 8002f38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f44:	3210      	adds	r2, #16
 8002f46:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002f4c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002f5c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f60:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002f6c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f70:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8002f7c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002f80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002f84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f94:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f9c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fae:	dc17      	bgt.n	8002fe0 <FusionBiasUpdate+0xd0>
 8002fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb4:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	dc0b      	bgt.n	8002fe0 <FusionBiasUpdate+0xd0>
 8002fc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fcc:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	dd0b      	ble.n	8002ff8 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002fe8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fec:	f107 0210 	add.w	r2, r7, #16
 8002ff0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ff6:	e08f      	b.n	8003118 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ffe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	d512      	bpl.n	8003032 <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	edd3 7a01 	vldr	s15, [r3, #4]
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 8003022:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003026:	f107 0210 	add.w	r2, r7, #16
 800302a:	ca07      	ldmia	r2, {r0, r1, r2}
 800302c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003030:	e072      	b.n	8003118 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	689c      	ldr	r4, [r3, #8]
 8003036:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800303a:	f107 0210 	add.w	r2, r7, #16
 800303e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003044:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8003048:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800304c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003054:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8003058:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800305c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003064:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8003068:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800306c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003074:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8003078:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800307c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003080:	ca07      	ldmia	r2, {r0, r1, r2}
 8003082:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003086:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800308a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800308e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800309a:	3210      	adds	r2, #16
 800309c:	ca07      	ldmia	r2, {r0, r1, r2}
 800309e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030a6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80030aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80030ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80030b0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80030b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80030c0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80030c4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80030d0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80030d4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80030d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030dc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 80030e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80030e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80030ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030f2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80030f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80030f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3310      	adds	r3, #16
 8003100:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003104:	ca07      	ldmia	r2, {r0, r1, r2}
 8003106:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 800310a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800310e:	f107 0210 	add.w	r2, r7, #16
 8003112:	ca07      	ldmia	r2, {r0, r1, r2}
 8003114:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003118:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800311c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003124:	ee06 1a90 	vmov	s13, r1
 8003128:	ee07 2a10 	vmov	s14, r2
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eeb0 0a66 	vmov.f32	s0, s13
 8003134:	eef0 0a47 	vmov.f32	s1, s14
 8003138:	eeb0 1a67 	vmov.f32	s2, s15
 800313c:	37d0      	adds	r7, #208	; 0xd0
 800313e:	46bd      	mov	sp, r7
 8003140:	bc90      	pop	{r4, r7}
 8003142:	4770      	bx	lr

08003144 <initFusionAHRS>:
};

//


void initFusionAHRS(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float sample_S){
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	ed87 0a00 	vstr	s0, [r7]

	DataStruct->samplePeriod = sample_S;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	60da      	str	r2, [r3, #12]
	
	// Initialise gyroscope bias correction algorithm
    FusionBiasInitialise(fusionBias, 0.5f, DataStruct->samplePeriod); // stationary threshold = 0.5 degrees per second
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003160:	eef0 0a67 	vmov.f32	s1, s15
 8003164:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff fe95 	bl	8002e98 <FusionBiasInitialise>

    // Initialise AHRS algorithm
    FusionAhrsInitialise(fusionAhrs, 0.5f); // gain = 0.5
 800316e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	f7fe f876 	bl	8001264 <FusionAhrsInitialise>

    // Set optional magnetic field limits
    FusionAhrsSetMagneticField(fusionAhrs, 20.0f, 70.0f); // valid magnetic field range = 20 uT to 70 uT
 8003178:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003190 <initFusionAHRS+0x4c>
 800317c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003180:	68b8      	ldr	r0, [r7, #8]
 8003182:	f7fe f8ad 	bl	80012e0 <FusionAhrsSetMagneticField>
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	428c0000 	.word	0x428c0000

08003194 <getFusionAHRS_6DoF>:
	DataStruct->YAW = eulerAngles.angle.yaw;
	DataStruct->PITCH = eulerAngles.angle.pitch;
	DataStruct->ROLL = eulerAngles.angle.roll;
}

void getFusionAHRS_6DoF(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float accX, float accY, float accZ, float gyrX, float gyrY, float gyrZ) {
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 800319a:	af00      	add	r7, sp, #0
 800319c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031a0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80031a4:	6018      	str	r0, [r3, #0]
 80031a6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031aa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80031ae:	6019      	str	r1, [r3, #0]
 80031b0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031b4:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031be:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80031c2:	ed83 0a00 	vstr	s0, [r3]
 80031c6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031ca:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80031ce:	edc3 0a00 	vstr	s1, [r3]
 80031d2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031d6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80031da:	ed83 1a00 	vstr	s2, [r3]
 80031de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031e2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80031e6:	edc3 1a00 	vstr	s3, [r3]
 80031ea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031ee:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80031f2:	ed83 2a00 	vstr	s4, [r3]
 80031f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031fa:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80031fe:	edc3 2a00 	vstr	s5, [r3]
	
	// Calibrate gyroscope
	FusionVector3 uncalibratedGyroscope = {
 8003202:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003206:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8003210:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003214:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800321e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003222:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
		.axis.x = gyrX, /* replace this value with actual gyroscope x axis measurement in lsb */
		.axis.y = gyrY, /* replace this value with actual gyroscope y axis measurement in lsb */
		.axis.z = gyrZ, /* replace this value with actual gyroscope z axis measurement in lsb */
	};
	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 800322c:	4bed      	ldr	r3, [pc, #948]	; (80035e4 <getFusionAHRS_6DoF+0x450>)
 800322e:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8003232:	461d      	mov	r5, r3
 8003234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800326e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003272:	461c      	mov	r4, r3
 8003274:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003278:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800327c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003280:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003284:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003288:	461d      	mov	r5, r3
 800328a:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 800328e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800329e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032a2:	4ad1      	ldr	r2, [pc, #836]	; (80035e8 <getFusionAHRS_6DoF+0x454>)
 80032a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ae:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 80032b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032b6:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80032ba:	460b      	mov	r3, r1
 80032bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80032be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032c6:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 80032ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ce:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80032d2:	460b      	mov	r3, r1
 80032d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032de:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 80032e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032e6:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80032ea:	460b      	mov	r3, r1
 80032ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80032ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80032f2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032fa:	ed93 7a00 	vldr	s14, [r3]
 80032fe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003302:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003312:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003316:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800331a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800331e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003322:	ed93 7a01 	vldr	s14, [r3, #4]
 8003326:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800332a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800332e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003336:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800333a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800333e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003342:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003346:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800334a:	ed93 7a02 	vldr	s14, [r3, #8]
 800334e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003352:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003356:	edd3 7a02 	vldr	s15, [r3, #8]
 800335a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003362:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003366:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800336a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800336e:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8003372:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003376:	ca07      	ldmia	r2, {r0, r1, r2}
 8003378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800337c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003380:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8003384:	ca07      	ldmia	r2, {r0, r1, r2}
 8003386:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800338a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800338e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003392:	461c      	mov	r4, r3
 8003394:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800339c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033a0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033a4:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 80033a8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033ac:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80033b0:	460b      	mov	r3, r1
 80033b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80033b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 80033b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033c0:	ed93 7a00 	vldr	s14, [r3]
 80033c4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033d8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033dc:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80033e0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80033ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003400:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003404:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003408:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800340c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003410:	ed93 7a02 	vldr	s14, [r3, #8]
 8003414:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003418:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800341c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003424:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003428:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800342c:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003430:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003434:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8003438:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800343c:	ca07      	ldmia	r2, {r0, r1, r2}
 800343e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003442:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8003446:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800344a:	ca07      	ldmia	r2, {r0, r1, r2}
 800344c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003450:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003454:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8003458:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800345c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003460:	4614      	mov	r4, r2
 8003462:	461d      	mov	r5, r3
 8003464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800346a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	6023      	str	r3, [r4, #0]
 8003470:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003474:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003478:	461c      	mov	r4, r3
 800347a:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800347e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003486:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800348a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800348e:	ed93 7a00 	vldr	s14, [r3]
 8003492:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003496:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034a6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80034aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80034ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80034ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034c6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80034ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80034ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80034da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034ea:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80034ee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034f2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80034f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80034fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800350a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800350e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003512:	edd3 6a04 	vldr	s13, [r3, #16]
 8003516:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800351a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800351e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800352a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800352e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003532:	edd3 6a05 	vldr	s13, [r3, #20]
 8003536:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800353a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800353e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800354e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003552:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003556:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800355a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800355e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003562:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003566:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003572:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003576:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800357a:	edd3 6a07 	vldr	s13, [r3, #28]
 800357e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003582:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003586:	edd3 7a01 	vldr	s15, [r3, #4]
 800358a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003592:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003596:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800359a:	edd3 6a08 	vldr	s13, [r3, #32]
 800359e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80035aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035ba:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80035be:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035c2:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80035c6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80035ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80035cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035d0:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80035d4:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 80035d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80035da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 80035de:	bf00      	nop
 80035e0:	e004      	b.n	80035ec <getFusionAHRS_6DoF+0x458>
 80035e2:	bf00      	nop
 80035e4:	08012b10 	.word	0x08012b10
 80035e8:	20000000 	.word	0x20000000
 80035ec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80035f0:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80035f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80035f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Calibrate accelerometer
	FusionVector3 uncalibratedAccelerometer = {
 80035fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003602:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8003606:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003612:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003616:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800361a:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003626:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800362a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800362e:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	609a      	str	r2, [r3, #8]
		.axis.x = accX, /* replace this value with actual accelerometer x axis measurement in lsb */
		.axis.y = accY, /* replace this value with actual accelerometer y axis measurement in lsb */
		.axis.z = accZ, /* replace this value with actual accelerometer z axis measurement in lsb */
	};
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 8003636:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800363a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800363e:	4aed      	ldr	r2, [pc, #948]	; (80039f4 <getFusionAHRS_6DoF+0x860>)
 8003640:	461c      	mov	r4, r3
 8003642:	4615      	mov	r5, r2
 8003644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003654:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003662:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003670:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800367e:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8003682:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003686:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800368a:	460b      	mov	r3, r1
 800368c:	ca07      	ldmia	r2, {r0, r1, r2}
 800368e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003692:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003696:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 800369a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800369e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036a2:	4614      	mov	r4, r2
 80036a4:	461d      	mov	r5, r3
 80036a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ae:	682b      	ldr	r3, [r5, #0]
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036b6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80036ba:	4acf      	ldr	r2, [pc, #828]	; (80039f8 <getFusionAHRS_6DoF+0x864>)
 80036bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80036be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036c6:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 80036ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036ce:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80036d2:	460b      	mov	r3, r1
 80036d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80036d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036de:	f5a3 7106 	sub.w	r1, r3, #536	; 0x218
 80036e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036e6:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80036ea:	460b      	mov	r3, r1
 80036ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80036ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036f2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036f6:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 80036fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036fe:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8003702:	460b      	mov	r3, r1
 8003704:	ca07      	ldmia	r2, {r0, r1, r2}
 8003706:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 800370a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800370e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003712:	ed93 7a00 	vldr	s14, [r3]
 8003716:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800371a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003726:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800372a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800372e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8003732:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003736:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800373a:	ed93 7a01 	vldr	s14, [r3, #4]
 800373e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003742:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003746:	edd3 7a01 	vldr	s15, [r3, #4]
 800374a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003752:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003756:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800375a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800375e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003762:	ed93 7a02 	vldr	s14, [r3, #8]
 8003766:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800376a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800376e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003776:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800377a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800377e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003782:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003786:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800378a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800378e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003794:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003798:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800379c:	ca07      	ldmia	r2, {r0, r1, r2}
 800379e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037a2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037a6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80037aa:	461c      	mov	r4, r3
 80037ac:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80037b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037bc:	f5a3 710c 	sub.w	r1, r3, #560	; 0x230
 80037c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037c4:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80037c8:	460b      	mov	r3, r1
 80037ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80037cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 80037d0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037d4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80037d8:	ed93 7a00 	vldr	s14, [r3]
 80037dc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037e0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037f0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80037f4:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80037f8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037fc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003800:	ed93 7a01 	vldr	s14, [r3, #4]
 8003804:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003808:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800380c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003814:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003818:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800381c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003820:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003824:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003828:	ed93 7a02 	vldr	s14, [r3, #8]
 800382c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003830:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8003834:	edd3 7a02 	vldr	s15, [r3, #8]
 8003838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003840:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8003844:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003848:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800384c:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8003850:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8003854:	ca07      	ldmia	r2, {r0, r1, r2}
 8003856:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800385a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800385e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8003862:	ca07      	ldmia	r2, {r0, r1, r2}
 8003864:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003868:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800386c:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8003870:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003874:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003878:	4614      	mov	r4, r2
 800387a:	461d      	mov	r5, r3
 800387c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800387e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800388c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003890:	461c      	mov	r4, r3
 8003892:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003896:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800389a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800389e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038a2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80038a6:	ed93 7a00 	vldr	s14, [r3]
 80038aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038ae:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038be:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80038c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80038c6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038ca:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80038ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80038d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038de:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80038e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80038e6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038ea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80038ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80038f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003902:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003906:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800390a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800390e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003912:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003916:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003922:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003926:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800392a:	edd3 6a04 	vldr	s13, [r3, #16]
 800392e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003932:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003936:	edd3 7a01 	vldr	s15, [r3, #4]
 800393a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003942:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003946:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800394a:	edd3 6a05 	vldr	s13, [r3, #20]
 800394e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003952:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003956:	edd3 7a02 	vldr	s15, [r3, #8]
 800395a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800395e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003962:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003966:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800396a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800396e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003972:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003976:	ed93 7a06 	vldr	s14, [r3, #24]
 800397a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800397e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800398a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800398e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003992:	edd3 6a07 	vldr	s13, [r3, #28]
 8003996:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800399a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800399e:	edd3 7a01 	vldr	s15, [r3, #4]
 80039a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039ae:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80039b2:	edd3 6a08 	vldr	s13, [r3, #32]
 80039b6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039ba:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80039be:	edd3 7a02 	vldr	s15, [r3, #8]
 80039c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039ce:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80039d2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80039d6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039da:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80039de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80039e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80039e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039e8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80039ec:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80039f0:	e006      	b.n	8003a00 <getFusionAHRS_6DoF+0x86c>
 80039f2:	bf00      	nop
 80039f4:	08012b10 	.word	0x08012b10
 80039f8:	2000000c 	.word	0x2000000c
 80039fc:	42652ee0 	.word	0x42652ee0
 8003a00:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a06:	bf00      	nop
 8003a08:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a10:	461c      	mov	r4, r3
 8003a12:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8003a16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Update gyroscope bias correction algorithm
	calibratedGyroscope = FusionBiasUpdate(fusionBias, calibratedGyroscope);
 8003a1e:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 8003a22:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 8003a26:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8003a2a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a2e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003a32:	eeb0 0a66 	vmov.f32	s0, s13
 8003a36:	eef0 0a47 	vmov.f32	s1, s14
 8003a3a:	eeb0 1a67 	vmov.f32	s2, s15
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	f7ff fa66 	bl	8002f10 <FusionBiasUpdate>
 8003a44:	eef0 6a40 	vmov.f32	s13, s0
 8003a48:	eeb0 7a60 	vmov.f32	s14, s1
 8003a4c:	eef0 7a41 	vmov.f32	s15, s2
 8003a50:	edc7 6a87 	vstr	s13, [r7, #540]	; 0x21c
 8003a54:	ed87 7a88 	vstr	s14, [r7, #544]	; 0x220
 8003a58:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224

	// Update AHRS algorithm
	FusionAhrsUpdateWithoutMagnetometer(fusionAhrs, calibratedGyroscope, calibratedAccelerometer, DataStruct->samplePeriod);
 8003a5c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a60:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	edd3 4a03 	vldr	s9, [r3, #12]
 8003a6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a72:	ed93 5a00 	vldr	s10, [r3]
 8003a76:	edd3 5a01 	vldr	s11, [r3, #4]
 8003a7a:	ed93 6a02 	vldr	s12, [r3, #8]
 8003a7e:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 8003a82:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 8003a86:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8003a8a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a8e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003a92:	eeb0 3a64 	vmov.f32	s6, s9
 8003a96:	eef0 1a45 	vmov.f32	s3, s10
 8003a9a:	eeb0 2a65 	vmov.f32	s4, s11
 8003a9e:	eef0 2a46 	vmov.f32	s5, s12
 8003aa2:	eeb0 0a66 	vmov.f32	s0, s13
 8003aa6:	eef0 0a47 	vmov.f32	s1, s14
 8003aaa:	eeb0 1a67 	vmov.f32	s2, s15
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	f7fe ffb4 	bl	8002a1c <FusionAhrsUpdateWithoutMagnetometer>

	// Get Euler angles
	FusionEulerAngles eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(fusionAhrs));
 8003ab4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ab8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f7ff f817 	bl	8002af0 <FusionAhrsGetQuaternion>
 8003ac2:	eeb0 6a40 	vmov.f32	s12, s0
 8003ac6:	eef0 6a60 	vmov.f32	s13, s1
 8003aca:	eeb0 7a41 	vmov.f32	s14, s2
 8003ace:	eef0 7a61 	vmov.f32	s15, s3
 8003ad2:	ed87 6a8d 	vstr	s12, [r7, #564]	; 0x234
 8003ad6:	edc7 6a8e 	vstr	s13, [r7, #568]	; 0x238
 8003ada:	ed87 7a8f 	vstr	s14, [r7, #572]	; 0x23c
 8003ade:	edc7 7a90 	vstr	s15, [r7, #576]	; 0x240
 8003ae2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ae6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003aea:	461c      	mov	r4, r3
 8003aec:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003af0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8003af6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003afa:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003afe:	ed93 7a00 	vldr	s14, [r3]
 8003b02:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b06:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b1a:	edc7 7abb 	vstr	s15, [r7, #748]	; 0x2ec
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003b1e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b22:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b26:	ed93 7a02 	vldr	s14, [r3, #8]
 8003b2a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b2e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b32:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b3a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b3e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b42:	edd3 6a00 	vldr	s13, [r3]
 8003b46:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b4a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b56:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b5a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b5e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b62:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b66:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b6a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003b6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b76:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 8003b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7e:	eef0 0a67 	vmov.f32	s1, s15
 8003b82:	eeb0 0a66 	vmov.f32	s0, s13
 8003b86:	f00d fa07 	bl	8010f98 <atan2f>
 8003b8a:	eef0 7a40 	vmov.f32	s15, s0
 8003b8e:	edc7 7aba 	vstr	s15, [r7, #744]	; 0x2e8
    return radians * (180.0f / (float) M_PI);
 8003b92:	edd7 7aba 	vldr	s15, [r7, #744]	; 0x2e8
 8003b96:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 80039fc <getFusionAHRS_6DoF+0x868>
 8003b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003b9e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ba2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003ba6:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003baa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bae:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003bb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003bb6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bba:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003bbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bca:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003bce:	edd3 6a00 	vldr	s13, [r3]
 8003bd2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bd6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bea:	eeb0 0a67 	vmov.f32	s0, s15
 8003bee:	f00d f9a7 	bl	8010f40 <asinf>
 8003bf2:	eef0 7a40 	vmov.f32	s15, s0
 8003bf6:	eef1 7a67 	vneg.f32	s15, s15
 8003bfa:	edc7 7ab9 	vstr	s15, [r7, #740]	; 0x2e4
    return radians * (180.0f / (float) M_PI);
 8003bfe:	edd7 7ab9 	vldr	s15, [r7, #740]	; 0x2e4
 8003c02:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80039fc <getFusionAHRS_6DoF+0x868>
 8003c06:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003c0a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c0e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c12:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003c16:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c1a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c26:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c32:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c36:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c3a:	edd3 6a00 	vldr	s13, [r3]
 8003c3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c42:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c46:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003c52:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c56:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c5e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c62:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c6e:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 8003c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c76:	eef0 0a67 	vmov.f32	s1, s15
 8003c7a:	eeb0 0a66 	vmov.f32	s0, s13
 8003c7e:	f00d f98b 	bl	8010f98 <atan2f>
 8003c82:	eef0 7a40 	vmov.f32	s15, s0
 8003c86:	edc7 7ab8 	vstr	s15, [r7, #736]	; 0x2e0
    return radians * (180.0f / (float) M_PI);
 8003c8a:	edd7 7ab8 	vldr	s15, [r7, #736]	; 0x2e0
 8003c8e:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 80039fc <getFusionAHRS_6DoF+0x868>
 8003c92:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003c96:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c9a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c9e:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8003ca2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ca6:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8003caa:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003cae:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cb4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cb8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cbc:	461c      	mov	r4, r3
 8003cbe:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	// Write Euler Angles into data structs
	DataStruct->YAW = eulerAngles.angle.yaw;
 8003cca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cce:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cd8:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	601a      	str	r2, [r3, #0]
	DataStruct->PITCH = eulerAngles.angle.pitch;
 8003ce0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003ce4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cee:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
	DataStruct->ROLL = eulerAngles.angle.roll;
 8003cf6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cfa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003d04:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bdb0      	pop	{r4, r5, r7, pc}
 8003d16:	bf00      	nop

08003d18 <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole_t *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	460b      	mov	r3, r1
 8003d22:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d26:	edc7 0a00 	vstr	s1, [r7]
 8003d2a:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 8003d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d30:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003dec <LPFTwoPole_Init+0xd4>
 8003d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d38:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d141      	bne.n	8003dc6 <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 8003d42:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d46:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003df0 <LPFTwoPole_Init+0xd8>
 8003d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d56:	edd7 7a00 	vldr	s15, [r7]
 8003d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5e:	edd7 7a00 	vldr	s15, [r7]
 8003d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 8003d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d70:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003df4 <LPFTwoPole_Init+0xdc>
 8003d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d78:	edd7 7a00 	vldr	s15, [r7]
 8003d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 8003da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003da4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003df4 <LPFTwoPole_Init+0xdc>
 8003da8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dac:	edd7 7a00 	vldr	s15, [r7]
 8003db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dbc:	eef1 7a67 	vneg.f32	s15, s15
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40c90fdb 	.word	0x40c90fdb
 8003df0:	3fcfa0f9 	.word	0x3fcfa0f9
 8003df4:	400d2f1b 	.word	0x400d2f1b

08003df8 <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole_t *lpf, float val) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	ed93 7a04 	vldr	s14, [r3, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e20:	edd7 7a00 	vldr	s15, [r7]
 8003e24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	ed93 6a05 	vldr	s12, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e3e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003e42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	ee07 3a90 	vmov	s15, r3
}
 8003e58:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <NotchFilterInit>:
#include "NotchFilter.h"

void NotchFilterInit(NotchFilter_t *filt, float centerFreHz, float notchWidth_Hz, float sampleTime_s)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	ed2d 8b02 	vpush	{d8}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e78:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e7c:	ed87 1a00 	vstr	s2, [r7]
	float w0_rps = 2.0f * M_PI * centerFreHz;
 8003e80:	68b8      	ldr	r0, [r7, #8]
 8003e82:	f7fc fb89 	bl	8000598 <__aeabi_f2d>
 8003e86:	a33c      	add	r3, pc, #240	; (adr r3, 8003f78 <NotchFilterInit+0x110>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f7fc fbdc 	bl	8000648 <__aeabi_dmul>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	f7fc fece 	bl	8000c38 <__aeabi_d2f>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	61bb      	str	r3, [r7, #24]
	float ww_rps = 2.0f * M_PI * notchWidth_Hz;
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fc fb79 	bl	8000598 <__aeabi_f2d>
 8003ea6:	a334      	add	r3, pc, #208	; (adr r3, 8003f78 <NotchFilterInit+0x110>)
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f7fc fbcc 	bl	8000648 <__aeabi_dmul>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f7fc febe 	bl	8000c38 <__aeabi_d2f>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	617b      	str	r3, [r7, #20]
	
	float w0_pw_rps = (2.0f / sampleTime_s) * tanf(0.5f * w0_rps * sampleTime_s);
 8003ec0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ec4:	edd7 7a00 	vldr	s15, [r7]
 8003ec8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ed0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ed4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ed8:	edd7 7a00 	vldr	s15, [r7]
 8003edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee4:	f00c ff9e 	bl	8010e24 <tanf>
 8003ee8:	eef0 7a40 	vmov.f32	s15, s0
 8003eec:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003ef0:	edc7 7a04 	vstr	s15, [r7, #16]
	
	filt->alpha = 4.0f + ((w0_pw_rps * w0_pw_rps) * (sampleTime_s * sampleTime_s));
 8003ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ef8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003efc:	edd7 7a00 	vldr	s15, [r7]
 8003f00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f08:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	edc3 7a00 	vstr	s15, [r3]
	filt->beta = 2.0f + (ww_rps  * sampleTime_s);
 8003f16:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f1a:	edd7 7a00 	vldr	s15, [r7]
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	edc3 7a01 	vstr	s15, [r3, #4]
	
	for (int n = 0; n<3; n++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e013      	b.n	8003f5e <NotchFilterInit+0xf6>
	{
		filt->x[n] = 0.0f;
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	3304      	adds	r3, #4
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
	for (int n = 0; n<3; n++)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	dde8      	ble.n	8003f36 <NotchFilterInit+0xce>
	}
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	ecbd 8b02 	vpop	{d8}
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	f3af 8000 	nop.w
 8003f78:	54442d18 	.word	0x54442d18
 8003f7c:	401921fb 	.word	0x401921fb

08003f80 <NotchFilter_Update>:

float NotchFilter_Update(NotchFilter_t *filt, float data)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	ed87 0a00 	vstr	s0, [r7]
	filt->x[2] = filt->x[1];
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	611a      	str	r2, [r3, #16]
	filt->x[1] = filt->x[0];
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]
	
	filt->y[2] = filt->y[1];
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	61da      	str	r2, [r3, #28]
	filt->y[1] = filt->y[0];
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
	
	filt->x[0] = data;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	609a      	str	r2, [r3, #8]
	
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	ed93 7a00 	vldr	s14, [r3]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	edd3 7a00 	vldr	s15, [r3]
 8003fc8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003fcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003fd0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	edd3 6a00 	vldr	s13, [r3]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff2:	ee37 7a27 	vadd.f32	s14, s14, s15
			   - (2.0f * ((filt->alpha - 8.0f)) * filt->y[1] + (filt->alpha - filt->beta) *filt->y[2]))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	edd3 7a00 	vldr	s15, [r3]
 8003ffc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004004:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	edd3 7a06 	vldr	s15, [r3, #24]
 800400e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	ed93 6a00 	vldr	s12, [r3]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	edd3 7a01 	vldr	s15, [r3, #4]
 800401e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	edd3 7a07 	vldr	s15, [r3, #28]
 8004028:	ee66 7a27 	vmul.f32	s15, s12, s15
 800402c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004030:	ee77 6a67 	vsub.f32	s13, s14, s15
			   / (filt->alpha + filt->beta);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	ed93 7a00 	vldr	s14, [r3]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004040:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004044:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	edc3 7a05 	vstr	s15, [r3, #20]
			   
	return filt->y[0];
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	ee07 3a90 	vmov	s15, r3
}
 8004056:	eeb0 0a67 	vmov.f32	s0, s15
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	4603      	mov	r3, r0
 8004070:	73fb      	strb	r3, [r7, #15]
 8004072:	4613      	mov	r3, r2
 8004074:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <bmi160_get_regs+0x24>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8004088:	23ff      	movs	r3, #255	; 0xff
 800408a:	75fb      	strb	r3, [r7, #23]
 800408c:	e017      	b.n	80040be <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 800408e:	89bb      	ldrh	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8004094:	23f4      	movs	r3, #244	; 0xf4
 8004096:	75fb      	strb	r3, [r7, #23]
 8004098:	e011      	b.n	80040be <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	789b      	ldrb	r3, [r3, #2]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d103      	bne.n	80040aa <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040a8:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69dc      	ldr	r4, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	7858      	ldrb	r0, [r3, #1]
 80040b2:	89bb      	ldrh	r3, [r7, #12]
 80040b4:	7bf9      	ldrb	r1, [r7, #15]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	47a0      	blx	r4
 80040ba:	4603      	mov	r3, r0
 80040bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80040be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}

080040ca <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80040ca:	b590      	push	{r4, r7, lr}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	4603      	mov	r3, r0
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	4613      	mov	r3, r2
 80040da:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <bmi160_set_regs+0x28>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 80040f2:	23ff      	movs	r3, #255	; 0xff
 80040f4:	75fb      	strb	r3, [r7, #23]
 80040f6:	e045      	b.n	8004184 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 80040f8:	89bb      	ldrh	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80040fe:	23f4      	movs	r3, #244	; 0xf4
 8004100:	75fb      	strb	r3, [r7, #23]
 8004102:	e03f      	b.n	8004184 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	789b      	ldrb	r3, [r3, #2]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d103      	bne.n	8004114 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004112:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7a1b      	ldrb	r3, [r3, #8]
 8004118:	2b11      	cmp	r3, #17
 800411a:	d003      	beq.n	8004124 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8004120:	2b15      	cmp	r3, #21
 8004122:	d124      	bne.n	800416e <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1c      	ldr	r4, [r3, #32]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7858      	ldrb	r0, [r3, #1]
 800412c:	89bb      	ldrh	r3, [r7, #12]
 800412e:	7bf9      	ldrb	r1, [r7, #15]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	47a0      	blx	r4
 8004134:	4603      	mov	r3, r0
 8004136:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2001      	movs	r0, #1
 800413e:	4798      	blx	r3
 8004140:	e01a      	b.n	8004178 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1c      	ldr	r4, [r3, #32]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7858      	ldrb	r0, [r3, #1]
 800414a:	7dbb      	ldrb	r3, [r7, #22]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	441a      	add	r2, r3
 8004150:	7bf9      	ldrb	r1, [r7, #15]
 8004152:	2301      	movs	r3, #1
 8004154:	47a0      	blx	r4
 8004156:	4603      	mov	r3, r0
 8004158:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	3301      	adds	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2001      	movs	r0, #1
 8004166:	4798      	blx	r3
            for (; count < len; count++)
 8004168:	7dbb      	ldrb	r3, [r7, #22]
 800416a:	3301      	adds	r3, #1
 800416c:	75bb      	strb	r3, [r7, #22]
 800416e:	7dbb      	ldrb	r3, [r7, #22]
 8004170:	b29b      	uxth	r3, r3
 8004172:	89ba      	ldrh	r2, [r7, #12]
 8004174:	429a      	cmp	r2, r3
 8004176:	d8e4      	bhi.n	8004142 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8004178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8004180:	23fe      	movs	r3, #254	; 0xfe
 8004182:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004184:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004188:	4618      	mov	r0, r3
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}

08004190 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8004198:	2303      	movs	r3, #3
 800419a:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fd33 	bl	8004c08 <null_ptr_check>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 80041a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <bmi160_init+0x38>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	789b      	ldrb	r3, [r3, #2]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d108      	bne.n	80041c8 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80041b6:	f107 010d 	add.w	r1, r7, #13
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	207f      	movs	r0, #127	; 0x7f
 80041c0:	f7ff ff50 	bl	8004064 <bmi160_get_regs>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80041c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d127      	bne.n	8004220 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80041d6:	e007      	b.n	80041e8 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	2000      	movs	r0, #0
 80041e0:	f7ff ff40 	bl	8004064 <bmi160_get_regs>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80041e8:	7bbb      	ldrb	r3, [r7, #14]
 80041ea:	1e5a      	subs	r2, r3, #1
 80041ec:	73ba      	strb	r2, [r7, #14]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <bmi160_init+0x6a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2bd1      	cmp	r3, #209	; 0xd1
 80041f8:	d1ee      	bne.n	80041d8 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80041fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <bmi160_init+0x8c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2bd1      	cmp	r3, #209	; 0xd1
 8004208:	d108      	bne.n	800421c <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	22ff      	movs	r2, #255	; 0xff
 800420e:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f80b 	bl	800422c <bmi160_soft_reset>
 8004216:	4603      	mov	r3, r0
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	e001      	b.n	8004220 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 800421c:	23fd      	movs	r3, #253	; 0xfd
 800421e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004220:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8004234:	23b6      	movs	r3, #182	; 0xb6
 8004236:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <bmi160_soft_reset+0x1a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004246:	23ff      	movs	r3, #255	; 0xff
 8004248:	73fb      	strb	r3, [r7, #15]
 800424a:	e024      	b.n	8004296 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 800424c:	f107 010e 	add.w	r1, r7, #14
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	207e      	movs	r0, #126	; 0x7e
 8004256:	f7ff ff38 	bl	80040ca <bmi160_set_regs>
 800425a:	4603      	mov	r3, r0
 800425c:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	2001      	movs	r0, #1
 8004264:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8004266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <bmi160_soft_reset+0x5c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	789b      	ldrb	r3, [r3, #2]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d108      	bne.n	8004288 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8004276:	f107 010e 	add.w	r1, r7, #14
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	207f      	movs	r0, #127	; 0x7f
 8004280:	f7ff fef0 	bl	8004064 <bmi160_get_regs>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8004288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fcd9 	bl	8004c48 <default_param_settg>
        }
    }

    return rslt;
 8004296:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <bmi160_set_sens_conf+0x1a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80042bc:	23ff      	movs	r3, #255	; 0xff
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e01f      	b.n	8004302 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fcea 	bl	8004c9c <set_accel_conf>
 80042c8:	4603      	mov	r3, r0
 80042ca:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80042cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fe25 	bl	8004f24 <set_gyro_conf>
 80042da:	4603      	mov	r3, r0
 80042dc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80042de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f811 	bl	800430e <bmi160_set_power_mode>
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80042f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fdde 	bl	8004eba <check_invalid_settg>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <bmi160_set_power_mode+0x1a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004328:	23ff      	movs	r3, #255	; 0xff
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	e00d      	b.n	800434a <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 ff01 	bl	8005136 <set_accel_pwr>
 8004334:	4603      	mov	r3, r0
 8004336:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 ff8f 	bl	8005264 <set_gyro_pwr>
 8004346:	4603      	mov	r3, r0
 8004348:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800434a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	4603      	mov	r3, r0
 8004364:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8004376:	7d7b      	ldrb	r3, [r7, #21]
 8004378:	109b      	asrs	r3, r3, #2
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8004382:	7d7b      	ldrb	r3, [r7, #21]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 800438a:	7d3b      	ldrb	r3, [r7, #20]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8004390:	2303      	movs	r3, #3
 8004392:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d03c      	beq.n	8004414 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 800439a:	7d7b      	ldrb	r3, [r7, #21]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d024      	beq.n	80043ea <bmi160_get_sensor_data+0x94>
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	dc34      	bgt.n	800440e <bmi160_get_sensor_data+0xb8>
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d002      	beq.n	80043ae <bmi160_get_sensor_data+0x58>
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d00f      	beq.n	80043cc <bmi160_get_sensor_data+0x76>
 80043ac:	e02f      	b.n	800440e <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 80043b4:	23ff      	movs	r3, #255	; 0xff
 80043b6:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 80043b8:	e02e      	b.n	8004418 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 80043ba:	7dbb      	ldrb	r3, [r7, #22]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 ff93 	bl	80052ec <get_accel_data>
 80043c6:	4603      	mov	r3, r0
 80043c8:	75fb      	strb	r3, [r7, #23]
                break;
 80043ca:	e025      	b.n	8004418 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 80043d2:	23ff      	movs	r3, #255	; 0xff
 80043d4:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 80043d6:	e01f      	b.n	8004418 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 80043d8:	7dbb      	ldrb	r3, [r7, #22]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 f84f 	bl	8005482 <get_gyro_data>
 80043e4:	4603      	mov	r3, r0
 80043e6:	75fb      	strb	r3, [r7, #23]
                break;
 80043e8:	e016      	b.n	8004418 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <bmi160_get_sensor_data+0xa0>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 80043f6:	23ff      	movs	r3, #255	; 0xff
 80043f8:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 80043fa:	e00d      	b.n	8004418 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 80043fc:	7db8      	ldrb	r0, [r7, #22]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	f001 f987 	bl	8005716 <get_accel_gyro_data>
 8004408:	4603      	mov	r3, r0
 800440a:	75fb      	strb	r3, [r7, #23]
                break;
 800440c:	e004      	b.n	8004418 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 800440e:	23fb      	movs	r3, #251	; 0xfb
 8004410:	75fb      	strb	r3, [r7, #23]
                break;
 8004412:	e001      	b.n	8004418 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8004414:	23ff      	movs	r3, #255	; 0xff
 8004416:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2b0d      	cmp	r3, #13
 8004438:	d879      	bhi.n	800452e <bmi160_set_int_config+0x10a>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <bmi160_set_int_config+0x1c>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004479 	.word	0x08004479
 8004444:	08004487 	.word	0x08004487
 8004448:	080044b1 	.word	0x080044b1
 800444c:	080044a3 	.word	0x080044a3
 8004450:	080044a3 	.word	0x080044a3
 8004454:	080044bf 	.word	0x080044bf
 8004458:	080044cd 	.word	0x080044cd
 800445c:	080044e9 	.word	0x080044e9
 8004460:	080044db 	.word	0x080044db
 8004464:	08004495 	.word	0x08004495
 8004468:	080044f7 	.word	0x080044f7
 800446c:	08004505 	.word	0x08004505
 8004470:	08004513 	.word	0x08004513
 8004474:	08004521 	.word	0x08004521
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f95a 	bl	8004734 <set_accel_any_motion_int>
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]
            break;
 8004484:	e054      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f9ed 	bl	8004868 <set_accel_sig_motion_int>
 800448e:	4603      	mov	r3, r0
 8004490:	73fb      	strb	r3, [r7, #15]
            break;
 8004492:	e04d      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 8004494:	6839      	ldr	r1, [r7, #0]
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa14 	bl	80048c4 <set_accel_no_motion_int>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]
            break;
 80044a0:	e046      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 80044a2:	6839      	ldr	r1, [r7, #0]
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f973 	bl	8004790 <set_accel_tap_int>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
            break;
 80044ae:	e03f      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa34 	bl	8004920 <set_accel_step_detect_int>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]
            break;
 80044bc:	e038      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa6e 	bl	80049a2 <set_accel_orientation_int>
 80044c6:	4603      	mov	r3, r0
 80044c8:	73fb      	strb	r3, [r7, #15]
            break;
 80044ca:	e031      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 faa8 	bl	8004a24 <set_accel_flat_detect_int>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]
            break;
 80044d8:	e02a      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fae2 	bl	8004aa6 <set_accel_low_g_int>
 80044e2:	4603      	mov	r3, r0
 80044e4:	73fb      	strb	r3, [r7, #15]
            break;
 80044e6:	e023      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fb26 	bl	8004b3c <set_accel_high_g_int>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
            break;
 80044f4:	e01c      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 80044f6:	6839      	ldr	r1, [r7, #0]
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f982 	bl	8004802 <set_accel_gyro_data_ready_int>
 80044fe:	4603      	mov	r3, r0
 8004500:	73fb      	strb	r3, [r7, #15]
            break;
 8004502:	e015      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 8004504:	6839      	ldr	r1, [r7, #0]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f002 fd88 	bl	800701c <set_fifo_full_int>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]
            break;
 8004510:	e00e      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f002 fde8 	bl	80070ea <set_fifo_watermark_int>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
            break;
 800451e:	e007      	b.n	8004530 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fb55 	bl	8004bd2 <set_intr_pin_config>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]
            break;
 800452c:	e000      	b.n	8004530 <bmi160_set_int_config+0x10c>
        default:
            break;
 800452e:	bf00      	nop
    }

    return rslt;
 8004530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fb5d 	bl	8004c08 <null_ptr_check>
 800454e:	4603      	mov	r3, r0
 8004550:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 8004552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 800455a:	23ff      	movs	r3, #255	; 0xff
 800455c:	75fb      	strb	r3, [r7, #23]
 800455e:	e068      	b.n	8004632 <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f002 fe48 	bl	80071f8 <configure_offset_enable>
 8004568:	4603      	mov	r3, r0
 800456a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 800456c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d15e      	bne.n	8004632 <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004574:	f107 0116 	add.w	r1, r7, #22
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	2069      	movs	r0, #105	; 0x69
 800457e:	f7ff fd71 	bl	8004064 <bmi160_get_regs>
 8004582:	4603      	mov	r3, r0
 8004584:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 8004586:	7dbb      	ldrb	r3, [r7, #22]
 8004588:	b25b      	sxtb	r3, r3
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	b25a      	sxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	b25b      	sxtb	r3, r3
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	b25b      	sxtb	r3, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 80045a6:	7dbb      	ldrb	r3, [r7, #22]
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80045ae:	b25a      	sxtb	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	b25b      	sxtb	r3, r3
 80045b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	b25b      	sxtb	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80045c6:	7dbb      	ldrb	r3, [r7, #22]
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	f023 030c 	bic.w	r3, r3, #12
 80045ce:	b25a      	sxtb	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	789b      	ldrb	r3, [r3, #2]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	b25b      	sxtb	r3, r3
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	4313      	orrs	r3, r2
 80045e0:	b25b      	sxtb	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80045e6:	7dbb      	ldrb	r3, [r7, #22]
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	b25a      	sxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	78db      	ldrb	r3, [r3, #3]
 80045f4:	b25b      	sxtb	r3, r3
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b25b      	sxtb	r3, r3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 8004604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d112      	bne.n	8004632 <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 800460c:	f107 0116 	add.w	r1, r7, #22
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	2069      	movs	r0, #105	; 0x69
 8004616:	f7ff fd58 	bl	80040ca <bmi160_set_regs>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 800461e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	68b8      	ldr	r0, [r7, #8]
 800462a:	f002 fe2f 	bl	800728c <trigger_foc>
 800462e:	4603      	mov	r3, r0
 8004630:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8004632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b088      	sub	sp, #32
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	f000 fadd 	bl	8004c08 <null_ptr_check>
 800464e:	4603      	mov	r3, r0
 8004650:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004652:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800465a:	23ff      	movs	r3, #255	; 0xff
 800465c:	77fb      	strb	r3, [r7, #31]
 800465e:	e063      	b.n	8004728 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004660:	f107 010c 	add.w	r1, r7, #12
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2207      	movs	r2, #7
 8004668:	2071      	movs	r0, #113	; 0x71
 800466a:	f7ff fcfb 	bl	8004064 <bmi160_get_regs>
 800466e:	4603      	mov	r3, r0
 8004670:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8004672:	7b3b      	ldrb	r3, [r7, #12]
 8004674:	b25a      	sxtb	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 800467a:	7b7b      	ldrb	r3, [r7, #13]
 800467c:	b25a      	sxtb	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8004682:	7bbb      	ldrb	r3, [r7, #14]
 8004684:	b25a      	sxtb	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 800468e:	7cbb      	ldrb	r3, [r7, #18]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004696:	7f7b      	ldrb	r3, [r7, #29]
 8004698:	039b      	lsls	r3, r3, #14
 800469a:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 800469c:	7fbb      	ldrb	r3, [r7, #30]
 800469e:	019b      	lsls	r3, r3, #6
 80046a0:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80046a2:	8b7a      	ldrh	r2, [r7, #26]
 80046a4:	8b3b      	ldrh	r3, [r7, #24]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80046aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da00      	bge.n	80046b4 <bmi160_get_offsets+0x76>
 80046b2:	333f      	adds	r3, #63	; 0x3f
 80046b4:	119b      	asrs	r3, r3, #6
 80046b6:	b21a      	sxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80046bc:	7c3b      	ldrb	r3, [r7, #16]
 80046be:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80046c0:	7cbb      	ldrb	r3, [r7, #18]
 80046c2:	109b      	asrs	r3, r3, #2
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80046cc:	7f7b      	ldrb	r3, [r7, #29]
 80046ce:	039b      	lsls	r3, r3, #14
 80046d0:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80046d2:	7fbb      	ldrb	r3, [r7, #30]
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80046d8:	8b7a      	ldrh	r2, [r7, #26]
 80046da:	8b3b      	ldrh	r3, [r7, #24]
 80046dc:	4313      	orrs	r3, r2
 80046de:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80046e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	da00      	bge.n	80046ea <bmi160_get_offsets+0xac>
 80046e8:	333f      	adds	r3, #63	; 0x3f
 80046ea:	119b      	asrs	r3, r3, #6
 80046ec:	b21a      	sxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 80046f2:	7c7b      	ldrb	r3, [r7, #17]
 80046f4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 80046f6:	7cbb      	ldrb	r3, [r7, #18]
 80046f8:	111b      	asrs	r3, r3, #4
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004702:	7f7b      	ldrb	r3, [r7, #29]
 8004704:	039b      	lsls	r3, r3, #14
 8004706:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004708:	7fbb      	ldrb	r3, [r7, #30]
 800470a:	019b      	lsls	r3, r3, #6
 800470c:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800470e:	8b7a      	ldrh	r2, [r7, #26]
 8004710:	8b3b      	ldrh	r3, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8004716:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800471a:	2b00      	cmp	r3, #0
 800471c:	da00      	bge.n	8004720 <bmi160_get_offsets+0xe2>
 800471e:	333f      	adds	r3, #63	; 0x3f
 8004720:	119b      	asrs	r3, r3, #6
 8004722:	b21a      	sxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8004728:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800473e:	6838      	ldr	r0, [r7, #0]
 8004740:	f000 fa62 	bl	8004c08 <null_ptr_check>
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <set_accel_any_motion_int+0x22>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004756:	23ff      	movs	r3, #255	; 0xff
 8004758:	73fb      	strb	r3, [r7, #15]
 800475a:	e013      	b.n	8004784 <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	68b8      	ldr	r0, [r7, #8]
 8004766:	f001 f915 	bl	8005994 <enable_accel_any_motion_int>
 800476a:	4603      	mov	r3, r0
 800476c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800476e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 fb47 	bl	8005e0e <config_any_motion_int_settg>
 8004780:	4603      	mov	r3, r0
 8004782:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800479a:	6838      	ldr	r0, [r7, #0]
 800479c:	f000 fa34 	bl	8004c08 <null_ptr_check>
 80047a0:	4603      	mov	r3, r0
 80047a2:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80047a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <set_accel_tap_int+0x22>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80047b2:	23ff      	movs	r3, #255	; 0xff
 80047b4:	73fb      	strb	r3, [r7, #15]
 80047b6:	e01e      	b.n	80047f6 <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f001 fe8b 	bl	80064de <enable_tap_int>
 80047c8:	4603      	mov	r3, r0
 80047ca:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80047cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d110      	bne.n	80047f6 <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f9fb 	bl	8004bd2 <set_intr_pin_config>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80047e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 fec9 	bl	8006584 <config_tap_int_settg>
 80047f2:	4603      	mov	r3, r0
 80047f4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80047f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800480c:	6838      	ldr	r0, [r7, #0]
 800480e:	f000 f9fb 	bl	8004c08 <null_ptr_check>
 8004812:	4603      	mov	r3, r0
 8004814:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <set_accel_gyro_data_ready_int+0x22>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004824:	23ff      	movs	r3, #255	; 0xff
 8004826:	73fb      	strb	r3, [r7, #15]
 8004828:	e018      	b.n	800485c <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 800482a:	6838      	ldr	r0, [r7, #0]
 800482c:	f001 fb28 	bl	8005e80 <enable_data_ready_int>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10f      	bne.n	800485c <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f9c7 	bl	8004bd2 <set_intr_pin_config>
 8004844:	4603      	mov	r3, r0
 8004846:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f001 f9dc 	bl	8005c10 <map_hardware_interrupt>
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800485c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004872:	6838      	ldr	r0, [r7, #0]
 8004874:	f000 f9c8 	bl	8004c08 <null_ptr_check>
 8004878:	4603      	mov	r3, r0
 800487a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800487c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <set_accel_sig_motion_int+0x22>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800488a:	23ff      	movs	r3, #255	; 0xff
 800488c:	73fb      	strb	r3, [r7, #15]
 800488e:	e013      	b.n	80048b8 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	68b8      	ldr	r0, [r7, #8]
 800489a:	f001 fc47 	bl	800612c <enable_sig_motion_int>
 800489e:	4603      	mov	r3, r0
 80048a0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80048a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fc7d 	bl	80061ae <config_sig_motion_int_settg>
 80048b4:	4603      	mov	r3, r0
 80048b6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80048b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80048ce:	6838      	ldr	r0, [r7, #0]
 80048d0:	f000 f99a 	bl	8004c08 <null_ptr_check>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80048d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <set_accel_no_motion_int+0x22>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80048e6:	23ff      	movs	r3, #255	; 0xff
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e013      	b.n	8004914 <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	68b8      	ldr	r0, [r7, #8]
 80048f6:	f001 faf0 	bl	8005eda <enable_no_motion_int>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80048fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 fb3a 	bl	8005f84 <config_no_motion_int_settg>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800492a:	6838      	ldr	r0, [r7, #0]
 800492c:	f000 f96c 	bl	8004c08 <null_ptr_check>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <set_accel_step_detect_int+0x22>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004942:	23ff      	movs	r3, #255	; 0xff
 8004944:	73fb      	strb	r3, [r7, #15]
 8004946:	e026      	b.n	8004996 <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	68b8      	ldr	r0, [r7, #8]
 8004952:	f001 fd01 	bl	8006358 <enable_step_detect_int>
 8004956:	4603      	mov	r3, r0
 8004958:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800495a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d119      	bne.n	8004996 <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f934 	bl	8004bd2 <set_intr_pin_config>
 800496a:	4603      	mov	r3, r0
 800496c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 f8af 	bl	8005adc <map_feature_interrupt>
 800497e:	4603      	mov	r3, r0
 8004980:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f001 fd1c 	bl	80063ca <config_step_detect>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80049ac:	6838      	ldr	r0, [r7, #0]
 80049ae:	f000 f92b 	bl	8004c08 <null_ptr_check>
 80049b2:	4603      	mov	r3, r0
 80049b4:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80049b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <set_accel_orientation_int+0x22>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80049c4:	23ff      	movs	r3, #255	; 0xff
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	e026      	b.n	8004a18 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3304      	adds	r3, #4
 80049ce:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	68b8      	ldr	r0, [r7, #8]
 80049d4:	f001 feda 	bl	800678c <enable_orient_int>
 80049d8:	4603      	mov	r3, r0
 80049da:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80049dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d119      	bne.n	8004a18 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8f3 	bl	8004bd2 <set_intr_pin_config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80049f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f001 f86e 	bl	8005adc <map_feature_interrupt>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8004a0c:	6839      	ldr	r1, [r7, #0]
 8004a0e:	68b8      	ldr	r0, [r7, #8]
 8004a10:	f001 fef5 	bl	80067fe <config_orient_int_settg>
 8004a14:	4603      	mov	r3, r0
 8004a16:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004a2e:	6838      	ldr	r0, [r7, #0]
 8004a30:	f000 f8ea 	bl	8004c08 <null_ptr_check>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <set_accel_flat_detect_int+0x22>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004a46:	23ff      	movs	r3, #255	; 0xff
 8004a48:	73fb      	strb	r3, [r7, #15]
 8004a4a:	e026      	b.n	8004a9a <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	68b8      	ldr	r0, [r7, #8]
 8004a56:	f001 ff6b 	bl	8006930 <enable_flat_int>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d119      	bne.n	8004a9a <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8b2 	bl	8004bd2 <set_intr_pin_config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f001 f82d 	bl	8005adc <map_feature_interrupt>
 8004a82:	4603      	mov	r3, r0
 8004a84:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d105      	bne.n	8004a9a <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	68b8      	ldr	r0, [r7, #8]
 8004a92:	f001 ff83 	bl	800699c <config_flat_int_settg>
 8004a96:	4603      	mov	r3, r0
 8004a98:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004ab0:	6838      	ldr	r0, [r7, #0]
 8004ab2:	f000 f8a9 	bl	8004c08 <null_ptr_check>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <set_accel_low_g_int+0x22>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004ac8:	23ff      	movs	r3, #255	; 0xff
 8004aca:	73fb      	strb	r3, [r7, #15]
 8004acc:	e030      	b.n	8004b30 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 8004ad4:	6839      	ldr	r1, [r7, #0]
 8004ad6:	68b8      	ldr	r0, [r7, #8]
 8004ad8:	f001 ffc6 	bl	8006a68 <enable_low_g_int>
 8004adc:	4603      	mov	r3, r0
 8004ade:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d123      	bne.n	8004b30 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004ae8:	6839      	ldr	r1, [r7, #0]
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f871 	bl	8004bd2 <set_intr_pin_config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d119      	bne.n	8004b30 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 ffec 	bl	8005adc <map_feature_interrupt>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10f      	bne.n	8004b30 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	68b8      	ldr	r0, [r7, #8]
 8004b14:	f001 ffe1 	bl	8006ada <config_low_g_data_src>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8004b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 8004b24:	6839      	ldr	r1, [r7, #0]
 8004b26:	68b8      	ldr	r0, [r7, #8]
 8004b28:	f002 f80e 	bl	8006b48 <config_low_g_int_settg>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004b46:	6838      	ldr	r0, [r7, #0]
 8004b48:	f000 f85e 	bl	8004c08 <null_ptr_check>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <set_accel_high_g_int+0x22>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004b5e:	23ff      	movs	r3, #255	; 0xff
 8004b60:	73fb      	strb	r3, [r7, #15]
 8004b62:	e030      	b.n	8004bc6 <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	68b8      	ldr	r0, [r7, #8]
 8004b6e:	f002 f847 	bl	8006c00 <enable_high_g_int>
 8004b72:	4603      	mov	r3, r0
 8004b74:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d123      	bne.n	8004bc6 <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f826 	bl	8004bd2 <set_intr_pin_config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d119      	bne.n	8004bc6 <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 ffa1 	bl	8005adc <map_feature_interrupt>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	68b8      	ldr	r0, [r7, #8]
 8004baa:	f002 f889 	bl	8006cc0 <config_high_g_data_src>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 8004bba:	6839      	ldr	r1, [r7, #0]
 8004bbc:	68b8      	ldr	r0, [r7, #8]
 8004bbe:	f002 f8b5 	bl	8006d2c <config_high_g_int_settg>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 8004bdc:	6839      	ldr	r1, [r7, #0]
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f002 f8ea 	bl	8006db8 <config_int_out_ctrl>
 8004be4:	4603      	mov	r3, r0
 8004be6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f002 f9aa 	bl	8006f4c <config_int_latch>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <null_ptr_check+0x26>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <null_ptr_check+0x26>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <null_ptr_check+0x26>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8004c2e:	23ff      	movs	r3, #255	; 0xff
 8004c30:	73fb      	strb	r3, [r7, #15]
 8004c32:	e001      	b.n	8004c38 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2210      	movs	r2, #16
 8004c60:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2203      	movs	r2, #3
 8004c66:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2208      	movs	r2, #8
 8004c72:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2214      	movs	r2, #20
 8004c78:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6852      	ldr	r2, [r2, #4]
 8004c86:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68d2      	ldr	r2, [r2, #12]
 8004c8e:	611a      	str	r2, [r3, #16]
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8004ca8:	f107 030c 	add.w	r3, r7, #12
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f833 	bl	8004d1a <check_accel_config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d126      	bne.n	8004d0e <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8004cc0:	f107 010c 	add.w	r1, r7, #12
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	2040      	movs	r0, #64	; 0x40
 8004cca:	f7ff f9fe 	bl	80040ca <bmi160_set_regs>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d119      	bne.n	8004d0e <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	795a      	ldrb	r2, [r3, #5]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	79da      	ldrb	r2, [r3, #7]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8004cea:	f107 030c 	add.w	r3, r7, #12
 8004cee:	1c59      	adds	r1, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	2041      	movs	r0, #65	; 0x41
 8004cf6:	f7ff f9e8 	bl	80040ca <bmi160_set_regs>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	799a      	ldrb	r2, [r3, #6]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8004d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2202      	movs	r2, #2
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	2040      	movs	r0, #64	; 0x40
 8004d2c:	f7ff f99a 	bl	8004064 <bmi160_get_regs>
 8004d30:	4603      	mov	r3, r0
 8004d32:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11b      	bne.n	8004d74 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8004d3c:	6839      	ldr	r1, [r7, #0]
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f81e 	bl	8004d80 <process_accel_odr>
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d111      	bne.n	8004d74 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f848 	bl	8004de8 <process_accel_bw>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3301      	adds	r3, #1
 8004d68:	6839      	ldr	r1, [r7, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f871 	bl	8004e52 <process_accel_range>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	795b      	ldrb	r3, [r3, #5]
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d81a      	bhi.n	8004dd4 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	795a      	ldrb	r2, [r3, #5]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	7a5b      	ldrb	r3, [r3, #9]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d016      	beq.n	8004dd8 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	795b      	ldrb	r3, [r3, #5]
 8004dae:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f023 030f 	bic.w	r3, r3, #15
 8004db8:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8004dba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	b25a      	sxtb	r2, r3
 8004dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	b25b      	sxtb	r3, r3
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e001      	b.n	8004dd8 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004dd4:	23fc      	movs	r3, #252	; 0xfc
 8004dd6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	79db      	ldrb	r3, [r3, #7]
 8004e02:	2b07      	cmp	r3, #7
 8004e04:	d81b      	bhi.n	8004e3e <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	79da      	ldrb	r2, [r3, #7]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	7adb      	ldrb	r3, [r3, #11]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d017      	beq.n	8004e42 <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	79db      	ldrb	r3, [r3, #7]
 8004e16:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8004e22:	7b7b      	ldrb	r3, [r7, #13]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	b25b      	sxtb	r3, r3
 8004e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e2c:	b25a      	sxtb	r2, r3
 8004e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	b25b      	sxtb	r3, r3
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e001      	b.n	8004e42 <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004e3e:	23fc      	movs	r3, #252	; 0xfc
 8004e40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	799b      	ldrb	r3, [r3, #6]
 8004e6c:	2b0c      	cmp	r3, #12
 8004e6e:	d81a      	bhi.n	8004ea6 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	799a      	ldrb	r2, [r3, #6]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	7a9b      	ldrb	r3, [r3, #10]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d016      	beq.n	8004eaa <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	799b      	ldrb	r3, [r3, #6]
 8004e80:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f023 030f 	bic.w	r3, r3, #15
 8004e8a:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8004e8c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	b25a      	sxtb	r2, r3
 8004e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b25b      	sxtb	r3, r3
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	e001      	b.n	8004eaa <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004ea6:	23fc      	movs	r3, #252	; 0xfc
 8004ea8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8004ec6:	f107 010e 	add.w	r1, r7, #14
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	2002      	movs	r0, #2
 8004ed0:	f7ff f8c8 	bl	8004064 <bmi160_get_regs>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8004ee0:	7bbb      	ldrb	r3, [r7, #14]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d102      	bne.n	8004ef6 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8004ef0:	23fa      	movs	r3, #250	; 0xfa
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e010      	b.n	8004f18 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8004ef6:	7bbb      	ldrb	r3, [r7, #14]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d102      	bne.n	8004f02 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8004efc:	23f9      	movs	r3, #249	; 0xf9
 8004efe:	73fb      	strb	r3, [r7, #15]
 8004f00:	e00a      	b.n	8004f18 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8004f02:	7bbb      	ldrb	r3, [r7, #14]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d102      	bne.n	8004f0e <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8004f08:	23f8      	movs	r3, #248	; 0xf8
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e004      	b.n	8004f18 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	2b07      	cmp	r3, #7
 8004f12:	d101      	bne.n	8004f18 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8004f14:	23f7      	movs	r3, #247	; 0xf7
 8004f16:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f833 	bl	8004fa2 <check_gyro_config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d126      	bne.n	8004f96 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8004f48:	f107 010c 	add.w	r1, r7, #12
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2042      	movs	r0, #66	; 0x42
 8004f52:	f7ff f8ba 	bl	80040ca <bmi160_set_regs>
 8004f56:	4603      	mov	r3, r0
 8004f58:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d119      	bne.n	8004f96 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7b5a      	ldrb	r2, [r3, #13]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	7bda      	ldrb	r2, [r3, #15]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8004f72:	f107 030c 	add.w	r3, r7, #12
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	2043      	movs	r0, #67	; 0x43
 8004f7e:	f7ff f8a4 	bl	80040ca <bmi160_set_regs>
 8004f82:	4603      	mov	r3, r0
 8004f84:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	7b9a      	ldrb	r2, [r3, #14]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8004f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	2042      	movs	r0, #66	; 0x42
 8004fb4:	f7ff f856 	bl	8004064 <bmi160_get_regs>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11b      	bne.n	8004ffc <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f81e 	bl	8005008 <process_gyro_odr>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d111      	bne.n	8004ffc <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f848 	bl	8005070 <process_gyro_bw>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d107      	bne.n	8004ffc <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f86b 	bl	80050ce <process_gyro_range>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	7b5b      	ldrb	r3, [r3, #13]
 8005022:	2b0d      	cmp	r3, #13
 8005024:	d81a      	bhi.n	800505c <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	7b5a      	ldrb	r2, [r3, #13]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	7c5b      	ldrb	r3, [r3, #17]
 800502e:	429a      	cmp	r2, r3
 8005030:	d016      	beq.n	8005060 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	7b5b      	ldrb	r3, [r3, #13]
 8005036:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f023 030f 	bic.w	r3, r3, #15
 8005040:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8005042:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	b25a      	sxtb	r2, r3
 800504c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005050:	4313      	orrs	r3, r2
 8005052:	b25b      	sxtb	r3, r3
 8005054:	b2da      	uxtb	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e001      	b.n	8005060 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800505c:	23fc      	movs	r3, #252	; 0xfc
 800505e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	7bdb      	ldrb	r3, [r3, #15]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d815      	bhi.n	80050ba <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	7bdb      	ldrb	r3, [r3, #15]
 8005092:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800509c:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 800509e:	7b7b      	ldrb	r3, [r7, #13]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050a8:	b25a      	sxtb	r2, r3
 80050aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b25b      	sxtb	r3, r3
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e001      	b.n	80050be <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80050ba:	23fc      	movs	r3, #252	; 0xfc
 80050bc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80050be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	7b9b      	ldrb	r3, [r3, #14]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d81a      	bhi.n	8005122 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	7b9a      	ldrb	r2, [r3, #14]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	7c9b      	ldrb	r3, [r3, #18]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d016      	beq.n	8005126 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	7b9b      	ldrb	r3, [r3, #14]
 80050fc:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	f023 0307 	bic.w	r3, r3, #7
 8005106:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8005108:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	b25a      	sxtb	r2, r3
 8005112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005116:	4313      	orrs	r3, r2
 8005118:	b25b      	sxtb	r3, r3
 800511a:	b2da      	uxtb	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e001      	b.n	8005126 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005122:	23fc      	movs	r3, #252	; 0xfc
 8005124:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	791b      	ldrb	r3, [r3, #4]
 800514a:	2b0f      	cmp	r3, #15
 800514c:	d92b      	bls.n	80051a6 <set_accel_pwr+0x70>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	791b      	ldrb	r3, [r3, #4]
 8005152:	2b12      	cmp	r3, #18
 8005154:	d827      	bhi.n	80051a6 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	791a      	ldrb	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7a1b      	ldrb	r3, [r3, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	d024      	beq.n	80051ac <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8005162:	f107 030e 	add.w	r3, r7, #14
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f826 	bl	80051ba <process_under_sampling>
 800516e:	4603      	mov	r3, r0
 8005170:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d118      	bne.n	80051ac <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	1d19      	adds	r1, r3, #4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	207e      	movs	r0, #126	; 0x7e
 8005184:	f7fe ffa1 	bl	80040ca <bmi160_set_regs>
 8005188:	4603      	mov	r3, r0
 800518a:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	7a1b      	ldrb	r3, [r3, #8]
 8005190:	2b10      	cmp	r3, #16
 8005192:	d103      	bne.n	800519c <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2005      	movs	r0, #5
 800519a:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	791a      	ldrb	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80051a4:	e002      	b.n	80051ac <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80051a6:	23f3      	movs	r3, #243	; 0xf3
 80051a8:	73fb      	strb	r3, [r7, #15]
 80051aa:	e000      	b.n	80051ae <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80051ac:	bf00      	nop
    }

    return rslt;
 80051ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80051c8:	2300      	movs	r3, #0
 80051ca:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2201      	movs	r2, #1
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	2040      	movs	r0, #64	; 0x40
 80051d4:	f7fe ff46 	bl	8004064 <bmi160_get_regs>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80051dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d139      	bne.n	8005258 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	791b      	ldrb	r3, [r3, #4]
 80051e8:	2b12      	cmp	r3, #18
 80051ea:	d120      	bne.n	800522e <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f4:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 80051f6:	7bbb      	ldrb	r3, [r7, #14]
 80051f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2201      	movs	r2, #1
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	2040      	movs	r0, #64	; 0x40
 800520a:	f7fe ff5e 	bl	80040ca <bmi160_set_regs>
 800520e:	4603      	mov	r3, r0
 8005210:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8005212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d11e      	bne.n	8005258 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800521a:	f107 010c 	add.w	r1, r7, #12
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2202      	movs	r2, #2
 8005222:	2058      	movs	r0, #88	; 0x58
 8005224:	f7fe ff51 	bl	80040ca <bmi160_set_regs>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e014      	b.n	8005258 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	b25b      	sxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	da0f      	bge.n	8005258 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005240:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	7bba      	ldrb	r2, [r7, #14]
 8005246:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2201      	movs	r2, #1
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	2040      	movs	r0, #64	; 0x40
 8005250:	f7fe ff3b 	bl	80040ca <bmi160_set_regs>
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005258:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	7b1b      	ldrb	r3, [r3, #12]
 8005274:	2b14      	cmp	r3, #20
 8005276:	d007      	beq.n	8005288 <set_gyro_pwr+0x24>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	7b1b      	ldrb	r3, [r3, #12]
 800527c:	2b15      	cmp	r3, #21
 800527e:	d003      	beq.n	8005288 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8005284:	2b17      	cmp	r3, #23
 8005286:	d129      	bne.n	80052dc <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7b1a      	ldrb	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	7c1b      	ldrb	r3, [r3, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d025      	beq.n	80052e0 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f103 010c 	add.w	r1, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	207e      	movs	r0, #126	; 0x7e
 80052a0:	f7fe ff13 	bl	80040ca <bmi160_set_regs>
 80052a4:	4603      	mov	r3, r0
 80052a6:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7c1b      	ldrb	r3, [r3, #16]
 80052ac:	2b14      	cmp	r3, #20
 80052ae:	d104      	bne.n	80052ba <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	2050      	movs	r0, #80	; 0x50
 80052b6:	4798      	blx	r3
 80052b8:	e00b      	b.n	80052d2 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	7c1b      	ldrb	r3, [r3, #16]
 80052be:	2b17      	cmp	r3, #23
 80052c0:	d107      	bne.n	80052d2 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80052c6:	2b15      	cmp	r3, #21
 80052c8:	d103      	bne.n	80052d2 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	200a      	movs	r0, #10
 80052d0:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7b1a      	ldrb	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80052da:	e001      	b.n	80052e0 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80052dc:	23f3      	movs	r3, #243	; 0xf3
 80052de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80052e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08c      	sub	sp, #48	; 0x30
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[9] = { 0 };
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	f107 0318 	add.w	r3, r7, #24
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	b29b      	uxth	r3, r3
 8005320:	3306      	adds	r3, #6
 8005322:	b29a      	uxth	r2, r3
 8005324:	f107 0114 	add.w	r1, r7, #20
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2012      	movs	r0, #18
 800532c:	f7fe fe9a 	bl	8004064 <bmi160_get_regs>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8005336:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 8098 	bne.w	8005470 <get_accel_data+0x184>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8005340:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800534a:	3330      	adds	r3, #48	; 0x30
 800534c:	443b      	add	r3, r7
 800534e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8005356:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005360:	3330      	adds	r3, #48	; 0x30
 8005362:	443b      	add	r3, r7
 8005364:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800536c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	b21a      	sxth	r2, r3
 8005374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005378:	b21b      	sxth	r3, r3
 800537a:	4313      	orrs	r3, r2
 800537c:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	8c3a      	ldrh	r2, [r7, #32]
 8005382:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005384:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800538e:	3330      	adds	r3, #48	; 0x30
 8005390:	443b      	add	r3, r7
 8005392:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800539a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80053a4:	3330      	adds	r3, #48	; 0x30
 80053a6:	443b      	add	r3, r7
 80053a8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80053ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80053b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	b21a      	sxth	r2, r3
 80053b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053bc:	b21b      	sxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	8c3a      	ldrh	r2, [r7, #32]
 80053c6:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80053c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80053d2:	3330      	adds	r3, #48	; 0x30
 80053d4:	443b      	add	r3, r7
 80053d6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80053de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80053e8:	3330      	adds	r3, #48	; 0x30
 80053ea:	443b      	add	r3, r7
 80053ec:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80053f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80053f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	b21a      	sxth	r2, r3
 80053fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005400:	b21b      	sxth	r3, r3
 8005402:	4313      	orrs	r3, r2
 8005404:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	8c3a      	ldrh	r2, [r7, #32]
 800540a:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d12a      	bne.n	8005468 <get_accel_data+0x17c>
        {
            time_0 = data_array[idx++];
 8005412:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800541c:	3330      	adds	r3, #48	; 0x30
 800541e:	443b      	add	r3, r7
 8005420:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005424:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005428:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005432:	3330      	adds	r3, #48	; 0x30
 8005434:	443b      	add	r3, r7
 8005436:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800543a:	b29b      	uxth	r3, r3
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005440:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800544a:	3330      	adds	r3, #48	; 0x30
 800544c:	443b      	add	r3, r7
 800544e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005456:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	431a      	orrs	r2, r3
 800545c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005460:	431a      	orrs	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	609a      	str	r2, [r3, #8]
 8005466:	e006      	b.n	8005476 <get_accel_data+0x18a>
        }
        else
        {
            accel->sensortime = 0;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2200      	movs	r2, #0
 800546c:	609a      	str	r2, [r3, #8]
 800546e:	e002      	b.n	8005476 <get_accel_data+0x18a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005470:	23fe      	movs	r3, #254	; 0xfe
 8005472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8005476:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800547a:	4618      	mov	r0, r3
 800547c:	3730      	adds	r7, #48	; 0x30
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b08c      	sub	sp, #48	; 0x30
 8005486:	af00      	add	r7, sp, #0
 8005488:	4603      	mov	r3, r0
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	f107 0314 	add.w	r3, r7, #20
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d17b      	bne.n	80055b4 <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80054bc:	f107 0110 	add.w	r1, r7, #16
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2206      	movs	r2, #6
 80054c4:	200c      	movs	r0, #12
 80054c6:	f7fe fdcd 	bl	8004064 <bmi160_get_regs>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 80054d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d169      	bne.n	80055ac <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80054d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80054e2:	3330      	adds	r3, #48	; 0x30
 80054e4:	443b      	add	r3, r7
 80054e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 80054ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80054f8:	3330      	adds	r3, #48	; 0x30
 80054fa:	443b      	add	r3, r7
 80054fc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005504:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	b21a      	sxth	r2, r3
 800550c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005510:	b21b      	sxth	r3, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	8c3a      	ldrh	r2, [r7, #32]
 800551a:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800551c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005526:	3330      	adds	r3, #48	; 0x30
 8005528:	443b      	add	r3, r7
 800552a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8005532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800553c:	3330      	adds	r3, #48	; 0x30
 800553e:	443b      	add	r3, r7
 8005540:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005548:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	b21a      	sxth	r2, r3
 8005550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005554:	b21b      	sxth	r3, r3
 8005556:	4313      	orrs	r3, r2
 8005558:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	8c3a      	ldrh	r2, [r7, #32]
 800555e:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005560:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800556a:	3330      	adds	r3, #48	; 0x30
 800556c:	443b      	add	r3, r7
 800556e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8005576:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005580:	3330      	adds	r3, #48	; 0x30
 8005582:	443b      	add	r3, r7
 8005584:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800558c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	b21a      	sxth	r2, r3
 8005594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005598:	b21b      	sxth	r3, r3
 800559a:	4313      	orrs	r3, r2
 800559c:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	8c3a      	ldrh	r2, [r7, #32]
 80055a2:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2200      	movs	r2, #0
 80055a8:	609a      	str	r2, [r3, #8]
 80055aa:	e0ae      	b.n	800570a <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80055ac:	23fe      	movs	r3, #254	; 0xfe
 80055ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80055b2:	e0aa      	b.n	800570a <get_gyro_data+0x288>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	330c      	adds	r3, #12
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	f107 0110 	add.w	r1, r7, #16
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	200c      	movs	r0, #12
 80055c4:	f7fe fd4e 	bl	8004064 <bmi160_get_regs>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 80055ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 8096 	bne.w	8005704 <get_gyro_data+0x282>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80055d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80055e2:	3330      	adds	r3, #48	; 0x30
 80055e4:	443b      	add	r3, r7
 80055e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80055ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 80055ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80055f8:	3330      	adds	r3, #48	; 0x30
 80055fa:	443b      	add	r3, r7
 80055fc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005604:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	b21a      	sxth	r2, r3
 800560c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005610:	b21b      	sxth	r3, r3
 8005612:	4313      	orrs	r3, r2
 8005614:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	8c3a      	ldrh	r2, [r7, #32]
 800561a:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800561c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005626:	3330      	adds	r3, #48	; 0x30
 8005628:	443b      	add	r3, r7
 800562a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8005632:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800563c:	3330      	adds	r3, #48	; 0x30
 800563e:	443b      	add	r3, r7
 8005640:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005648:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	b21a      	sxth	r2, r3
 8005650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005654:	b21b      	sxth	r3, r3
 8005656:	4313      	orrs	r3, r2
 8005658:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	8c3a      	ldrh	r2, [r7, #32]
 800565e:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005660:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800566a:	3330      	adds	r3, #48	; 0x30
 800566c:	443b      	add	r3, r7
 800566e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8005676:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005680:	3330      	adds	r3, #48	; 0x30
 8005682:	443b      	add	r3, r7
 8005684:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800568c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	b21a      	sxth	r2, r3
 8005694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005698:	b21b      	sxth	r3, r3
 800569a:	4313      	orrs	r3, r2
 800569c:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	8c3a      	ldrh	r2, [r7, #32]
 80056a2:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 80056a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056a8:	3306      	adds	r3, #6
 80056aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            time_0 = data_array[idx++];
 80056ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80056b8:	3330      	adds	r3, #48	; 0x30
 80056ba:	443b      	add	r3, r7
 80056bc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80056c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80056c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80056ce:	3330      	adds	r3, #48	; 0x30
 80056d0:	443b      	add	r3, r7
 80056d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80056dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80056e6:	3330      	adds	r3, #48	; 0x30
 80056e8:	443b      	add	r3, r7
 80056ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80056f2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	431a      	orrs	r2, r3
 80056f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056fc:	431a      	orrs	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	609a      	str	r2, [r3, #8]
 8005702:	e002      	b.n	800570a <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005704:	23fe      	movs	r3, #254	; 0xfe
 8005706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 800570a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800570e:	4618      	mov	r0, r3
 8005710:	3730      	adds	r7, #48	; 0x30
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b08c      	sub	sp, #48	; 0x30
 800571a:	af00      	add	r7, sp, #0
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4603      	mov	r3, r0
 8005724:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	b29b      	uxth	r3, r3
 8005750:	330c      	adds	r3, #12
 8005752:	b29a      	uxth	r2, r3
 8005754:	f107 0110 	add.w	r1, r7, #16
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	200c      	movs	r0, #12
 800575c:	f7fe fc82 	bl	8004064 <bmi160_get_regs>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8005766:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 8109 	bne.w	8005982 <get_accel_gyro_data+0x26c>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8005770:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800577a:	3330      	adds	r3, #48	; 0x30
 800577c:	443b      	add	r3, r7
 800577e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8005786:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005790:	3330      	adds	r3, #48	; 0x30
 8005792:	443b      	add	r3, r7
 8005794:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800579c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	b21a      	sxth	r2, r3
 80057a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057a8:	b21b      	sxth	r3, r3
 80057aa:	4313      	orrs	r3, r2
 80057ac:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8c3a      	ldrh	r2, [r7, #32]
 80057b2:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80057b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80057be:	3330      	adds	r3, #48	; 0x30
 80057c0:	443b      	add	r3, r7
 80057c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80057ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80057d4:	3330      	adds	r3, #48	; 0x30
 80057d6:	443b      	add	r3, r7
 80057d8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80057e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	b21a      	sxth	r2, r3
 80057e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ec:	b21b      	sxth	r3, r3
 80057ee:	4313      	orrs	r3, r2
 80057f0:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8c3a      	ldrh	r2, [r7, #32]
 80057f6:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80057f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005802:	3330      	adds	r3, #48	; 0x30
 8005804:	443b      	add	r3, r7
 8005806:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800580e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005818:	3330      	adds	r3, #48	; 0x30
 800581a:	443b      	add	r3, r7
 800581c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	b21a      	sxth	r2, r3
 800582c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005830:	b21b      	sxth	r3, r3
 8005832:	4313      	orrs	r3, r2
 8005834:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8c3a      	ldrh	r2, [r7, #32]
 800583a:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 800583c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005846:	3330      	adds	r3, #48	; 0x30
 8005848:	443b      	add	r3, r7
 800584a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8005852:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800585c:	3330      	adds	r3, #48	; 0x30
 800585e:	443b      	add	r3, r7
 8005860:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005868:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	b21a      	sxth	r2, r3
 8005870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005874:	b21b      	sxth	r3, r3
 8005876:	4313      	orrs	r3, r2
 8005878:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	8c3a      	ldrh	r2, [r7, #32]
 800587e:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005880:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800588a:	3330      	adds	r3, #48	; 0x30
 800588c:	443b      	add	r3, r7
 800588e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8005896:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80058a0:	3330      	adds	r3, #48	; 0x30
 80058a2:	443b      	add	r3, r7
 80058a4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80058ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	b21a      	sxth	r2, r3
 80058b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058b8:	b21b      	sxth	r3, r3
 80058ba:	4313      	orrs	r3, r2
 80058bc:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	8c3a      	ldrh	r2, [r7, #32]
 80058c2:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80058c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80058ce:	3330      	adds	r3, #48	; 0x30
 80058d0:	443b      	add	r3, r7
 80058d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80058da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80058e4:	3330      	adds	r3, #48	; 0x30
 80058e6:	443b      	add	r3, r7
 80058e8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80058f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	b21a      	sxth	r2, r3
 80058f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058fc:	b21b      	sxth	r3, r3
 80058fe:	4313      	orrs	r3, r2
 8005900:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	8c3a      	ldrh	r2, [r7, #32]
 8005906:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d132      	bne.n	8005974 <get_accel_gyro_data+0x25e>
        {
            time_0 = data_array[idx++];
 800590e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005918:	3330      	adds	r3, #48	; 0x30
 800591a:	443b      	add	r3, r7
 800591c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005920:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005924:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800592e:	3330      	adds	r3, #48	; 0x30
 8005930:	443b      	add	r3, r7
 8005932:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005936:	b29b      	uxth	r3, r3
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800593c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005946:	3330      	adds	r3, #48	; 0x30
 8005948:	443b      	add	r3, r7
 800594a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800594e:	041b      	lsls	r3, r3, #16
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005952:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	431a      	orrs	r2, r3
 8005958:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800595c:	431a      	orrs	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005962:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	431a      	orrs	r2, r3
 8005968:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	609a      	str	r2, [r3, #8]
 8005972:	e009      	b.n	8005988 <get_accel_gyro_data+0x272>
        }
        else
        {
            accel->sensortime = 0;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	609a      	str	r2, [r3, #8]
 8005980:	e002      	b.n	8005988 <get_accel_gyro_data+0x272>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005982:	23fe      	movs	r3, #254	; 0xfe
 8005984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8005988:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800598c:	4618      	mov	r0, r3
 800598e:	3730      	adds	r7, #48	; 0x30
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80059a6:	f107 010d 	add.w	r1, r7, #13
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2201      	movs	r2, #1
 80059ae:	2050      	movs	r0, #80	; 0x50
 80059b0:	f7fe fb58 	bl	8004064 <bmi160_get_regs>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80059b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d156      	bne.n	8005a6e <enable_accel_any_motion_int+0xda>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d03e      	beq.n	8005a4c <enable_accel_any_motion_int+0xb8>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 80059ce:	7b7b      	ldrb	r3, [r7, #13]
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	b25b      	sxtb	r3, r3
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	b25a      	sxtb	r2, r3
 80059e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	b25b      	sxtb	r3, r3
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 80059f4:	7b7b      	ldrb	r3, [r7, #13]
 80059f6:	f023 0302 	bic.w	r3, r3, #2
 80059fa:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	b25a      	sxtb	r2, r3
 8005a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	b25b      	sxtb	r3, r3
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8005a1c:	7b7b      	ldrb	r3, [r7, #13]
 8005a1e:	f023 0304 	bic.w	r3, r3, #4
 8005a22:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	b25b      	sxtb	r3, r3
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	b25a      	sxtb	r2, r3
 8005a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	70da      	strb	r2, [r3, #3]
 8005a4a:	e007      	b.n	8005a5c <enable_accel_any_motion_int+0xc8>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 8005a4c:	7b7b      	ldrb	r3, [r7, #13]
 8005a4e:	f023 0307 	bic.w	r3, r3, #7
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005a5c:	f107 010d 	add.w	r1, r7, #13
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2201      	movs	r2, #1
 8005a64:	2050      	movs	r0, #80	; 0x50
 8005a66:	f7fe fb30 	bl	80040ca <bmi160_set_regs>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005a8a:	f107 010d 	add.w	r1, r7, #13
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	2062      	movs	r0, #98	; 0x62
 8005a94:	f7fe fae6 	bl	8004064 <bmi160_get_regs>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d115      	bne.n	8005ad0 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 8005aa4:	7b7b      	ldrb	r3, [r7, #13]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8005ab2:	7b7b      	ldrb	r3, [r7, #13]
 8005ab4:	f023 0302 	bic.w	r3, r3, #2
 8005ab8:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005abe:	f107 010d 	add.w	r1, r7, #13
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	2062      	movs	r0, #98	; 0x62
 8005ac8:	f7fe faff 	bl	80040ca <bmi160_set_regs>
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 8005ae6:	4a48      	ldr	r2, [pc, #288]	; (8005c08 <map_feature_interrupt+0x12c>)
 8005ae8:	f107 030c 	add.w	r3, r7, #12
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	4611      	mov	r1, r2
 8005af0:	8019      	strh	r1, [r3, #0]
 8005af2:	3302      	adds	r3, #2
 8005af4:	0c12      	lsrs	r2, r2, #16
 8005af6:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 8005af8:	4a43      	ldr	r2, [pc, #268]	; (8005c08 <map_feature_interrupt+0x12c>)
 8005afa:	f107 0308 	add.w	r3, r7, #8
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	4611      	mov	r1, r2
 8005b02:	8019      	strh	r1, [r3, #0]
 8005b04:	3302      	adds	r3, #2
 8005b06:	0c12      	lsrs	r2, r2, #16
 8005b08:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8005b0a:	f107 010c 	add.w	r1, r7, #12
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2203      	movs	r2, #3
 8005b12:	2055      	movs	r0, #85	; 0x55
 8005b14:	f7fe faa6 	bl	8004064 <bmi160_get_regs>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d16a      	bne.n	8005bfa <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 8005b24:	7b3b      	ldrb	r3, [r7, #12]
 8005b26:	b25a      	sxtb	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <map_feature_interrupt+0x130>)
 8005b30:	5c5b      	ldrb	r3, [r3, r1]
 8005b32:	b25b      	sxtb	r3, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	b25b      	sxtb	r3, r3
 8005b38:	4013      	ands	r3, r2
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	b25a      	sxtb	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4b30      	ldr	r3, [pc, #192]	; (8005c0c <map_feature_interrupt+0x130>)
 8005b4c:	5c5b      	ldrb	r3, [r3, r1]
 8005b4e:	b25b      	sxtb	r3, r3
 8005b50:	43db      	mvns	r3, r3
 8005b52:	b25b      	sxtb	r3, r3
 8005b54:	4013      	ands	r3, r2
 8005b56:	b25b      	sxtb	r3, r3
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d83b      	bhi.n	8005bdc <map_feature_interrupt+0x100>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <map_feature_interrupt+0x90>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005b7d 	.word	0x08005b7d
 8005b70:	08005b87 	.word	0x08005b87
 8005b74:	08005b9f 	.word	0x08005b9f
 8005b78:	08005bb7 	.word	0x08005bb7
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 8005b7c:	7a3b      	ldrb	r3, [r7, #8]
 8005b7e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8005b80:	7abb      	ldrb	r3, [r7, #10]
 8005b82:	73bb      	strb	r3, [r7, #14]
                break;
 8005b84:	e02c      	b.n	8005be0 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8005b86:	7a3a      	ldrb	r2, [r7, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4b1f      	ldr	r3, [pc, #124]	; (8005c0c <map_feature_interrupt+0x130>)
 8005b90:	5c5b      	ldrb	r3, [r3, r1]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8005b98:	7abb      	ldrb	r3, [r7, #10]
 8005b9a:	73bb      	strb	r3, [r7, #14]
                break;
 8005b9c:	e020      	b.n	8005be0 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8005b9e:	7aba      	ldrb	r2, [r7, #10]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <map_feature_interrupt+0x130>)
 8005ba8:	5c5b      	ldrb	r3, [r3, r1]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8005bb0:	7a3b      	ldrb	r3, [r7, #8]
 8005bb2:	733b      	strb	r3, [r7, #12]
                break;
 8005bb4:	e014      	b.n	8005be0 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8005bb6:	7a3a      	ldrb	r2, [r7, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <map_feature_interrupt+0x130>)
 8005bc0:	5c5b      	ldrb	r3, [r3, r1]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8005bc8:	7aba      	ldrb	r2, [r7, #10]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <map_feature_interrupt+0x130>)
 8005bd2:	5c5b      	ldrb	r3, [r3, r1]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	73bb      	strb	r3, [r7, #14]
                break;
 8005bda:	e001      	b.n	8005be0 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005bdc:	23fc      	movs	r3, #252	; 0xfc
 8005bde:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8005be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d108      	bne.n	8005bfa <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8005be8:	f107 010c 	add.w	r1, r7, #12
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2203      	movs	r2, #3
 8005bf0:	2055      	movs	r0, #85	; 0x55
 8005bf2:	f7fe fa6a 	bl	80040ca <bmi160_set_regs>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	08012b34 	.word	0x08012b34
 8005c0c:	08012b48 	.word	0x08012b48

08005c10 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8005c22:	f107 010d 	add.w	r1, r7, #13
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	2056      	movs	r0, #86	; 0x56
 8005c2c:	f7fe fa1a 	bl	8004064 <bmi160_get_regs>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d168      	bne.n	8005d0e <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	461a      	mov	r2, r3
 8005c42:	4b36      	ldr	r3, [pc, #216]	; (8005d1c <map_hardware_interrupt+0x10c>)
 8005c44:	5c9b      	ldrb	r3, [r3, r2]
 8005c46:	b25b      	sxtb	r3, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	b25a      	sxtb	r2, r3
 8005c4c:	7b7b      	ldrb	r3, [r7, #13]
 8005c4e:	b25b      	sxtb	r3, r3
 8005c50:	4013      	ands	r3, r2
 8005c52:	b25b      	sxtb	r3, r3
 8005c54:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	4b2f      	ldr	r3, [pc, #188]	; (8005d1c <map_hardware_interrupt+0x10c>)
 8005c5e:	5c9b      	ldrb	r3, [r3, r2]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	b25b      	sxtb	r3, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	b25a      	sxtb	r2, r3
 8005c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	b25b      	sxtb	r3, r3
 8005c72:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d839      	bhi.n	8005cf0 <map_hardware_interrupt+0xe0>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <map_hardware_interrupt+0x74>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005c9b 	.word	0x08005c9b
 8005c8c:	08005cb3 	.word	0x08005cb3
 8005c90:	08005cc7 	.word	0x08005cc7
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	737b      	strb	r3, [r7, #13]
                break;
 8005c98:	e02c      	b.n	8005cf4 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <map_hardware_interrupt+0x10c>)
 8005ca2:	5c9b      	ldrb	r3, [r3, r2]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	737b      	strb	r3, [r7, #13]
                break;
 8005cb0:	e020      	b.n	8005cf4 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <map_hardware_interrupt+0x10c>)
 8005cba:	5c9a      	ldrb	r2, [r3, r2]
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	737b      	strb	r3, [r7, #13]
                break;
 8005cc4:	e016      	b.n	8005cf4 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <map_hardware_interrupt+0x10c>)
 8005cce:	5c9a      	ldrb	r2, [r3, r2]
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <map_hardware_interrupt+0x10c>)
 8005ce0:	5c9b      	ldrb	r3, [r3, r2]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	7b7b      	ldrb	r3, [r7, #13]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	737b      	strb	r3, [r7, #13]
                break;
 8005cee:	e001      	b.n	8005cf4 <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005cf0:	23fc      	movs	r3, #252	; 0xfc
 8005cf2:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8005cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d108      	bne.n	8005d0e <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8005cfc:	f107 010d 	add.w	r1, r7, #13
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	2056      	movs	r0, #86	; 0x56
 8005d06:	f7fe f9e0 	bl	80040ca <bmi160_set_regs>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	08012b48 	.word	0x08012b48

08005d20 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005d32:	f107 010d 	add.w	r1, r7, #13
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	2059      	movs	r0, #89	; 0x59
 8005d3c:	f7fe f992 	bl	8004064 <bmi160_get_regs>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d119      	bne.n	8005d80 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005d4c:	7b7b      	ldrb	r3, [r7, #13]
 8005d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d52:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	01db      	lsls	r3, r3, #7
 8005d60:	b25a      	sxtb	r2, r3
 8005d62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b25b      	sxtb	r3, r3
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005d6e:	f107 010d 	add.w	r1, r7, #13
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2201      	movs	r2, #1
 8005d76:	2059      	movs	r0, #89	; 0x59
 8005d78:	f7fe f9a7 	bl	80040ca <bmi160_set_regs>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8005d9e:	2300      	movs	r3, #0
 8005da0:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 8005da2:	f107 010c 	add.w	r1, r7, #12
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2201      	movs	r2, #1
 8005daa:	205f      	movs	r0, #95	; 0x5f
 8005dac:	f7fe f95a 	bl	8004064 <bmi160_get_regs>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d122      	bne.n	8005e02 <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8005dc8:	7b3b      	ldrb	r3, [r7, #12]
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8005dd0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005dd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dd8:	b25a      	sxtb	r2, r3
 8005dda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b25b      	sxtb	r3, r3
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 8005de6:	7b3b      	ldrb	r3, [r7, #12]
 8005de8:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8005df0:	f107 0108 	add.w	r1, r7, #8
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2202      	movs	r2, #2
 8005df8:	205f      	movs	r0, #95	; 0x5f
 8005dfa:	f7fe f966 	bl	80040ca <bmi160_set_regs>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b086      	sub	sp, #24
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7fe fed8 	bl	8004bd2 <set_intr_pin_config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d122      	bne.n	8005e74 <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff fe23 	bl	8005a7a <disable_sig_motion_int>
 8005e34:	4603      	mov	r3, r0
 8005e36:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d119      	bne.n	8005e74 <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff fe4a 	bl	8005adc <map_feature_interrupt>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10f      	bne.n	8005e74 <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	68b8      	ldr	r0, [r7, #8]
 8005e58:	f7ff ff62 	bl	8005d20 <config_any_motion_src>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8005e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	68b8      	ldr	r0, [r7, #8]
 8005e6c:	f7ff ff8e 	bl	8005d8c <config_any_dur_threshold>
 8005e70:	4603      	mov	r3, r0
 8005e72:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8005e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8005e90:	f107 010d 	add.w	r1, r7, #13
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	2051      	movs	r0, #81	; 0x51
 8005e9a:	f7fe f8e3 	bl	8004064 <bmi160_get_regs>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d111      	bne.n	8005ece <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8005eaa:	7b7b      	ldrb	r3, [r7, #13]
 8005eac:	f023 0310 	bic.w	r3, r3, #16
 8005eb0:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 8005eb2:	7bbb      	ldrb	r3, [r7, #14]
 8005eb4:	f043 0310 	orr.w	r3, r3, #16
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8005ebc:	f107 010d 	add.w	r1, r7, #13
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	2051      	movs	r0, #81	; 0x51
 8005ec6:	f7fe f900 	bl	80040ca <bmi160_set_regs>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005eec:	f107 010d 	add.w	r1, r7, #13
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	2052      	movs	r0, #82	; 0x52
 8005ef6:	f7fe f8b5 	bl	8004064 <bmi160_get_regs>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d138      	bne.n	8005f78 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 8005f14:	7b7b      	ldrb	r3, [r7, #13]
 8005f16:	f023 0301 	bic.w	r3, r3, #1
 8005f1a:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 8005f34:	7b7b      	ldrb	r3, [r7, #13]
 8005f36:	f023 0302 	bic.w	r3, r3, #2
 8005f3a:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	f043 0302 	orr.w	r3, r3, #2
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 8005f54:	7b7b      	ldrb	r3, [r7, #13]
 8005f56:	f023 0304 	bic.w	r3, r3, #4
 8005f5a:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8005f5c:	7bbb      	ldrb	r3, [r7, #14]
 8005f5e:	f043 0304 	orr.w	r3, r3, #4
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005f66:	f107 010d 	add.w	r1, r7, #13
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	2052      	movs	r0, #82	; 0x52
 8005f70:	f7fe f8ab 	bl	80040ca <bmi160_set_regs>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7fe fe1d 	bl	8004bd2 <set_intr_pin_config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d119      	bne.n	8005fd8 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff fd98 	bl	8005adc <map_feature_interrupt>
 8005fac:	4603      	mov	r3, r0
 8005fae:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10f      	bne.n	8005fd8 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	68b8      	ldr	r0, [r7, #8]
 8005fbc:	f000 f812 	bl	8005fe4 <config_no_motion_data_src>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	68b8      	ldr	r0, [r7, #8]
 8005fd0:	f000 f83e 	bl	8006050 <config_no_motion_dur_thr>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005ff6:	f107 010d 	add.w	r1, r7, #13
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	2059      	movs	r0, #89	; 0x59
 8006000:	f7fe f830 	bl	8004064 <bmi160_get_regs>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d119      	bne.n	8006044 <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8006010:	7b7b      	ldrb	r3, [r7, #13]
 8006012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006016:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	01db      	lsls	r3, r3, #7
 8006024:	b25a      	sxtb	r2, r3
 8006026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800602a:	4313      	orrs	r3, r2
 800602c:	b25b      	sxtb	r3, r3
 800602e:	b2db      	uxtb	r3, r3
 8006030:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8006032:	f107 010d 	add.w	r1, r7, #13
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2201      	movs	r2, #1
 800603a:	2059      	movs	r0, #89	; 0x59
 800603c:	f7fe f845 	bl	80040ca <bmi160_set_regs>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006044:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8006066:	2300      	movs	r3, #0
 8006068:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 800606a:	235f      	movs	r3, #95	; 0x5f
 800606c:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 800606e:	f107 010b 	add.w	r1, r7, #11
 8006072:	7b38      	ldrb	r0, [r7, #12]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2201      	movs	r2, #1
 8006078:	f7fd fff4 	bl	8004064 <bmi160_get_regs>
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d14b      	bne.n	8006120 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8006088:	7afb      	ldrb	r3, [r7, #11]
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006098:	b2db      	uxtb	r3, r3
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	b25a      	sxtb	r2, r3
 800609e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b25b      	sxtb	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 80060aa:	f107 010b 	add.w	r1, r7, #11
 80060ae:	7b38      	ldrb	r0, [r7, #12]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f7fe f809 	bl	80040ca <bmi160_set_regs>
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80060bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d12d      	bne.n	8006120 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 80060c4:	2362      	movs	r3, #98	; 0x62
 80060c6:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 80060c8:	f107 010b 	add.w	r1, r7, #11
 80060cc:	7b38      	ldrb	r0, [r7, #12]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f7fd ffc7 	bl	8004064 <bmi160_get_regs>
 80060d6:	4603      	mov	r3, r0
 80060d8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80060da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11e      	bne.n	8006120 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 80060f6:	7bba      	ldrb	r2, [r7, #14]
 80060f8:	7b7b      	ldrb	r3, [r7, #13]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8006100:	7afb      	ldrb	r3, [r7, #11]
 8006102:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	789b      	ldrb	r3, [r3, #2]
 8006108:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 800610a:	2361      	movs	r3, #97	; 0x61
 800610c:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 800610e:	f107 0108 	add.w	r1, r7, #8
 8006112:	7b38      	ldrb	r0, [r7, #12]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2202      	movs	r2, #2
 8006118:	f7fd ffd7 	bl	80040ca <bmi160_set_regs>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8006120:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800613e:	f107 010d 	add.w	r1, r7, #13
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2201      	movs	r2, #1
 8006146:	2050      	movs	r0, #80	; 0x50
 8006148:	f7fd ff8c 	bl	8004064 <bmi160_get_regs>
 800614c:	4603      	mov	r3, r0
 800614e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d124      	bne.n	80061a2 <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00c      	beq.n	8006180 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8006166:	7b7b      	ldrb	r3, [r7, #13]
 8006168:	f023 0307 	bic.w	r3, r3, #7
 800616c:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	f043 0307 	orr.w	r3, r3, #7
 8006174:	b2db      	uxtb	r3, r3
 8006176:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2201      	movs	r2, #1
 800617c:	70da      	strb	r2, [r3, #3]
 800617e:	e007      	b.n	8006190 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8006180:	7b7b      	ldrb	r3, [r7, #13]
 8006182:	f023 0307 	bic.w	r3, r3, #7
 8006186:	b2db      	uxtb	r3, r3
 8006188:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	22ff      	movs	r2, #255	; 0xff
 800618e:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006190:	f107 010d 	add.w	r1, r7, #13
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	2050      	movs	r0, #80	; 0x50
 800619a:	f7fd ff96 	bl	80040ca <bmi160_set_regs>
 800619e:	4603      	mov	r3, r0
 80061a0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80061a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7fe fd08 	bl	8004bd2 <set_intr_pin_config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80061c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d119      	bne.n	8006202 <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff fc83 	bl	8005adc <map_feature_interrupt>
 80061d6:	4603      	mov	r3, r0
 80061d8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80061da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10f      	bne.n	8006202 <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	68b8      	ldr	r0, [r7, #8]
 80061e6:	f000 f812 	bl	800620e <config_sig_motion_data_src>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80061ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d105      	bne.n	8006202 <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	68b8      	ldr	r0, [r7, #8]
 80061fa:	f000 f83e 	bl	800627a <config_sig_dur_threshold>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006202:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8006220:	f107 010d 	add.w	r1, r7, #13
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2201      	movs	r2, #1
 8006228:	2059      	movs	r0, #89	; 0x59
 800622a:	f7fd ff1b 	bl	8004064 <bmi160_get_regs>
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d119      	bne.n	800626e <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 800623a:	7b7b      	ldrb	r3, [r7, #13]
 800623c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006240:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	01db      	lsls	r3, r3, #7
 800624e:	b25a      	sxtb	r2, r3
 8006250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006254:	4313      	orrs	r3, r2
 8006256:	b25b      	sxtb	r3, r3
 8006258:	b2db      	uxtb	r3, r3
 800625a:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800625c:	f107 010d 	add.w	r1, r7, #13
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2201      	movs	r2, #1
 8006264:	2059      	movs	r0, #89	; 0x59
 8006266:	f7fd ff30 	bl	80040ca <bmi160_set_regs>
 800626a:	4603      	mov	r3, r0
 800626c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800626e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 8006284:	2300      	movs	r3, #0
 8006286:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 800628e:	f107 010d 	add.w	r1, r7, #13
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2201      	movs	r2, #1
 8006296:	2060      	movs	r0, #96	; 0x60
 8006298:	f7fd ff17 	bl	80040ca <bmi160_set_regs>
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80062a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d151      	bne.n	800634c <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80062a8:	f107 010d 	add.w	r1, r7, #13
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	2062      	movs	r0, #98	; 0x62
 80062b2:	f7fd fed7 	bl	8004064 <bmi160_get_regs>
 80062b6:	4603      	mov	r3, r0
 80062b8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80062ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d144      	bne.n	800634c <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 80062c2:	7b7b      	ldrb	r3, [r7, #13]
 80062c4:	f023 030c 	bic.w	r3, r3, #12
 80062c8:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	b25b      	sxtb	r3, r3
 80062d8:	f003 030c 	and.w	r3, r3, #12
 80062dc:	b25a      	sxtb	r2, r3
 80062de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	b25b      	sxtb	r3, r3
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 80062ea:	7b7b      	ldrb	r3, [r7, #13]
 80062ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80062f0:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	b25b      	sxtb	r3, r3
 8006300:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006304:	b25a      	sxtb	r2, r3
 8006306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800630a:	4313      	orrs	r3, r2
 800630c:	b25b      	sxtb	r3, r3
 800630e:	b2db      	uxtb	r3, r3
 8006310:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8006312:	7b7b      	ldrb	r3, [r7, #13]
 8006314:	f023 0302 	bic.w	r3, r3, #2
 8006318:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006322:	b2db      	uxtb	r3, r3
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	b25b      	sxtb	r3, r3
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	b25a      	sxtb	r2, r3
 800632e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006332:	4313      	orrs	r3, r2
 8006334:	b25b      	sxtb	r3, r3
 8006336:	b2db      	uxtb	r3, r3
 8006338:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 800633a:	f107 010d 	add.w	r1, r7, #13
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2201      	movs	r2, #1
 8006342:	2062      	movs	r0, #98	; 0x62
 8006344:	f7fd fec1 	bl	80040ca <bmi160_set_regs>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800634c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 800636a:	f107 010d 	add.w	r1, r7, #13
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2201      	movs	r2, #1
 8006372:	2052      	movs	r0, #82	; 0x52
 8006374:	f7fd fe76 	bl	8004064 <bmi160_get_regs>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800637c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d11c      	bne.n	80063be <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 8006384:	7b7b      	ldrb	r3, [r7, #13]
 8006386:	f023 0308 	bic.w	r3, r3, #8
 800638a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006394:	b2db      	uxtb	r3, r3
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	b25b      	sxtb	r3, r3
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	b25a      	sxtb	r2, r3
 80063a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	b25b      	sxtb	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80063ac:	f107 010d 	add.w	r1, r7, #13
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2201      	movs	r2, #1
 80063b4:	2052      	movs	r0, #82	; 0x52
 80063b6:	f7fd fe88 	bl	80040ca <bmi160_set_regs>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80063be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 80063d8:	2300      	movs	r3, #0
 80063da:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 80063ea:	2315      	movs	r3, #21
 80063ec:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 80063ee:	2303      	movs	r3, #3
 80063f0:	737b      	strb	r3, [r7, #13]
 80063f2:	e065      	b.n	80064c0 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d104      	bne.n	800640c <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8006402:	232d      	movs	r3, #45	; 0x2d
 8006404:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 8006406:	2300      	movs	r3, #0
 8006408:	737b      	strb	r3, [r7, #13]
 800640a:	e059      	b.n	80064c0 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d104      	bne.n	8006424 <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 800641a:	231d      	movs	r3, #29
 800641c:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 800641e:	2307      	movs	r3, #7
 8006420:	737b      	strb	r3, [r7, #13]
 8006422:	e04d      	b.n	80064c0 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2bc0      	cmp	r3, #192	; 0xc0
 8006430:	d146      	bne.n	80064c0 <config_step_detect+0xf6>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8006432:	f107 010c 	add.w	r1, r7, #12
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2202      	movs	r2, #2
 800643a:	207a      	movs	r0, #122	; 0x7a
 800643c:	f7fd fe12 	bl	8004064 <bmi160_get_regs>
 8006440:	4603      	mov	r3, r0
 8006442:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8006444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d139      	bne.n	80064c0 <config_step_detect+0xf6>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 800644c:	7b3b      	ldrb	r3, [r7, #12]
 800644e:	f023 0318 	bic.w	r3, r3, #24
 8006452:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800645c:	b2db      	uxtb	r3, r3
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	b25b      	sxtb	r3, r3
 8006462:	f003 0318 	and.w	r3, r3, #24
 8006466:	b25a      	sxtb	r2, r3
 8006468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800646c:	4313      	orrs	r3, r2
 800646e:	b25b      	sxtb	r3, r3
 8006470:	b2db      	uxtb	r3, r3
 8006472:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8006474:	7b3b      	ldrb	r3, [r7, #12]
 8006476:	f023 0307 	bic.w	r3, r3, #7
 800647a:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8006484:	b2db      	uxtb	r3, r3
 8006486:	b25b      	sxtb	r3, r3
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	b25a      	sxtb	r2, r3
 800648e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006492:	4313      	orrs	r3, r2
 8006494:	b25b      	sxtb	r3, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 800649a:	7b7b      	ldrb	r3, [r7, #13]
 800649c:	f023 0307 	bic.w	r3, r3, #7
 80064a0:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	785b      	ldrb	r3, [r3, #1]
 80064a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	b25b      	sxtb	r3, r3
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	b25a      	sxtb	r2, r3
 80064b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b25b      	sxtb	r3, r3
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 80064c0:	f107 010c 	add.w	r1, r7, #12
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2202      	movs	r2, #2
 80064c8:	207a      	movs	r0, #122	; 0x7a
 80064ca:	f7fd fdfe 	bl	80040ca <bmi160_set_regs>
 80064ce:	4603      	mov	r3, r0
 80064d0:	73bb      	strb	r3, [r7, #14]

    return rslt;
 80064d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b086      	sub	sp, #24
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80064f2:	f107 0115 	add.w	r1, r7, #21
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	2050      	movs	r0, #80	; 0x50
 80064fc:	f7fd fdb2 	bl	8004064 <bmi160_get_regs>
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d135      	bne.n	8006578 <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b04      	cmp	r3, #4
 8006512:	d114      	bne.n	800653e <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8006514:	7d7b      	ldrb	r3, [r7, #21]
 8006516:	f023 0320 	bic.w	r3, r3, #32
 800651a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	015b      	lsls	r3, r3, #5
 8006528:	b25b      	sxtb	r3, r3
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	b25a      	sxtb	r2, r3
 8006530:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006534:	4313      	orrs	r3, r2
 8006536:	b25b      	sxtb	r3, r3
 8006538:	b2db      	uxtb	r3, r3
 800653a:	757b      	strb	r3, [r7, #21]
 800653c:	e013      	b.n	8006566 <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 800653e:	7d7b      	ldrb	r3, [r7, #21]
 8006540:	f023 0310 	bic.w	r3, r3, #16
 8006544:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	b25b      	sxtb	r3, r3
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	b25a      	sxtb	r2, r3
 800655a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800655e:	4313      	orrs	r3, r2
 8006560:	b25b      	sxtb	r3, r3
 8006562:	b2db      	uxtb	r3, r3
 8006564:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006566:	f107 0115 	add.w	r1, r7, #21
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	2050      	movs	r0, #80	; 0x50
 8006570:	f7fd fdab 	bl	80040ca <bmi160_set_regs>
 8006574:	4603      	mov	r3, r0
 8006576:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006578:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7fe fb1d 	bl	8004bd2 <set_intr_pin_config>
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800659c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11a      	bne.n	80065da <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff fa98 	bl	8005adc <map_feature_interrupt>
 80065ac:	4603      	mov	r3, r0
 80065ae:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80065b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d110      	bne.n	80065da <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	68b8      	ldr	r0, [r7, #8]
 80065bc:	f000 f813 	bl	80065e6 <config_tap_data_src>
 80065c0:	4603      	mov	r3, r0
 80065c2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80065c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d106      	bne.n	80065da <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f841 	bl	8006658 <config_tap_param>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80065da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80065f8:	f107 010d 	add.w	r1, r7, #13
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	2058      	movs	r0, #88	; 0x58
 8006602:	f7fd fd2f 	bl	8004064 <bmi160_get_regs>
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800660a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d11c      	bne.n	800664c <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8006612:	7b7b      	ldrb	r3, [r7, #13]
 8006614:	f023 0308 	bic.w	r3, r3, #8
 8006618:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	785b      	ldrb	r3, [r3, #1]
 800661e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	b25b      	sxtb	r3, r3
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	b25a      	sxtb	r2, r3
 800662e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006632:	4313      	orrs	r3, r2
 8006634:	b25b      	sxtb	r3, r3
 8006636:	b2db      	uxtb	r3, r3
 8006638:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800663a:	f107 010d 	add.w	r1, r7, #13
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2201      	movs	r2, #1
 8006642:	2058      	movs	r0, #88	; 0x58
 8006644:	f7fd fd41 	bl	80040ca <bmi160_set_regs>
 8006648:	4603      	mov	r3, r0
 800664a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800664c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 800666c:	2300      	movs	r3, #0
 800666e:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8006674:	f107 0114 	add.w	r1, r7, #20
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	2063      	movs	r0, #99	; 0x63
 800667e:	f7fd fcf1 	bl	8004064 <bmi160_get_regs>
 8006682:	4603      	mov	r3, r0
 8006684:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8006686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d178      	bne.n	8006780 <config_tap_param+0x128>
    {
        data = data_array[count];
 800668e:	7f3b      	ldrb	r3, [r7, #28]
 8006690:	3320      	adds	r3, #32
 8006692:	443b      	add	r3, r7
 8006694:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006698:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d113      	bne.n	80066ca <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 80066ae:	7fbb      	ldrb	r3, [r7, #30]
 80066b0:	f023 0307 	bic.w	r3, r3, #7
 80066b4:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 80066b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	b25a      	sxtb	r2, r3
 80066c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 80066d6:	7fbb      	ldrb	r3, [r7, #30]
 80066d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066dc:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 80066de:	7ebb      	ldrb	r3, [r7, #26]
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	b25a      	sxtb	r2, r3
 80066ea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b25b      	sxtb	r3, r3
 80066f2:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8006700:	7fbb      	ldrb	r3, [r7, #30]
 8006702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006706:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8006708:	7e7b      	ldrb	r3, [r7, #25]
 800670a:	01db      	lsls	r3, r3, #7
 800670c:	b25a      	sxtb	r2, r3
 800670e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006712:	4313      	orrs	r3, r2
 8006714:	b25b      	sxtb	r3, r3
 8006716:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006718:	7f3b      	ldrb	r3, [r7, #28]
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	773a      	strb	r2, [r7, #28]
 800671e:	3320      	adds	r3, #32
 8006720:	443b      	add	r3, r7
 8006722:	7fba      	ldrb	r2, [r7, #30]
 8006724:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8006728:	7f3b      	ldrb	r3, [r7, #28]
 800672a:	3320      	adds	r3, #32
 800672c:	443b      	add	r3, r7
 800672e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006732:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800673c:	b2db      	uxtb	r3, r3
 800673e:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8006740:	7fbb      	ldrb	r3, [r7, #30]
 8006742:	f023 031f 	bic.w	r3, r3, #31
 8006746:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8006748:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	b25a      	sxtb	r2, r3
 8006752:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006756:	4313      	orrs	r3, r2
 8006758:	b25b      	sxtb	r3, r3
 800675a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 800675c:	7f3b      	ldrb	r3, [r7, #28]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	773a      	strb	r2, [r7, #28]
 8006762:	3320      	adds	r3, #32
 8006764:	443b      	add	r3, r7
 8006766:	7fba      	ldrb	r2, [r7, #30]
 8006768:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 800676c:	7f3b      	ldrb	r3, [r7, #28]
 800676e:	b29a      	uxth	r2, r3
 8006770:	f107 0114 	add.w	r1, r7, #20
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2063      	movs	r0, #99	; 0x63
 8006778:	f7fd fca7 	bl	80040ca <bmi160_set_regs>
 800677c:	4603      	mov	r3, r0
 800677e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006780:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3720      	adds	r7, #32
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800679e:	f107 010d 	add.w	r1, r7, #13
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	2050      	movs	r0, #80	; 0x50
 80067a8:	f7fd fc5c 	bl	8004064 <bmi160_get_regs>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80067b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d11c      	bne.n	80067f2 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 80067b8:	7b7b      	ldrb	r3, [r7, #13]
 80067ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067be:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	789b      	ldrb	r3, [r3, #2]
 80067c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	019b      	lsls	r3, r3, #6
 80067cc:	b25b      	sxtb	r3, r3
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	b25a      	sxtb	r2, r3
 80067d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d8:	4313      	orrs	r3, r2
 80067da:	b25b      	sxtb	r3, r3
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80067e0:	f107 010d 	add.w	r1, r7, #13
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2201      	movs	r2, #1
 80067e8:	2050      	movs	r0, #80	; 0x50
 80067ea:	f7fd fc6e 	bl	80040ca <bmi160_set_regs>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80067f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006810:	2300      	movs	r3, #0
 8006812:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006814:	f107 0108 	add.w	r1, r7, #8
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2202      	movs	r2, #2
 800681c:	2065      	movs	r0, #101	; 0x65
 800681e:	f7fd fc21 	bl	8004064 <bmi160_get_regs>
 8006822:	4603      	mov	r3, r0
 8006824:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d17a      	bne.n	8006924 <config_orient_int_settg+0x126>
    {
        data = data_array[0];
 800682e:	7a3b      	ldrb	r3, [r7, #8]
 8006830:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	f023 0303 	bic.w	r3, r3, #3
 8006838:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006842:	b2db      	uxtb	r3, r3
 8006844:	b25b      	sxtb	r3, r3
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	b25a      	sxtb	r2, r3
 800684c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006850:	4313      	orrs	r3, r2
 8006852:	b25b      	sxtb	r3, r3
 8006854:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	f023 030c 	bic.w	r3, r3, #12
 800685c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006866:	b2db      	uxtb	r3, r3
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	b25b      	sxtb	r3, r3
 800686c:	f003 030c 	and.w	r3, r3, #12
 8006870:	b25a      	sxtb	r2, r3
 8006872:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006876:	4313      	orrs	r3, r2
 8006878:	b25b      	sxtb	r3, r3
 800687a:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800688c:	b2db      	uxtb	r3, r3
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	b25a      	sxtb	r2, r3
 8006892:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006896:	4313      	orrs	r3, r2
 8006898:	b25b      	sxtb	r3, r3
 800689a:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80068a0:	7a7b      	ldrb	r3, [r7, #9]
 80068a2:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80068aa:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068bc:	b25a      	sxtb	r2, r3
 80068be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	b25b      	sxtb	r3, r3
 80068c6:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ce:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	019b      	lsls	r3, r3, #6
 80068dc:	b25b      	sxtb	r3, r3
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	b25a      	sxtb	r2, r3
 80068e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b25b      	sxtb	r3, r3
 80068ec:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f4:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	785b      	ldrb	r3, [r3, #1]
 80068fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	01db      	lsls	r3, r3, #7
 8006902:	b25a      	sxtb	r2, r3
 8006904:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006908:	4313      	orrs	r3, r2
 800690a:	b25b      	sxtb	r3, r3
 800690c:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006912:	f107 0108 	add.w	r1, r7, #8
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2202      	movs	r2, #2
 800691a:	2065      	movs	r0, #101	; 0x65
 800691c:	f7fd fbd5 	bl	80040ca <bmi160_set_regs>
 8006920:	4603      	mov	r3, r0
 8006922:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006924:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006942:	f107 010d 	add.w	r1, r7, #13
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2201      	movs	r2, #1
 800694a:	2050      	movs	r0, #80	; 0x50
 800694c:	f7fd fb8a 	bl	8004064 <bmi160_get_regs>
 8006950:	4603      	mov	r3, r0
 8006952:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d119      	bne.n	8006990 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 800695c:	7b7b      	ldrb	r3, [r7, #13]
 800695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006962:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800696c:	b2db      	uxtb	r3, r3
 800696e:	01db      	lsls	r3, r3, #7
 8006970:	b25a      	sxtb	r2, r3
 8006972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006976:	4313      	orrs	r3, r2
 8006978:	b25b      	sxtb	r3, r3
 800697a:	b2db      	uxtb	r3, r3
 800697c:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800697e:	f107 010d 	add.w	r1, r7, #13
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2201      	movs	r2, #1
 8006986:	2050      	movs	r0, #80	; 0x50
 8006988:	f7fd fb9f 	bl	80040ca <bmi160_set_regs>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 80069ae:	2300      	movs	r3, #0
 80069b0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 80069b2:	f107 0108 	add.w	r1, r7, #8
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2202      	movs	r2, #2
 80069ba:	2067      	movs	r0, #103	; 0x67
 80069bc:	f7fd fb52 	bl	8004064 <bmi160_get_regs>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80069c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d147      	bne.n	8006a5c <config_flat_int_settg+0xc0>
    {
        data = data_array[0];
 80069cc:	7a3b      	ldrb	r3, [r7, #8]
 80069ce:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069d6:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069e8:	b25a      	sxtb	r2, r3
 80069ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80069f8:	7a7b      	ldrb	r3, [r7, #9]
 80069fa:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006a02:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	b25b      	sxtb	r3, r3
 8006a12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a16:	b25a      	sxtb	r2, r3
 8006a18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	b25b      	sxtb	r3, r3
 8006a20:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	f023 0307 	bic.w	r3, r3, #7
 8006a28:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	b25b      	sxtb	r3, r3
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	b25a      	sxtb	r2, r3
 8006a3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	b25b      	sxtb	r3, r3
 8006a44:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8006a4a:	f107 0108 	add.w	r1, r7, #8
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2202      	movs	r2, #2
 8006a52:	2067      	movs	r0, #103	; 0x67
 8006a54:	f7fd fb39 	bl	80040ca <bmi160_set_regs>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006a7a:	f107 010d 	add.w	r1, r7, #13
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2201      	movs	r2, #1
 8006a82:	2051      	movs	r0, #81	; 0x51
 8006a84:	f7fd faee 	bl	8004064 <bmi160_get_regs>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11c      	bne.n	8006ace <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 8006a94:	7b7b      	ldrb	r3, [r7, #13]
 8006a96:	f023 0308 	bic.w	r3, r3, #8
 8006a9a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	789b      	ldrb	r3, [r3, #2]
 8006aa0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	b25b      	sxtb	r3, r3
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	b25a      	sxtb	r2, r3
 8006ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	b25b      	sxtb	r3, r3
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006abc:	f107 010d 	add.w	r1, r7, #13
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	2051      	movs	r0, #81	; 0x51
 8006ac6:	f7fd fb00 	bl	80040ca <bmi160_set_regs>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006aec:	f107 010d 	add.w	r1, r7, #13
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2201      	movs	r2, #1
 8006af4:	2058      	movs	r0, #88	; 0x58
 8006af6:	f7fd fab5 	bl	8004064 <bmi160_get_regs>
 8006afa:	4603      	mov	r3, r0
 8006afc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d119      	bne.n	8006b3a <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8006b06:	7b7b      	ldrb	r3, [r7, #13]
 8006b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	789b      	ldrb	r3, [r3, #2]
 8006b12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	01db      	lsls	r3, r3, #7
 8006b1a:	b25a      	sxtb	r2, r3
 8006b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	b25b      	sxtb	r3, r3
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006b28:	f107 010d 	add.w	r1, r7, #13
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	2058      	movs	r0, #88	; 0x58
 8006b32:	f7fd faca 	bl	80040ca <bmi160_set_regs>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8006b56:	4a29      	ldr	r2, [pc, #164]	; (8006bfc <config_low_g_int_settg+0xb4>)
 8006b58:	f107 0308 	add.w	r3, r7, #8
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	4611      	mov	r1, r2
 8006b60:	8019      	strh	r1, [r3, #0]
 8006b62:	3302      	adds	r3, #2
 8006b64:	0c12      	lsrs	r2, r2, #16
 8006b66:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8006b68:	f107 0308 	add.w	r3, r7, #8
 8006b6c:	1c99      	adds	r1, r3, #2
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2201      	movs	r2, #1
 8006b72:	205c      	movs	r0, #92	; 0x5c
 8006b74:	f7fd fa76 	bl	8004064 <bmi160_get_regs>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d135      	bne.n	8006bf0 <config_low_g_int_settg+0xa8>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 8006b84:	7abb      	ldrb	r3, [r7, #10]
 8006b86:	f023 0303 	bic.w	r3, r3, #3
 8006b8a:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	789b      	ldrb	r3, [r3, #2]
 8006b90:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	b25b      	sxtb	r3, r3
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	b25a      	sxtb	r2, r3
 8006b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	b25b      	sxtb	r3, r3
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 8006baa:	7abb      	ldrb	r3, [r7, #10]
 8006bac:	f023 0304 	bic.w	r3, r3, #4
 8006bb0:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	789b      	ldrb	r3, [r3, #2]
 8006bb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	b25a      	sxtb	r2, r3
 8006bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8006bde:	f107 0108 	add.w	r1, r7, #8
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2203      	movs	r2, #3
 8006be6:	205a      	movs	r0, #90	; 0x5a
 8006be8:	f7fd fa6f 	bl	80040ca <bmi160_set_regs>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	08012b34 	.word	0x08012b34

08006c00 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006c12:	f107 010d 	add.w	r1, r7, #13
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	2051      	movs	r0, #81	; 0x51
 8006c1c:	f7fd fa22 	bl	8004064 <bmi160_get_regs>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d143      	bne.n	8006cb4 <enable_high_g_int+0xb4>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8006c2c:	7b7b      	ldrb	r3, [r7, #13]
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	b25a      	sxtb	r2, r3
 8006c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 8006c52:	7b7b      	ldrb	r3, [r7, #13]
 8006c54:	f023 0302 	bic.w	r3, r3, #2
 8006c58:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	b25b      	sxtb	r3, r3
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	b25a      	sxtb	r2, r3
 8006c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8006c7a:	7b7b      	ldrb	r3, [r7, #13]
 8006c7c:	f023 0304 	bic.w	r3, r3, #4
 8006c80:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	b25b      	sxtb	r3, r3
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	b25a      	sxtb	r2, r3
 8006c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006ca2:	f107 010d 	add.w	r1, r7, #13
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	2051      	movs	r0, #81	; 0x51
 8006cac:	f7fd fa0d 	bl	80040ca <bmi160_set_regs>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006cd2:	f107 010d 	add.w	r1, r7, #13
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	2058      	movs	r0, #88	; 0x58
 8006cdc:	f7fd f9c2 	bl	8004064 <bmi160_get_regs>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d119      	bne.n	8006d20 <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8006cec:	7b7b      	ldrb	r3, [r7, #13]
 8006cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	01db      	lsls	r3, r3, #7
 8006d00:	b25a      	sxtb	r2, r3
 8006d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006d0e:	f107 010d 	add.w	r1, r7, #13
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2201      	movs	r2, #1
 8006d16:	2058      	movs	r0, #88	; 0x58
 8006d18:	f7fd f9d7 	bl	80040ca <bmi160_set_regs>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8006d3a:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <config_high_g_int_settg+0x88>)
 8006d3c:	f107 0308 	add.w	r3, r7, #8
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	4611      	mov	r1, r2
 8006d44:	8019      	strh	r1, [r3, #0]
 8006d46:	3302      	adds	r3, #2
 8006d48:	0c12      	lsrs	r2, r2, #16
 8006d4a:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	205c      	movs	r0, #92	; 0x5c
 8006d56:	f7fd f985 	bl	8004064 <bmi160_get_regs>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d11f      	bne.n	8006da6 <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8006d66:	7a3b      	ldrb	r3, [r7, #8]
 8006d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d6c:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	019b      	lsls	r3, r3, #6
 8006d7a:	b25a      	sxtb	r2, r3
 8006d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	789b      	ldrb	r3, [r3, #2]
 8006d8c:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8006d94:	f107 0108 	add.w	r1, r7, #8
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	205c      	movs	r0, #92	; 0x5c
 8006d9e:	f7fd f994 	bl	80040ca <bmi160_set_regs>
 8006da2:	4603      	mov	r3, r0
 8006da4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	08012b34 	.word	0x08012b34

08006db8 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8006dca:	f107 010f 	add.w	r1, r7, #15
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	2053      	movs	r0, #83	; 0x53
 8006dd4:	f7fd f946 	bl	8004064 <bmi160_get_regs>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f040 80ad 	bne.w	8006f40 <config_int_out_ctrl+0x188>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3302      	adds	r3, #2
 8006dea:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d14f      	bne.n	8006e94 <config_int_out_ctrl+0xdc>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	f023 0308 	bic.w	r3, r3, #8
 8006dfa:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	b25b      	sxtb	r3, r3
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	b25a      	sxtb	r2, r3
 8006e10:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	b25b      	sxtb	r3, r3
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	f023 0304 	bic.w	r3, r3, #4
 8006e22:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	b25b      	sxtb	r3, r3
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	b25a      	sxtb	r2, r3
 8006e38:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	b25b      	sxtb	r3, r3
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	f023 0302 	bic.w	r3, r3, #2
 8006e4a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	b25a      	sxtb	r2, r3
 8006e60:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	f023 0301 	bic.w	r3, r3, #1
 8006e72:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	b25a      	sxtb	r2, r3
 8006e86:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b25b      	sxtb	r3, r3
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	73fb      	strb	r3, [r7, #15]
 8006e92:	e04c      	b.n	8006f2e <config_int_out_ctrl+0x176>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	01db      	lsls	r3, r3, #7
 8006ea8:	b25a      	sxtb	r2, r3
 8006eaa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	b25b      	sxtb	r3, r3
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ebc:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	019b      	lsls	r3, r3, #6
 8006eca:	b25b      	sxtb	r3, r3
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	b25a      	sxtb	r2, r3
 8006ed2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	b25b      	sxtb	r3, r3
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	f023 0320 	bic.w	r3, r3, #32
 8006ee4:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	015b      	lsls	r3, r3, #5
 8006ef2:	b25b      	sxtb	r3, r3
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	b25a      	sxtb	r2, r3
 8006efa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	b25b      	sxtb	r3, r3
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	f023 0310 	bic.w	r3, r3, #16
 8006f0c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	b25b      	sxtb	r3, r3
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	b25a      	sxtb	r2, r3
 8006f22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8006f2e:	f107 010f 	add.w	r1, r7, #15
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2201      	movs	r2, #1
 8006f36:	2053      	movs	r0, #83	; 0x53
 8006f38:	f7fd f8c7 	bl	80040ca <bmi160_set_regs>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8006f5e:	f107 010f 	add.w	r1, r7, #15
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2201      	movs	r2, #1
 8006f66:	2054      	movs	r0, #84	; 0x54
 8006f68:	f7fd f87c 	bl	8004064 <bmi160_get_regs>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d14b      	bne.n	8007010 <config_int_latch+0xc4>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3302      	adds	r3, #2
 8006f7c:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d114      	bne.n	8006fb0 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	f023 0310 	bic.w	r3, r3, #16
 8006f8c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	b25b      	sxtb	r3, r3
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	b25a      	sxtb	r2, r3
 8006fa2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b25b      	sxtb	r3, r3
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	73fb      	strb	r3, [r7, #15]
 8006fae:	e013      	b.n	8006fd8 <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	f023 0320 	bic.w	r3, r3, #32
 8006fb6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	015b      	lsls	r3, r3, #5
 8006fc4:	b25b      	sxtb	r3, r3
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	b25a      	sxtb	r2, r3
 8006fcc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	b25b      	sxtb	r3, r3
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	f023 030f 	bic.w	r3, r3, #15
 8006fde:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	b25a      	sxtb	r2, r3
 8006ff2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	b25b      	sxtb	r3, r3
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8006ffe:	f107 010f 	add.w	r1, r7, #15
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2201      	movs	r2, #1
 8007006:	2054      	movs	r0, #84	; 0x54
 8007008:	f7fd f85f 	bl	80040ca <bmi160_set_regs>
 800700c:	4603      	mov	r3, r0
 800700e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007010:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <set_fifo_full_int+0x1c>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	2b00      	cmp	r3, #0
 8007036:	d102      	bne.n	800703e <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8007038:	23ff      	movs	r3, #255	; 0xff
 800703a:	73fb      	strb	r3, [r7, #15]
 800703c:	e019      	b.n	8007072 <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f81c 	bl	800707e <enable_fifo_full_int>
 8007046:	4603      	mov	r3, r0
 8007048:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800704a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10f      	bne.n	8007072 <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fd fdbc 	bl	8004bd2 <set_intr_pin_config>
 800705a:	4603      	mov	r3, r0
 800705c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800705e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d105      	bne.n	8007072 <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7fe fdd1 	bl	8005c10 <map_hardware_interrupt>
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8007072:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800708c:	f107 010e 	add.w	r1, r7, #14
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2201      	movs	r2, #1
 8007094:	2051      	movs	r0, #81	; 0x51
 8007096:	f7fc ffe5 	bl	8004064 <bmi160_get_regs>
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800709e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d11b      	bne.n	80070de <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	f023 0320 	bic.w	r3, r3, #32
 80070ae:	b25a      	sxtb	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7a1b      	ldrb	r3, [r3, #8]
 80070b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	015b      	lsls	r3, r3, #5
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	b25b      	sxtb	r3, r3
 80070c4:	4313      	orrs	r3, r2
 80070c6:	b25b      	sxtb	r3, r3
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80070cc:	f107 010e 	add.w	r1, r7, #14
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2201      	movs	r2, #1
 80070d4:	2051      	movs	r0, #81	; 0x51
 80070d6:	f7fc fff8 	bl	80040ca <bmi160_set_regs>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80070de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <set_fifo_watermark_int+0x1c>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d102      	bne.n	800710c <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8007106:	23ff      	movs	r3, #255	; 0xff
 8007108:	73fb      	strb	r3, [r7, #15]
 800710a:	e019      	b.n	8007140 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f81c 	bl	800714c <enable_fifo_wtm_int>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10f      	bne.n	8007140 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fd fd55 	bl	8004bd2 <set_intr_pin_config>
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800712c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fe fd6a 	bl	8005c10 <map_hardware_interrupt>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8007140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800715a:	f107 010e 	add.w	r1, r7, #14
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2201      	movs	r2, #1
 8007162:	2051      	movs	r0, #81	; 0x51
 8007164:	f7fc ff7e 	bl	8004064 <bmi160_get_regs>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800716c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11b      	bne.n	80071ac <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	b25b      	sxtb	r3, r3
 8007178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717c:	b25a      	sxtb	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7a1b      	ldrb	r3, [r3, #8]
 8007182:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	019b      	lsls	r3, r3, #6
 800718a:	b25b      	sxtb	r3, r3
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	b25b      	sxtb	r3, r3
 8007192:	4313      	orrs	r3, r2
 8007194:	b25b      	sxtb	r3, r3
 8007196:	b2db      	uxtb	r3, r3
 8007198:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800719a:	f107 010e 	add.w	r1, r7, #14
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2201      	movs	r2, #1
 80071a2:	2051      	movs	r0, #81	; 0x51
 80071a4:	f7fc ff91 	bl	80040ca <bmi160_set_regs>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80071ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 80071c2:	f107 010e 	add.w	r1, r7, #14
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2201      	movs	r2, #1
 80071ca:	201b      	movs	r0, #27
 80071cc:	f7fc ff4a 	bl	8004064 <bmi160_get_regs>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80071d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d107      	bne.n	80071ec <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	10db      	asrs	r3, r3, #3
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80071ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8007202:	6838      	ldr	r0, [r7, #0]
 8007204:	f7fd fd00 	bl	8004c08 <null_ptr_check>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 800720c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8007214:	23ff      	movs	r3, #255	; 0xff
 8007216:	73fb      	strb	r3, [r7, #15]
 8007218:	e032      	b.n	8007280 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 800721a:	f107 010e 	add.w	r1, r7, #14
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2201      	movs	r2, #1
 8007222:	2077      	movs	r0, #119	; 0x77
 8007224:	f7fc ff1e 	bl	8004064 <bmi160_get_regs>
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800722c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d125      	bne.n	8007280 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	b25b      	sxtb	r3, r3
 8007238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723c:	b25a      	sxtb	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	795b      	ldrb	r3, [r3, #5]
 8007242:	01db      	lsls	r3, r3, #7
 8007244:	b25b      	sxtb	r3, r3
 8007246:	4313      	orrs	r3, r2
 8007248:	b25b      	sxtb	r3, r3
 800724a:	b2db      	uxtb	r3, r3
 800724c:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	b25b      	sxtb	r3, r3
 8007252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007256:	b25a      	sxtb	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	791b      	ldrb	r3, [r3, #4]
 800725c:	019b      	lsls	r3, r3, #6
 800725e:	b25b      	sxtb	r3, r3
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	b25b      	sxtb	r3, r3
 8007266:	4313      	orrs	r3, r2
 8007268:	b25b      	sxtb	r3, r3
 800726a:	b2db      	uxtb	r3, r3
 800726c:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 800726e:	f107 010e 	add.w	r1, r7, #14
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2201      	movs	r2, #1
 8007276:	2077      	movs	r0, #119	; 0x77
 8007278:	f7fc ff27 	bl	80040ca <bmi160_set_regs>
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8007280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 8007296:	2301      	movs	r3, #1
 8007298:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 800729a:	2303      	movs	r3, #3
 800729c:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 80072a2:	f107 011c 	add.w	r1, r7, #28
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2201      	movs	r2, #1
 80072aa:	207e      	movs	r0, #126	; 0x7e
 80072ac:	f7fc ff0d 	bl	80040ca <bmi160_set_regs>
 80072b0:	4603      	mov	r3, r0
 80072b2:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80072b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d141      	bne.n	8007340 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 80072bc:	f107 031d 	add.w	r3, r7, #29
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff ff78 	bl	80071b8 <get_foc_status>
 80072c8:	4603      	mov	r3, r0
 80072ca:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 80072cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d112      	bne.n	80072fa <trigger_foc+0x6e>
 80072d4:	7f7b      	ldrb	r3, [r7, #29]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d025      	beq.n	8007326 <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80072da:	e00e      	b.n	80072fa <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	2019      	movs	r0, #25
 80072e2:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 80072e4:	f107 031d 	add.w	r3, r7, #29
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff ff64 	bl	80071b8 <get_foc_status>
 80072f0:	4603      	mov	r3, r0
 80072f2:	77fb      	strb	r3, [r7, #31]
                timeout++;
 80072f4:	7fbb      	ldrb	r3, [r7, #30]
 80072f6:	3301      	adds	r3, #1
 80072f8:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80072fa:	7f7b      	ldrb	r3, [r7, #29]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d002      	beq.n	8007306 <trigger_foc+0x7a>
 8007300:	7fbb      	ldrb	r3, [r7, #30]
 8007302:	2b1f      	cmp	r3, #31
 8007304:	d9ea      	bls.n	80072dc <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 8007306:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <trigger_foc+0x96>
 800730e:	7f7b      	ldrb	r3, [r7, #29]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d106      	bne.n	8007322 <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fd f991 	bl	800463e <bmi160_get_offsets>
 800731c:	4603      	mov	r3, r0
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e001      	b.n	8007326 <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 8007322:	23f5      	movs	r3, #245	; 0xf5
 8007324:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 8007326:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d108      	bne.n	8007340 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 800732e:	f107 0108 	add.w	r1, r7, #8
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2214      	movs	r2, #20
 8007336:	200c      	movs	r0, #12
 8007338:	f7fc fe94 	bl	8004064 <bmi160_get_regs>
 800733c:	4603      	mov	r3, r0
 800733e:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8007340:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3720      	adds	r7, #32
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8007354:	f000 f970 	bl	8007638 <set_bmi160_Ares>
	set_bmi160_Gres();
 8007358:	f000 f99a 	bl	8007690 <set_bmi160_Gres>
	get_bmi160_Ares();
 800735c:	f000 f9ca 	bl	80076f4 <get_bmi160_Ares>
	get_bmi160_Gres();
 8007360:	f000 f9fe 	bl	8007760 <get_bmi160_Gres>

    sensor.id = 0;
 8007364:	4b52      	ldr	r3, [pc, #328]	; (80074b0 <BMI160_init+0x164>)
 8007366:	2200      	movs	r2, #0
 8007368:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 800736a:	4b51      	ldr	r3, [pc, #324]	; (80074b0 <BMI160_init+0x164>)
 800736c:	2200      	movs	r2, #0
 800736e:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8007370:	4b4f      	ldr	r3, [pc, #316]	; (80074b0 <BMI160_init+0x164>)
 8007372:	4a50      	ldr	r2, [pc, #320]	; (80074b4 <BMI160_init+0x168>)
 8007374:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 8007376:	4b4e      	ldr	r3, [pc, #312]	; (80074b0 <BMI160_init+0x164>)
 8007378:	4a4f      	ldr	r2, [pc, #316]	; (80074b8 <BMI160_init+0x16c>)
 800737a:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 800737c:	4b4c      	ldr	r3, [pc, #304]	; (80074b0 <BMI160_init+0x164>)
 800737e:	4a4f      	ldr	r2, [pc, #316]	; (80074bc <BMI160_init+0x170>)
 8007380:	625a      	str	r2, [r3, #36]	; 0x24
    sensor.read_write_len = 32;
 8007382:	4b4b      	ldr	r3, [pc, #300]	; (80074b0 <BMI160_init+0x164>)
 8007384:	2220      	movs	r2, #32
 8007386:	851a      	strh	r2, [r3, #40]	; 0x28

    rslt = bmi160_soft_reset(&sensor);
 8007388:	4849      	ldr	r0, [pc, #292]	; (80074b0 <BMI160_init+0x164>)
 800738a:	f7fc ff4f 	bl	800422c <bmi160_soft_reset>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 8007392:	4b47      	ldr	r3, [pc, #284]	; (80074b0 <BMI160_init+0x164>)
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	20c8      	movs	r0, #200	; 0xc8
 8007398:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 800739a:	4845      	ldr	r0, [pc, #276]	; (80074b0 <BMI160_init+0x164>)
 800739c:	f7fc fef8 	bl	8004190 <bmi160_init>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 80073ac:	2301      	movs	r3, #1
 80073ae:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 80073b0:	89ba      	ldrh	r2, [r7, #12]
 80073b2:	f107 010b 	add.w	r1, r7, #11
 80073b6:	7bb8      	ldrb	r0, [r7, #14]
 80073b8:	4b3d      	ldr	r3, [pc, #244]	; (80074b0 <BMI160_init+0x164>)
 80073ba:	f7fc fe53 	bl	8004064 <bmi160_get_regs>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ; //BMI160_ACCEL_ODR_400HZ
 80073c2:	4b3b      	ldr	r3, [pc, #236]	; (80074b0 <BMI160_init+0x164>)
 80073c4:	220c      	movs	r2, #12
 80073c6:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 80073c8:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <BMI160_init+0x164>)
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2064      	movs	r0, #100	; 0x64
 80073ce:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 80073d0:	4b3b      	ldr	r3, [pc, #236]	; (80074c0 <BMI160_init+0x174>)
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <BMI160_init+0x164>)
 80073d6:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 80073d8:	4b35      	ldr	r3, [pc, #212]	; (80074b0 <BMI160_init+0x164>)
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2064      	movs	r0, #100	; 0x64
 80073de:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80073e0:	4b33      	ldr	r3, [pc, #204]	; (80074b0 <BMI160_init+0x164>)
 80073e2:	2211      	movs	r2, #17
 80073e4:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 80073e6:	4b32      	ldr	r3, [pc, #200]	; (80074b0 <BMI160_init+0x164>)
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	2064      	movs	r0, #100	; 0x64
 80073ec:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80073ee:	4b30      	ldr	r3, [pc, #192]	; (80074b0 <BMI160_init+0x164>)
 80073f0:	2202      	movs	r2, #2
 80073f2:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 80073f4:	4b2e      	ldr	r3, [pc, #184]	; (80074b0 <BMI160_init+0x164>)
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2064      	movs	r0, #100	; 0x64
 80073fa:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_1600HZ; //BMI160_GYRO_ODR_400HZ
 80073fc:	4b2c      	ldr	r3, [pc, #176]	; (80074b0 <BMI160_init+0x164>)
 80073fe:	220c      	movs	r2, #12
 8007400:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8007402:	4b2b      	ldr	r3, [pc, #172]	; (80074b0 <BMI160_init+0x164>)
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	2064      	movs	r0, #100	; 0x64
 8007408:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 800740a:	4b2e      	ldr	r3, [pc, #184]	; (80074c4 <BMI160_init+0x178>)
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	4b28      	ldr	r3, [pc, #160]	; (80074b0 <BMI160_init+0x164>)
 8007410:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8007412:	4b27      	ldr	r3, [pc, #156]	; (80074b0 <BMI160_init+0x164>)
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	2064      	movs	r0, #100	; 0x64
 8007418:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800741a:	4b25      	ldr	r3, [pc, #148]	; (80074b0 <BMI160_init+0x164>)
 800741c:	2215      	movs	r2, #21
 800741e:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8007420:	4b23      	ldr	r3, [pc, #140]	; (80074b0 <BMI160_init+0x164>)
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	2064      	movs	r0, #100	; 0x64
 8007426:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8007428:	4b21      	ldr	r3, [pc, #132]	; (80074b0 <BMI160_init+0x164>)
 800742a:	2202      	movs	r2, #2
 800742c:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 800742e:	4b20      	ldr	r3, [pc, #128]	; (80074b0 <BMI160_init+0x164>)
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2064      	movs	r0, #100	; 0x64
 8007434:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8007436:	481e      	ldr	r0, [pc, #120]	; (80074b0 <BMI160_init+0x164>)
 8007438:	f7fc ff33 	bl	80042a2 <bmi160_set_sens_conf>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8007440:	f000 f844 	bl	80074cc <start_foc>
 8007444:	4603      	mov	r3, r0
 8007446:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8007448:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <BMI160_init+0x17c>)
 800744a:	2201      	movs	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 800744e:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <BMI160_init+0x17c>)
 8007450:	220a      	movs	r2, #10
 8007452:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8007454:	4a1c      	ldr	r2, [pc, #112]	; (80074c8 <BMI160_init+0x17c>)
 8007456:	7893      	ldrb	r3, [r2, #2]
 8007458:	f043 0301 	orr.w	r3, r3, #1
 800745c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 800745e:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <BMI160_init+0x17c>)
 8007460:	7893      	ldrb	r3, [r2, #2]
 8007462:	f36f 0341 	bfc	r3, #1, #1
 8007466:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8007468:	4a17      	ldr	r2, [pc, #92]	; (80074c8 <BMI160_init+0x17c>)
 800746a:	7893      	ldrb	r3, [r2, #2]
 800746c:	f36f 0382 	bfc	r3, #2, #1
 8007470:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8007472:	4a15      	ldr	r2, [pc, #84]	; (80074c8 <BMI160_init+0x17c>)
 8007474:	7893      	ldrb	r3, [r2, #2]
 8007476:	f043 0308 	orr.w	r3, r3, #8
 800747a:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 800747c:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <BMI160_init+0x17c>)
 800747e:	7893      	ldrb	r3, [r2, #2]
 8007480:	f36f 1304 	bfc	r3, #4, #1
 8007484:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8007486:	4a10      	ldr	r2, [pc, #64]	; (80074c8 <BMI160_init+0x17c>)
 8007488:	8853      	ldrh	r3, [r2, #2]
 800748a:	f36f 1348 	bfc	r3, #5, #4
 800748e:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8007490:	4907      	ldr	r1, [pc, #28]	; (80074b0 <BMI160_init+0x164>)
 8007492:	480d      	ldr	r0, [pc, #52]	; (80074c8 <BMI160_init+0x17c>)
 8007494:	f7fc ffc6 	bl	8004424 <bmi160_set_int_config>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7bfa      	ldrb	r2, [r7, #15]
 80074a0:	761a      	strb	r2, [r3, #24]
    return rslt;
 80074a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20000224 	.word	0x20000224
 80074b4:	080077e9 	.word	0x080077e9
 80074b8:	0800782d 	.word	0x0800782d
 80074bc:	08008e21 	.word	0x08008e21
 80074c0:	20000286 	.word	0x20000286
 80074c4:	20000287 	.word	0x20000287
 80074c8:	2000027c 	.word	0x2000027c

080074cc <start_foc>:

int8_t start_foc()
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 80074d6:	4b13      	ldr	r3, [pc, #76]	; (8007524 <start_foc+0x58>)
 80074d8:	2201      	movs	r2, #1
 80074da:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 80074dc:	4b11      	ldr	r3, [pc, #68]	; (8007524 <start_foc+0x58>)
 80074de:	2203      	movs	r2, #3
 80074e0:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 80074e2:	4b10      	ldr	r3, [pc, #64]	; (8007524 <start_foc+0x58>)
 80074e4:	2203      	movs	r2, #3
 80074e6:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 80074e8:	4b0e      	ldr	r3, [pc, #56]	; (8007524 <start_foc+0x58>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 80074ee:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <start_foc+0x5c>)
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2064      	movs	r0, #100	; 0x64
 80074f4:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <start_foc+0x58>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 80074fc:	4b09      	ldr	r3, [pc, #36]	; (8007524 <start_foc+0x58>)
 80074fe:	2201      	movs	r2, #1
 8007500:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <start_foc+0x5c>)
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	2064      	movs	r0, #100	; 0x64
 8007508:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 800750a:	4a07      	ldr	r2, [pc, #28]	; (8007528 <start_foc+0x5c>)
 800750c:	4907      	ldr	r1, [pc, #28]	; (800752c <start_foc+0x60>)
 800750e:	4805      	ldr	r0, [pc, #20]	; (8007524 <start_foc+0x58>)
 8007510:	f7fd f814 	bl	800453c <bmi160_start_foc>
 8007514:	4603      	mov	r3, r0
 8007516:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8007518:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000268 	.word	0x20000268
 8007528:	20000224 	.word	0x20000224
 800752c:	20000270 	.word	0x20000270

08007530 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	; 0x28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 8007538:	4b3a      	ldr	r3, [pc, #232]	; (8007624 <bmi160ReadAccelGyro+0xf4>)
 800753a:	4a3b      	ldr	r2, [pc, #236]	; (8007628 <bmi160ReadAccelGyro+0xf8>)
 800753c:	493b      	ldr	r1, [pc, #236]	; (800762c <bmi160ReadAccelGyro+0xfc>)
 800753e:	2003      	movs	r0, #3
 8007540:	f7fc ff09 	bl	8004356 <bmi160_get_sensor_data>
 8007544:	4603      	mov	r3, r0
 8007546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	ax = (float)accel.x / bmi160_aRes;
 800754a:	4b38      	ldr	r3, [pc, #224]	; (800762c <bmi160ReadAccelGyro+0xfc>)
 800754c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007558:	4b35      	ldr	r3, [pc, #212]	; (8007630 <bmi160ReadAccelGyro+0x100>)
 800755a:	ed93 7a00 	vldr	s14, [r3]
 800755e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007562:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 8007566:	4b31      	ldr	r3, [pc, #196]	; (800762c <bmi160ReadAccelGyro+0xfc>)
 8007568:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007574:	4b2e      	ldr	r3, [pc, #184]	; (8007630 <bmi160ReadAccelGyro+0x100>)
 8007576:	ed93 7a00 	vldr	s14, [r3]
 800757a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 8007582:	4b2a      	ldr	r3, [pc, #168]	; (800762c <bmi160ReadAccelGyro+0xfc>)
 8007584:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007590:	4b27      	ldr	r3, [pc, #156]	; (8007630 <bmi160ReadAccelGyro+0x100>)
 8007592:	ed93 7a00 	vldr	s14, [r3]
 8007596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759a:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 800759e:	4b22      	ldr	r3, [pc, #136]	; (8007628 <bmi160ReadAccelGyro+0xf8>)
 80075a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80075ac:	4b21      	ldr	r3, [pc, #132]	; (8007634 <bmi160ReadAccelGyro+0x104>)
 80075ae:	ed93 7a00 	vldr	s14, [r3]
 80075b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b6:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 80075ba:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <bmi160ReadAccelGyro+0xf8>)
 80075bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80075c8:	4b1a      	ldr	r3, [pc, #104]	; (8007634 <bmi160ReadAccelGyro+0x104>)
 80075ca:	ed93 7a00 	vldr	s14, [r3]
 80075ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d2:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <bmi160ReadAccelGyro+0xf8>)
 80075d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80075e4:	4b13      	ldr	r3, [pc, #76]	; (8007634 <bmi160ReadAccelGyro+0x104>)
 80075e6:	ed93 7a00 	vldr	s14, [r3]
 80075ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ee:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Accel_f32[0] = ax;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a3a      	ldr	r2, [r7, #32]
 80075f6:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Accel_f32[1] = ay;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Accel_f32[2] = az;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gyro_f32[0] = gx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gyro_f32[1] = gy;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gyro_f32[2] = gz;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	615a      	str	r2, [r3, #20]

	return rslt;
 8007616:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800761a:	4618      	mov	r0, r3
 800761c:	3728      	adds	r7, #40	; 0x28
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000224 	.word	0x20000224
 8007628:	2000025c 	.word	0x2000025c
 800762c:	20000250 	.word	0x20000250
 8007630:	20000288 	.word	0x20000288
 8007634:	2000028c 	.word	0x2000028c

08007638 <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 800763c:	4b12      	ldr	r3, [pc, #72]	; (8007688 <set_bmi160_Ares+0x50>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	3b01      	subs	r3, #1
 8007642:	2b03      	cmp	r3, #3
 8007644:	d81a      	bhi.n	800767c <set_bmi160_Ares+0x44>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <set_bmi160_Ares+0x14>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007665 	.word	0x08007665
 8007654:	0800766d 	.word	0x0800766d
 8007658:	08007675 	.word	0x08007675
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 800765c:	4b0b      	ldr	r3, [pc, #44]	; (800768c <set_bmi160_Ares+0x54>)
 800765e:	2203      	movs	r2, #3
 8007660:	701a      	strb	r2, [r3, #0]
			break;
 8007662:	e00b      	b.n	800767c <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <set_bmi160_Ares+0x54>)
 8007666:	2205      	movs	r2, #5
 8007668:	701a      	strb	r2, [r3, #0]
			break;
 800766a:	e007      	b.n	800767c <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 800766c:	4b07      	ldr	r3, [pc, #28]	; (800768c <set_bmi160_Ares+0x54>)
 800766e:	2208      	movs	r2, #8
 8007670:	701a      	strb	r2, [r3, #0]
			break;
 8007672:	e003      	b.n	800767c <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <set_bmi160_Ares+0x54>)
 8007676:	220c      	movs	r2, #12
 8007678:	701a      	strb	r2, [r3, #0]
			break;
 800767a:	bf00      	nop
	}
}
 800767c:	bf00      	nop
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000018 	.word	0x20000018
 800768c:	20000286 	.word	0x20000286

08007690 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8007694:	4b15      	ldr	r3, [pc, #84]	; (80076ec <set_bmi160_Gres+0x5c>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	3b01      	subs	r3, #1
 800769a:	2b04      	cmp	r3, #4
 800769c:	d820      	bhi.n	80076e0 <set_bmi160_Gres+0x50>
 800769e:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <set_bmi160_Gres+0x14>)
 80076a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a4:	080076b9 	.word	0x080076b9
 80076a8:	080076c1 	.word	0x080076c1
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076d1 	.word	0x080076d1
 80076b4:	080076d9 	.word	0x080076d9
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 80076b8:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <set_bmi160_Gres+0x60>)
 80076ba:	2204      	movs	r2, #4
 80076bc:	701a      	strb	r2, [r3, #0]
			break;
 80076be:	e00f      	b.n	80076e0 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 80076c0:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <set_bmi160_Gres+0x60>)
 80076c2:	2203      	movs	r2, #3
 80076c4:	701a      	strb	r2, [r3, #0]
			break;
 80076c6:	e00b      	b.n	80076e0 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 80076c8:	4b09      	ldr	r3, [pc, #36]	; (80076f0 <set_bmi160_Gres+0x60>)
 80076ca:	2202      	movs	r2, #2
 80076cc:	701a      	strb	r2, [r3, #0]
			break;
 80076ce:	e007      	b.n	80076e0 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 80076d0:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <set_bmi160_Gres+0x60>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
			break;
 80076d6:	e003      	b.n	80076e0 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <set_bmi160_Gres+0x60>)
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
			break;
 80076de:	bf00      	nop
	}
}
 80076e0:	bf00      	nop
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20000019 	.word	0x20000019
 80076f0:	20000287 	.word	0x20000287

080076f4 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 80076f8:	4b17      	ldr	r3, [pc, #92]	; (8007758 <get_bmi160_Ares+0x64>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	d826      	bhi.n	800774e <get_bmi160_Ares+0x5a>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <get_bmi160_Ares+0x14>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	0800771d 	.word	0x0800771d
 800770c:	08007727 	.word	0x08007727
 8007710:	08007731 	.word	0x08007731
 8007714:	0800773b 	.word	0x0800773b
 8007718:	08007745 	.word	0x08007745
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 800771c:	4b0f      	ldr	r3, [pc, #60]	; (800775c <get_bmi160_Ares+0x68>)
 800771e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007722:	601a      	str	r2, [r3, #0]
			break;
 8007724:	e013      	b.n	800774e <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 8007726:	4b0d      	ldr	r3, [pc, #52]	; (800775c <get_bmi160_Ares+0x68>)
 8007728:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800772c:	601a      	str	r2, [r3, #0]
			break;
 800772e:	e00e      	b.n	800774e <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8007730:	4b0a      	ldr	r3, [pc, #40]	; (800775c <get_bmi160_Ares+0x68>)
 8007732:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8007736:	601a      	str	r2, [r3, #0]
			break;
 8007738:	e009      	b.n	800774e <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 800773a:	4b08      	ldr	r3, [pc, #32]	; (800775c <get_bmi160_Ares+0x68>)
 800773c:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8007740:	601a      	str	r2, [r3, #0]
			break;
 8007742:	e004      	b.n	800774e <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <get_bmi160_Ares+0x68>)
 8007746:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800774a:	601a      	str	r2, [r3, #0]
			break;
 800774c:	bf00      	nop
	}
}
 800774e:	bf00      	nop
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	2000001a 	.word	0x2000001a
 800775c:	20000288 	.word	0x20000288

08007760 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8007764:	4b18      	ldr	r3, [pc, #96]	; (80077c8 <get_bmi160_Gres+0x68>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b05      	cmp	r3, #5
 800776a:	d828      	bhi.n	80077be <get_bmi160_Gres+0x5e>
 800776c:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <get_bmi160_Gres+0x14>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	0800778d 	.word	0x0800778d
 8007778:	08007797 	.word	0x08007797
 800777c:	0800779f 	.word	0x0800779f
 8007780:	080077a7 	.word	0x080077a7
 8007784:	080077af 	.word	0x080077af
 8007788:	080077b7 	.word	0x080077b7
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 800778c:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <get_bmi160_Gres+0x6c>)
 800778e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007792:	601a      	str	r2, [r3, #0]
			break;
 8007794:	e013      	b.n	80077be <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <get_bmi160_Gres+0x70>)
 8007798:	4a0e      	ldr	r2, [pc, #56]	; (80077d4 <get_bmi160_Gres+0x74>)
 800779a:	601a      	str	r2, [r3, #0]
			break;
 800779c:	e00f      	b.n	80077be <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 800779e:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <get_bmi160_Gres+0x70>)
 80077a0:	4a0d      	ldr	r2, [pc, #52]	; (80077d8 <get_bmi160_Gres+0x78>)
 80077a2:	601a      	str	r2, [r3, #0]
			break;
 80077a4:	e00b      	b.n	80077be <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 80077a6:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <get_bmi160_Gres+0x70>)
 80077a8:	4a0c      	ldr	r2, [pc, #48]	; (80077dc <get_bmi160_Gres+0x7c>)
 80077aa:	601a      	str	r2, [r3, #0]
			break;
 80077ac:	e007      	b.n	80077be <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 80077ae:	4b08      	ldr	r3, [pc, #32]	; (80077d0 <get_bmi160_Gres+0x70>)
 80077b0:	4a0b      	ldr	r2, [pc, #44]	; (80077e0 <get_bmi160_Gres+0x80>)
 80077b2:	601a      	str	r2, [r3, #0]
			break;
 80077b4:	e003      	b.n	80077be <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <get_bmi160_Gres+0x70>)
 80077b8:	4a0a      	ldr	r2, [pc, #40]	; (80077e4 <get_bmi160_Gres+0x84>)
 80077ba:	601a      	str	r2, [r3, #0]
			break;
 80077bc:	bf00      	nop
	}
}
 80077be:	bf00      	nop
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	2000001b 	.word	0x2000001b
 80077cc:	20000288 	.word	0x20000288
 80077d0:	2000028c 	.word	0x2000028c
 80077d4:	43833333 	.word	0x43833333
 80077d8:	43033333 	.word	0x43033333
 80077dc:	42833333 	.word	0x42833333
 80077e0:	42033333 	.word	0x42033333
 80077e4:	41833333 	.word	0x41833333

080077e8 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	603a      	str	r2, [r7, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]
 80077f6:	460b      	mov	r3, r1
 80077f8:	71bb      	strb	r3, [r7, #6]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 80077fe:	1dba      	adds	r2, r7, #6
 8007800:	2364      	movs	r3, #100	; 0x64
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2301      	movs	r3, #1
 8007806:	21d2      	movs	r1, #210	; 0xd2
 8007808:	4807      	ldr	r0, [pc, #28]	; (8007828 <SensorAPI_I2Cx_Read+0x40>)
 800780a:	f001 fe57 	bl	80094bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 800780e:	88bb      	ldrh	r3, [r7, #4]
 8007810:	2264      	movs	r2, #100	; 0x64
 8007812:	9200      	str	r2, [sp, #0]
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	21d2      	movs	r1, #210	; 0xd2
 8007818:	4803      	ldr	r0, [pc, #12]	; (8007828 <SensorAPI_I2Cx_Read+0x40>)
 800781a:	f001 ff43 	bl	80096a4 <HAL_I2C_Master_Receive>
	return 0;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20000490 	.word	0x20000490

0800782c <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af02      	add	r7, sp, #8
 8007832:	603a      	str	r2, [r7, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	4603      	mov	r3, r0
 8007838:	71fb      	strb	r3, [r7, #7]
 800783a:	460b      	mov	r3, r1
 800783c:	71bb      	strb	r3, [r7, #6]
 800783e:	4613      	mov	r3, r2
 8007840:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8007842:	4a0c      	ldr	r2, [pc, #48]	; (8007874 <SensorAPI_I2Cx_Write+0x48>)
 8007844:	79bb      	ldrb	r3, [r7, #6]
 8007846:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8007848:	88bb      	ldrh	r3, [r7, #4]
 800784a:	461a      	mov	r2, r3
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	480a      	ldr	r0, [pc, #40]	; (8007878 <SensorAPI_I2Cx_Write+0x4c>)
 8007850:	f004 fdca 	bl	800c3e8 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8007854:	88bb      	ldrh	r3, [r7, #4]
 8007856:	3301      	adds	r3, #1
 8007858:	b29b      	uxth	r3, r3
 800785a:	2264      	movs	r2, #100	; 0x64
 800785c:	9200      	str	r2, [sp, #0]
 800785e:	4a05      	ldr	r2, [pc, #20]	; (8007874 <SensorAPI_I2Cx_Write+0x48>)
 8007860:	21d2      	movs	r1, #210	; 0xd2
 8007862:	4806      	ldr	r0, [pc, #24]	; (800787c <SensorAPI_I2Cx_Write+0x50>)
 8007864:	f001 fe2a 	bl	80094bc <HAL_I2C_Master_Transmit>
	return 0;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000290 	.word	0x20000290
 8007878:	20000291 	.word	0x20000291
 800787c:	20000490 	.word	0x20000490

08007880 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	; 0x28
 8007884:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007886:	f107 0314 	add.w	r3, r7, #20
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	605a      	str	r2, [r3, #4]
 8007890:	609a      	str	r2, [r3, #8]
 8007892:	60da      	str	r2, [r3, #12]
 8007894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007896:	4b39      	ldr	r3, [pc, #228]	; (800797c <MX_GPIO_Init+0xfc>)
 8007898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789a:	4a38      	ldr	r2, [pc, #224]	; (800797c <MX_GPIO_Init+0xfc>)
 800789c:	f043 0304 	orr.w	r3, r3, #4
 80078a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078a2:	4b36      	ldr	r3, [pc, #216]	; (800797c <MX_GPIO_Init+0xfc>)
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	f003 0304 	and.w	r3, r3, #4
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80078ae:	4b33      	ldr	r3, [pc, #204]	; (800797c <MX_GPIO_Init+0xfc>)
 80078b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b2:	4a32      	ldr	r2, [pc, #200]	; (800797c <MX_GPIO_Init+0xfc>)
 80078b4:	f043 0320 	orr.w	r3, r3, #32
 80078b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078ba:	4b30      	ldr	r3, [pc, #192]	; (800797c <MX_GPIO_Init+0xfc>)
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80078c6:	4b2d      	ldr	r3, [pc, #180]	; (800797c <MX_GPIO_Init+0xfc>)
 80078c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ca:	4a2c      	ldr	r2, [pc, #176]	; (800797c <MX_GPIO_Init+0xfc>)
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078d2:	4b2a      	ldr	r3, [pc, #168]	; (800797c <MX_GPIO_Init+0xfc>)
 80078d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	60bb      	str	r3, [r7, #8]
 80078dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80078de:	4b27      	ldr	r3, [pc, #156]	; (800797c <MX_GPIO_Init+0xfc>)
 80078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e2:	4a26      	ldr	r2, [pc, #152]	; (800797c <MX_GPIO_Init+0xfc>)
 80078e4:	f043 0302 	orr.w	r3, r3, #2
 80078e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <MX_GPIO_Init+0xfc>)
 80078ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80078f6:	2200      	movs	r2, #0
 80078f8:	2120      	movs	r1, #32
 80078fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078fe:	f001 fd13 	bl	8009328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8007902:	2200      	movs	r2, #0
 8007904:	2110      	movs	r1, #16
 8007906:	481e      	ldr	r0, [pc, #120]	; (8007980 <MX_GPIO_Init+0x100>)
 8007908:	f001 fd0e 	bl	8009328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800790c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007912:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007918:	2300      	movs	r3, #0
 800791a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800791c:	f107 0314 	add.w	r3, r7, #20
 8007920:	4619      	mov	r1, r3
 8007922:	4818      	ldr	r0, [pc, #96]	; (8007984 <MX_GPIO_Init+0x104>)
 8007924:	f001 fb7e 	bl	8009024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8007928:	2320      	movs	r3, #32
 800792a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800792c:	2301      	movs	r3, #1
 800792e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007930:	2300      	movs	r3, #0
 8007932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007934:	2300      	movs	r3, #0
 8007936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8007938:	f107 0314 	add.w	r3, r7, #20
 800793c:	4619      	mov	r1, r3
 800793e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007942:	f001 fb6f 	bl	8009024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007946:	2310      	movs	r3, #16
 8007948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800794a:	2301      	movs	r3, #1
 800794c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794e:	2300      	movs	r3, #0
 8007950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007952:	2300      	movs	r3, #0
 8007954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007956:	f107 0314 	add.w	r3, r7, #20
 800795a:	4619      	mov	r1, r3
 800795c:	4808      	ldr	r0, [pc, #32]	; (8007980 <MX_GPIO_Init+0x100>)
 800795e:	f001 fb61 	bl	8009024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007962:	2200      	movs	r2, #0
 8007964:	2100      	movs	r1, #0
 8007966:	2028      	movs	r0, #40	; 0x28
 8007968:	f001 fb34 	bl	8008fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800796c:	2028      	movs	r0, #40	; 0x28
 800796e:	f001 fb4b 	bl	8009008 <HAL_NVIC_EnableIRQ>

}
 8007972:	bf00      	nop
 8007974:	3728      	adds	r7, #40	; 0x28
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40021000 	.word	0x40021000
 8007980:	48000400 	.word	0x48000400
 8007984:	48000800 	.word	0x48000800

08007988 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800798c:	4b1e      	ldr	r3, [pc, #120]	; (8007a08 <MX_I2C1_Init+0x80>)
 800798e:	4a1f      	ldr	r2, [pc, #124]	; (8007a0c <MX_I2C1_Init+0x84>)
 8007990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802172;
 8007992:	4b1d      	ldr	r3, [pc, #116]	; (8007a08 <MX_I2C1_Init+0x80>)
 8007994:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <MX_I2C1_Init+0x88>)
 8007996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <MX_I2C1_Init+0x80>)
 800799a:	2200      	movs	r2, #0
 800799c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800799e:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80079a4:	4b18      	ldr	r3, [pc, #96]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80079aa:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80079b0:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80079bc:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079be:	2200      	movs	r2, #0
 80079c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80079c2:	4811      	ldr	r0, [pc, #68]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079c4:	f001 fceb 	bl	800939e <HAL_I2C_Init>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80079ce:	f000 fb73 	bl	80080b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80079d2:	2100      	movs	r1, #0
 80079d4:	480c      	ldr	r0, [pc, #48]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079d6:	f002 f9d3 	bl	8009d80 <HAL_I2CEx_ConfigAnalogFilter>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80079e0:	f000 fb6a 	bl	80080b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80079e4:	2100      	movs	r1, #0
 80079e6:	4808      	ldr	r0, [pc, #32]	; (8007a08 <MX_I2C1_Init+0x80>)
 80079e8:	f002 fa15 	bl	8009e16 <HAL_I2CEx_ConfigDigitalFilter>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80079f2:	f000 fb61 	bl	80080b8 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 80079f6:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <MX_I2C1_Init+0x8c>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4a06      	ldr	r2, [pc, #24]	; (8007a14 <MX_I2C1_Init+0x8c>)
 80079fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a00:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000490 	.word	0x20000490
 8007a0c:	40005400 	.word	0x40005400
 8007a10:	00802172 	.word	0x00802172
 8007a14:	40010000 	.word	0x40010000

08007a18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b09e      	sub	sp, #120	; 0x78
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	609a      	str	r2, [r3, #8]
 8007a2c:	60da      	str	r2, [r3, #12]
 8007a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007a30:	f107 0310 	add.w	r3, r7, #16
 8007a34:	2254      	movs	r2, #84	; 0x54
 8007a36:	2100      	movs	r1, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f004 fce3 	bl	800c404 <memset>
  if(i2cHandle->Instance==I2C1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <HAL_I2C_MspInit+0xa8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d136      	bne.n	8007ab6 <HAL_I2C_MspInit+0x9e>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a50:	f107 0310 	add.w	r3, r7, #16
 8007a54:	4618      	mov	r0, r3
 8007a56:	f003 f845 	bl	800aae4 <HAL_RCCEx_PeriphCLKConfig>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8007a60:	f000 fb2a 	bl	80080b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a64:	4b17      	ldr	r3, [pc, #92]	; (8007ac4 <HAL_I2C_MspInit+0xac>)
 8007a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a68:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <HAL_I2C_MspInit+0xac>)
 8007a6a:	f043 0302 	orr.w	r3, r3, #2
 8007a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a70:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <HAL_I2C_MspInit+0xac>)
 8007a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007a7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a82:	2312      	movs	r3, #18
 8007a84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a8e:	2304      	movs	r3, #4
 8007a90:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007a96:	4619      	mov	r1, r3
 8007a98:	480b      	ldr	r0, [pc, #44]	; (8007ac8 <HAL_I2C_MspInit+0xb0>)
 8007a9a:	f001 fac3 	bl	8009024 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <HAL_I2C_MspInit+0xac>)
 8007aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa2:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <HAL_I2C_MspInit+0xac>)
 8007aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <HAL_I2C_MspInit+0xac>)
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ab2:	60bb      	str	r3, [r7, #8]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	3778      	adds	r7, #120	; 0x78
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40005400 	.word	0x40005400
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	48000400 	.word	0x48000400

08007acc <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007ad0:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <DWT_Init+0x28>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	4a07      	ldr	r2, [pc, #28]	; (8007af4 <DWT_Init+0x28>)
 8007ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ada:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007adc:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <DWT_Init+0x2c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a05      	ldr	r2, [pc, #20]	; (8007af8 <DWT_Init+0x2c>)
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	6013      	str	r3, [r2, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	e000edf0 	.word	0xe000edf0
 8007af8:	e0001000 	.word	0xe0001000

08007afc <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint64_t micros(void){
 8007afc:	b4b0      	push	{r4, r5, r7}
 8007afe:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8007b00:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <micros+0x2c>)
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <micros+0x30>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4909      	ldr	r1, [pc, #36]	; (8007b30 <micros+0x34>)
 8007b0a:	fba1 1303 	umull	r1, r3, r1, r3
 8007b0e:	0c9b      	lsrs	r3, r3, #18
 8007b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b14:	2200      	movs	r2, #0
 8007b16:	461c      	mov	r4, r3
 8007b18:	4615      	mov	r5, r2
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	462b      	mov	r3, r5
}
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bcb0      	pop	{r4, r5, r7}
 8007b26:	4770      	bx	lr
 8007b28:	e0001000 	.word	0xe0001000
 8007b2c:	20000024 	.word	0x20000024
 8007b30:	431bde83 	.word	0x431bde83

08007b34 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	f04f 33ff 	mov.w	r3, #4294967295
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	4804      	ldr	r0, [pc, #16]	; (8007b5c <_write+0x28>)
 8007b4c:	f003 fdd8 	bl	800b700 <HAL_UART_Transmit>
	return len;
 8007b50:	687b      	ldr	r3, [r7, #4]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200006f8 	.word	0x200006f8

08007b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	ed2d 8b04 	vpush	{d8-d9}
 8007b68:	b087      	sub	sp, #28
 8007b6a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b6c:	f001 f921 	bl	8008db2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b70:	f000 fa46 	bl	8008000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b74:	f7ff fe84 	bl	8007880 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8007b78:	f001 f850 	bl	8008c1c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8007b7c:	f7ff ff04 	bl	8007988 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8007b80:	f7ff ffa4 	bl	8007acc <DWT_Init>

  //Init filter with predefined settings
  LPFTwoPole_Init(&LPF_accel_x, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8007b84:	4bce      	ldr	r3, [pc, #824]	; (8007ec0 <main+0x360>)
 8007b86:	edd3 7a00 	vldr	s15, [r3]
 8007b8a:	eef0 0a67 	vmov.f32	s1, s15
 8007b8e:	ed9f 0acd 	vldr	s0, [pc, #820]	; 8007ec4 <main+0x364>
 8007b92:	2101      	movs	r1, #1
 8007b94:	48cc      	ldr	r0, [pc, #816]	; (8007ec8 <main+0x368>)
 8007b96:	f7fc f8bf 	bl	8003d18 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_y, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8007b9a:	4bc9      	ldr	r3, [pc, #804]	; (8007ec0 <main+0x360>)
 8007b9c:	edd3 7a00 	vldr	s15, [r3]
 8007ba0:	eef0 0a67 	vmov.f32	s1, s15
 8007ba4:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8007ec4 <main+0x364>
 8007ba8:	2101      	movs	r1, #1
 8007baa:	48c8      	ldr	r0, [pc, #800]	; (8007ecc <main+0x36c>)
 8007bac:	f7fc f8b4 	bl	8003d18 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_z, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8007bb0:	4bc3      	ldr	r3, [pc, #780]	; (8007ec0 <main+0x360>)
 8007bb2:	edd3 7a00 	vldr	s15, [r3]
 8007bb6:	eef0 0a67 	vmov.f32	s1, s15
 8007bba:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8007ec4 <main+0x364>
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	48c3      	ldr	r0, [pc, #780]	; (8007ed0 <main+0x370>)
 8007bc2:	f7fc f8a9 	bl	8003d18 <LPFTwoPole_Init>

  LPFTwoPole_Init(&LPF_gyro_x, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8007bc6:	4bbe      	ldr	r3, [pc, #760]	; (8007ec0 <main+0x360>)
 8007bc8:	edd3 7a00 	vldr	s15, [r3]
 8007bcc:	eef0 0a67 	vmov.f32	s1, s15
 8007bd0:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8007ed4 <main+0x374>
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	48c0      	ldr	r0, [pc, #768]	; (8007ed8 <main+0x378>)
 8007bd8:	f7fc f89e 	bl	8003d18 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_y, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8007bdc:	4bb8      	ldr	r3, [pc, #736]	; (8007ec0 <main+0x360>)
 8007bde:	edd3 7a00 	vldr	s15, [r3]
 8007be2:	eef0 0a67 	vmov.f32	s1, s15
 8007be6:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8007ed4 <main+0x374>
 8007bea:	2101      	movs	r1, #1
 8007bec:	48bb      	ldr	r0, [pc, #748]	; (8007edc <main+0x37c>)
 8007bee:	f7fc f893 	bl	8003d18 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_z, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8007bf2:	4bb3      	ldr	r3, [pc, #716]	; (8007ec0 <main+0x360>)
 8007bf4:	edd3 7a00 	vldr	s15, [r3]
 8007bf8:	eef0 0a67 	vmov.f32	s1, s15
 8007bfc:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8007ed4 <main+0x374>
 8007c00:	2101      	movs	r1, #1
 8007c02:	48b7      	ldr	r0, [pc, #732]	; (8007ee0 <main+0x380>)
 8007c04:	f7fc f888 	bl	8003d18 <LPFTwoPole_Init>

  NotchFilterInit(&NF_gyro_x, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8007c08:	4bad      	ldr	r3, [pc, #692]	; (8007ec0 <main+0x360>)
 8007c0a:	edd3 7a00 	vldr	s15, [r3]
 8007c0e:	eeb0 1a67 	vmov.f32	s2, s15
 8007c12:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8007c16:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8007ee4 <main+0x384>
 8007c1a:	48b3      	ldr	r0, [pc, #716]	; (8007ee8 <main+0x388>)
 8007c1c:	f7fc f924 	bl	8003e68 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_y, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8007c20:	4ba7      	ldr	r3, [pc, #668]	; (8007ec0 <main+0x360>)
 8007c22:	edd3 7a00 	vldr	s15, [r3]
 8007c26:	eeb0 1a67 	vmov.f32	s2, s15
 8007c2a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8007c2e:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8007ee4 <main+0x384>
 8007c32:	48ae      	ldr	r0, [pc, #696]	; (8007eec <main+0x38c>)
 8007c34:	f7fc f918 	bl	8003e68 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_z, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8007c38:	4ba1      	ldr	r3, [pc, #644]	; (8007ec0 <main+0x360>)
 8007c3a:	edd3 7a00 	vldr	s15, [r3]
 8007c3e:	eeb0 1a67 	vmov.f32	s2, s15
 8007c42:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8007c46:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8007ee4 <main+0x384>
 8007c4a:	48a9      	ldr	r0, [pc, #676]	; (8007ef0 <main+0x390>)
 8007c4c:	f7fc f90c 	bl	8003e68 <NotchFilterInit>

  //Init state estimators
  quaternionInit(&quaternion_t, sample_time_us_f32);
 8007c50:	4ba8      	ldr	r3, [pc, #672]	; (8007ef4 <main+0x394>)
 8007c52:	edd3 7a00 	vldr	s15, [r3]
 8007c56:	eeb0 0a67 	vmov.f32	s0, s15
 8007c5a:	48a7      	ldr	r0, [pc, #668]	; (8007ef8 <main+0x398>)
 8007c5c:	f000 fa34 	bl	80080c8 <quaternionInit>
  initFusionAHRS(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, sample_time_sec_f32);
 8007c60:	4b97      	ldr	r3, [pc, #604]	; (8007ec0 <main+0x360>)
 8007c62:	edd3 7a00 	vldr	s15, [r3]
 8007c66:	eeb0 0a67 	vmov.f32	s0, s15
 8007c6a:	4aa4      	ldr	r2, [pc, #656]	; (8007efc <main+0x39c>)
 8007c6c:	49a4      	ldr	r1, [pc, #656]	; (8007f00 <main+0x3a0>)
 8007c6e:	48a5      	ldr	r0, [pc, #660]	; (8007f04 <main+0x3a4>)
 8007c70:	f7fb fa68 	bl	8003144 <initFusionAHRS>

  //Init sensors
  while (BMI160_init(imu_t) == 1);
 8007c74:	bf00      	nop
 8007c76:	4ba4      	ldr	r3, [pc, #656]	; (8007f08 <main+0x3a8>)
 8007c78:	466e      	mov	r6, sp
 8007c7a:	f103 0210 	add.w	r2, r3, #16
 8007c7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c80:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8007c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c86:	f7ff fb61 	bl	800734c <BMI160_init>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d0f2      	beq.n	8007c76 <main+0x116>

  if (imu_t.INIT_OK_i8 != TRUE)
 8007c90:	4b9d      	ldr	r3, [pc, #628]	; (8007f08 <main+0x3a8>)
 8007c92:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d005      	beq.n	8007ca6 <main+0x146>
  {
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	2120      	movs	r1, #32
 8007c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ca2:	f001 fb41 	bl	8009328 <HAL_GPIO_WritePin>
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	//Get system time in us
	timer_u64 = micros();
 8007ca6:	f7ff ff29 	bl	8007afc <micros>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4997      	ldr	r1, [pc, #604]	; (8007f0c <main+0x3ac>)
 8007cb0:	e9c1 2300 	strd	r2, r3, [r1]

	if ( ((timer_u64 - lastTime_u64) >= sample_time_us_f32) && (imu_t.INIT_OK_i8 == TRUE) )
 8007cb4:	4b95      	ldr	r3, [pc, #596]	; (8007f0c <main+0x3ac>)
 8007cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cba:	4b95      	ldr	r3, [pc, #596]	; (8007f10 <main+0x3b0>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	1a84      	subs	r4, r0, r2
 8007cc2:	eb61 0503 	sbc.w	r5, r1, r3
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f9 f8cd 	bl	8000e68 <__aeabi_ul2f>
 8007cce:	ee07 0a10 	vmov	s14, r0
 8007cd2:	4b88      	ldr	r3, [pc, #544]	; (8007ef4 <main+0x394>)
 8007cd4:	edd3 7a00 	vldr	s15, [r3]
 8007cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ce0:	f2c0 8156 	blt.w	8007f90 <main+0x430>
 8007ce4:	4b88      	ldr	r3, [pc, #544]	; (8007f08 <main+0x3a8>)
 8007ce6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	f040 8150 	bne.w	8007f90 <main+0x430>
	{
		lastTime_u64 = micros();
 8007cf0:	f7ff ff04 	bl	8007afc <micros>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4985      	ldr	r1, [pc, #532]	; (8007f10 <main+0x3b0>)
 8007cfa:	e9c1 2300 	strd	r2, r3, [r1]

		//Read BMI160 sensor data
		bmi160ReadAccelGyro(&imu_t);
 8007cfe:	4882      	ldr	r0, [pc, #520]	; (8007f08 <main+0x3a8>)
 8007d00:	f7ff fc16 	bl	8007530 <bmi160ReadAccelGyro>

		//Get accelerometer data in "g" and run LPF
		accelLowPassFiltered_f32[0] = (LPFTwoPole_Update(&LPF_accel_x, imu_t.BMI160_Accel_f32[0]));
 8007d04:	4b80      	ldr	r3, [pc, #512]	; (8007f08 <main+0x3a8>)
 8007d06:	edd3 7a00 	vldr	s15, [r3]
 8007d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d0e:	486e      	ldr	r0, [pc, #440]	; (8007ec8 <main+0x368>)
 8007d10:	f7fc f872 	bl	8003df8 <LPFTwoPole_Update>
 8007d14:	eef0 7a40 	vmov.f32	s15, s0
 8007d18:	4b7e      	ldr	r3, [pc, #504]	; (8007f14 <main+0x3b4>)
 8007d1a:	edc3 7a00 	vstr	s15, [r3]
		accelLowPassFiltered_f32[1] = (LPFTwoPole_Update(&LPF_accel_y, imu_t.BMI160_Accel_f32[1]));
 8007d1e:	4b7a      	ldr	r3, [pc, #488]	; (8007f08 <main+0x3a8>)
 8007d20:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d24:	eeb0 0a67 	vmov.f32	s0, s15
 8007d28:	4868      	ldr	r0, [pc, #416]	; (8007ecc <main+0x36c>)
 8007d2a:	f7fc f865 	bl	8003df8 <LPFTwoPole_Update>
 8007d2e:	eef0 7a40 	vmov.f32	s15, s0
 8007d32:	4b78      	ldr	r3, [pc, #480]	; (8007f14 <main+0x3b4>)
 8007d34:	edc3 7a01 	vstr	s15, [r3, #4]
		accelLowPassFiltered_f32[2] = (LPFTwoPole_Update(&LPF_accel_z, imu_t.BMI160_Accel_f32[2]));
 8007d38:	4b73      	ldr	r3, [pc, #460]	; (8007f08 <main+0x3a8>)
 8007d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d42:	4863      	ldr	r0, [pc, #396]	; (8007ed0 <main+0x370>)
 8007d44:	f7fc f858 	bl	8003df8 <LPFTwoPole_Update>
 8007d48:	eef0 7a40 	vmov.f32	s15, s0
 8007d4c:	4b71      	ldr	r3, [pc, #452]	; (8007f14 <main+0x3b4>)
 8007d4e:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get gyro data in "deg/s" and run LPF
		gyroLowPassFiltered_f32[0] = NotchFilter_Update(&NF_gyro_x, imu_t.BMI160_Gyro_f32[0]);
 8007d52:	4b6d      	ldr	r3, [pc, #436]	; (8007f08 <main+0x3a8>)
 8007d54:	edd3 7a03 	vldr	s15, [r3, #12]
 8007d58:	eeb0 0a67 	vmov.f32	s0, s15
 8007d5c:	4862      	ldr	r0, [pc, #392]	; (8007ee8 <main+0x388>)
 8007d5e:	f7fc f90f 	bl	8003f80 <NotchFilter_Update>
 8007d62:	eef0 7a40 	vmov.f32	s15, s0
 8007d66:	4b6c      	ldr	r3, [pc, #432]	; (8007f18 <main+0x3b8>)
 8007d68:	edc3 7a00 	vstr	s15, [r3]
		gyroLowPassFiltered_f32[1] = NotchFilter_Update(&NF_gyro_y, imu_t.BMI160_Gyro_f32[1]);
 8007d6c:	4b66      	ldr	r3, [pc, #408]	; (8007f08 <main+0x3a8>)
 8007d6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d72:	eeb0 0a67 	vmov.f32	s0, s15
 8007d76:	485d      	ldr	r0, [pc, #372]	; (8007eec <main+0x38c>)
 8007d78:	f7fc f902 	bl	8003f80 <NotchFilter_Update>
 8007d7c:	eef0 7a40 	vmov.f32	s15, s0
 8007d80:	4b65      	ldr	r3, [pc, #404]	; (8007f18 <main+0x3b8>)
 8007d82:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroLowPassFiltered_f32[2] = NotchFilter_Update(&NF_gyro_z, imu_t.BMI160_Gyro_f32[2]);
 8007d86:	4b60      	ldr	r3, [pc, #384]	; (8007f08 <main+0x3a8>)
 8007d88:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8007d90:	4857      	ldr	r0, [pc, #348]	; (8007ef0 <main+0x390>)
 8007d92:	f7fc f8f5 	bl	8003f80 <NotchFilter_Update>
 8007d96:	eef0 7a40 	vmov.f32	s15, s0
 8007d9a:	4b5f      	ldr	r3, [pc, #380]	; (8007f18 <main+0x3b8>)
 8007d9c:	edc3 7a02 	vstr	s15, [r3, #8]

		//Put gyro data into Notch Filter to flat-out any data in specific frequency band
		gyroNotchFiltered_f32[0] = (LPFTwoPole_Update(&LPF_gyro_x, gyroLowPassFiltered_f32[0]));
 8007da0:	4b5d      	ldr	r3, [pc, #372]	; (8007f18 <main+0x3b8>)
 8007da2:	edd3 7a00 	vldr	s15, [r3]
 8007da6:	eeb0 0a67 	vmov.f32	s0, s15
 8007daa:	484b      	ldr	r0, [pc, #300]	; (8007ed8 <main+0x378>)
 8007dac:	f7fc f824 	bl	8003df8 <LPFTwoPole_Update>
 8007db0:	eef0 7a40 	vmov.f32	s15, s0
 8007db4:	4b59      	ldr	r3, [pc, #356]	; (8007f1c <main+0x3bc>)
 8007db6:	edc3 7a00 	vstr	s15, [r3]
		gyroNotchFiltered_f32[1] = (LPFTwoPole_Update(&LPF_gyro_y, gyroLowPassFiltered_f32[1]));
 8007dba:	4b57      	ldr	r3, [pc, #348]	; (8007f18 <main+0x3b8>)
 8007dbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8007dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc4:	4845      	ldr	r0, [pc, #276]	; (8007edc <main+0x37c>)
 8007dc6:	f7fc f817 	bl	8003df8 <LPFTwoPole_Update>
 8007dca:	eef0 7a40 	vmov.f32	s15, s0
 8007dce:	4b53      	ldr	r3, [pc, #332]	; (8007f1c <main+0x3bc>)
 8007dd0:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroNotchFiltered_f32[2] = (LPFTwoPole_Update(&LPF_gyro_z, gyroLowPassFiltered_f32[2]));
 8007dd4:	4b50      	ldr	r3, [pc, #320]	; (8007f18 <main+0x3b8>)
 8007dd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8007dda:	eeb0 0a67 	vmov.f32	s0, s15
 8007dde:	4840      	ldr	r0, [pc, #256]	; (8007ee0 <main+0x380>)
 8007de0:	f7fc f80a 	bl	8003df8 <LPFTwoPole_Update>
 8007de4:	eef0 7a40 	vmov.f32	s15, s0
 8007de8:	4b4c      	ldr	r3, [pc, #304]	; (8007f1c <main+0x3bc>)
 8007dea:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get state estimations, using quaternion and fusion-quaternion based estimators
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8007dee:	4b49      	ldr	r3, [pc, #292]	; (8007f14 <main+0x3b4>)
 8007df0:	ed93 8a00 	vldr	s16, [r3]
 8007df4:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <main+0x3b4>)
 8007df6:	edd3 8a01 	vldr	s17, [r3, #4]
 8007dfa:	4b46      	ldr	r3, [pc, #280]	; (8007f14 <main+0x3b4>)
 8007dfc:	ed93 9a02 	vldr	s18, [r3, #8]
				gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8007e00:	4b46      	ldr	r3, [pc, #280]	; (8007f1c <main+0x3bc>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7f8 fbc7 	bl	8000598 <__aeabi_f2d>
 8007e0a:	a32b      	add	r3, pc, #172	; (adr r3, 8007eb8 <main+0x358>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fc1a 	bl	8000648 <__aeabi_dmul>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f7f8 ff0c 	bl	8000c38 <__aeabi_d2f>
 8007e20:	4606      	mov	r6, r0
				gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8007e22:	4b3e      	ldr	r3, [pc, #248]	; (8007f1c <main+0x3bc>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7f8 fbb6 	bl	8000598 <__aeabi_f2d>
 8007e2c:	a322      	add	r3, pc, #136	; (adr r3, 8007eb8 <main+0x358>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 fc09 	bl	8000648 <__aeabi_dmul>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	f7f8 fefb 	bl	8000c38 <__aeabi_d2f>
 8007e42:	4680      	mov	r8, r0
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8007e44:	4b35      	ldr	r3, [pc, #212]	; (8007f1c <main+0x3bc>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7f8 fba5 	bl	8000598 <__aeabi_f2d>
 8007e4e:	a31a      	add	r3, pc, #104	; (adr r3, 8007eb8 <main+0x358>)
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f7f8 fbf8 	bl	8000648 <__aeabi_dmul>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4619      	mov	r1, r3
 8007e60:	f7f8 feea 	bl	8000c38 <__aeabi_d2f>
 8007e64:	4603      	mov	r3, r0
 8007e66:	ee02 3a90 	vmov	s5, r3
 8007e6a:	ee02 8a10 	vmov	s4, r8
 8007e6e:	ee01 6a90 	vmov	s3, r6
 8007e72:	eeb0 1a49 	vmov.f32	s2, s18
 8007e76:	eef0 0a68 	vmov.f32	s1, s17
 8007e7a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e7e:	481e      	ldr	r0, [pc, #120]	; (8007ef8 <main+0x398>)
 8007e80:	f000 f97c 	bl	800817c <quaternionUpdate>

		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8007e84:	4b23      	ldr	r3, [pc, #140]	; (8007f14 <main+0x3b4>)
 8007e86:	ed93 8a00 	vldr	s16, [r3]
 8007e8a:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <main+0x3b4>)
 8007e8c:	edd3 8a01 	vldr	s17, [r3, #4]
 8007e90:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <main+0x3b4>)
 8007e92:	ed93 9a02 	vldr	s18, [r3, #8]
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8007e96:	4b21      	ldr	r3, [pc, #132]	; (8007f1c <main+0x3bc>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7f8 fb7c 	bl	8000598 <__aeabi_f2d>
 8007ea0:	a305      	add	r3, pc, #20	; (adr r3, 8007eb8 <main+0x358>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f7f8 fbcf 	bl	8000648 <__aeabi_dmul>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	e035      	b.n	8007f20 <main+0x3c0>
 8007eb4:	f3af 8000 	nop.w
 8007eb8:	a2529d39 	.word	0xa2529d39
 8007ebc:	3f91df46 	.word	0x3f91df46
 8007ec0:	2000001c 	.word	0x2000001c
 8007ec4:	43820000 	.word	0x43820000
 8007ec8:	200005e4 	.word	0x200005e4
 8007ecc:	200005fc 	.word	0x200005fc
 8007ed0:	20000614 	.word	0x20000614
 8007ed4:	43800000 	.word	0x43800000
 8007ed8:	2000062c 	.word	0x2000062c
 8007edc:	20000644 	.word	0x20000644
 8007ee0:	2000065c 	.word	0x2000065c
 8007ee4:	42940000 	.word	0x42940000
 8007ee8:	20000584 	.word	0x20000584
 8007eec:	200005a4 	.word	0x200005a4
 8007ef0:	200005c4 	.word	0x200005c4
 8007ef4:	20000020 	.word	0x20000020
 8007ef8:	200004f8 	.word	0x200004f8
 8007efc:	20000574 	.word	0x20000574
 8007f00:	20000544 	.word	0x20000544
 8007f04:	20000528 	.word	0x20000528
 8007f08:	200004dc 	.word	0x200004dc
 8007f0c:	20000698 	.word	0x20000698
 8007f10:	200006a0 	.word	0x200006a0
 8007f14:	20000674 	.word	0x20000674
 8007f18:	20000680 	.word	0x20000680
 8007f1c:	2000068c 	.word	0x2000068c
 8007f20:	f7f8 fe8a 	bl	8000c38 <__aeabi_d2f>
 8007f24:	4606      	mov	r6, r0
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8007f26:	4b30      	ldr	r3, [pc, #192]	; (8007fe8 <main+0x488>)
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f8 fb34 	bl	8000598 <__aeabi_f2d>
 8007f30:	a32b      	add	r3, pc, #172	; (adr r3, 8007fe0 <main+0x480>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 fb87 	bl	8000648 <__aeabi_dmul>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4619      	mov	r1, r3
 8007f42:	f7f8 fe79 	bl	8000c38 <__aeabi_d2f>
 8007f46:	4680      	mov	r8, r0
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8007f48:	4b27      	ldr	r3, [pc, #156]	; (8007fe8 <main+0x488>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7f8 fb23 	bl	8000598 <__aeabi_f2d>
 8007f52:	a323      	add	r3, pc, #140	; (adr r3, 8007fe0 <main+0x480>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 fb76 	bl	8000648 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	f7f8 fe68 	bl	8000c38 <__aeabi_d2f>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	ee02 3a90 	vmov	s5, r3
 8007f6e:	ee02 8a10 	vmov	s4, r8
 8007f72:	ee01 6a90 	vmov	s3, r6
 8007f76:	eeb0 1a49 	vmov.f32	s2, s18
 8007f7a:	eef0 0a68 	vmov.f32	s1, s17
 8007f7e:	eeb0 0a48 	vmov.f32	s0, s16
 8007f82:	4a1a      	ldr	r2, [pc, #104]	; (8007fec <main+0x48c>)
 8007f84:	491a      	ldr	r1, [pc, #104]	; (8007ff0 <main+0x490>)
 8007f86:	481b      	ldr	r0, [pc, #108]	; (8007ff4 <main+0x494>)
 8007f88:	f7fb f904 	bl	8003194 <getFusionAHRS_6DoF>

		newData_u8 = TRUE; //Set newData to high for activate UART printer
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	71fb      	strb	r3, [r7, #7]

	}//end of timer if

	if(newData_u8)
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f43f ae87 	beq.w	8007ca6 <main+0x146>
	{
		printf("%f, %f, %f\r\n", //, %f, %f, %f
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8007f98:	4b17      	ldr	r3, [pc, #92]	; (8007ff8 <main+0x498>)
 8007f9a:	699b      	ldr	r3, [r3, #24]
		printf("%f, %f, %f\r\n", //, %f, %f, %f
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7f8 fafb 	bl	8000598 <__aeabi_f2d>
 8007fa2:	4682      	mov	sl, r0
 8007fa4:	468b      	mov	fp, r1
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <main+0x498>)
 8007fa8:	695b      	ldr	r3, [r3, #20]
		printf("%f, %f, %f\r\n", //, %f, %f, %f
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7f8 faf4 	bl	8000598 <__aeabi_f2d>
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	4689      	mov	r9, r1
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8007fb4:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <main+0x498>)
 8007fb6:	69db      	ldr	r3, [r3, #28]
		printf("%f, %f, %f\r\n", //, %f, %f, %f
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7f8 faed 	bl	8000598 <__aeabi_f2d>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fc6:	e9cd 8900 	strd	r8, r9, [sp]
 8007fca:	4652      	mov	r2, sl
 8007fcc:	465b      	mov	r3, fp
 8007fce:	480b      	ldr	r0, [pc, #44]	; (8007ffc <main+0x49c>)
 8007fd0:	f005 f89a 	bl	800d108 <iprintf>
//				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL);
		newData_u8 = FALSE;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	71fb      	strb	r3, [r7, #7]
	timer_u64 = micros();
 8007fd8:	e665      	b.n	8007ca6 <main+0x146>
 8007fda:	bf00      	nop
 8007fdc:	f3af 8000 	nop.w
 8007fe0:	a2529d39 	.word	0xa2529d39
 8007fe4:	3f91df46 	.word	0x3f91df46
 8007fe8:	2000068c 	.word	0x2000068c
 8007fec:	20000574 	.word	0x20000574
 8007ff0:	20000544 	.word	0x20000544
 8007ff4:	20000528 	.word	0x20000528
 8007ff8:	200004f8 	.word	0x200004f8
 8007ffc:	08012b38 	.word	0x08012b38

08008000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b094      	sub	sp, #80	; 0x50
 8008004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008006:	f107 0318 	add.w	r3, r7, #24
 800800a:	2238      	movs	r2, #56	; 0x38
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f004 f9f8 	bl	800c404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008014:	1d3b      	adds	r3, r7, #4
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	605a      	str	r2, [r3, #4]
 800801c:	609a      	str	r2, [r3, #8]
 800801e:	60da      	str	r2, [r3, #12]
 8008020:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008022:	2000      	movs	r0, #0
 8008024:	f001 ff44 	bl	8009eb0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008028:	2301      	movs	r3, #1
 800802a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800802c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008030:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008032:	2302      	movs	r3, #2
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008036:	2303      	movs	r3, #3
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800803a:	2306      	movs	r3, #6
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800803e:	2355      	movs	r3, #85	; 0x55
 8008040:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008042:	2302      	movs	r3, #2
 8008044:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008046:	2302      	movs	r3, #2
 8008048:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800804a:	2302      	movs	r3, #2
 800804c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800804e:	f107 0318 	add.w	r3, r7, #24
 8008052:	4618      	mov	r0, r3
 8008054:	f001 ffe0 	bl	800a018 <HAL_RCC_OscConfig>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800805e:	f000 f82b 	bl	80080b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008062:	230f      	movs	r3, #15
 8008064:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008066:	2303      	movs	r3, #3
 8008068:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008076:	1d3b      	adds	r3, r7, #4
 8008078:	2104      	movs	r1, #4
 800807a:	4618      	mov	r0, r3
 800807c:	f002 fae4 	bl	800a648 <HAL_RCC_ClockConfig>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8008086:	f000 f817 	bl	80080b8 <Error_Handler>
  }
}
 800808a:	bf00      	nop
 800808c:	3750      	adds	r7, #80	; 0x50
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a04      	ldr	r2, [pc, #16]	; (80080b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80080a6:	f000 fe9d 	bl	8008de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40013400 	.word	0x40013400

080080b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80080bc:	b672      	cpsid	i
}
 80080be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80080c0:	e7fe      	b.n	80080c0 <Error_Handler+0x8>
 80080c2:	0000      	movs	r0, r0
 80080c4:	0000      	movs	r0, r0
	...

080080c8 <quaternionInit>:
#include "quaternion.h"

float a12, a22, a31, a32, a33;

void quaternionInit(Quaternion_t *DataStruct, float sampleTimeMicros)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	ed87 0a00 	vstr	s0, [r7]
	DataStruct->GyroMeasError = M_PI * (40.0f / 180.0f);		// gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a26      	ldr	r2, [pc, #152]	; (8008170 <quaternionInit+0xa8>)
 80080d8:	601a      	str	r2, [r3, #0]
	DataStruct->beta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasError;		// compute beta
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7f8 fa5a 	bl	8000598 <__aeabi_f2d>
 80080e4:	a320      	add	r3, pc, #128	; (adr r3, 8008168 <quaternionInit+0xa0>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 faad 	bl	8000648 <__aeabi_dmul>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f7f8 fd9f 	bl	8000c38 <__aeabi_d2f>
 80080fa:	4602      	mov	r2, r0
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	605a      	str	r2, [r3, #4]
	DataStruct->GyroMeasDrift = M_PI * (2.0f / 180.0f);		// gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <quaternionInit+0xac>)
 8008104:	609a      	str	r2, [r3, #8]
	DataStruct->zeta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasDrift;		// compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	4618      	mov	r0, r3
 800810c:	f7f8 fa44 	bl	8000598 <__aeabi_f2d>
 8008110:	a315      	add	r3, pc, #84	; (adr r3, 8008168 <quaternionInit+0xa0>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	f7f8 fa97 	bl	8000648 <__aeabi_dmul>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4610      	mov	r0, r2
 8008120:	4619      	mov	r1, r3
 8008122:	f7f8 fd89 	bl	8000c38 <__aeabi_d2f>
 8008126:	4602      	mov	r2, r0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60da      	str	r2, [r3, #12]

	DataStruct->deltat = sampleTimeMicros / 1000000.0f;
 800812c:	ed97 7a00 	vldr	s14, [r7]
 8008130:	eddf 6a11 	vldr	s13, [pc, #68]	; 8008178 <quaternionInit+0xb0>
 8008134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	edc3 7a04 	vstr	s15, [r3, #16]

	DataStruct->q[0] = 1.0f;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008144:	621a      	str	r2, [r3, #32]
	DataStruct->q[1] = 0.0f;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->q[2] = 0.0f;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	629a      	str	r2, [r3, #40]	; 0x28
	DataStruct->q[3] = 0.0f;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	e8584caa 	.word	0xe8584caa
 800816c:	3febb67a 	.word	0x3febb67a
 8008170:	3f32b8c2 	.word	0x3f32b8c2
 8008174:	3d0efa35 	.word	0x3d0efa35
 8008178:	49742400 	.word	0x49742400

0800817c <quaternionUpdate>:

void quaternionUpdate(Quaternion_t *DataStruct, float ax, float ay, float az, float gyrox, float gyroy, float gyroz)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b0a6      	sub	sp, #152	; 0x98
 8008180:	af00      	add	r7, sp, #0
 8008182:	61f8      	str	r0, [r7, #28]
 8008184:	ed87 0a06 	vstr	s0, [r7, #24]
 8008188:	edc7 0a05 	vstr	s1, [r7, #20]
 800818c:	ed87 1a04 	vstr	s2, [r7, #16]
 8008190:	edc7 1a03 	vstr	s3, [r7, #12]
 8008194:	ed87 2a02 	vstr	s4, [r7, #8]
 8008198:	edc7 2a01 	vstr	s5, [r7, #4]
    float q1 = DataStruct->q[0], q2 = DataStruct->q[1], q3 = DataStruct->q[2], q4 = DataStruct->q[3];         // short name local variable for readability
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
    float qDot1, qDot2, qDot3, qDot4;
    float hatDot1, hatDot2, hatDot3, hatDot4;

    // Auxiliary variables to avoid repeated arithmetic
    float _halfq1 = 0.5f * q1;
 80081bc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80081c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80081c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081c8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float _halfq2 = 0.5f * q2;
 80081cc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80081d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80081d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081d8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float _halfq3 = 0.5f * q3;
 80081dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80081e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80081e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081e8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float _halfq4 = 0.5f * q4;
 80081ec:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80081f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80081f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081f8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    float _2q1 = 2.0f * q1;
 80081fc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008200:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008204:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float _2q2 = 2.0f * q2;
 8008208:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800820c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008210:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float _2q3 = 2.0f * q3;
 8008214:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008218:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800821c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float _2q4 = 2.0f * q4;
 8008220:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008224:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008228:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    // Normalise accelerometer measurement
    norm = sqrt(ax * ax + ay * ay + az * az);
 800822c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008230:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008234:	edd7 7a05 	vldr	s15, [r7, #20]
 8008238:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800823c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008240:	edd7 7a04 	vldr	s15, [r7, #16]
 8008244:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800824c:	ee17 0a90 	vmov	r0, s15
 8008250:	f7f8 f9a2 	bl	8000598 <__aeabi_f2d>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	ec43 2b10 	vmov	d0, r2, r3
 800825c:	f008 fe44 	bl	8010ee8 <sqrt>
 8008260:	ec53 2b10 	vmov	r2, r3, d0
 8008264:	4610      	mov	r0, r2
 8008266:	4619      	mov	r1, r3
 8008268:	f7f8 fce6 	bl	8000c38 <__aeabi_d2f>
 800826c:	4603      	mov	r3, r0
 800826e:	667b      	str	r3, [r7, #100]	; 0x64
    if (norm == 0.0f) return; // handle NaN
 8008270:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008274:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827c:	f000 821e 	beq.w	80086bc <quaternionUpdate+0x540>
    norm = 1.0f/norm;
 8008280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008284:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    ax *= norm;
 8008290:	ed97 7a06 	vldr	s14, [r7, #24]
 8008294:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829c:	edc7 7a06 	vstr	s15, [r7, #24]
    ay *= norm;
 80082a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80082a4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80082a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ac:	edc7 7a05 	vstr	s15, [r7, #20]
    az *= norm;
 80082b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80082b4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80082b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082bc:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute the objective function and Jacobian
    f1 = _2q2 * q4 - _2q1 * q3 - ax;
 80082c0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80082c4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80082c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082cc:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80082d0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80082d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80082dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80082e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082e4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    f2 = _2q1 * q2 + _2q3 * q4 - ay;
 80082e8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80082ec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80082f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082f4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80082f8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80082fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008304:	edd7 7a05 	vldr	s15, [r7, #20]
 8008308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800830c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 8008310:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8008314:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008324:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8008328:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800832c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008334:	edd7 7a04 	vldr	s15, [r7, #16]
 8008338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800833c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    J_11or24 = _2q3;
 8008340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008342:	657b      	str	r3, [r7, #84]	; 0x54
    J_12or23 = _2q4;
 8008344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008346:	653b      	str	r3, [r7, #80]	; 0x50
    J_13or22 = _2q1;
 8008348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800834a:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_14or21 = _2q2;
 800834c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800834e:	64bb      	str	r3, [r7, #72]	; 0x48
    J_32 = 2.0f * J_14or21;
 8008350:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008354:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008358:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    J_33 = 2.0f * J_11or24;
 800835c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008360:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008364:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    // Compute the gradient (matrix multiplication)
    hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 8008368:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800836c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008374:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8008378:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800837c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008384:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 8008388:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800838c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008394:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8008398:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800839c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083a4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80083a8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80083ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083b4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 80083b8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80083bc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80083c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083c4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80083c8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80083cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083d4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80083d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80083dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 80083e8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80083ec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80083f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083f4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80083f8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80083fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008404:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Normalize the gradient
    norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 8008408:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800840c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008410:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008414:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800841c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008420:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008428:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800842c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008434:	ee17 0a90 	vmov	r0, s15
 8008438:	f7f8 f8ae 	bl	8000598 <__aeabi_f2d>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	ec43 2b10 	vmov	d0, r2, r3
 8008444:	f008 fd50 	bl	8010ee8 <sqrt>
 8008448:	ec53 2b10 	vmov	r2, r3, d0
 800844c:	4610      	mov	r0, r2
 800844e:	4619      	mov	r1, r3
 8008450:	f7f8 fbf2 	bl	8000c38 <__aeabi_d2f>
 8008454:	4603      	mov	r3, r0
 8008456:	667b      	str	r3, [r7, #100]	; 0x64
    hatDot1 /= norm;
 8008458:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800845c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008464:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hatDot2 /= norm;
 8008468:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800846c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008474:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    hatDot3 /= norm;
 8008478:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800847c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008484:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    hatDot4 /= norm;
 8008488:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800848c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008494:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Compute the quaternion derivative
    qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 8008498:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800849c:	eeb1 7a67 	vneg.f32	s14, s15
 80084a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80084a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084a8:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80084ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80084b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084b8:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80084bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80084c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 80084cc:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80084d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80084d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084d8:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80084dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80084e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084e8:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80084ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80084f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 80084fc:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8008500:	edd7 7a02 	vldr	s15, [r7, #8]
 8008504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008508:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800850c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008518:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800851c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008528:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 800852c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8008530:	edd7 7a01 	vldr	s15, [r7, #4]
 8008534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008538:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800853c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008548:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800854c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008558:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute then integrate estimated quaternion derivative
    q1 += (qDot1 -(DataStruct->beta * hatDot1)) * DataStruct->deltat;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008562:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800856e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	edd3 7a04 	vldr	s15, [r3, #16]
 8008578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008584:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    q2 += (qDot2 -(DataStruct->beta * hatDot2)) * DataStruct->deltat;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	ed93 7a01 	vldr	s14, [r3, #4]
 800858e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008596:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800859a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80085a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80085ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085b0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    q3 += (qDot3 -(DataStruct->beta * hatDot3)) * DataStruct->deltat;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80085ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80085c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80085d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d4:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80085d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085dc:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    q4 += (qDot4 -(DataStruct->beta * hatDot4)) * DataStruct->deltat;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80085e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80085ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80085f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80085fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008600:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008608:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    // Normalize the quaternion
    norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800860c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008610:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008614:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008618:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800861c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008620:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008624:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800862c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008630:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008638:	ee17 0a90 	vmov	r0, s15
 800863c:	f7f7 ffac 	bl	8000598 <__aeabi_f2d>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	ec43 2b10 	vmov	d0, r2, r3
 8008648:	f008 fc4e 	bl	8010ee8 <sqrt>
 800864c:	ec53 2b10 	vmov	r2, r3, d0
 8008650:	4610      	mov	r0, r2
 8008652:	4619      	mov	r1, r3
 8008654:	f7f8 faf0 	bl	8000c38 <__aeabi_d2f>
 8008658:	4603      	mov	r3, r0
 800865a:	667b      	str	r3, [r7, #100]	; 0x64
    norm = 1.0f/norm;
 800865c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008660:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008668:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    DataStruct->q[0] = q1 * norm;
 800866c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008670:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	edc3 7a08 	vstr	s15, [r3, #32]
    DataStruct->q[1] = q2 * norm;
 800867e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8008682:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    DataStruct->q[2] = q3 * norm;
 8008690:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8008694:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    DataStruct->q[3] = q4 * norm;
 80086a2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80086a6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    quaternionEulerUpdate(DataStruct);
 80086b4:	69f8      	ldr	r0, [r7, #28]
 80086b6:	f000 f807 	bl	80086c8 <quaternionEulerUpdate>
 80086ba:	e000      	b.n	80086be <quaternionUpdate+0x542>
    if (norm == 0.0f) return; // handle NaN
 80086bc:	bf00      	nop
}
 80086be:	3798      	adds	r7, #152	; 0x98
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	0000      	movs	r0, r0
	...

080086c8 <quaternionEulerUpdate>:

void quaternionEulerUpdate(Quaternion_t *DataStruct)
{
 80086c8:	b5b0      	push	{r4, r5, r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80086dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	edd3 6a08 	vldr	s13, [r3, #32]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80086ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80086f8:	ee17 0a90 	vmov	r0, s15
 80086fc:	f7f7 ff4c 	bl	8000598 <__aeabi_f2d>
 8008700:	4604      	mov	r4, r0
 8008702:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] + DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] - DataStruct->q[3] * DataStruct->q[3]);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	ed93 7a08 	vldr	s14, [r3, #32]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	edd3 7a08 	vldr	s15, [r3, #32]
 8008710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008738:	ee37 7a67 	vsub.f32	s14, s14, s15
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800874c:	ee77 7a67 	vsub.f32	s15, s14, s15
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8008750:	ee17 0a90 	vmov	r0, s15
 8008754:	f7f7 ff20 	bl	8000598 <__aeabi_f2d>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	ec43 2b11 	vmov	d1, r2, r3
 8008760:	ec45 4b10 	vmov	d0, r4, r5
 8008764:	f008 fbbe 	bl	8010ee4 <atan2>
 8008768:	ec53 2b10 	vmov	r2, r3, d0
 800876c:	4610      	mov	r0, r2
 800876e:	4619      	mov	r1, r3
 8008770:	f7f8 fa62 	bl	8000c38 <__aeabi_d2f>
 8008774:	4602      	mov	r2, r0
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	619a      	str	r2, [r3, #24]
	DataStruct->pitch = -asin(2.0f * (DataStruct->q[1] * DataStruct->q[3] - DataStruct->q[0] * DataStruct->q[2]));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	edd3 6a08 	vldr	s13, [r3, #32]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800879a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800879e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80087a2:	ee17 0a90 	vmov	r0, s15
 80087a6:	f7f7 fef7 	bl	8000598 <__aeabi_f2d>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	ec43 2b10 	vmov	d0, r2, r3
 80087b2:	f008 fb63 	bl	8010e7c <asin>
 80087b6:	ec53 2b10 	vmov	r2, r3, d0
 80087ba:	4610      	mov	r0, r2
 80087bc:	4619      	mov	r1, r3
 80087be:	f7f8 fa3b 	bl	8000c38 <__aeabi_d2f>
 80087c2:	4603      	mov	r3, r0
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eef1 7a67 	vneg.f32	s15, s15
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80087de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80087ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80087fa:	ee17 0a90 	vmov	r0, s15
 80087fe:	f7f7 fecb 	bl	8000598 <__aeabi_f2d>
 8008802:	4604      	mov	r4, r0
 8008804:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] - DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] + DataStruct->q[3] * DataStruct->q[3]);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	ed93 7a08 	vldr	s14, [r3, #32]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800883a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800884a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800884e:	ee77 7a27 	vadd.f32	s15, s14, s15
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 8008852:	ee17 0a90 	vmov	r0, s15
 8008856:	f7f7 fe9f 	bl	8000598 <__aeabi_f2d>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	ec43 2b11 	vmov	d1, r2, r3
 8008862:	ec45 4b10 	vmov	d0, r4, r5
 8008866:	f008 fb3d 	bl	8010ee4 <atan2>
 800886a:	ec53 2b10 	vmov	r2, r3, d0
 800886e:	4610      	mov	r0, r2
 8008870:	4619      	mov	r1, r3
 8008872:	f7f8 f9e1 	bl	8000c38 <__aeabi_d2f>
 8008876:	4602      	mov	r2, r0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	61da      	str	r2, [r3, #28]
	DataStruct->pitch *= 180.0f / M_PI;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	4618      	mov	r0, r3
 8008882:	f7f7 fe89 	bl	8000598 <__aeabi_f2d>
 8008886:	a31c      	add	r3, pc, #112	; (adr r3, 80088f8 <quaternionEulerUpdate+0x230>)
 8008888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888c:	f7f7 fedc 	bl	8000648 <__aeabi_dmul>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4610      	mov	r0, r2
 8008896:	4619      	mov	r1, r3
 8008898:	f7f8 f9ce 	bl	8000c38 <__aeabi_d2f>
 800889c:	4602      	mov	r2, r0
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	615a      	str	r2, [r3, #20]
	DataStruct->yaw   *= 180.0f / M_PI;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f7 fe76 	bl	8000598 <__aeabi_f2d>
 80088ac:	a312      	add	r3, pc, #72	; (adr r3, 80088f8 <quaternionEulerUpdate+0x230>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fec9 	bl	8000648 <__aeabi_dmul>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	f7f8 f9bb 	bl	8000c38 <__aeabi_d2f>
 80088c2:	4602      	mov	r2, r0
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	619a      	str	r2, [r3, #24]
	DataStruct->roll  *= 180.0f / M_PI;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7f7 fe63 	bl	8000598 <__aeabi_f2d>
 80088d2:	a309      	add	r3, pc, #36	; (adr r3, 80088f8 <quaternionEulerUpdate+0x230>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 feb6 	bl	8000648 <__aeabi_dmul>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4610      	mov	r0, r2
 80088e2:	4619      	mov	r1, r3
 80088e4:	f7f8 f9a8 	bl	8000c38 <__aeabi_d2f>
 80088e8:	4602      	mov	r2, r0
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	61da      	str	r2, [r3, #28]
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bdb0      	pop	{r4, r5, r7, pc}
 80088f6:	bf00      	nop
 80088f8:	1a63c1f8 	.word	0x1a63c1f8
 80088fc:	404ca5dc 	.word	0x404ca5dc

08008900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008906:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <HAL_MspInit+0x44>)
 8008908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890a:	4a0e      	ldr	r2, [pc, #56]	; (8008944 <HAL_MspInit+0x44>)
 800890c:	f043 0301 	orr.w	r3, r3, #1
 8008910:	6613      	str	r3, [r2, #96]	; 0x60
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <HAL_MspInit+0x44>)
 8008914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <HAL_MspInit+0x44>)
 8008920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008922:	4a08      	ldr	r2, [pc, #32]	; (8008944 <HAL_MspInit+0x44>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008928:	6593      	str	r3, [r2, #88]	; 0x58
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <HAL_MspInit+0x44>)
 800892c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800892e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008936:	f001 fb5f 	bl	8009ff8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	40021000 	.word	0x40021000

08008948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08c      	sub	sp, #48	; 0x30
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 800895e:	4b2d      	ldr	r3, [pc, #180]	; (8008a14 <HAL_InitTick+0xcc>)
 8008960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008962:	4a2c      	ldr	r2, [pc, #176]	; (8008a14 <HAL_InitTick+0xcc>)
 8008964:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008968:	6613      	str	r3, [r2, #96]	; 0x60
 800896a:	4b2a      	ldr	r3, [pc, #168]	; (8008a14 <HAL_InitTick+0xcc>)
 800896c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800896e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008972:	60bb      	str	r3, [r7, #8]
 8008974:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008976:	f107 020c 	add.w	r2, r7, #12
 800897a:	f107 0310 	add.w	r3, r7, #16
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f002 f837 	bl	800a9f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008986:	f002 f81f 	bl	800a9c8 <HAL_RCC_GetPCLK2Freq>
 800898a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	4a22      	ldr	r2, [pc, #136]	; (8008a18 <HAL_InitTick+0xd0>)
 8008990:	fba2 2303 	umull	r2, r3, r2, r3
 8008994:	0c9b      	lsrs	r3, r3, #18
 8008996:	3b01      	subs	r3, #1
 8008998:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 800899a:	4b20      	ldr	r3, [pc, #128]	; (8008a1c <HAL_InitTick+0xd4>)
 800899c:	4a20      	ldr	r2, [pc, #128]	; (8008a20 <HAL_InitTick+0xd8>)
 800899e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 80089a0:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <HAL_InitTick+0xd4>)
 80089a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80089a6:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 80089a8:	4a1c      	ldr	r2, [pc, #112]	; (8008a1c <HAL_InitTick+0xd4>)
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 80089ae:	4b1b      	ldr	r3, [pc, #108]	; (8008a1c <HAL_InitTick+0xd4>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089b4:	4b19      	ldr	r3, [pc, #100]	; (8008a1c <HAL_InitTick+0xd4>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim8);
 80089ba:	4818      	ldr	r0, [pc, #96]	; (8008a1c <HAL_InitTick+0xd4>)
 80089bc:	f002 fae0 	bl	800af80 <HAL_TIM_Base_Init>
 80089c0:	4603      	mov	r3, r0
 80089c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80089c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d11b      	bne.n	8008a06 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 80089ce:	4813      	ldr	r0, [pc, #76]	; (8008a1c <HAL_InitTick+0xd4>)
 80089d0:	f002 fb38 	bl	800b044 <HAL_TIM_Base_Start_IT>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80089da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d111      	bne.n	8008a06 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80089e2:	202c      	movs	r0, #44	; 0x2c
 80089e4:	f000 fb10 	bl	8009008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b0f      	cmp	r3, #15
 80089ec:	d808      	bhi.n	8008a00 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 80089ee:	2200      	movs	r2, #0
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	202c      	movs	r0, #44	; 0x2c
 80089f4:	f000 faee 	bl	8008fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80089f8:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <HAL_InitTick+0xdc>)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	e002      	b.n	8008a06 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8008a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3730      	adds	r7, #48	; 0x30
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	40021000 	.word	0x40021000
 8008a18:	431bde83 	.word	0x431bde83
 8008a1c:	200006a8 	.word	0x200006a8
 8008a20:	40013400 	.word	0x40013400
 8008a24:	20000028 	.word	0x20000028

08008a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008a2c:	e7fe      	b.n	8008a2c <NMI_Handler+0x4>

08008a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a32:	e7fe      	b.n	8008a32 <HardFault_Handler+0x4>

08008a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a38:	e7fe      	b.n	8008a38 <MemManage_Handler+0x4>

08008a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a3e:	e7fe      	b.n	8008a3e <BusFault_Handler+0x4>

08008a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a44:	e7fe      	b.n	8008a44 <UsageFault_Handler+0x4>

08008a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a46:	b480      	push	{r7}
 8008a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a4a:	bf00      	nop
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a58:	bf00      	nop
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a62:	b480      	push	{r7}
 8008a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a66:	bf00      	nop
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a70:	b480      	push	{r7}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a74:	bf00      	nop
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008a82:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008a86:	f000 fc67 	bl	8009358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008a8a:	bf00      	nop
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008a94:	4802      	ldr	r0, [pc, #8]	; (8008aa0 <TIM8_UP_IRQHandler+0x10>)
 8008a96:	f002 fb4d 	bl	800b134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	200006a8 	.word	0x200006a8

08008aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
	return 1;
 8008aa8:	2301      	movs	r3, #1
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <_kill>:

int _kill(int pid, int sig)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008abe:	f003 fc69 	bl	800c394 <__errno>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2216      	movs	r2, #22
 8008ac6:	601a      	str	r2, [r3, #0]
	return -1;
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <_exit>:

void _exit (int status)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008adc:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff ffe7 	bl	8008ab4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008ae6:	e7fe      	b.n	8008ae6 <_exit+0x12>

08008ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008af4:	2300      	movs	r3, #0
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e00a      	b.n	8008b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008afa:	f3af 8000 	nop.w
 8008afe:	4601      	mov	r1, r0
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	60ba      	str	r2, [r7, #8]
 8008b06:	b2ca      	uxtb	r2, r1
 8008b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	dbf0      	blt.n	8008afa <_read+0x12>
	}

return len;
 8008b18:	687b      	ldr	r3, [r7, #4]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b083      	sub	sp, #12
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
	return -1;
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b4a:	605a      	str	r2, [r3, #4]
	return 0;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <_isatty>:

int _isatty(int file)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
	return 1;
 8008b62:	2301      	movs	r3, #1
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
	return 0;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
	...

08008b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b94:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <_sbrk+0x5c>)
 8008b96:	4b15      	ldr	r3, [pc, #84]	; (8008bec <_sbrk+0x60>)
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008ba0:	4b13      	ldr	r3, [pc, #76]	; (8008bf0 <_sbrk+0x64>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008ba8:	4b11      	ldr	r3, [pc, #68]	; (8008bf0 <_sbrk+0x64>)
 8008baa:	4a12      	ldr	r2, [pc, #72]	; (8008bf4 <_sbrk+0x68>)
 8008bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008bae:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <_sbrk+0x64>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d207      	bcs.n	8008bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008bbc:	f003 fbea 	bl	800c394 <__errno>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	220c      	movs	r2, #12
 8008bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bca:	e009      	b.n	8008be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008bcc:	4b08      	ldr	r3, [pc, #32]	; (8008bf0 <_sbrk+0x64>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008bd2:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <_sbrk+0x64>)
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	4a05      	ldr	r2, [pc, #20]	; (8008bf0 <_sbrk+0x64>)
 8008bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008bde:	68fb      	ldr	r3, [r7, #12]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20020000 	.word	0x20020000
 8008bec:	00000400 	.word	0x00000400
 8008bf0:	200006f4 	.word	0x200006f4
 8008bf4:	200007a0 	.word	0x200007a0

08008bf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008bfc:	4b06      	ldr	r3, [pc, #24]	; (8008c18 <SystemInit+0x20>)
 8008bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c02:	4a05      	ldr	r2, [pc, #20]	; (8008c18 <SystemInit+0x20>)
 8008c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008c0c:	bf00      	nop
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	e000ed00 	.word	0xe000ed00

08008c1c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008c20:	4b21      	ldr	r3, [pc, #132]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c22:	4a22      	ldr	r2, [pc, #136]	; (8008cac <MX_LPUART1_UART_Init+0x90>)
 8008c24:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8008c26:	4b20      	ldr	r3, [pc, #128]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c28:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8008c2c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008c2e:	4b1e      	ldr	r3, [pc, #120]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008c34:	4b1c      	ldr	r3, [pc, #112]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008c3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008c40:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c42:	220c      	movs	r2, #12
 8008c44:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c46:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008c4c:	4b16      	ldr	r3, [pc, #88]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008c58:	4b13      	ldr	r3, [pc, #76]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008c5e:	4812      	ldr	r0, [pc, #72]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c60:	f002 fcfe 	bl	800b660 <HAL_UART_Init>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8008c6a:	f7ff fa25 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008c6e:	2100      	movs	r1, #0
 8008c70:	480d      	ldr	r0, [pc, #52]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c72:	f003 fac5 	bl	800c200 <HAL_UARTEx_SetTxFifoThreshold>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8008c7c:	f7ff fa1c 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008c80:	2100      	movs	r1, #0
 8008c82:	4809      	ldr	r0, [pc, #36]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c84:	f003 fafa 	bl	800c27c <HAL_UARTEx_SetRxFifoThreshold>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8008c8e:	f7ff fa13 	bl	80080b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8008c92:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <MX_LPUART1_UART_Init+0x8c>)
 8008c94:	f003 fa7b 	bl	800c18e <HAL_UARTEx_DisableFifoMode>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8008c9e:	f7ff fa0b 	bl	80080b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008ca2:	bf00      	nop
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	200006f8 	.word	0x200006f8
 8008cac:	40008000 	.word	0x40008000

08008cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b09e      	sub	sp, #120	; 0x78
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	60da      	str	r2, [r3, #12]
 8008cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008cc8:	f107 0310 	add.w	r3, r7, #16
 8008ccc:	2254      	movs	r2, #84	; 0x54
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f003 fb97 	bl	800c404 <memset>
  if(uartHandle->Instance==LPUART1)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a1f      	ldr	r2, [pc, #124]	; (8008d58 <HAL_UART_MspInit+0xa8>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d136      	bne.n	8008d4e <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008ce8:	f107 0310 	add.w	r3, r7, #16
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 fef9 	bl	800aae4 <HAL_RCCEx_PeriphCLKConfig>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008cf8:	f7ff f9de 	bl	80080b8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8008cfc:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <HAL_UART_MspInit+0xac>)
 8008cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d00:	4a16      	ldr	r2, [pc, #88]	; (8008d5c <HAL_UART_MspInit+0xac>)
 8008d02:	f043 0301 	orr.w	r3, r3, #1
 8008d06:	65d3      	str	r3, [r2, #92]	; 0x5c
 8008d08:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <HAL_UART_MspInit+0xac>)
 8008d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d14:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <HAL_UART_MspInit+0xac>)
 8008d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d18:	4a10      	ldr	r2, [pc, #64]	; (8008d5c <HAL_UART_MspInit+0xac>)
 8008d1a:	f043 0301 	orr.w	r3, r3, #1
 8008d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d20:	4b0e      	ldr	r3, [pc, #56]	; (8008d5c <HAL_UART_MspInit+0xac>)
 8008d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	60bb      	str	r3, [r7, #8]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8008d2c:	230c      	movs	r3, #12
 8008d2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d30:	2302      	movs	r3, #2
 8008d32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8008d3c:	230c      	movs	r3, #12
 8008d3e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d44:	4619      	mov	r1, r3
 8008d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d4a:	f000 f96b 	bl	8009024 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8008d4e:	bf00      	nop
 8008d50:	3778      	adds	r7, #120	; 0x78
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40008000 	.word	0x40008000
 8008d5c:	40021000 	.word	0x40021000

08008d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008d60:	480d      	ldr	r0, [pc, #52]	; (8008d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008d62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d64:	480d      	ldr	r0, [pc, #52]	; (8008d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8008d66:	490e      	ldr	r1, [pc, #56]	; (8008da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008d68:	4a0e      	ldr	r2, [pc, #56]	; (8008da4 <LoopForever+0xe>)
  movs r3, #0
 8008d6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008d6c:	e002      	b.n	8008d74 <LoopCopyDataInit>

08008d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d72:	3304      	adds	r3, #4

08008d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d78:	d3f9      	bcc.n	8008d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d7a:	4a0b      	ldr	r2, [pc, #44]	; (8008da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008d7c:	4c0b      	ldr	r4, [pc, #44]	; (8008dac <LoopForever+0x16>)
  movs r3, #0
 8008d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d80:	e001      	b.n	8008d86 <LoopFillZerobss>

08008d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d84:	3204      	adds	r2, #4

08008d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d88:	d3fb      	bcc.n	8008d82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008d8a:	f7ff ff35 	bl	8008bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d8e:	f003 fb07 	bl	800c3a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008d92:	f7fe fee5 	bl	8007b60 <main>

08008d96 <LoopForever>:

LoopForever:
    b LoopForever
 8008d96:	e7fe      	b.n	8008d96 <LoopForever>
  ldr   r0, =_estack
 8008d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008da0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8008da4:	080134d0 	.word	0x080134d0
  ldr r2, =_sbss
 8008da8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8008dac:	2000079c 	.word	0x2000079c

08008db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008db0:	e7fe      	b.n	8008db0 <ADC1_2_IRQHandler>

08008db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008dbc:	2003      	movs	r0, #3
 8008dbe:	f000 f8fe 	bl	8008fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008dc2:	200f      	movs	r0, #15
 8008dc4:	f7ff fdc0 	bl	8008948 <HAL_InitTick>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	71fb      	strb	r3, [r7, #7]
 8008dd2:	e001      	b.n	8008dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008dd4:	f7ff fd94 	bl	8008900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008dd8:	79fb      	ldrb	r3, [r7, #7]

}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008de8:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <HAL_IncTick+0x1c>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <HAL_IncTick+0x20>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4413      	add	r3, r2
 8008df2:	4a03      	ldr	r2, [pc, #12]	; (8008e00 <HAL_IncTick+0x1c>)
 8008df4:	6013      	str	r3, [r2, #0]
}
 8008df6:	bf00      	nop
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20000788 	.word	0x20000788
 8008e04:	2000002c 	.word	0x2000002c

08008e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8008e0c:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <HAL_GetTick+0x14>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	20000788 	.word	0x20000788

08008e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e28:	f7ff ffee 	bl	8008e08 <HAL_GetTick>
 8008e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e38:	d004      	beq.n	8008e44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <HAL_Delay+0x40>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e44:	bf00      	nop
 8008e46:	f7ff ffdf 	bl	8008e08 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d8f7      	bhi.n	8008e46 <HAL_Delay+0x26>
  {
  }
}
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	2000002c 	.word	0x2000002c

08008e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e74:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e80:	4013      	ands	r3, r2
 8008e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e96:	4a04      	ldr	r2, [pc, #16]	; (8008ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	60d3      	str	r3, [r2, #12]
}
 8008e9c:	bf00      	nop
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	e000ed00 	.word	0xe000ed00

08008eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008eac:	b480      	push	{r7}
 8008eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	0a1b      	lsrs	r3, r3, #8
 8008eb6:	f003 0307 	and.w	r3, r3, #7
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	e000ed00 	.word	0xe000ed00

08008ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	db0b      	blt.n	8008ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	f003 021f 	and.w	r2, r3, #31
 8008ee0:	4907      	ldr	r1, [pc, #28]	; (8008f00 <__NVIC_EnableIRQ+0x38>)
 8008ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ee6:	095b      	lsrs	r3, r3, #5
 8008ee8:	2001      	movs	r0, #1
 8008eea:	fa00 f202 	lsl.w	r2, r0, r2
 8008eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008ef2:	bf00      	nop
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	e000e100 	.word	0xe000e100

08008f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	db0a      	blt.n	8008f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	490c      	ldr	r1, [pc, #48]	; (8008f50 <__NVIC_SetPriority+0x4c>)
 8008f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f22:	0112      	lsls	r2, r2, #4
 8008f24:	b2d2      	uxtb	r2, r2
 8008f26:	440b      	add	r3, r1
 8008f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008f2c:	e00a      	b.n	8008f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	4908      	ldr	r1, [pc, #32]	; (8008f54 <__NVIC_SetPriority+0x50>)
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	3b04      	subs	r3, #4
 8008f3c:	0112      	lsls	r2, r2, #4
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	440b      	add	r3, r1
 8008f42:	761a      	strb	r2, [r3, #24]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	e000e100 	.word	0xe000e100
 8008f54:	e000ed00 	.word	0xe000ed00

08008f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b089      	sub	sp, #36	; 0x24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f1c3 0307 	rsb	r3, r3, #7
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	bf28      	it	cs
 8008f76:	2304      	movcs	r3, #4
 8008f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	2b06      	cmp	r3, #6
 8008f80:	d902      	bls.n	8008f88 <NVIC_EncodePriority+0x30>
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	3b03      	subs	r3, #3
 8008f86:	e000      	b.n	8008f8a <NVIC_EncodePriority+0x32>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	fa02 f303 	lsl.w	r3, r2, r3
 8008f96:	43da      	mvns	r2, r3
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	401a      	ands	r2, r3
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008faa:	43d9      	mvns	r1, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fb0:	4313      	orrs	r3, r2
         );
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3724      	adds	r7, #36	; 0x24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff ff4c 	bl	8008e64 <__NVIC_SetPriorityGrouping>
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008fe2:	f7ff ff63 	bl	8008eac <__NVIC_GetPriorityGrouping>
 8008fe6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	6978      	ldr	r0, [r7, #20]
 8008fee:	f7ff ffb3 	bl	8008f58 <NVIC_EncodePriority>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7ff ff82 	bl	8008f04 <__NVIC_SetPriority>
}
 8009000:	bf00      	nop
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff ff56 	bl	8008ec8 <__NVIC_EnableIRQ>
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009032:	e15a      	b.n	80092ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	2101      	movs	r1, #1
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	fa01 f303 	lsl.w	r3, r1, r3
 8009040:	4013      	ands	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 814c 	beq.w	80092e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f003 0303 	and.w	r3, r3, #3
 8009054:	2b01      	cmp	r3, #1
 8009056:	d005      	beq.n	8009064 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009060:	2b02      	cmp	r3, #2
 8009062:	d130      	bne.n	80090c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	2203      	movs	r2, #3
 8009070:	fa02 f303 	lsl.w	r3, r2, r3
 8009074:	43db      	mvns	r3, r3
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	4013      	ands	r3, r2
 800907a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	fa02 f303 	lsl.w	r3, r2, r3
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800909a:	2201      	movs	r2, #1
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	fa02 f303 	lsl.w	r3, r2, r3
 80090a2:	43db      	mvns	r3, r3
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	4013      	ands	r3, r2
 80090a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	091b      	lsrs	r3, r3, #4
 80090b0:	f003 0201 	and.w	r2, r3, #1
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	4313      	orrs	r3, r2
 80090be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d017      	beq.n	8009102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	2203      	movs	r2, #3
 80090de:	fa02 f303 	lsl.w	r3, r2, r3
 80090e2:	43db      	mvns	r3, r3
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	4013      	ands	r3, r2
 80090e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	fa02 f303 	lsl.w	r3, r2, r3
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	2b02      	cmp	r3, #2
 800910c:	d123      	bne.n	8009156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	08da      	lsrs	r2, r3, #3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3208      	adds	r2, #8
 8009116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	220f      	movs	r2, #15
 8009126:	fa02 f303 	lsl.w	r3, r2, r3
 800912a:	43db      	mvns	r3, r3
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	4013      	ands	r3, r2
 8009130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	691a      	ldr	r2, [r3, #16]
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	fa02 f303 	lsl.w	r3, r2, r3
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	08da      	lsrs	r2, r3, #3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3208      	adds	r2, #8
 8009150:	6939      	ldr	r1, [r7, #16]
 8009152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	2203      	movs	r2, #3
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	43db      	mvns	r3, r3
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4013      	ands	r3, r2
 800916c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f003 0203 	and.w	r2, r3, #3
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	fa02 f303 	lsl.w	r3, r2, r3
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 80a6 	beq.w	80092e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009198:	4b5b      	ldr	r3, [pc, #364]	; (8009308 <HAL_GPIO_Init+0x2e4>)
 800919a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800919c:	4a5a      	ldr	r2, [pc, #360]	; (8009308 <HAL_GPIO_Init+0x2e4>)
 800919e:	f043 0301 	orr.w	r3, r3, #1
 80091a2:	6613      	str	r3, [r2, #96]	; 0x60
 80091a4:	4b58      	ldr	r3, [pc, #352]	; (8009308 <HAL_GPIO_Init+0x2e4>)
 80091a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	60bb      	str	r3, [r7, #8]
 80091ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80091b0:	4a56      	ldr	r2, [pc, #344]	; (800930c <HAL_GPIO_Init+0x2e8>)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	089b      	lsrs	r3, r3, #2
 80091b6:	3302      	adds	r3, #2
 80091b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f003 0303 	and.w	r3, r3, #3
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	220f      	movs	r2, #15
 80091c8:	fa02 f303 	lsl.w	r3, r2, r3
 80091cc:	43db      	mvns	r3, r3
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4013      	ands	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80091da:	d01f      	beq.n	800921c <HAL_GPIO_Init+0x1f8>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a4c      	ldr	r2, [pc, #304]	; (8009310 <HAL_GPIO_Init+0x2ec>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d019      	beq.n	8009218 <HAL_GPIO_Init+0x1f4>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a4b      	ldr	r2, [pc, #300]	; (8009314 <HAL_GPIO_Init+0x2f0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d013      	beq.n	8009214 <HAL_GPIO_Init+0x1f0>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a4a      	ldr	r2, [pc, #296]	; (8009318 <HAL_GPIO_Init+0x2f4>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00d      	beq.n	8009210 <HAL_GPIO_Init+0x1ec>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a49      	ldr	r2, [pc, #292]	; (800931c <HAL_GPIO_Init+0x2f8>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d007      	beq.n	800920c <HAL_GPIO_Init+0x1e8>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a48      	ldr	r2, [pc, #288]	; (8009320 <HAL_GPIO_Init+0x2fc>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d101      	bne.n	8009208 <HAL_GPIO_Init+0x1e4>
 8009204:	2305      	movs	r3, #5
 8009206:	e00a      	b.n	800921e <HAL_GPIO_Init+0x1fa>
 8009208:	2306      	movs	r3, #6
 800920a:	e008      	b.n	800921e <HAL_GPIO_Init+0x1fa>
 800920c:	2304      	movs	r3, #4
 800920e:	e006      	b.n	800921e <HAL_GPIO_Init+0x1fa>
 8009210:	2303      	movs	r3, #3
 8009212:	e004      	b.n	800921e <HAL_GPIO_Init+0x1fa>
 8009214:	2302      	movs	r3, #2
 8009216:	e002      	b.n	800921e <HAL_GPIO_Init+0x1fa>
 8009218:	2301      	movs	r3, #1
 800921a:	e000      	b.n	800921e <HAL_GPIO_Init+0x1fa>
 800921c:	2300      	movs	r3, #0
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	f002 0203 	and.w	r2, r2, #3
 8009224:	0092      	lsls	r2, r2, #2
 8009226:	4093      	lsls	r3, r2
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4313      	orrs	r3, r2
 800922c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800922e:	4937      	ldr	r1, [pc, #220]	; (800930c <HAL_GPIO_Init+0x2e8>)
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	089b      	lsrs	r3, r3, #2
 8009234:	3302      	adds	r3, #2
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800923c:	4b39      	ldr	r3, [pc, #228]	; (8009324 <HAL_GPIO_Init+0x300>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	43db      	mvns	r3, r3
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4013      	ands	r3, r2
 800924a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009260:	4a30      	ldr	r2, [pc, #192]	; (8009324 <HAL_GPIO_Init+0x300>)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009266:	4b2f      	ldr	r3, [pc, #188]	; (8009324 <HAL_GPIO_Init+0x300>)
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	43db      	mvns	r3, r3
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	4013      	ands	r3, r2
 8009274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800928a:	4a26      	ldr	r2, [pc, #152]	; (8009324 <HAL_GPIO_Init+0x300>)
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009290:	4b24      	ldr	r3, [pc, #144]	; (8009324 <HAL_GPIO_Init+0x300>)
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	43db      	mvns	r3, r3
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4013      	ands	r3, r2
 800929e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80092b4:	4a1b      	ldr	r2, [pc, #108]	; (8009324 <HAL_GPIO_Init+0x300>)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80092ba:	4b1a      	ldr	r3, [pc, #104]	; (8009324 <HAL_GPIO_Init+0x300>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	43db      	mvns	r3, r3
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	4013      	ands	r3, r2
 80092c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4313      	orrs	r3, r2
 80092dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80092de:	4a11      	ldr	r2, [pc, #68]	; (8009324 <HAL_GPIO_Init+0x300>)
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	3301      	adds	r3, #1
 80092e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f47f ae9d 	bne.w	8009034 <HAL_GPIO_Init+0x10>
  }
}
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	371c      	adds	r7, #28
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	40021000 	.word	0x40021000
 800930c:	40010000 	.word	0x40010000
 8009310:	48000400 	.word	0x48000400
 8009314:	48000800 	.word	0x48000800
 8009318:	48000c00 	.word	0x48000c00
 800931c:	48001000 	.word	0x48001000
 8009320:	48001400 	.word	0x48001400
 8009324:	40010400 	.word	0x40010400

08009328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	807b      	strh	r3, [r7, #2]
 8009334:	4613      	mov	r3, r2
 8009336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009338:	787b      	ldrb	r3, [r7, #1]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800933e:	887a      	ldrh	r2, [r7, #2]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009344:	e002      	b.n	800934c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009346:	887a      	ldrh	r2, [r7, #2]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009362:	4b08      	ldr	r3, [pc, #32]	; (8009384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009364:	695a      	ldr	r2, [r3, #20]
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	4013      	ands	r3, r2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d006      	beq.n	800937c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800936e:	4a05      	ldr	r2, [pc, #20]	; (8009384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009370:	88fb      	ldrh	r3, [r7, #6]
 8009372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009374:	88fb      	ldrh	r3, [r7, #6]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f806 	bl	8009388 <HAL_GPIO_EXTI_Callback>
  }
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	40010400 	.word	0x40010400

08009388 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009392:	bf00      	nop
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e081      	b.n	80094b4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d106      	bne.n	80093ca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fe fb27 	bl	8007a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2224      	movs	r2, #36	; 0x24
 80093ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0201 	bic.w	r2, r2, #1
 80093e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d107      	bne.n	8009418 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009414:	609a      	str	r2, [r3, #8]
 8009416:	e006      	b.n	8009426 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009424:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	2b02      	cmp	r3, #2
 800942c:	d104      	bne.n	8009438 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009436:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6812      	ldr	r2, [r2, #0]
 8009442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800944a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800945a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	69d9      	ldr	r1, [r3, #28]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1a      	ldr	r2, [r3, #32]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f042 0201 	orr.w	r2, r2, #1
 8009494:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	461a      	mov	r2, r3
 80094c8:	460b      	mov	r3, r1
 80094ca:	817b      	strh	r3, [r7, #10]
 80094cc:	4613      	mov	r3, r2
 80094ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b20      	cmp	r3, #32
 80094da:	f040 80da 	bne.w	8009692 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d101      	bne.n	80094ec <HAL_I2C_Master_Transmit+0x30>
 80094e8:	2302      	movs	r3, #2
 80094ea:	e0d3      	b.n	8009694 <HAL_I2C_Master_Transmit+0x1d8>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094f4:	f7ff fc88 	bl	8008e08 <HAL_GetTick>
 80094f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	2319      	movs	r3, #25
 8009500:	2201      	movs	r2, #1
 8009502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 f9e6 	bl	80098d8 <I2C_WaitOnFlagUntilTimeout>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e0be      	b.n	8009694 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2221      	movs	r2, #33	; 0x21
 800951a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2210      	movs	r2, #16
 8009522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	893a      	ldrh	r2, [r7, #8]
 8009536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009542:	b29b      	uxth	r3, r3
 8009544:	2bff      	cmp	r3, #255	; 0xff
 8009546:	d90e      	bls.n	8009566 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	22ff      	movs	r2, #255	; 0xff
 800954c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009552:	b2da      	uxtb	r2, r3
 8009554:	8979      	ldrh	r1, [r7, #10]
 8009556:	4b51      	ldr	r3, [pc, #324]	; (800969c <HAL_I2C_Master_Transmit+0x1e0>)
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 fbdc 	bl	8009d1c <I2C_TransferConfig>
 8009564:	e06c      	b.n	8009640 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956a:	b29a      	uxth	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009574:	b2da      	uxtb	r2, r3
 8009576:	8979      	ldrh	r1, [r7, #10]
 8009578:	4b48      	ldr	r3, [pc, #288]	; (800969c <HAL_I2C_Master_Transmit+0x1e0>)
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 fbcb 	bl	8009d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009586:	e05b      	b.n	8009640 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	6a39      	ldr	r1, [r7, #32]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f9e3 	bl	8009958 <I2C_WaitOnTXISFlagUntilTimeout>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e07b      	b.n	8009694 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	781a      	ldrb	r2, [r3, #0]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	3b01      	subs	r3, #1
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d034      	beq.n	8009640 <HAL_I2C_Master_Transmit+0x184>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d130      	bne.n	8009640 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	2200      	movs	r2, #0
 80095e6:	2180      	movs	r1, #128	; 0x80
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 f975 	bl	80098d8 <I2C_WaitOnFlagUntilTimeout>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e04d      	b.n	8009694 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2bff      	cmp	r3, #255	; 0xff
 8009600:	d90e      	bls.n	8009620 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	22ff      	movs	r2, #255	; 0xff
 8009606:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800960c:	b2da      	uxtb	r2, r3
 800960e:	8979      	ldrh	r1, [r7, #10]
 8009610:	2300      	movs	r3, #0
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fb7f 	bl	8009d1c <I2C_TransferConfig>
 800961e:	e00f      	b.n	8009640 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009624:	b29a      	uxth	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962e:	b2da      	uxtb	r2, r3
 8009630:	8979      	ldrh	r1, [r7, #10]
 8009632:	2300      	movs	r3, #0
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fb6e 	bl	8009d1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d19e      	bne.n	8009588 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	6a39      	ldr	r1, [r7, #32]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f9c2 	bl	80099d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e01a      	b.n	8009694 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2220      	movs	r2, #32
 8009664:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6859      	ldr	r1, [r3, #4]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8009672:	400b      	ands	r3, r1
 8009674:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2220      	movs	r2, #32
 800967a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	e000      	b.n	8009694 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009692:	2302      	movs	r3, #2
  }
}
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	80002000 	.word	0x80002000
 80096a0:	fe00e800 	.word	0xfe00e800

080096a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af02      	add	r7, sp, #8
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	607a      	str	r2, [r7, #4]
 80096ae:	461a      	mov	r2, r3
 80096b0:	460b      	mov	r3, r1
 80096b2:	817b      	strh	r3, [r7, #10]
 80096b4:	4613      	mov	r3, r2
 80096b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b20      	cmp	r3, #32
 80096c2:	f040 80db 	bne.w	800987c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d101      	bne.n	80096d4 <HAL_I2C_Master_Receive+0x30>
 80096d0:	2302      	movs	r3, #2
 80096d2:	e0d4      	b.n	800987e <HAL_I2C_Master_Receive+0x1da>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80096dc:	f7ff fb94 	bl	8008e08 <HAL_GetTick>
 80096e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	2319      	movs	r3, #25
 80096e8:	2201      	movs	r2, #1
 80096ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 f8f2 	bl	80098d8 <I2C_WaitOnFlagUntilTimeout>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e0bf      	b.n	800987e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2222      	movs	r2, #34	; 0x22
 8009702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2210      	movs	r2, #16
 800970a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	893a      	ldrh	r2, [r7, #8]
 800971e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800972a:	b29b      	uxth	r3, r3
 800972c:	2bff      	cmp	r3, #255	; 0xff
 800972e:	d90e      	bls.n	800974e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	22ff      	movs	r2, #255	; 0xff
 8009734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973a:	b2da      	uxtb	r2, r3
 800973c:	8979      	ldrh	r1, [r7, #10]
 800973e:	4b52      	ldr	r3, [pc, #328]	; (8009888 <HAL_I2C_Master_Receive+0x1e4>)
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 fae8 	bl	8009d1c <I2C_TransferConfig>
 800974c:	e06d      	b.n	800982a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009752:	b29a      	uxth	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975c:	b2da      	uxtb	r2, r3
 800975e:	8979      	ldrh	r1, [r7, #10]
 8009760:	4b49      	ldr	r3, [pc, #292]	; (8009888 <HAL_I2C_Master_Receive+0x1e4>)
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 fad7 	bl	8009d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800976e:	e05c      	b.n	800982a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	6a39      	ldr	r1, [r7, #32]
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f96b 	bl	8009a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e07c      	b.n	800987e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	b2d2      	uxtb	r2, r2
 8009790:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a0:	3b01      	subs	r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	3b01      	subs	r3, #1
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d034      	beq.n	800982a <HAL_I2C_Master_Receive+0x186>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d130      	bne.n	800982a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	2200      	movs	r2, #0
 80097d0:	2180      	movs	r1, #128	; 0x80
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 f880 	bl	80098d8 <I2C_WaitOnFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e04d      	b.n	800987e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	2bff      	cmp	r3, #255	; 0xff
 80097ea:	d90e      	bls.n	800980a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	22ff      	movs	r2, #255	; 0xff
 80097f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	8979      	ldrh	r1, [r7, #10]
 80097fa:	2300      	movs	r3, #0
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 fa8a 	bl	8009d1c <I2C_TransferConfig>
 8009808:	e00f      	b.n	800982a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009818:	b2da      	uxtb	r2, r3
 800981a:	8979      	ldrh	r1, [r7, #10]
 800981c:	2300      	movs	r3, #0
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 fa79 	bl	8009d1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982e:	b29b      	uxth	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d19d      	bne.n	8009770 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	6a39      	ldr	r1, [r7, #32]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 f8cd 	bl	80099d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e01a      	b.n	800987e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2220      	movs	r2, #32
 800984e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6859      	ldr	r1, [r3, #4]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4b0c      	ldr	r3, [pc, #48]	; (800988c <HAL_I2C_Master_Receive+0x1e8>)
 800985c:	400b      	ands	r3, r1
 800985e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2220      	movs	r2, #32
 8009864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	e000      	b.n	800987e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800987c:	2302      	movs	r3, #2
  }
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	80002400 	.word	0x80002400
 800988c:	fe00e800 	.word	0xfe00e800

08009890 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d103      	bne.n	80098ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2200      	movs	r2, #0
 80098ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d007      	beq.n	80098cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	699a      	ldr	r2, [r3, #24]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0201 	orr.w	r2, r2, #1
 80098ca:	619a      	str	r2, [r3, #24]
  }
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	4613      	mov	r3, r2
 80098e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098e8:	e022      	b.n	8009930 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f0:	d01e      	beq.n	8009930 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098f2:	f7ff fa89 	bl	8008e08 <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d302      	bcc.n	8009908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d113      	bne.n	8009930 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990c:	f043 0220 	orr.w	r2, r3, #32
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2220      	movs	r2, #32
 8009918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e00f      	b.n	8009950 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699a      	ldr	r2, [r3, #24]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	4013      	ands	r3, r2
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	429a      	cmp	r2, r3
 800993e:	bf0c      	ite	eq
 8009940:	2301      	moveq	r3, #1
 8009942:	2300      	movne	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	461a      	mov	r2, r3
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	429a      	cmp	r2, r3
 800994c:	d0cd      	beq.n	80098ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009964:	e02c      	b.n	80099c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f8ea 	bl	8009b44 <I2C_IsErrorOccurred>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e02a      	b.n	80099d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009980:	d01e      	beq.n	80099c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009982:	f7ff fa41 	bl	8008e08 <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	429a      	cmp	r2, r3
 8009990:	d302      	bcc.n	8009998 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d113      	bne.n	80099c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800999c:	f043 0220 	orr.w	r2, r3, #32
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e007      	b.n	80099d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	f003 0302 	and.w	r3, r3, #2
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d1cb      	bne.n	8009966 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099e4:	e028      	b.n	8009a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 f8aa 	bl	8009b44 <I2C_IsErrorOccurred>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e026      	b.n	8009a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099fa:	f7ff fa05 	bl	8008e08 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d302      	bcc.n	8009a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d113      	bne.n	8009a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a14:	f043 0220 	orr.w	r2, r3, #32
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e007      	b.n	8009a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	f003 0320 	and.w	r3, r3, #32
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	d1cf      	bne.n	80099e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a5c:	e064      	b.n	8009b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f86e 	bl	8009b44 <I2C_IsErrorOccurred>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e062      	b.n	8009b38 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d138      	bne.n	8009af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d105      	bne.n	8009a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e04e      	b.n	8009b38 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	2b10      	cmp	r3, #16
 8009aa6:	d107      	bne.n	8009ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2210      	movs	r2, #16
 8009aae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2204      	movs	r2, #4
 8009ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8009ab6:	e002      	b.n	8009abe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6859      	ldr	r1, [r3, #4]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	4b1b      	ldr	r3, [pc, #108]	; (8009b40 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8009ad2:	400b      	ands	r3, r1
 8009ad4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e022      	b.n	8009b38 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009af2:	f7ff f989 	bl	8008e08 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d302      	bcc.n	8009b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10f      	bne.n	8009b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0c:	f043 0220 	orr.w	r2, r3, #32
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e007      	b.n	8009b38 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d193      	bne.n	8009a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	fe00e800 	.word	0xfe00e800

08009b44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08a      	sub	sp, #40	; 0x28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	f003 0310 	and.w	r3, r3, #16
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d075      	beq.n	8009c5c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2210      	movs	r2, #16
 8009b76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b78:	e056      	b.n	8009c28 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b80:	d052      	beq.n	8009c28 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b82:	f7ff f941 	bl	8008e08 <HAL_GetTick>
 8009b86:	4602      	mov	r2, r0
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d302      	bcc.n	8009b98 <I2C_IsErrorOccurred+0x54>
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d147      	bne.n	8009c28 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ba2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009baa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bba:	d12e      	bne.n	8009c1a <I2C_IsErrorOccurred+0xd6>
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bc2:	d02a      	beq.n	8009c1a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009bc4:	7cfb      	ldrb	r3, [r7, #19]
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d027      	beq.n	8009c1a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bd8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009bda:	f7ff f915 	bl	8008e08 <HAL_GetTick>
 8009bde:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009be0:	e01b      	b.n	8009c1a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009be2:	f7ff f911 	bl	8008e08 <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	2b19      	cmp	r3, #25
 8009bee:	d914      	bls.n	8009c1a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf4:	f043 0220 	orr.w	r2, r3, #32
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d1dc      	bne.n	8009be2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d003      	beq.n	8009c3e <I2C_IsErrorOccurred+0xfa>
 8009c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d09d      	beq.n	8009b7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d103      	bne.n	8009c4e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	f043 0304 	orr.w	r3, r3, #4
 8009c54:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	f043 0301 	orr.w	r3, r3, #1
 8009c74:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	f043 0308 	orr.w	r3, r3, #8
 8009c96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ca0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	f043 0302 	orr.w	r3, r3, #2
 8009cb8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d01c      	beq.n	8009d0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff fddc 	bl	8009890 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6859      	ldr	r1, [r3, #4]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <I2C_IsErrorOccurred+0x1d4>)
 8009ce4:	400b      	ands	r3, r1
 8009ce6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3728      	adds	r7, #40	; 0x28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	fe00e800 	.word	0xfe00e800

08009d1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	607b      	str	r3, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	817b      	strh	r3, [r7, #10]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d2e:	897b      	ldrh	r3, [r7, #10]
 8009d30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d34:	7a7b      	ldrb	r3, [r7, #9]
 8009d36:	041b      	lsls	r3, r3, #16
 8009d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d3c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d4a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	0d5b      	lsrs	r3, r3, #21
 8009d56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d5a:	4b08      	ldr	r3, [pc, #32]	; (8009d7c <I2C_TransferConfig+0x60>)
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	ea02 0103 	and.w	r1, r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d6e:	bf00      	nop
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	03ff63ff 	.word	0x03ff63ff

08009d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d138      	bne.n	8009e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d101      	bne.n	8009da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e032      	b.n	8009e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2224      	movs	r2, #36	; 0x24
 8009db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0201 	bic.w	r2, r2, #1
 8009dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6819      	ldr	r1, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0201 	orr.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	e000      	b.n	8009e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e08:	2302      	movs	r3, #2
  }
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	d139      	bne.n	8009ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e033      	b.n	8009ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2224      	movs	r2, #36	; 0x24
 8009e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 0201 	bic.w	r2, r2, #1
 8009e58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f042 0201 	orr.w	r2, r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e000      	b.n	8009ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ea0:	2302      	movs	r3, #2
  }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
	...

08009eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d141      	bne.n	8009f42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009ebe:	4b4b      	ldr	r3, [pc, #300]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eca:	d131      	bne.n	8009f30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ecc:	4b47      	ldr	r3, [pc, #284]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ed2:	4a46      	ldr	r2, [pc, #280]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009edc:	4b43      	ldr	r3, [pc, #268]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ee4:	4a41      	ldr	r2, [pc, #260]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009eec:	4b40      	ldr	r3, [pc, #256]	; (8009ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2232      	movs	r2, #50	; 0x32
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	4a3f      	ldr	r2, [pc, #252]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8009efc:	0c9b      	lsrs	r3, r3, #18
 8009efe:	3301      	adds	r3, #1
 8009f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f02:	e002      	b.n	8009f0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f0a:	4b38      	ldr	r3, [pc, #224]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f16:	d102      	bne.n	8009f1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1f2      	bne.n	8009f04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009f1e:	4b33      	ldr	r3, [pc, #204]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f2a:	d158      	bne.n	8009fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e057      	b.n	8009fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009f30:	4b2e      	ldr	r3, [pc, #184]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f36:	4a2d      	ldr	r2, [pc, #180]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009f40:	e04d      	b.n	8009fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f48:	d141      	bne.n	8009fce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009f4a:	4b28      	ldr	r3, [pc, #160]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f56:	d131      	bne.n	8009fbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009f58:	4b24      	ldr	r3, [pc, #144]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f5e:	4a23      	ldr	r2, [pc, #140]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f68:	4b20      	ldr	r3, [pc, #128]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f70:	4a1e      	ldr	r2, [pc, #120]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009f78:	4b1d      	ldr	r3, [pc, #116]	; (8009ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2232      	movs	r2, #50	; 0x32
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	4a1c      	ldr	r2, [pc, #112]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009f84:	fba2 2303 	umull	r2, r3, r2, r3
 8009f88:	0c9b      	lsrs	r3, r3, #18
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f8e:	e002      	b.n	8009f96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f96:	4b15      	ldr	r3, [pc, #84]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa2:	d102      	bne.n	8009faa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1f2      	bne.n	8009f90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009faa:	4b10      	ldr	r3, [pc, #64]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb6:	d112      	bne.n	8009fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e011      	b.n	8009fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009fbc:	4b0b      	ldr	r3, [pc, #44]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fc2:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009fcc:	e007      	b.n	8009fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009fce:	4b07      	ldr	r3, [pc, #28]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009fd6:	4a05      	ldr	r2, [pc, #20]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	40007000 	.word	0x40007000
 8009ff0:	20000024 	.word	0x20000024
 8009ff4:	431bde83 	.word	0x431bde83

08009ff8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009ffc:	4b05      	ldr	r3, [pc, #20]	; (800a014 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	4a04      	ldr	r2, [pc, #16]	; (800a014 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a006:	6093      	str	r3, [r2, #8]
}
 800a008:	bf00      	nop
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	40007000 	.word	0x40007000

0800a018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e306      	b.n	800a638 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d075      	beq.n	800a122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a036:	4b97      	ldr	r3, [pc, #604]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f003 030c 	and.w	r3, r3, #12
 800a03e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a040:	4b94      	ldr	r3, [pc, #592]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	f003 0303 	and.w	r3, r3, #3
 800a048:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b0c      	cmp	r3, #12
 800a04e:	d102      	bne.n	800a056 <HAL_RCC_OscConfig+0x3e>
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b03      	cmp	r3, #3
 800a054:	d002      	beq.n	800a05c <HAL_RCC_OscConfig+0x44>
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2b08      	cmp	r3, #8
 800a05a:	d10b      	bne.n	800a074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a05c:	4b8d      	ldr	r3, [pc, #564]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d05b      	beq.n	800a120 <HAL_RCC_OscConfig+0x108>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d157      	bne.n	800a120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e2e1      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a07c:	d106      	bne.n	800a08c <HAL_RCC_OscConfig+0x74>
 800a07e:	4b85      	ldr	r3, [pc, #532]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a84      	ldr	r2, [pc, #528]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	e01d      	b.n	800a0c8 <HAL_RCC_OscConfig+0xb0>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a094:	d10c      	bne.n	800a0b0 <HAL_RCC_OscConfig+0x98>
 800a096:	4b7f      	ldr	r3, [pc, #508]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a7e      	ldr	r2, [pc, #504]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a09c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0a0:	6013      	str	r3, [r2, #0]
 800a0a2:	4b7c      	ldr	r3, [pc, #496]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a7b      	ldr	r2, [pc, #492]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a0a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	e00b      	b.n	800a0c8 <HAL_RCC_OscConfig+0xb0>
 800a0b0:	4b78      	ldr	r3, [pc, #480]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a77      	ldr	r2, [pc, #476]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a0b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	4b75      	ldr	r3, [pc, #468]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a74      	ldr	r2, [pc, #464]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a0c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d013      	beq.n	800a0f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d0:	f7fe fe9a 	bl	8008e08 <HAL_GetTick>
 800a0d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0d8:	f7fe fe96 	bl	8008e08 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b64      	cmp	r3, #100	; 0x64
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e2a6      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a0ea:	4b6a      	ldr	r3, [pc, #424]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0f0      	beq.n	800a0d8 <HAL_RCC_OscConfig+0xc0>
 800a0f6:	e014      	b.n	800a122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f8:	f7fe fe86 	bl	8008e08 <HAL_GetTick>
 800a0fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a0fe:	e008      	b.n	800a112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a100:	f7fe fe82 	bl	8008e08 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	2b64      	cmp	r3, #100	; 0x64
 800a10c:	d901      	bls.n	800a112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e292      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a112:	4b60      	ldr	r3, [pc, #384]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1f0      	bne.n	800a100 <HAL_RCC_OscConfig+0xe8>
 800a11e:	e000      	b.n	800a122 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0302 	and.w	r3, r3, #2
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d075      	beq.n	800a21a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a12e:	4b59      	ldr	r3, [pc, #356]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f003 030c 	and.w	r3, r3, #12
 800a136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a138:	4b56      	ldr	r3, [pc, #344]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f003 0303 	and.w	r3, r3, #3
 800a140:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	2b0c      	cmp	r3, #12
 800a146:	d102      	bne.n	800a14e <HAL_RCC_OscConfig+0x136>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d002      	beq.n	800a154 <HAL_RCC_OscConfig+0x13c>
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b04      	cmp	r3, #4
 800a152:	d11f      	bne.n	800a194 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a154:	4b4f      	ldr	r3, [pc, #316]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d005      	beq.n	800a16c <HAL_RCC_OscConfig+0x154>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e265      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a16c:	4b49      	ldr	r3, [pc, #292]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	061b      	lsls	r3, r3, #24
 800a17a:	4946      	ldr	r1, [pc, #280]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a17c:	4313      	orrs	r3, r2
 800a17e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a180:	4b45      	ldr	r3, [pc, #276]	; (800a298 <HAL_RCC_OscConfig+0x280>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe fbdf 	bl	8008948 <HAL_InitTick>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d043      	beq.n	800a218 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e251      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d023      	beq.n	800a1e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a19c:	4b3d      	ldr	r3, [pc, #244]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a3c      	ldr	r2, [pc, #240]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a1a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1a8:	f7fe fe2e 	bl	8008e08 <HAL_GetTick>
 800a1ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a1ae:	e008      	b.n	800a1c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1b0:	f7fe fe2a 	bl	8008e08 <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e23a      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a1c2:	4b34      	ldr	r3, [pc, #208]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0f0      	beq.n	800a1b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ce:	4b31      	ldr	r3, [pc, #196]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	061b      	lsls	r3, r3, #24
 800a1dc:	492d      	ldr	r1, [pc, #180]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	604b      	str	r3, [r1, #4]
 800a1e2:	e01a      	b.n	800a21a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1e4:	4b2b      	ldr	r3, [pc, #172]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a2a      	ldr	r2, [pc, #168]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a1ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f0:	f7fe fe0a 	bl	8008e08 <HAL_GetTick>
 800a1f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a1f6:	e008      	b.n	800a20a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1f8:	f7fe fe06 	bl	8008e08 <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d901      	bls.n	800a20a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e216      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a20a:	4b22      	ldr	r3, [pc, #136]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1f0      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x1e0>
 800a216:	e000      	b.n	800a21a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0308 	and.w	r3, r3, #8
 800a222:	2b00      	cmp	r3, #0
 800a224:	d041      	beq.n	800a2aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d01c      	beq.n	800a268 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a22e:	4b19      	ldr	r3, [pc, #100]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a234:	4a17      	ldr	r2, [pc, #92]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a236:	f043 0301 	orr.w	r3, r3, #1
 800a23a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a23e:	f7fe fde3 	bl	8008e08 <HAL_GetTick>
 800a242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a244:	e008      	b.n	800a258 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a246:	f7fe fddf 	bl	8008e08 <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	2b02      	cmp	r3, #2
 800a252:	d901      	bls.n	800a258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a254:	2303      	movs	r3, #3
 800a256:	e1ef      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a258:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a25a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a25e:	f003 0302 	and.w	r3, r3, #2
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0ef      	beq.n	800a246 <HAL_RCC_OscConfig+0x22e>
 800a266:	e020      	b.n	800a2aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a26a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a26e:	4a09      	ldr	r2, [pc, #36]	; (800a294 <HAL_RCC_OscConfig+0x27c>)
 800a270:	f023 0301 	bic.w	r3, r3, #1
 800a274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a278:	f7fe fdc6 	bl	8008e08 <HAL_GetTick>
 800a27c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a27e:	e00d      	b.n	800a29c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a280:	f7fe fdc2 	bl	8008e08 <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d906      	bls.n	800a29c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e1d2      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
 800a292:	bf00      	nop
 800a294:	40021000 	.word	0x40021000
 800a298:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a29c:	4b8c      	ldr	r3, [pc, #560]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a29e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1ea      	bne.n	800a280 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0304 	and.w	r3, r3, #4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 80a6 	beq.w	800a404 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a2bc:	4b84      	ldr	r3, [pc, #528]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <HAL_RCC_OscConfig+0x2b4>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e000      	b.n	800a2ce <HAL_RCC_OscConfig+0x2b6>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00d      	beq.n	800a2ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2d2:	4b7f      	ldr	r3, [pc, #508]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d6:	4a7e      	ldr	r2, [pc, #504]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a2d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2dc:	6593      	str	r3, [r2, #88]	; 0x58
 800a2de:	4b7c      	ldr	r3, [pc, #496]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a2e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2e6:	60fb      	str	r3, [r7, #12]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2ee:	4b79      	ldr	r3, [pc, #484]	; (800a4d4 <HAL_RCC_OscConfig+0x4bc>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d118      	bne.n	800a32c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2fa:	4b76      	ldr	r3, [pc, #472]	; (800a4d4 <HAL_RCC_OscConfig+0x4bc>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a75      	ldr	r2, [pc, #468]	; (800a4d4 <HAL_RCC_OscConfig+0x4bc>)
 800a300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a306:	f7fe fd7f 	bl	8008e08 <HAL_GetTick>
 800a30a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a30c:	e008      	b.n	800a320 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a30e:	f7fe fd7b 	bl	8008e08 <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d901      	bls.n	800a320 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e18b      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a320:	4b6c      	ldr	r3, [pc, #432]	; (800a4d4 <HAL_RCC_OscConfig+0x4bc>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0f0      	beq.n	800a30e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d108      	bne.n	800a346 <HAL_RCC_OscConfig+0x32e>
 800a334:	4b66      	ldr	r3, [pc, #408]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33a:	4a65      	ldr	r2, [pc, #404]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a33c:	f043 0301 	orr.w	r3, r3, #1
 800a340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a344:	e024      	b.n	800a390 <HAL_RCC_OscConfig+0x378>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d110      	bne.n	800a370 <HAL_RCC_OscConfig+0x358>
 800a34e:	4b60      	ldr	r3, [pc, #384]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a354:	4a5e      	ldr	r2, [pc, #376]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a356:	f043 0304 	orr.w	r3, r3, #4
 800a35a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a35e:	4b5c      	ldr	r3, [pc, #368]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a364:	4a5a      	ldr	r2, [pc, #360]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a366:	f043 0301 	orr.w	r3, r3, #1
 800a36a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a36e:	e00f      	b.n	800a390 <HAL_RCC_OscConfig+0x378>
 800a370:	4b57      	ldr	r3, [pc, #348]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a376:	4a56      	ldr	r2, [pc, #344]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a378:	f023 0301 	bic.w	r3, r3, #1
 800a37c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a380:	4b53      	ldr	r3, [pc, #332]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a386:	4a52      	ldr	r2, [pc, #328]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a388:	f023 0304 	bic.w	r3, r3, #4
 800a38c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d016      	beq.n	800a3c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a398:	f7fe fd36 	bl	8008e08 <HAL_GetTick>
 800a39c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a39e:	e00a      	b.n	800a3b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3a0:	f7fe fd32 	bl	8008e08 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e140      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3b6:	4b46      	ldr	r3, [pc, #280]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0ed      	beq.n	800a3a0 <HAL_RCC_OscConfig+0x388>
 800a3c4:	e015      	b.n	800a3f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3c6:	f7fe fd1f 	bl	8008e08 <HAL_GetTick>
 800a3ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a3cc:	e00a      	b.n	800a3e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ce:	f7fe fd1b 	bl	8008e08 <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d901      	bls.n	800a3e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e129      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a3e4:	4b3a      	ldr	r3, [pc, #232]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1ed      	bne.n	800a3ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3f2:	7ffb      	ldrb	r3, [r7, #31]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d105      	bne.n	800a404 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3f8:	4b35      	ldr	r3, [pc, #212]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a3fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3fc:	4a34      	ldr	r2, [pc, #208]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a3fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a402:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0320 	and.w	r3, r3, #32
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d03c      	beq.n	800a48a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01c      	beq.n	800a452 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a418:	4b2d      	ldr	r3, [pc, #180]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a41a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a41e:	4a2c      	ldr	r2, [pc, #176]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a420:	f043 0301 	orr.w	r3, r3, #1
 800a424:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a428:	f7fe fcee 	bl	8008e08 <HAL_GetTick>
 800a42c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a430:	f7fe fcea 	bl	8008e08 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e0fa      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a442:	4b23      	ldr	r3, [pc, #140]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0ef      	beq.n	800a430 <HAL_RCC_OscConfig+0x418>
 800a450:	e01b      	b.n	800a48a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a452:	4b1f      	ldr	r3, [pc, #124]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a458:	4a1d      	ldr	r2, [pc, #116]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a45a:	f023 0301 	bic.w	r3, r3, #1
 800a45e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a462:	f7fe fcd1 	bl	8008e08 <HAL_GetTick>
 800a466:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a468:	e008      	b.n	800a47c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a46a:	f7fe fccd 	bl	8008e08 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	2b02      	cmp	r3, #2
 800a476:	d901      	bls.n	800a47c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e0dd      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a47c:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a47e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1ef      	bne.n	800a46a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 80d1 	beq.w	800a636 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a494:	4b0e      	ldr	r3, [pc, #56]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f003 030c 	and.w	r3, r3, #12
 800a49c:	2b0c      	cmp	r3, #12
 800a49e:	f000 808b 	beq.w	800a5b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d15e      	bne.n	800a568 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a08      	ldr	r2, [pc, #32]	; (800a4d0 <HAL_RCC_OscConfig+0x4b8>)
 800a4b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b6:	f7fe fca7 	bl	8008e08 <HAL_GetTick>
 800a4ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4bc:	e00c      	b.n	800a4d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4be:	f7fe fca3 	bl	8008e08 <HAL_GetTick>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d905      	bls.n	800a4d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e0b3      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
 800a4d0:	40021000 	.word	0x40021000
 800a4d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4d8:	4b59      	ldr	r3, [pc, #356]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1ec      	bne.n	800a4be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4e4:	4b56      	ldr	r3, [pc, #344]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a4e6:	68da      	ldr	r2, [r3, #12]
 800a4e8:	4b56      	ldr	r3, [pc, #344]	; (800a644 <HAL_RCC_OscConfig+0x62c>)
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6a11      	ldr	r1, [r2, #32]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a4f4:	3a01      	subs	r2, #1
 800a4f6:	0112      	lsls	r2, r2, #4
 800a4f8:	4311      	orrs	r1, r2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a4fe:	0212      	lsls	r2, r2, #8
 800a500:	4311      	orrs	r1, r2
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a506:	0852      	lsrs	r2, r2, #1
 800a508:	3a01      	subs	r2, #1
 800a50a:	0552      	lsls	r2, r2, #21
 800a50c:	4311      	orrs	r1, r2
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a512:	0852      	lsrs	r2, r2, #1
 800a514:	3a01      	subs	r2, #1
 800a516:	0652      	lsls	r2, r2, #25
 800a518:	4311      	orrs	r1, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a51e:	06d2      	lsls	r2, r2, #27
 800a520:	430a      	orrs	r2, r1
 800a522:	4947      	ldr	r1, [pc, #284]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a524:	4313      	orrs	r3, r2
 800a526:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a528:	4b45      	ldr	r3, [pc, #276]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a44      	ldr	r2, [pc, #272]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a52e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a532:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a534:	4b42      	ldr	r3, [pc, #264]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	4a41      	ldr	r2, [pc, #260]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a53a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a53e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a540:	f7fe fc62 	bl	8008e08 <HAL_GetTick>
 800a544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a546:	e008      	b.n	800a55a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a548:	f7fe fc5e 	bl	8008e08 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b02      	cmp	r3, #2
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e06e      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a55a:	4b39      	ldr	r3, [pc, #228]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0f0      	beq.n	800a548 <HAL_RCC_OscConfig+0x530>
 800a566:	e066      	b.n	800a636 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a568:	4b35      	ldr	r3, [pc, #212]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a34      	ldr	r2, [pc, #208]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a56e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a572:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a574:	4b32      	ldr	r3, [pc, #200]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	4a31      	ldr	r2, [pc, #196]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a57a:	f023 0303 	bic.w	r3, r3, #3
 800a57e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a580:	4b2f      	ldr	r3, [pc, #188]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	4a2e      	ldr	r2, [pc, #184]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a586:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a58a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a58e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a590:	f7fe fc3a 	bl	8008e08 <HAL_GetTick>
 800a594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a596:	e008      	b.n	800a5aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a598:	f7fe fc36 	bl	8008e08 <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d901      	bls.n	800a5aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e046      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a5aa:	4b25      	ldr	r3, [pc, #148]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1f0      	bne.n	800a598 <HAL_RCC_OscConfig+0x580>
 800a5b6:	e03e      	b.n	800a636 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d101      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e039      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a5c4:	4b1e      	ldr	r3, [pc, #120]	; (800a640 <HAL_RCC_OscConfig+0x628>)
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f003 0203 	and.w	r2, r3, #3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d12c      	bne.n	800a632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d123      	bne.n	800a632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d11b      	bne.n	800a632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a604:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a606:	429a      	cmp	r2, r3
 800a608:	d113      	bne.n	800a632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a614:	085b      	lsrs	r3, r3, #1
 800a616:	3b01      	subs	r3, #1
 800a618:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d109      	bne.n	800a632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a628:	085b      	lsrs	r3, r3, #1
 800a62a:	3b01      	subs	r3, #1
 800a62c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a62e:	429a      	cmp	r2, r3
 800a630:	d001      	beq.n	800a636 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e000      	b.n	800a638 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3720      	adds	r7, #32
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	40021000 	.word	0x40021000
 800a644:	019f800c 	.word	0x019f800c

0800a648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e11e      	b.n	800a89e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a660:	4b91      	ldr	r3, [pc, #580]	; (800a8a8 <HAL_RCC_ClockConfig+0x260>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d910      	bls.n	800a690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a66e:	4b8e      	ldr	r3, [pc, #568]	; (800a8a8 <HAL_RCC_ClockConfig+0x260>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f023 020f 	bic.w	r2, r3, #15
 800a676:	498c      	ldr	r1, [pc, #560]	; (800a8a8 <HAL_RCC_ClockConfig+0x260>)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a67e:	4b8a      	ldr	r3, [pc, #552]	; (800a8a8 <HAL_RCC_ClockConfig+0x260>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 030f 	and.w	r3, r3, #15
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d001      	beq.n	800a690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e106      	b.n	800a89e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d073      	beq.n	800a784 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d129      	bne.n	800a6f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a6a4:	4b81      	ldr	r3, [pc, #516]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e0f4      	b.n	800a89e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a6b4:	f000 f9d0 	bl	800aa58 <RCC_GetSysClockFreqFromPLLSource>
 800a6b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	4a7c      	ldr	r2, [pc, #496]	; (800a8b0 <HAL_RCC_ClockConfig+0x268>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d93f      	bls.n	800a742 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a6c2:	4b7a      	ldr	r3, [pc, #488]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d009      	beq.n	800a6e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d033      	beq.n	800a742 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d12f      	bne.n	800a742 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a6e2:	4b72      	ldr	r3, [pc, #456]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6ea:	4a70      	ldr	r2, [pc, #448]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a6f2:	2380      	movs	r3, #128	; 0x80
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	e024      	b.n	800a742 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d107      	bne.n	800a710 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a700:	4b6a      	ldr	r3, [pc, #424]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d109      	bne.n	800a720 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e0c6      	b.n	800a89e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a710:	4b66      	ldr	r3, [pc, #408]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e0be      	b.n	800a89e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a720:	f000 f8ce 	bl	800a8c0 <HAL_RCC_GetSysClockFreq>
 800a724:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	4a61      	ldr	r2, [pc, #388]	; (800a8b0 <HAL_RCC_ClockConfig+0x268>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d909      	bls.n	800a742 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a72e:	4b5f      	ldr	r3, [pc, #380]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a736:	4a5d      	ldr	r2, [pc, #372]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a73c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a73e:	2380      	movs	r3, #128	; 0x80
 800a740:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a742:	4b5a      	ldr	r3, [pc, #360]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f023 0203 	bic.w	r2, r3, #3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	4957      	ldr	r1, [pc, #348]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a750:	4313      	orrs	r3, r2
 800a752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a754:	f7fe fb58 	bl	8008e08 <HAL_GetTick>
 800a758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a75a:	e00a      	b.n	800a772 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a75c:	f7fe fb54 	bl	8008e08 <HAL_GetTick>
 800a760:	4602      	mov	r2, r0
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	f241 3288 	movw	r2, #5000	; 0x1388
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d901      	bls.n	800a772 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e095      	b.n	800a89e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a772:	4b4e      	ldr	r3, [pc, #312]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f003 020c 	and.w	r2, r3, #12
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	429a      	cmp	r2, r3
 800a782:	d1eb      	bne.n	800a75c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0302 	and.w	r3, r3, #2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d023      	beq.n	800a7d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d005      	beq.n	800a7a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a79c:	4b43      	ldr	r3, [pc, #268]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	4a42      	ldr	r2, [pc, #264]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a7a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a7a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d007      	beq.n	800a7c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a7b4:	4b3d      	ldr	r3, [pc, #244]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7bc:	4a3b      	ldr	r2, [pc, #236]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a7be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a7c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7c4:	4b39      	ldr	r3, [pc, #228]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	4936      	ldr	r1, [pc, #216]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	608b      	str	r3, [r1, #8]
 800a7d6:	e008      	b.n	800a7ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2b80      	cmp	r3, #128	; 0x80
 800a7dc:	d105      	bne.n	800a7ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a7de:	4b33      	ldr	r3, [pc, #204]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	4a32      	ldr	r2, [pc, #200]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a7e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a7ea:	4b2f      	ldr	r3, [pc, #188]	; (800a8a8 <HAL_RCC_ClockConfig+0x260>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 030f 	and.w	r3, r3, #15
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d21d      	bcs.n	800a834 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7f8:	4b2b      	ldr	r3, [pc, #172]	; (800a8a8 <HAL_RCC_ClockConfig+0x260>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f023 020f 	bic.w	r2, r3, #15
 800a800:	4929      	ldr	r1, [pc, #164]	; (800a8a8 <HAL_RCC_ClockConfig+0x260>)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	4313      	orrs	r3, r2
 800a806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a808:	f7fe fafe 	bl	8008e08 <HAL_GetTick>
 800a80c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a80e:	e00a      	b.n	800a826 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a810:	f7fe fafa 	bl	8008e08 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a81e:	4293      	cmp	r3, r2
 800a820:	d901      	bls.n	800a826 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	e03b      	b.n	800a89e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a826:	4b20      	ldr	r3, [pc, #128]	; (800a8a8 <HAL_RCC_ClockConfig+0x260>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 030f 	and.w	r3, r3, #15
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d1ed      	bne.n	800a810 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0304 	and.w	r3, r3, #4
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d008      	beq.n	800a852 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a840:	4b1a      	ldr	r3, [pc, #104]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	4917      	ldr	r1, [pc, #92]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0308 	and.w	r3, r3, #8
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d009      	beq.n	800a872 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a85e:	4b13      	ldr	r3, [pc, #76]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	00db      	lsls	r3, r3, #3
 800a86c:	490f      	ldr	r1, [pc, #60]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a872:	f000 f825 	bl	800a8c0 <HAL_RCC_GetSysClockFreq>
 800a876:	4602      	mov	r2, r0
 800a878:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <HAL_RCC_ClockConfig+0x264>)
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	091b      	lsrs	r3, r3, #4
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	490c      	ldr	r1, [pc, #48]	; (800a8b4 <HAL_RCC_ClockConfig+0x26c>)
 800a884:	5ccb      	ldrb	r3, [r1, r3]
 800a886:	f003 031f 	and.w	r3, r3, #31
 800a88a:	fa22 f303 	lsr.w	r3, r2, r3
 800a88e:	4a0a      	ldr	r2, [pc, #40]	; (800a8b8 <HAL_RCC_ClockConfig+0x270>)
 800a890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a892:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <HAL_RCC_ClockConfig+0x274>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe f856 	bl	8008948 <HAL_InitTick>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40022000 	.word	0x40022000
 800a8ac:	40021000 	.word	0x40021000
 800a8b0:	04c4b400 	.word	0x04c4b400
 800a8b4:	08012b58 	.word	0x08012b58
 800a8b8:	20000024 	.word	0x20000024
 800a8bc:	20000028 	.word	0x20000028

0800a8c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a8c6:	4b2c      	ldr	r3, [pc, #176]	; (800a978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f003 030c 	and.w	r3, r3, #12
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d102      	bne.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a8d2:	4b2a      	ldr	r3, [pc, #168]	; (800a97c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a8d4:	613b      	str	r3, [r7, #16]
 800a8d6:	e047      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a8d8:	4b27      	ldr	r3, [pc, #156]	; (800a978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f003 030c 	and.w	r3, r3, #12
 800a8e0:	2b08      	cmp	r3, #8
 800a8e2:	d102      	bne.n	800a8ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a8e4:	4b26      	ldr	r3, [pc, #152]	; (800a980 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	e03e      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a8ea:	4b23      	ldr	r3, [pc, #140]	; (800a978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f003 030c 	and.w	r3, r3, #12
 800a8f2:	2b0c      	cmp	r3, #12
 800a8f4:	d136      	bne.n	800a964 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a8f6:	4b20      	ldr	r3, [pc, #128]	; (800a978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f003 0303 	and.w	r3, r3, #3
 800a8fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a900:	4b1d      	ldr	r3, [pc, #116]	; (800a978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	091b      	lsrs	r3, r3, #4
 800a906:	f003 030f 	and.w	r3, r3, #15
 800a90a:	3301      	adds	r3, #1
 800a90c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b03      	cmp	r3, #3
 800a912:	d10c      	bne.n	800a92e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a914:	4a1a      	ldr	r2, [pc, #104]	; (800a980 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	fbb2 f3f3 	udiv	r3, r2, r3
 800a91c:	4a16      	ldr	r2, [pc, #88]	; (800a978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a91e:	68d2      	ldr	r2, [r2, #12]
 800a920:	0a12      	lsrs	r2, r2, #8
 800a922:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a926:	fb02 f303 	mul.w	r3, r2, r3
 800a92a:	617b      	str	r3, [r7, #20]
      break;
 800a92c:	e00c      	b.n	800a948 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a92e:	4a13      	ldr	r2, [pc, #76]	; (800a97c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	fbb2 f3f3 	udiv	r3, r2, r3
 800a936:	4a10      	ldr	r2, [pc, #64]	; (800a978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a938:	68d2      	ldr	r2, [r2, #12]
 800a93a:	0a12      	lsrs	r2, r2, #8
 800a93c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a940:	fb02 f303 	mul.w	r3, r2, r3
 800a944:	617b      	str	r3, [r7, #20]
      break;
 800a946:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a948:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	0e5b      	lsrs	r3, r3, #25
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	3301      	adds	r3, #1
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a960:	613b      	str	r3, [r7, #16]
 800a962:	e001      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a964:	2300      	movs	r3, #0
 800a966:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a968:	693b      	ldr	r3, [r7, #16]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	40021000 	.word	0x40021000
 800a97c:	00f42400 	.word	0x00f42400
 800a980:	016e3600 	.word	0x016e3600

0800a984 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a988:	4b03      	ldr	r3, [pc, #12]	; (800a998 <HAL_RCC_GetHCLKFreq+0x14>)
 800a98a:	681b      	ldr	r3, [r3, #0]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	20000024 	.word	0x20000024

0800a99c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a9a0:	f7ff fff0 	bl	800a984 <HAL_RCC_GetHCLKFreq>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	4b06      	ldr	r3, [pc, #24]	; (800a9c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	0a1b      	lsrs	r3, r3, #8
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	4904      	ldr	r1, [pc, #16]	; (800a9c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a9b2:	5ccb      	ldrb	r3, [r1, r3]
 800a9b4:	f003 031f 	and.w	r3, r3, #31
 800a9b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	40021000 	.word	0x40021000
 800a9c4:	08012b68 	.word	0x08012b68

0800a9c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a9cc:	f7ff ffda 	bl	800a984 <HAL_RCC_GetHCLKFreq>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	0adb      	lsrs	r3, r3, #11
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	4904      	ldr	r1, [pc, #16]	; (800a9f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a9de:	5ccb      	ldrb	r3, [r1, r3]
 800a9e0:	f003 031f 	and.w	r3, r3, #31
 800a9e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	40021000 	.word	0x40021000
 800a9f0:	08012b68 	.word	0x08012b68

0800a9f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	220f      	movs	r2, #15
 800aa02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800aa04:	4b12      	ldr	r3, [pc, #72]	; (800aa50 <HAL_RCC_GetClockConfig+0x5c>)
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f003 0203 	and.w	r2, r3, #3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800aa10:	4b0f      	ldr	r3, [pc, #60]	; (800aa50 <HAL_RCC_GetClockConfig+0x5c>)
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800aa1c:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <HAL_RCC_GetClockConfig+0x5c>)
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800aa28:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <HAL_RCC_GetClockConfig+0x5c>)
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	08db      	lsrs	r3, r3, #3
 800aa2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800aa36:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <HAL_RCC_GetClockConfig+0x60>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 020f 	and.w	r2, r3, #15
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	601a      	str	r2, [r3, #0]
}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40021000 	.word	0x40021000
 800aa54:	40022000 	.word	0x40022000

0800aa58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aa5e:	4b1e      	ldr	r3, [pc, #120]	; (800aad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	f003 0303 	and.w	r3, r3, #3
 800aa66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aa68:	4b1b      	ldr	r3, [pc, #108]	; (800aad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	091b      	lsrs	r3, r3, #4
 800aa6e:	f003 030f 	and.w	r3, r3, #15
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d10c      	bne.n	800aa96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aa7c:	4a17      	ldr	r2, [pc, #92]	; (800aadc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa84:	4a14      	ldr	r2, [pc, #80]	; (800aad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aa86:	68d2      	ldr	r2, [r2, #12]
 800aa88:	0a12      	lsrs	r2, r2, #8
 800aa8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aa8e:	fb02 f303 	mul.w	r3, r2, r3
 800aa92:	617b      	str	r3, [r7, #20]
    break;
 800aa94:	e00c      	b.n	800aab0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aa96:	4a12      	ldr	r2, [pc, #72]	; (800aae0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa9e:	4a0e      	ldr	r2, [pc, #56]	; (800aad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aaa0:	68d2      	ldr	r2, [r2, #12]
 800aaa2:	0a12      	lsrs	r2, r2, #8
 800aaa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aaa8:	fb02 f303 	mul.w	r3, r2, r3
 800aaac:	617b      	str	r3, [r7, #20]
    break;
 800aaae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aab0:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	0e5b      	lsrs	r3, r3, #25
 800aab6:	f003 0303 	and.w	r3, r3, #3
 800aaba:	3301      	adds	r3, #1
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800aaca:	687b      	ldr	r3, [r7, #4]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	371c      	adds	r7, #28
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	40021000 	.word	0x40021000
 800aadc:	016e3600 	.word	0x016e3600
 800aae0:	00f42400 	.word	0x00f42400

0800aae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aaec:	2300      	movs	r3, #0
 800aaee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 8098 	beq.w	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab02:	2300      	movs	r3, #0
 800ab04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab06:	4b43      	ldr	r3, [pc, #268]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10d      	bne.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab12:	4b40      	ldr	r3, [pc, #256]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab16:	4a3f      	ldr	r2, [pc, #252]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab1c:	6593      	str	r3, [r2, #88]	; 0x58
 800ab1e:	4b3d      	ldr	r3, [pc, #244]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab26:	60bb      	str	r3, [r7, #8]
 800ab28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab2e:	4b3a      	ldr	r3, [pc, #232]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a39      	ldr	r2, [pc, #228]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ab34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab3a:	f7fe f965 	bl	8008e08 <HAL_GetTick>
 800ab3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab40:	e009      	b.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab42:	f7fe f961 	bl	8008e08 <HAL_GetTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d902      	bls.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	74fb      	strb	r3, [r7, #19]
        break;
 800ab54:	e005      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab56:	4b30      	ldr	r3, [pc, #192]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d0ef      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ab62:	7cfb      	ldrb	r3, [r7, #19]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d159      	bne.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ab68:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d01e      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d019      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ab84:	4b23      	ldr	r3, [pc, #140]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ab90:	4b20      	ldr	r3, [pc, #128]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab96:	4a1f      	ldr	r2, [pc, #124]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aba0:	4b1c      	ldr	r3, [pc, #112]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba6:	4a1b      	ldr	r2, [pc, #108]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800abb0:	4a18      	ldr	r2, [pc, #96]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d016      	beq.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc2:	f7fe f921 	bl	8008e08 <HAL_GetTick>
 800abc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abc8:	e00b      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abca:	f7fe f91d 	bl	8008e08 <HAL_GetTick>
 800abce:	4602      	mov	r2, r0
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd8:	4293      	cmp	r3, r2
 800abda:	d902      	bls.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	74fb      	strb	r3, [r7, #19]
            break;
 800abe0:	e006      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abe2:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe8:	f003 0302 	and.w	r3, r3, #2
 800abec:	2b00      	cmp	r3, #0
 800abee:	d0ec      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800abf0:	7cfb      	ldrb	r3, [r7, #19]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10b      	bne.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abf6:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac04:	4903      	ldr	r1, [pc, #12]	; (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ac0c:	e008      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac0e:	7cfb      	ldrb	r3, [r7, #19]
 800ac10:	74bb      	strb	r3, [r7, #18]
 800ac12:	e005      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ac14:	40021000 	.word	0x40021000
 800ac18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac1c:	7cfb      	ldrb	r3, [r7, #19]
 800ac1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac20:	7c7b      	ldrb	r3, [r7, #17]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d105      	bne.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac26:	4ba7      	ldr	r3, [pc, #668]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac2a:	4aa6      	ldr	r2, [pc, #664]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac3e:	4ba1      	ldr	r3, [pc, #644]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac44:	f023 0203 	bic.w	r2, r3, #3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	499d      	ldr	r1, [pc, #628]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00a      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac60:	4b98      	ldr	r3, [pc, #608]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac66:	f023 020c 	bic.w	r2, r3, #12
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	4995      	ldr	r1, [pc, #596]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ac82:	4b90      	ldr	r3, [pc, #576]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	498c      	ldr	r1, [pc, #560]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac92:	4313      	orrs	r3, r2
 800ac94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00a      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aca4:	4b87      	ldr	r3, [pc, #540]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	4984      	ldr	r1, [pc, #528]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0310 	and.w	r3, r3, #16
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00a      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800acc6:	4b7f      	ldr	r3, [pc, #508]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800accc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	497b      	ldr	r1, [pc, #492]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 0320 	and.w	r3, r3, #32
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00a      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ace8:	4b76      	ldr	r3, [pc, #472]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	4973      	ldr	r1, [pc, #460]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acf8:	4313      	orrs	r3, r2
 800acfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad0a:	4b6e      	ldr	r3, [pc, #440]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	496a      	ldr	r1, [pc, #424]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00a      	beq.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad2c:	4b65      	ldr	r3, [pc, #404]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	4962      	ldr	r1, [pc, #392]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad4e:	4b5d      	ldr	r3, [pc, #372]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	4959      	ldr	r1, [pc, #356]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00a      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad70:	4b54      	ldr	r3, [pc, #336]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad76:	f023 0203 	bic.w	r2, r3, #3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7e:	4951      	ldr	r1, [pc, #324]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad80:	4313      	orrs	r3, r2
 800ad82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad92:	4b4c      	ldr	r3, [pc, #304]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	4948      	ldr	r1, [pc, #288]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ada2:	4313      	orrs	r3, r2
 800ada4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d015      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800adb4:	4b43      	ldr	r3, [pc, #268]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	4940      	ldr	r1, [pc, #256]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adc4:	4313      	orrs	r3, r2
 800adc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800add2:	d105      	bne.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800add4:	4b3b      	ldr	r3, [pc, #236]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	4a3a      	ldr	r2, [pc, #232]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d015      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800adec:	4b35      	ldr	r3, [pc, #212]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfa:	4932      	ldr	r1, [pc, #200]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adfc:	4313      	orrs	r3, r2
 800adfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae0a:	d105      	bne.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae0c:	4b2d      	ldr	r3, [pc, #180]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	4a2c      	ldr	r2, [pc, #176]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d015      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae24:	4b27      	ldr	r3, [pc, #156]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	4924      	ldr	r1, [pc, #144]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae42:	d105      	bne.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae44:	4b1f      	ldr	r3, [pc, #124]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	4a1e      	ldr	r2, [pc, #120]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d015      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae5c:	4b19      	ldr	r3, [pc, #100]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6a:	4916      	ldr	r1, [pc, #88]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae7a:	d105      	bne.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae7c:	4b11      	ldr	r3, [pc, #68]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	4a10      	ldr	r2, [pc, #64]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d019      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae94:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	4908      	ldr	r1, [pc, #32]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aea4:	4313      	orrs	r3, r2
 800aea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aeb2:	d109      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aeb4:	4b03      	ldr	r3, [pc, #12]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	4a02      	ldr	r2, [pc, #8]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aebe:	60d3      	str	r3, [r2, #12]
 800aec0:	e002      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800aec2:	bf00      	nop
 800aec4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d015      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800aed4:	4b29      	ldr	r3, [pc, #164]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee2:	4926      	ldr	r1, [pc, #152]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aee4:	4313      	orrs	r3, r2
 800aee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aef2:	d105      	bne.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800aef4:	4b21      	ldr	r3, [pc, #132]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	4a20      	ldr	r2, [pc, #128]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aefa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aefe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d015      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800af0c:	4b1b      	ldr	r3, [pc, #108]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af1a:	4918      	ldr	r1, [pc, #96]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af1c:	4313      	orrs	r3, r2
 800af1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af2a:	d105      	bne.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800af2c:	4b13      	ldr	r3, [pc, #76]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	4a12      	ldr	r2, [pc, #72]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af36:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d015      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800af44:	4b0d      	ldr	r3, [pc, #52]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af52:	490a      	ldr	r1, [pc, #40]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af54:	4313      	orrs	r3, r2
 800af56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af62:	d105      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af64:	4b05      	ldr	r3, [pc, #20]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	4a04      	ldr	r2, [pc, #16]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800af70:	7cbb      	ldrb	r3, [r7, #18]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	40021000 	.word	0x40021000

0800af80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e049      	b.n	800b026 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d106      	bne.n	800afac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f841 	bl	800b02e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2202      	movs	r2, #2
 800afb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3304      	adds	r3, #4
 800afbc:	4619      	mov	r1, r3
 800afbe:	4610      	mov	r0, r2
 800afc0:	f000 fa60 	bl	800b484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
	...

0800b044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b01      	cmp	r3, #1
 800b056:	d001      	beq.n	800b05c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e054      	b.n	800b106 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68da      	ldr	r2, [r3, #12]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f042 0201 	orr.w	r2, r2, #1
 800b072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a26      	ldr	r2, [pc, #152]	; (800b114 <HAL_TIM_Base_Start_IT+0xd0>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d022      	beq.n	800b0c4 <HAL_TIM_Base_Start_IT+0x80>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b086:	d01d      	beq.n	800b0c4 <HAL_TIM_Base_Start_IT+0x80>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a22      	ldr	r2, [pc, #136]	; (800b118 <HAL_TIM_Base_Start_IT+0xd4>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d018      	beq.n	800b0c4 <HAL_TIM_Base_Start_IT+0x80>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a21      	ldr	r2, [pc, #132]	; (800b11c <HAL_TIM_Base_Start_IT+0xd8>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d013      	beq.n	800b0c4 <HAL_TIM_Base_Start_IT+0x80>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a1f      	ldr	r2, [pc, #124]	; (800b120 <HAL_TIM_Base_Start_IT+0xdc>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d00e      	beq.n	800b0c4 <HAL_TIM_Base_Start_IT+0x80>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a1e      	ldr	r2, [pc, #120]	; (800b124 <HAL_TIM_Base_Start_IT+0xe0>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d009      	beq.n	800b0c4 <HAL_TIM_Base_Start_IT+0x80>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a1c      	ldr	r2, [pc, #112]	; (800b128 <HAL_TIM_Base_Start_IT+0xe4>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d004      	beq.n	800b0c4 <HAL_TIM_Base_Start_IT+0x80>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a1b      	ldr	r2, [pc, #108]	; (800b12c <HAL_TIM_Base_Start_IT+0xe8>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d115      	bne.n	800b0f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	4b19      	ldr	r3, [pc, #100]	; (800b130 <HAL_TIM_Base_Start_IT+0xec>)
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2b06      	cmp	r3, #6
 800b0d4:	d015      	beq.n	800b102 <HAL_TIM_Base_Start_IT+0xbe>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0dc:	d011      	beq.n	800b102 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f042 0201 	orr.w	r2, r2, #1
 800b0ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ee:	e008      	b.n	800b102 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f042 0201 	orr.w	r2, r2, #1
 800b0fe:	601a      	str	r2, [r3, #0]
 800b100:	e000      	b.n	800b104 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b102:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	40012c00 	.word	0x40012c00
 800b118:	40000400 	.word	0x40000400
 800b11c:	40000800 	.word	0x40000800
 800b120:	40000c00 	.word	0x40000c00
 800b124:	40013400 	.word	0x40013400
 800b128:	40014000 	.word	0x40014000
 800b12c:	40015000 	.word	0x40015000
 800b130:	00010007 	.word	0x00010007

0800b134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f003 0302 	and.w	r3, r3, #2
 800b146:	2b02      	cmp	r3, #2
 800b148:	d122      	bne.n	800b190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f003 0302 	and.w	r3, r3, #2
 800b154:	2b02      	cmp	r3, #2
 800b156:	d11b      	bne.n	800b190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 0202 	mvn.w	r2, #2
 800b160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	f003 0303 	and.w	r3, r3, #3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f965 	bl	800b446 <HAL_TIM_IC_CaptureCallback>
 800b17c:	e005      	b.n	800b18a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f957 	bl	800b432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f968 	bl	800b45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 0304 	and.w	r3, r3, #4
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	d122      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d11b      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f06f 0204 	mvn.w	r2, #4
 800b1b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f93b 	bl	800b446 <HAL_TIM_IC_CaptureCallback>
 800b1d0:	e005      	b.n	800b1de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f92d 	bl	800b432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f93e 	bl	800b45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f003 0308 	and.w	r3, r3, #8
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d122      	bne.n	800b238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f003 0308 	and.w	r3, r3, #8
 800b1fc:	2b08      	cmp	r3, #8
 800b1fe:	d11b      	bne.n	800b238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f06f 0208 	mvn.w	r2, #8
 800b208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2204      	movs	r2, #4
 800b20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	f003 0303 	and.w	r3, r3, #3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f911 	bl	800b446 <HAL_TIM_IC_CaptureCallback>
 800b224:	e005      	b.n	800b232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f903 	bl	800b432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f914 	bl	800b45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0310 	and.w	r3, r3, #16
 800b242:	2b10      	cmp	r3, #16
 800b244:	d122      	bne.n	800b28c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f003 0310 	and.w	r3, r3, #16
 800b250:	2b10      	cmp	r3, #16
 800b252:	d11b      	bne.n	800b28c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f06f 0210 	mvn.w	r2, #16
 800b25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2208      	movs	r2, #8
 800b262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f8e7 	bl	800b446 <HAL_TIM_IC_CaptureCallback>
 800b278:	e005      	b.n	800b286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f8d9 	bl	800b432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f8ea 	bl	800b45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b01      	cmp	r3, #1
 800b298:	d10e      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d107      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f06f 0201 	mvn.w	r2, #1
 800b2b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7fc feee 	bl	8008094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c2:	2b80      	cmp	r3, #128	; 0x80
 800b2c4:	d10e      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d0:	2b80      	cmp	r3, #128	; 0x80
 800b2d2:	d107      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f982 	bl	800b5e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f2:	d10e      	bne.n	800b312 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2fe:	2b80      	cmp	r3, #128	; 0x80
 800b300:	d107      	bne.n	800b312 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b30a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f975 	bl	800b5fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31c:	2b40      	cmp	r3, #64	; 0x40
 800b31e:	d10e      	bne.n	800b33e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32a:	2b40      	cmp	r3, #64	; 0x40
 800b32c:	d107      	bne.n	800b33e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f898 	bl	800b46e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	2b20      	cmp	r3, #32
 800b34a:	d10e      	bne.n	800b36a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f003 0320 	and.w	r3, r3, #32
 800b356:	2b20      	cmp	r3, #32
 800b358:	d107      	bne.n	800b36a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f06f 0220 	mvn.w	r2, #32
 800b362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f935 	bl	800b5d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b378:	d10f      	bne.n	800b39a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b388:	d107      	bne.n	800b39a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f93b 	bl	800b610 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3a8:	d10f      	bne.n	800b3ca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3b8:	d107      	bne.n	800b3ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b3c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f92d 	bl	800b624 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3d8:	d10f      	bne.n	800b3fa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3e8:	d107      	bne.n	800b3fa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f91f 	bl	800b638 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b404:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b408:	d10f      	bne.n	800b42a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b414:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b418:	d107      	bne.n	800b42a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f911 	bl	800b64c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b42a:	bf00      	nop
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b43a:	bf00      	nop
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b446:	b480      	push	{r7}
 800b448:	b083      	sub	sp, #12
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b44e:	bf00      	nop
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b46e:	b480      	push	{r7}
 800b470:	b083      	sub	sp, #12
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
	...

0800b484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a46      	ldr	r2, [pc, #280]	; (800b5b0 <TIM_Base_SetConfig+0x12c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d017      	beq.n	800b4cc <TIM_Base_SetConfig+0x48>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a2:	d013      	beq.n	800b4cc <TIM_Base_SetConfig+0x48>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a43      	ldr	r2, [pc, #268]	; (800b5b4 <TIM_Base_SetConfig+0x130>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00f      	beq.n	800b4cc <TIM_Base_SetConfig+0x48>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a42      	ldr	r2, [pc, #264]	; (800b5b8 <TIM_Base_SetConfig+0x134>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d00b      	beq.n	800b4cc <TIM_Base_SetConfig+0x48>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a41      	ldr	r2, [pc, #260]	; (800b5bc <TIM_Base_SetConfig+0x138>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d007      	beq.n	800b4cc <TIM_Base_SetConfig+0x48>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a40      	ldr	r2, [pc, #256]	; (800b5c0 <TIM_Base_SetConfig+0x13c>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d003      	beq.n	800b4cc <TIM_Base_SetConfig+0x48>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a3f      	ldr	r2, [pc, #252]	; (800b5c4 <TIM_Base_SetConfig+0x140>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d108      	bne.n	800b4de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a33      	ldr	r2, [pc, #204]	; (800b5b0 <TIM_Base_SetConfig+0x12c>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d023      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ec:	d01f      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a30      	ldr	r2, [pc, #192]	; (800b5b4 <TIM_Base_SetConfig+0x130>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d01b      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a2f      	ldr	r2, [pc, #188]	; (800b5b8 <TIM_Base_SetConfig+0x134>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d017      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a2e      	ldr	r2, [pc, #184]	; (800b5bc <TIM_Base_SetConfig+0x138>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d013      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a2d      	ldr	r2, [pc, #180]	; (800b5c0 <TIM_Base_SetConfig+0x13c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d00f      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a2d      	ldr	r2, [pc, #180]	; (800b5c8 <TIM_Base_SetConfig+0x144>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d00b      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a2c      	ldr	r2, [pc, #176]	; (800b5cc <TIM_Base_SetConfig+0x148>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d007      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a2b      	ldr	r2, [pc, #172]	; (800b5d0 <TIM_Base_SetConfig+0x14c>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d003      	beq.n	800b52e <TIM_Base_SetConfig+0xaa>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a26      	ldr	r2, [pc, #152]	; (800b5c4 <TIM_Base_SetConfig+0x140>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d108      	bne.n	800b540 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	689a      	ldr	r2, [r3, #8]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a12      	ldr	r2, [pc, #72]	; (800b5b0 <TIM_Base_SetConfig+0x12c>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d013      	beq.n	800b594 <TIM_Base_SetConfig+0x110>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a14      	ldr	r2, [pc, #80]	; (800b5c0 <TIM_Base_SetConfig+0x13c>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d00f      	beq.n	800b594 <TIM_Base_SetConfig+0x110>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a14      	ldr	r2, [pc, #80]	; (800b5c8 <TIM_Base_SetConfig+0x144>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d00b      	beq.n	800b594 <TIM_Base_SetConfig+0x110>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a13      	ldr	r2, [pc, #76]	; (800b5cc <TIM_Base_SetConfig+0x148>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d007      	beq.n	800b594 <TIM_Base_SetConfig+0x110>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a12      	ldr	r2, [pc, #72]	; (800b5d0 <TIM_Base_SetConfig+0x14c>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d003      	beq.n	800b594 <TIM_Base_SetConfig+0x110>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a0d      	ldr	r2, [pc, #52]	; (800b5c4 <TIM_Base_SetConfig+0x140>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d103      	bne.n	800b59c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	691a      	ldr	r2, [r3, #16]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	615a      	str	r2, [r3, #20]
}
 800b5a2:	bf00      	nop
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	40012c00 	.word	0x40012c00
 800b5b4:	40000400 	.word	0x40000400
 800b5b8:	40000800 	.word	0x40000800
 800b5bc:	40000c00 	.word	0x40000c00
 800b5c0:	40013400 	.word	0x40013400
 800b5c4:	40015000 	.word	0x40015000
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800

0800b5d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e042      	b.n	800b6f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7fd fb13 	bl	8008cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2224      	movs	r2, #36	; 0x24
 800b68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 0201 	bic.w	r2, r2, #1
 800b6a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f8c2 	bl	800b82c <UART_SetConfig>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d101      	bne.n	800b6b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e022      	b.n	800b6f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fbb2 	bl	800be24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b6ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	689a      	ldr	r2, [r3, #8]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b6de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f042 0201 	orr.w	r2, r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fc39 	bl	800bf68 <UART_CheckIdleState>
 800b6f6:	4603      	mov	r3, r0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af02      	add	r7, sp, #8
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	603b      	str	r3, [r7, #0]
 800b70c:	4613      	mov	r3, r2
 800b70e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b716:	2b20      	cmp	r3, #32
 800b718:	f040 8083 	bne.w	800b822 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <HAL_UART_Transmit+0x28>
 800b722:	88fb      	ldrh	r3, [r7, #6]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e07b      	b.n	800b824 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b732:	2b01      	cmp	r3, #1
 800b734:	d101      	bne.n	800b73a <HAL_UART_Transmit+0x3a>
 800b736:	2302      	movs	r3, #2
 800b738:	e074      	b.n	800b824 <HAL_UART_Transmit+0x124>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2221      	movs	r2, #33	; 0x21
 800b74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b752:	f7fd fb59 	bl	8008e08 <HAL_GetTick>
 800b756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	88fa      	ldrh	r2, [r7, #6]
 800b75c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	88fa      	ldrh	r2, [r7, #6]
 800b764:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b770:	d108      	bne.n	800b784 <HAL_UART_Transmit+0x84>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d104      	bne.n	800b784 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b77a:	2300      	movs	r3, #0
 800b77c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	61bb      	str	r3, [r7, #24]
 800b782:	e003      	b.n	800b78c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b788:	2300      	movs	r3, #0
 800b78a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b794:	e02c      	b.n	800b7f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2200      	movs	r2, #0
 800b79e:	2180      	movs	r1, #128	; 0x80
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 fc2c 	bl	800bffe <UART_WaitOnFlagUntilTimeout>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e039      	b.n	800b824 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10b      	bne.n	800b7ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	881b      	ldrh	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	61bb      	str	r3, [r7, #24]
 800b7cc:	e007      	b.n	800b7de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	781a      	ldrb	r2, [r3, #0]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1cc      	bne.n	800b796 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2200      	movs	r2, #0
 800b804:	2140      	movs	r1, #64	; 0x40
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 fbf9 	bl	800bffe <UART_WaitOnFlagUntilTimeout>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e006      	b.n	800b824 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2220      	movs	r2, #32
 800b81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	e000      	b.n	800b824 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b822:	2302      	movs	r3, #2
  }
}
 800b824:	4618      	mov	r0, r3
 800b826:	3720      	adds	r7, #32
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b82c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b830:	b08c      	sub	sp, #48	; 0x30
 800b832:	af00      	add	r7, sp, #0
 800b834:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	431a      	orrs	r2, r3
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	431a      	orrs	r2, r3
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	4313      	orrs	r3, r2
 800b852:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	4baa      	ldr	r3, [pc, #680]	; (800bb04 <UART_SetConfig+0x2d8>)
 800b85c:	4013      	ands	r3, r2
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	6812      	ldr	r2, [r2, #0]
 800b862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b864:	430b      	orrs	r3, r1
 800b866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	68da      	ldr	r2, [r3, #12]
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	430a      	orrs	r2, r1
 800b87c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a9f      	ldr	r2, [pc, #636]	; (800bb08 <UART_SetConfig+0x2dc>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d004      	beq.n	800b898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b894:	4313      	orrs	r3, r2
 800b896:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b8a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	6812      	ldr	r2, [r2, #0]
 800b8aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8ac:	430b      	orrs	r3, r1
 800b8ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b6:	f023 010f 	bic.w	r1, r3, #15
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	430a      	orrs	r2, r1
 800b8c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a90      	ldr	r2, [pc, #576]	; (800bb0c <UART_SetConfig+0x2e0>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d125      	bne.n	800b91c <UART_SetConfig+0xf0>
 800b8d0:	4b8f      	ldr	r3, [pc, #572]	; (800bb10 <UART_SetConfig+0x2e4>)
 800b8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d6:	f003 0303 	and.w	r3, r3, #3
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d81a      	bhi.n	800b914 <UART_SetConfig+0xe8>
 800b8de:	a201      	add	r2, pc, #4	; (adr r2, 800b8e4 <UART_SetConfig+0xb8>)
 800b8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e4:	0800b8f5 	.word	0x0800b8f5
 800b8e8:	0800b905 	.word	0x0800b905
 800b8ec:	0800b8fd 	.word	0x0800b8fd
 800b8f0:	0800b90d 	.word	0x0800b90d
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8fa:	e116      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b902:	e112      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b904:	2304      	movs	r3, #4
 800b906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b90a:	e10e      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b90c:	2308      	movs	r3, #8
 800b90e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b912:	e10a      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b914:	2310      	movs	r3, #16
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b91a:	e106      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a7c      	ldr	r2, [pc, #496]	; (800bb14 <UART_SetConfig+0x2e8>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d138      	bne.n	800b998 <UART_SetConfig+0x16c>
 800b926:	4b7a      	ldr	r3, [pc, #488]	; (800bb10 <UART_SetConfig+0x2e4>)
 800b928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92c:	f003 030c 	and.w	r3, r3, #12
 800b930:	2b0c      	cmp	r3, #12
 800b932:	d82d      	bhi.n	800b990 <UART_SetConfig+0x164>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <UART_SetConfig+0x110>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b971 	.word	0x0800b971
 800b940:	0800b991 	.word	0x0800b991
 800b944:	0800b991 	.word	0x0800b991
 800b948:	0800b991 	.word	0x0800b991
 800b94c:	0800b981 	.word	0x0800b981
 800b950:	0800b991 	.word	0x0800b991
 800b954:	0800b991 	.word	0x0800b991
 800b958:	0800b991 	.word	0x0800b991
 800b95c:	0800b979 	.word	0x0800b979
 800b960:	0800b991 	.word	0x0800b991
 800b964:	0800b991 	.word	0x0800b991
 800b968:	0800b991 	.word	0x0800b991
 800b96c:	0800b989 	.word	0x0800b989
 800b970:	2300      	movs	r3, #0
 800b972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b976:	e0d8      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b978:	2302      	movs	r3, #2
 800b97a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b97e:	e0d4      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b980:	2304      	movs	r3, #4
 800b982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b986:	e0d0      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b988:	2308      	movs	r3, #8
 800b98a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b98e:	e0cc      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b990:	2310      	movs	r3, #16
 800b992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b996:	e0c8      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a5e      	ldr	r2, [pc, #376]	; (800bb18 <UART_SetConfig+0x2ec>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d125      	bne.n	800b9ee <UART_SetConfig+0x1c2>
 800b9a2:	4b5b      	ldr	r3, [pc, #364]	; (800bb10 <UART_SetConfig+0x2e4>)
 800b9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b9ac:	2b30      	cmp	r3, #48	; 0x30
 800b9ae:	d016      	beq.n	800b9de <UART_SetConfig+0x1b2>
 800b9b0:	2b30      	cmp	r3, #48	; 0x30
 800b9b2:	d818      	bhi.n	800b9e6 <UART_SetConfig+0x1ba>
 800b9b4:	2b20      	cmp	r3, #32
 800b9b6:	d00a      	beq.n	800b9ce <UART_SetConfig+0x1a2>
 800b9b8:	2b20      	cmp	r3, #32
 800b9ba:	d814      	bhi.n	800b9e6 <UART_SetConfig+0x1ba>
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <UART_SetConfig+0x19a>
 800b9c0:	2b10      	cmp	r3, #16
 800b9c2:	d008      	beq.n	800b9d6 <UART_SetConfig+0x1aa>
 800b9c4:	e00f      	b.n	800b9e6 <UART_SetConfig+0x1ba>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9cc:	e0ad      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9d4:	e0a9      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b9d6:	2304      	movs	r3, #4
 800b9d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9dc:	e0a5      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b9de:	2308      	movs	r3, #8
 800b9e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9e4:	e0a1      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b9e6:	2310      	movs	r3, #16
 800b9e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9ec:	e09d      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a4a      	ldr	r2, [pc, #296]	; (800bb1c <UART_SetConfig+0x2f0>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d125      	bne.n	800ba44 <UART_SetConfig+0x218>
 800b9f8:	4b45      	ldr	r3, [pc, #276]	; (800bb10 <UART_SetConfig+0x2e4>)
 800b9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ba02:	2bc0      	cmp	r3, #192	; 0xc0
 800ba04:	d016      	beq.n	800ba34 <UART_SetConfig+0x208>
 800ba06:	2bc0      	cmp	r3, #192	; 0xc0
 800ba08:	d818      	bhi.n	800ba3c <UART_SetConfig+0x210>
 800ba0a:	2b80      	cmp	r3, #128	; 0x80
 800ba0c:	d00a      	beq.n	800ba24 <UART_SetConfig+0x1f8>
 800ba0e:	2b80      	cmp	r3, #128	; 0x80
 800ba10:	d814      	bhi.n	800ba3c <UART_SetConfig+0x210>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <UART_SetConfig+0x1f0>
 800ba16:	2b40      	cmp	r3, #64	; 0x40
 800ba18:	d008      	beq.n	800ba2c <UART_SetConfig+0x200>
 800ba1a:	e00f      	b.n	800ba3c <UART_SetConfig+0x210>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba22:	e082      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba24:	2302      	movs	r3, #2
 800ba26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba2a:	e07e      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba2c:	2304      	movs	r3, #4
 800ba2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba32:	e07a      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba34:	2308      	movs	r3, #8
 800ba36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba3a:	e076      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba3c:	2310      	movs	r3, #16
 800ba3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba42:	e072      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a35      	ldr	r2, [pc, #212]	; (800bb20 <UART_SetConfig+0x2f4>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d12a      	bne.n	800baa4 <UART_SetConfig+0x278>
 800ba4e:	4b30      	ldr	r3, [pc, #192]	; (800bb10 <UART_SetConfig+0x2e4>)
 800ba50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba5c:	d01a      	beq.n	800ba94 <UART_SetConfig+0x268>
 800ba5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba62:	d81b      	bhi.n	800ba9c <UART_SetConfig+0x270>
 800ba64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba68:	d00c      	beq.n	800ba84 <UART_SetConfig+0x258>
 800ba6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba6e:	d815      	bhi.n	800ba9c <UART_SetConfig+0x270>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <UART_SetConfig+0x250>
 800ba74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba78:	d008      	beq.n	800ba8c <UART_SetConfig+0x260>
 800ba7a:	e00f      	b.n	800ba9c <UART_SetConfig+0x270>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba82:	e052      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba84:	2302      	movs	r3, #2
 800ba86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba8a:	e04e      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba8c:	2304      	movs	r3, #4
 800ba8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba92:	e04a      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba94:	2308      	movs	r3, #8
 800ba96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba9a:	e046      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800ba9c:	2310      	movs	r3, #16
 800ba9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa2:	e042      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a17      	ldr	r2, [pc, #92]	; (800bb08 <UART_SetConfig+0x2dc>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d13a      	bne.n	800bb24 <UART_SetConfig+0x2f8>
 800baae:	4b18      	ldr	r3, [pc, #96]	; (800bb10 <UART_SetConfig+0x2e4>)
 800bab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800babc:	d01a      	beq.n	800baf4 <UART_SetConfig+0x2c8>
 800babe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bac2:	d81b      	bhi.n	800bafc <UART_SetConfig+0x2d0>
 800bac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bac8:	d00c      	beq.n	800bae4 <UART_SetConfig+0x2b8>
 800baca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bace:	d815      	bhi.n	800bafc <UART_SetConfig+0x2d0>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d003      	beq.n	800badc <UART_SetConfig+0x2b0>
 800bad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bad8:	d008      	beq.n	800baec <UART_SetConfig+0x2c0>
 800bada:	e00f      	b.n	800bafc <UART_SetConfig+0x2d0>
 800badc:	2300      	movs	r3, #0
 800bade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bae2:	e022      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800bae4:	2302      	movs	r3, #2
 800bae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baea:	e01e      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800baec:	2304      	movs	r3, #4
 800baee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baf2:	e01a      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800baf4:	2308      	movs	r3, #8
 800baf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bafa:	e016      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800bafc:	2310      	movs	r3, #16
 800bafe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb02:	e012      	b.n	800bb2a <UART_SetConfig+0x2fe>
 800bb04:	cfff69f3 	.word	0xcfff69f3
 800bb08:	40008000 	.word	0x40008000
 800bb0c:	40013800 	.word	0x40013800
 800bb10:	40021000 	.word	0x40021000
 800bb14:	40004400 	.word	0x40004400
 800bb18:	40004800 	.word	0x40004800
 800bb1c:	40004c00 	.word	0x40004c00
 800bb20:	40005000 	.word	0x40005000
 800bb24:	2310      	movs	r3, #16
 800bb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4aae      	ldr	r2, [pc, #696]	; (800bde8 <UART_SetConfig+0x5bc>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	f040 8097 	bne.w	800bc64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb3a:	2b08      	cmp	r3, #8
 800bb3c:	d823      	bhi.n	800bb86 <UART_SetConfig+0x35a>
 800bb3e:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <UART_SetConfig+0x318>)
 800bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb44:	0800bb69 	.word	0x0800bb69
 800bb48:	0800bb87 	.word	0x0800bb87
 800bb4c:	0800bb71 	.word	0x0800bb71
 800bb50:	0800bb87 	.word	0x0800bb87
 800bb54:	0800bb77 	.word	0x0800bb77
 800bb58:	0800bb87 	.word	0x0800bb87
 800bb5c:	0800bb87 	.word	0x0800bb87
 800bb60:	0800bb87 	.word	0x0800bb87
 800bb64:	0800bb7f 	.word	0x0800bb7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb68:	f7fe ff18 	bl	800a99c <HAL_RCC_GetPCLK1Freq>
 800bb6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb6e:	e010      	b.n	800bb92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb70:	4b9e      	ldr	r3, [pc, #632]	; (800bdec <UART_SetConfig+0x5c0>)
 800bb72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb74:	e00d      	b.n	800bb92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb76:	f7fe fea3 	bl	800a8c0 <HAL_RCC_GetSysClockFreq>
 800bb7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb7c:	e009      	b.n	800bb92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb84:	e005      	b.n	800bb92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bb90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8130 	beq.w	800bdfa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	4a94      	ldr	r2, [pc, #592]	; (800bdf0 <UART_SetConfig+0x5c4>)
 800bba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bba4:	461a      	mov	r2, r3
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	4413      	add	r3, r2
 800bbb8:	69ba      	ldr	r2, [r7, #24]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d305      	bcc.n	800bbca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbc4:	69ba      	ldr	r2, [r7, #24]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d903      	bls.n	800bbd2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bbd0:	e113      	b.n	800bdfa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	60bb      	str	r3, [r7, #8]
 800bbd8:	60fa      	str	r2, [r7, #12]
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	4a84      	ldr	r2, [pc, #528]	; (800bdf0 <UART_SetConfig+0x5c4>)
 800bbe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	603b      	str	r3, [r7, #0]
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbf4:	f7f5 f97e 	bl	8000ef4 <__aeabi_uldivmod>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4619      	mov	r1, r3
 800bc00:	f04f 0200 	mov.w	r2, #0
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	020b      	lsls	r3, r1, #8
 800bc0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc0e:	0202      	lsls	r2, r0, #8
 800bc10:	6979      	ldr	r1, [r7, #20]
 800bc12:	6849      	ldr	r1, [r1, #4]
 800bc14:	0849      	lsrs	r1, r1, #1
 800bc16:	2000      	movs	r0, #0
 800bc18:	460c      	mov	r4, r1
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	eb12 0804 	adds.w	r8, r2, r4
 800bc20:	eb43 0905 	adc.w	r9, r3, r5
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	469a      	mov	sl, r3
 800bc2c:	4693      	mov	fp, r2
 800bc2e:	4652      	mov	r2, sl
 800bc30:	465b      	mov	r3, fp
 800bc32:	4640      	mov	r0, r8
 800bc34:	4649      	mov	r1, r9
 800bc36:	f7f5 f95d 	bl	8000ef4 <__aeabi_uldivmod>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4613      	mov	r3, r2
 800bc40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc48:	d308      	bcc.n	800bc5c <UART_SetConfig+0x430>
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc50:	d204      	bcs.n	800bc5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6a3a      	ldr	r2, [r7, #32]
 800bc58:	60da      	str	r2, [r3, #12]
 800bc5a:	e0ce      	b.n	800bdfa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc62:	e0ca      	b.n	800bdfa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc6c:	d166      	bne.n	800bd3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bc6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc72:	2b08      	cmp	r3, #8
 800bc74:	d827      	bhi.n	800bcc6 <UART_SetConfig+0x49a>
 800bc76:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <UART_SetConfig+0x450>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bca1 	.word	0x0800bca1
 800bc80:	0800bca9 	.word	0x0800bca9
 800bc84:	0800bcb1 	.word	0x0800bcb1
 800bc88:	0800bcc7 	.word	0x0800bcc7
 800bc8c:	0800bcb7 	.word	0x0800bcb7
 800bc90:	0800bcc7 	.word	0x0800bcc7
 800bc94:	0800bcc7 	.word	0x0800bcc7
 800bc98:	0800bcc7 	.word	0x0800bcc7
 800bc9c:	0800bcbf 	.word	0x0800bcbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bca0:	f7fe fe7c 	bl	800a99c <HAL_RCC_GetPCLK1Freq>
 800bca4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bca6:	e014      	b.n	800bcd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bca8:	f7fe fe8e 	bl	800a9c8 <HAL_RCC_GetPCLK2Freq>
 800bcac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcae:	e010      	b.n	800bcd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcb0:	4b4e      	ldr	r3, [pc, #312]	; (800bdec <UART_SetConfig+0x5c0>)
 800bcb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bcb4:	e00d      	b.n	800bcd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcb6:	f7fe fe03 	bl	800a8c0 <HAL_RCC_GetSysClockFreq>
 800bcba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcbc:	e009      	b.n	800bcd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bcc4:	e005      	b.n	800bcd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bcd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 8090 	beq.w	800bdfa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	4a44      	ldr	r2, [pc, #272]	; (800bdf0 <UART_SetConfig+0x5c4>)
 800bce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bce4:	461a      	mov	r2, r3
 800bce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcec:	005a      	lsls	r2, r3, #1
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	085b      	lsrs	r3, r3, #1
 800bcf4:	441a      	add	r2, r3
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	2b0f      	cmp	r3, #15
 800bd04:	d916      	bls.n	800bd34 <UART_SetConfig+0x508>
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd0c:	d212      	bcs.n	800bd34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	f023 030f 	bic.w	r3, r3, #15
 800bd16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	085b      	lsrs	r3, r3, #1
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	f003 0307 	and.w	r3, r3, #7
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	8bfb      	ldrh	r3, [r7, #30]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	8bfa      	ldrh	r2, [r7, #30]
 800bd30:	60da      	str	r2, [r3, #12]
 800bd32:	e062      	b.n	800bdfa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd3a:	e05e      	b.n	800bdfa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d828      	bhi.n	800bd96 <UART_SetConfig+0x56a>
 800bd44:	a201      	add	r2, pc, #4	; (adr r2, 800bd4c <UART_SetConfig+0x520>)
 800bd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4a:	bf00      	nop
 800bd4c:	0800bd71 	.word	0x0800bd71
 800bd50:	0800bd79 	.word	0x0800bd79
 800bd54:	0800bd81 	.word	0x0800bd81
 800bd58:	0800bd97 	.word	0x0800bd97
 800bd5c:	0800bd87 	.word	0x0800bd87
 800bd60:	0800bd97 	.word	0x0800bd97
 800bd64:	0800bd97 	.word	0x0800bd97
 800bd68:	0800bd97 	.word	0x0800bd97
 800bd6c:	0800bd8f 	.word	0x0800bd8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd70:	f7fe fe14 	bl	800a99c <HAL_RCC_GetPCLK1Freq>
 800bd74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd76:	e014      	b.n	800bda2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd78:	f7fe fe26 	bl	800a9c8 <HAL_RCC_GetPCLK2Freq>
 800bd7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd7e:	e010      	b.n	800bda2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd80:	4b1a      	ldr	r3, [pc, #104]	; (800bdec <UART_SetConfig+0x5c0>)
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd84:	e00d      	b.n	800bda2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd86:	f7fe fd9b 	bl	800a8c0 <HAL_RCC_GetSysClockFreq>
 800bd8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd8c:	e009      	b.n	800bda2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd94:	e005      	b.n	800bda2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bd96:	2300      	movs	r3, #0
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bda0:	bf00      	nop
    }

    if (pclk != 0U)
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d028      	beq.n	800bdfa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	4a10      	ldr	r2, [pc, #64]	; (800bdf0 <UART_SetConfig+0x5c4>)
 800bdae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	441a      	add	r2, r3
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	2b0f      	cmp	r3, #15
 800bdd0:	d910      	bls.n	800bdf4 <UART_SetConfig+0x5c8>
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd8:	d20c      	bcs.n	800bdf4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	60da      	str	r2, [r3, #12]
 800bde4:	e009      	b.n	800bdfa <UART_SetConfig+0x5ce>
 800bde6:	bf00      	nop
 800bde8:	40008000 	.word	0x40008000
 800bdec:	00f42400 	.word	0x00f42400
 800bdf0:	08012b70 	.word	0x08012b70
      }
      else
      {
        ret = HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2201      	movs	r2, #1
 800be06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	2200      	movs	r2, #0
 800be0e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	2200      	movs	r2, #0
 800be14:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800be16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3730      	adds	r7, #48	; 0x30
 800be1e:	46bd      	mov	sp, r7
 800be20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800be24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00a      	beq.n	800be4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	430a      	orrs	r2, r1
 800be4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be52:	f003 0302 	and.w	r3, r3, #2
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00a      	beq.n	800be70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00a      	beq.n	800be92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	430a      	orrs	r2, r1
 800be90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be96:	f003 0308 	and.w	r3, r3, #8
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00a      	beq.n	800beb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	430a      	orrs	r2, r1
 800beb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb8:	f003 0310 	and.w	r3, r3, #16
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00a      	beq.n	800bed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	430a      	orrs	r2, r1
 800bed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beda:	f003 0320 	and.w	r3, r3, #32
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00a      	beq.n	800bef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	430a      	orrs	r2, r1
 800bef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d01a      	beq.n	800bf3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf22:	d10a      	bne.n	800bf3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	430a      	orrs	r2, r1
 800bf38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00a      	beq.n	800bf5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	605a      	str	r2, [r3, #4]
  }
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af02      	add	r7, sp, #8
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf78:	f7fc ff46 	bl	8008e08 <HAL_GetTick>
 800bf7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 0308 	and.w	r3, r3, #8
 800bf88:	2b08      	cmp	r3, #8
 800bf8a:	d10e      	bne.n	800bfaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f82f 	bl	800bffe <UART_WaitOnFlagUntilTimeout>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	e025      	b.n	800bff6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 0304 	and.w	r3, r3, #4
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	d10e      	bne.n	800bfd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f819 	bl	800bffe <UART_WaitOnFlagUntilTimeout>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e00f      	b.n	800bff6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2220      	movs	r2, #32
 800bfda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2220      	movs	r2, #32
 800bfe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b09c      	sub	sp, #112	; 0x70
 800c002:	af00      	add	r7, sp, #0
 800c004:	60f8      	str	r0, [r7, #12]
 800c006:	60b9      	str	r1, [r7, #8]
 800c008:	603b      	str	r3, [r7, #0]
 800c00a:	4613      	mov	r3, r2
 800c00c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c00e:	e0a9      	b.n	800c164 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c016:	f000 80a5 	beq.w	800c164 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c01a:	f7fc fef5 	bl	8008e08 <HAL_GetTick>
 800c01e:	4602      	mov	r2, r0
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c026:	429a      	cmp	r2, r3
 800c028:	d302      	bcc.n	800c030 <UART_WaitOnFlagUntilTimeout+0x32>
 800c02a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d140      	bne.n	800c0b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c038:	e853 3f00 	ldrex	r3, [r3]
 800c03c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c044:	667b      	str	r3, [r7, #100]	; 0x64
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c04e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c050:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c054:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c056:	e841 2300 	strex	r3, r2, [r1]
 800c05a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c05c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1e6      	bne.n	800c030 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3308      	adds	r3, #8
 800c068:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06c:	e853 3f00 	ldrex	r3, [r3]
 800c070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c074:	f023 0301 	bic.w	r3, r3, #1
 800c078:	663b      	str	r3, [r7, #96]	; 0x60
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	3308      	adds	r3, #8
 800c080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c082:	64ba      	str	r2, [r7, #72]	; 0x48
 800c084:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c086:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c08a:	e841 2300 	strex	r3, r2, [r1]
 800c08e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1e5      	bne.n	800c062 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2220      	movs	r2, #32
 800c09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e069      	b.n	800c186 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 0304 	and.w	r3, r3, #4
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d051      	beq.n	800c164 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0ce:	d149      	bne.n	800c164 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	e853 3f00 	ldrex	r3, [r3]
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c0ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c0fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c100:	e841 2300 	strex	r3, r2, [r1]
 800c104:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1e6      	bne.n	800c0da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3308      	adds	r3, #8
 800c112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	e853 3f00 	ldrex	r3, [r3]
 800c11a:	613b      	str	r3, [r7, #16]
   return(result);
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f023 0301 	bic.w	r3, r3, #1
 800c122:	66bb      	str	r3, [r7, #104]	; 0x68
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	3308      	adds	r3, #8
 800c12a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c12c:	623a      	str	r2, [r7, #32]
 800c12e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c130:	69f9      	ldr	r1, [r7, #28]
 800c132:	6a3a      	ldr	r2, [r7, #32]
 800c134:	e841 2300 	strex	r3, r2, [r1]
 800c138:	61bb      	str	r3, [r7, #24]
   return(result);
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1e5      	bne.n	800c10c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2220      	movs	r2, #32
 800c144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2220      	movs	r2, #32
 800c14c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2220      	movs	r2, #32
 800c154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c160:	2303      	movs	r3, #3
 800c162:	e010      	b.n	800c186 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	69da      	ldr	r2, [r3, #28]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	4013      	ands	r3, r2
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	429a      	cmp	r2, r3
 800c172:	bf0c      	ite	eq
 800c174:	2301      	moveq	r3, #1
 800c176:	2300      	movne	r3, #0
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	461a      	mov	r2, r3
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	429a      	cmp	r2, r3
 800c180:	f43f af46 	beq.w	800c010 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3770      	adds	r7, #112	; 0x70
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c18e:	b480      	push	{r7}
 800c190:	b085      	sub	sp, #20
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d101      	bne.n	800c1a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	e027      	b.n	800c1f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2224      	movs	r2, #36	; 0x24
 800c1b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 0201 	bic.w	r2, r2, #1
 800c1ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c1d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3714      	adds	r7, #20
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c210:	2b01      	cmp	r3, #1
 800c212:	d101      	bne.n	800c218 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c214:	2302      	movs	r3, #2
 800c216:	e02d      	b.n	800c274 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2224      	movs	r2, #36	; 0x24
 800c224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f022 0201 	bic.w	r2, r2, #1
 800c23e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	430a      	orrs	r2, r1
 800c252:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 f84f 	bl	800c2f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2220      	movs	r2, #32
 800c266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d101      	bne.n	800c294 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c290:	2302      	movs	r3, #2
 800c292:	e02d      	b.n	800c2f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2224      	movs	r2, #36	; 0x24
 800c2a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f022 0201 	bic.w	r2, r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	430a      	orrs	r2, r1
 800c2ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f811 	bl	800c2f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c304:	2b00      	cmp	r3, #0
 800c306:	d108      	bne.n	800c31a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c318:	e031      	b.n	800c37e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c31a:	2308      	movs	r3, #8
 800c31c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c31e:	2308      	movs	r3, #8
 800c320:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	0e5b      	lsrs	r3, r3, #25
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	f003 0307 	and.w	r3, r3, #7
 800c330:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	0f5b      	lsrs	r3, r3, #29
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	f003 0307 	and.w	r3, r3, #7
 800c340:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	7b3a      	ldrb	r2, [r7, #12]
 800c346:	4911      	ldr	r1, [pc, #68]	; (800c38c <UARTEx_SetNbDataToProcess+0x94>)
 800c348:	5c8a      	ldrb	r2, [r1, r2]
 800c34a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c34e:	7b3a      	ldrb	r2, [r7, #12]
 800c350:	490f      	ldr	r1, [pc, #60]	; (800c390 <UARTEx_SetNbDataToProcess+0x98>)
 800c352:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c354:	fb93 f3f2 	sdiv	r3, r3, r2
 800c358:	b29a      	uxth	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	7b7a      	ldrb	r2, [r7, #13]
 800c364:	4909      	ldr	r1, [pc, #36]	; (800c38c <UARTEx_SetNbDataToProcess+0x94>)
 800c366:	5c8a      	ldrb	r2, [r1, r2]
 800c368:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c36c:	7b7a      	ldrb	r2, [r7, #13]
 800c36e:	4908      	ldr	r1, [pc, #32]	; (800c390 <UARTEx_SetNbDataToProcess+0x98>)
 800c370:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c372:	fb93 f3f2 	sdiv	r3, r3, r2
 800c376:	b29a      	uxth	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c37e:	bf00      	nop
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	08012b88 	.word	0x08012b88
 800c390:	08012b90 	.word	0x08012b90

0800c394 <__errno>:
 800c394:	4b01      	ldr	r3, [pc, #4]	; (800c39c <__errno+0x8>)
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	20000030 	.word	0x20000030

0800c3a0 <__libc_init_array>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	4d0d      	ldr	r5, [pc, #52]	; (800c3d8 <__libc_init_array+0x38>)
 800c3a4:	4c0d      	ldr	r4, [pc, #52]	; (800c3dc <__libc_init_array+0x3c>)
 800c3a6:	1b64      	subs	r4, r4, r5
 800c3a8:	10a4      	asrs	r4, r4, #2
 800c3aa:	2600      	movs	r6, #0
 800c3ac:	42a6      	cmp	r6, r4
 800c3ae:	d109      	bne.n	800c3c4 <__libc_init_array+0x24>
 800c3b0:	4d0b      	ldr	r5, [pc, #44]	; (800c3e0 <__libc_init_array+0x40>)
 800c3b2:	4c0c      	ldr	r4, [pc, #48]	; (800c3e4 <__libc_init_array+0x44>)
 800c3b4:	f006 fb9e 	bl	8012af4 <_init>
 800c3b8:	1b64      	subs	r4, r4, r5
 800c3ba:	10a4      	asrs	r4, r4, #2
 800c3bc:	2600      	movs	r6, #0
 800c3be:	42a6      	cmp	r6, r4
 800c3c0:	d105      	bne.n	800c3ce <__libc_init_array+0x2e>
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c8:	4798      	blx	r3
 800c3ca:	3601      	adds	r6, #1
 800c3cc:	e7ee      	b.n	800c3ac <__libc_init_array+0xc>
 800c3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d2:	4798      	blx	r3
 800c3d4:	3601      	adds	r6, #1
 800c3d6:	e7f2      	b.n	800c3be <__libc_init_array+0x1e>
 800c3d8:	080134c8 	.word	0x080134c8
 800c3dc:	080134c8 	.word	0x080134c8
 800c3e0:	080134c8 	.word	0x080134c8
 800c3e4:	080134cc 	.word	0x080134cc

0800c3e8 <memcpy>:
 800c3e8:	440a      	add	r2, r1
 800c3ea:	4291      	cmp	r1, r2
 800c3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f0:	d100      	bne.n	800c3f4 <memcpy+0xc>
 800c3f2:	4770      	bx	lr
 800c3f4:	b510      	push	{r4, lr}
 800c3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3fe:	4291      	cmp	r1, r2
 800c400:	d1f9      	bne.n	800c3f6 <memcpy+0xe>
 800c402:	bd10      	pop	{r4, pc}

0800c404 <memset>:
 800c404:	4402      	add	r2, r0
 800c406:	4603      	mov	r3, r0
 800c408:	4293      	cmp	r3, r2
 800c40a:	d100      	bne.n	800c40e <memset+0xa>
 800c40c:	4770      	bx	lr
 800c40e:	f803 1b01 	strb.w	r1, [r3], #1
 800c412:	e7f9      	b.n	800c408 <memset+0x4>

0800c414 <__cvt>:
 800c414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c418:	ec55 4b10 	vmov	r4, r5, d0
 800c41c:	2d00      	cmp	r5, #0
 800c41e:	460e      	mov	r6, r1
 800c420:	4619      	mov	r1, r3
 800c422:	462b      	mov	r3, r5
 800c424:	bfbb      	ittet	lt
 800c426:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c42a:	461d      	movlt	r5, r3
 800c42c:	2300      	movge	r3, #0
 800c42e:	232d      	movlt	r3, #45	; 0x2d
 800c430:	700b      	strb	r3, [r1, #0]
 800c432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c434:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c438:	4691      	mov	r9, r2
 800c43a:	f023 0820 	bic.w	r8, r3, #32
 800c43e:	bfbc      	itt	lt
 800c440:	4622      	movlt	r2, r4
 800c442:	4614      	movlt	r4, r2
 800c444:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c448:	d005      	beq.n	800c456 <__cvt+0x42>
 800c44a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c44e:	d100      	bne.n	800c452 <__cvt+0x3e>
 800c450:	3601      	adds	r6, #1
 800c452:	2102      	movs	r1, #2
 800c454:	e000      	b.n	800c458 <__cvt+0x44>
 800c456:	2103      	movs	r1, #3
 800c458:	ab03      	add	r3, sp, #12
 800c45a:	9301      	str	r3, [sp, #4]
 800c45c:	ab02      	add	r3, sp, #8
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	ec45 4b10 	vmov	d0, r4, r5
 800c464:	4653      	mov	r3, sl
 800c466:	4632      	mov	r2, r6
 800c468:	f001 fdc6 	bl	800dff8 <_dtoa_r>
 800c46c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c470:	4607      	mov	r7, r0
 800c472:	d102      	bne.n	800c47a <__cvt+0x66>
 800c474:	f019 0f01 	tst.w	r9, #1
 800c478:	d022      	beq.n	800c4c0 <__cvt+0xac>
 800c47a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c47e:	eb07 0906 	add.w	r9, r7, r6
 800c482:	d110      	bne.n	800c4a6 <__cvt+0x92>
 800c484:	783b      	ldrb	r3, [r7, #0]
 800c486:	2b30      	cmp	r3, #48	; 0x30
 800c488:	d10a      	bne.n	800c4a0 <__cvt+0x8c>
 800c48a:	2200      	movs	r2, #0
 800c48c:	2300      	movs	r3, #0
 800c48e:	4620      	mov	r0, r4
 800c490:	4629      	mov	r1, r5
 800c492:	f7f4 fb41 	bl	8000b18 <__aeabi_dcmpeq>
 800c496:	b918      	cbnz	r0, 800c4a0 <__cvt+0x8c>
 800c498:	f1c6 0601 	rsb	r6, r6, #1
 800c49c:	f8ca 6000 	str.w	r6, [sl]
 800c4a0:	f8da 3000 	ldr.w	r3, [sl]
 800c4a4:	4499      	add	r9, r3
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	f7f4 fb33 	bl	8000b18 <__aeabi_dcmpeq>
 800c4b2:	b108      	cbz	r0, 800c4b8 <__cvt+0xa4>
 800c4b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4b8:	2230      	movs	r2, #48	; 0x30
 800c4ba:	9b03      	ldr	r3, [sp, #12]
 800c4bc:	454b      	cmp	r3, r9
 800c4be:	d307      	bcc.n	800c4d0 <__cvt+0xbc>
 800c4c0:	9b03      	ldr	r3, [sp, #12]
 800c4c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4c4:	1bdb      	subs	r3, r3, r7
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	b004      	add	sp, #16
 800c4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d0:	1c59      	adds	r1, r3, #1
 800c4d2:	9103      	str	r1, [sp, #12]
 800c4d4:	701a      	strb	r2, [r3, #0]
 800c4d6:	e7f0      	b.n	800c4ba <__cvt+0xa6>

0800c4d8 <__exponent>:
 800c4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2900      	cmp	r1, #0
 800c4de:	bfb8      	it	lt
 800c4e0:	4249      	neglt	r1, r1
 800c4e2:	f803 2b02 	strb.w	r2, [r3], #2
 800c4e6:	bfb4      	ite	lt
 800c4e8:	222d      	movlt	r2, #45	; 0x2d
 800c4ea:	222b      	movge	r2, #43	; 0x2b
 800c4ec:	2909      	cmp	r1, #9
 800c4ee:	7042      	strb	r2, [r0, #1]
 800c4f0:	dd2a      	ble.n	800c548 <__exponent+0x70>
 800c4f2:	f10d 0407 	add.w	r4, sp, #7
 800c4f6:	46a4      	mov	ip, r4
 800c4f8:	270a      	movs	r7, #10
 800c4fa:	46a6      	mov	lr, r4
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800c502:	fb07 1516 	mls	r5, r7, r6, r1
 800c506:	3530      	adds	r5, #48	; 0x30
 800c508:	2a63      	cmp	r2, #99	; 0x63
 800c50a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c50e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c512:	4631      	mov	r1, r6
 800c514:	dcf1      	bgt.n	800c4fa <__exponent+0x22>
 800c516:	3130      	adds	r1, #48	; 0x30
 800c518:	f1ae 0502 	sub.w	r5, lr, #2
 800c51c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c520:	1c44      	adds	r4, r0, #1
 800c522:	4629      	mov	r1, r5
 800c524:	4561      	cmp	r1, ip
 800c526:	d30a      	bcc.n	800c53e <__exponent+0x66>
 800c528:	f10d 0209 	add.w	r2, sp, #9
 800c52c:	eba2 020e 	sub.w	r2, r2, lr
 800c530:	4565      	cmp	r5, ip
 800c532:	bf88      	it	hi
 800c534:	2200      	movhi	r2, #0
 800c536:	4413      	add	r3, r2
 800c538:	1a18      	subs	r0, r3, r0
 800c53a:	b003      	add	sp, #12
 800c53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c53e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c542:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c546:	e7ed      	b.n	800c524 <__exponent+0x4c>
 800c548:	2330      	movs	r3, #48	; 0x30
 800c54a:	3130      	adds	r1, #48	; 0x30
 800c54c:	7083      	strb	r3, [r0, #2]
 800c54e:	70c1      	strb	r1, [r0, #3]
 800c550:	1d03      	adds	r3, r0, #4
 800c552:	e7f1      	b.n	800c538 <__exponent+0x60>

0800c554 <_printf_float>:
 800c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c558:	ed2d 8b02 	vpush	{d8}
 800c55c:	b08d      	sub	sp, #52	; 0x34
 800c55e:	460c      	mov	r4, r1
 800c560:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c564:	4616      	mov	r6, r2
 800c566:	461f      	mov	r7, r3
 800c568:	4605      	mov	r5, r0
 800c56a:	f002 ff97 	bl	800f49c <_localeconv_r>
 800c56e:	f8d0 a000 	ldr.w	sl, [r0]
 800c572:	4650      	mov	r0, sl
 800c574:	f7f3 fe54 	bl	8000220 <strlen>
 800c578:	2300      	movs	r3, #0
 800c57a:	930a      	str	r3, [sp, #40]	; 0x28
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	9305      	str	r3, [sp, #20]
 800c580:	f8d8 3000 	ldr.w	r3, [r8]
 800c584:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c588:	3307      	adds	r3, #7
 800c58a:	f023 0307 	bic.w	r3, r3, #7
 800c58e:	f103 0208 	add.w	r2, r3, #8
 800c592:	f8c8 2000 	str.w	r2, [r8]
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c59e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c5a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5a6:	9307      	str	r3, [sp, #28]
 800c5a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5ac:	ee08 0a10 	vmov	s16, r0
 800c5b0:	4b9f      	ldr	r3, [pc, #636]	; (800c830 <_printf_float+0x2dc>)
 800c5b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ba:	f7f4 fadf 	bl	8000b7c <__aeabi_dcmpun>
 800c5be:	bb88      	cbnz	r0, 800c624 <_printf_float+0xd0>
 800c5c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5c4:	4b9a      	ldr	r3, [pc, #616]	; (800c830 <_printf_float+0x2dc>)
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ca:	f7f4 fab9 	bl	8000b40 <__aeabi_dcmple>
 800c5ce:	bb48      	cbnz	r0, 800c624 <_printf_float+0xd0>
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4640      	mov	r0, r8
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	f7f4 faa8 	bl	8000b2c <__aeabi_dcmplt>
 800c5dc:	b110      	cbz	r0, 800c5e4 <_printf_float+0x90>
 800c5de:	232d      	movs	r3, #45	; 0x2d
 800c5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5e4:	4b93      	ldr	r3, [pc, #588]	; (800c834 <_printf_float+0x2e0>)
 800c5e6:	4894      	ldr	r0, [pc, #592]	; (800c838 <_printf_float+0x2e4>)
 800c5e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c5ec:	bf94      	ite	ls
 800c5ee:	4698      	movls	r8, r3
 800c5f0:	4680      	movhi	r8, r0
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	6123      	str	r3, [r4, #16]
 800c5f6:	9b05      	ldr	r3, [sp, #20]
 800c5f8:	f023 0204 	bic.w	r2, r3, #4
 800c5fc:	6022      	str	r2, [r4, #0]
 800c5fe:	f04f 0900 	mov.w	r9, #0
 800c602:	9700      	str	r7, [sp, #0]
 800c604:	4633      	mov	r3, r6
 800c606:	aa0b      	add	r2, sp, #44	; 0x2c
 800c608:	4621      	mov	r1, r4
 800c60a:	4628      	mov	r0, r5
 800c60c:	f000 f9d8 	bl	800c9c0 <_printf_common>
 800c610:	3001      	adds	r0, #1
 800c612:	f040 8090 	bne.w	800c736 <_printf_float+0x1e2>
 800c616:	f04f 30ff 	mov.w	r0, #4294967295
 800c61a:	b00d      	add	sp, #52	; 0x34
 800c61c:	ecbd 8b02 	vpop	{d8}
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	4642      	mov	r2, r8
 800c626:	464b      	mov	r3, r9
 800c628:	4640      	mov	r0, r8
 800c62a:	4649      	mov	r1, r9
 800c62c:	f7f4 faa6 	bl	8000b7c <__aeabi_dcmpun>
 800c630:	b140      	cbz	r0, 800c644 <_printf_float+0xf0>
 800c632:	464b      	mov	r3, r9
 800c634:	2b00      	cmp	r3, #0
 800c636:	bfbc      	itt	lt
 800c638:	232d      	movlt	r3, #45	; 0x2d
 800c63a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c63e:	487f      	ldr	r0, [pc, #508]	; (800c83c <_printf_float+0x2e8>)
 800c640:	4b7f      	ldr	r3, [pc, #508]	; (800c840 <_printf_float+0x2ec>)
 800c642:	e7d1      	b.n	800c5e8 <_printf_float+0x94>
 800c644:	6863      	ldr	r3, [r4, #4]
 800c646:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c64a:	9206      	str	r2, [sp, #24]
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	d13f      	bne.n	800c6d0 <_printf_float+0x17c>
 800c650:	2306      	movs	r3, #6
 800c652:	6063      	str	r3, [r4, #4]
 800c654:	9b05      	ldr	r3, [sp, #20]
 800c656:	6861      	ldr	r1, [r4, #4]
 800c658:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c65c:	2300      	movs	r3, #0
 800c65e:	9303      	str	r3, [sp, #12]
 800c660:	ab0a      	add	r3, sp, #40	; 0x28
 800c662:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c666:	ab09      	add	r3, sp, #36	; 0x24
 800c668:	ec49 8b10 	vmov	d0, r8, r9
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	6022      	str	r2, [r4, #0]
 800c670:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c674:	4628      	mov	r0, r5
 800c676:	f7ff fecd 	bl	800c414 <__cvt>
 800c67a:	9b06      	ldr	r3, [sp, #24]
 800c67c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c67e:	2b47      	cmp	r3, #71	; 0x47
 800c680:	4680      	mov	r8, r0
 800c682:	d108      	bne.n	800c696 <_printf_float+0x142>
 800c684:	1cc8      	adds	r0, r1, #3
 800c686:	db02      	blt.n	800c68e <_printf_float+0x13a>
 800c688:	6863      	ldr	r3, [r4, #4]
 800c68a:	4299      	cmp	r1, r3
 800c68c:	dd41      	ble.n	800c712 <_printf_float+0x1be>
 800c68e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c692:	fa5f fb8b 	uxtb.w	fp, fp
 800c696:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c69a:	d820      	bhi.n	800c6de <_printf_float+0x18a>
 800c69c:	3901      	subs	r1, #1
 800c69e:	465a      	mov	r2, fp
 800c6a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c6a4:	9109      	str	r1, [sp, #36]	; 0x24
 800c6a6:	f7ff ff17 	bl	800c4d8 <__exponent>
 800c6aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6ac:	1813      	adds	r3, r2, r0
 800c6ae:	2a01      	cmp	r2, #1
 800c6b0:	4681      	mov	r9, r0
 800c6b2:	6123      	str	r3, [r4, #16]
 800c6b4:	dc02      	bgt.n	800c6bc <_printf_float+0x168>
 800c6b6:	6822      	ldr	r2, [r4, #0]
 800c6b8:	07d2      	lsls	r2, r2, #31
 800c6ba:	d501      	bpl.n	800c6c0 <_printf_float+0x16c>
 800c6bc:	3301      	adds	r3, #1
 800c6be:	6123      	str	r3, [r4, #16]
 800c6c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d09c      	beq.n	800c602 <_printf_float+0xae>
 800c6c8:	232d      	movs	r3, #45	; 0x2d
 800c6ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6ce:	e798      	b.n	800c602 <_printf_float+0xae>
 800c6d0:	9a06      	ldr	r2, [sp, #24]
 800c6d2:	2a47      	cmp	r2, #71	; 0x47
 800c6d4:	d1be      	bne.n	800c654 <_printf_float+0x100>
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1bc      	bne.n	800c654 <_printf_float+0x100>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e7b9      	b.n	800c652 <_printf_float+0xfe>
 800c6de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c6e2:	d118      	bne.n	800c716 <_printf_float+0x1c2>
 800c6e4:	2900      	cmp	r1, #0
 800c6e6:	6863      	ldr	r3, [r4, #4]
 800c6e8:	dd0b      	ble.n	800c702 <_printf_float+0x1ae>
 800c6ea:	6121      	str	r1, [r4, #16]
 800c6ec:	b913      	cbnz	r3, 800c6f4 <_printf_float+0x1a0>
 800c6ee:	6822      	ldr	r2, [r4, #0]
 800c6f0:	07d0      	lsls	r0, r2, #31
 800c6f2:	d502      	bpl.n	800c6fa <_printf_float+0x1a6>
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	440b      	add	r3, r1
 800c6f8:	6123      	str	r3, [r4, #16]
 800c6fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6fc:	f04f 0900 	mov.w	r9, #0
 800c700:	e7de      	b.n	800c6c0 <_printf_float+0x16c>
 800c702:	b913      	cbnz	r3, 800c70a <_printf_float+0x1b6>
 800c704:	6822      	ldr	r2, [r4, #0]
 800c706:	07d2      	lsls	r2, r2, #31
 800c708:	d501      	bpl.n	800c70e <_printf_float+0x1ba>
 800c70a:	3302      	adds	r3, #2
 800c70c:	e7f4      	b.n	800c6f8 <_printf_float+0x1a4>
 800c70e:	2301      	movs	r3, #1
 800c710:	e7f2      	b.n	800c6f8 <_printf_float+0x1a4>
 800c712:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c718:	4299      	cmp	r1, r3
 800c71a:	db05      	blt.n	800c728 <_printf_float+0x1d4>
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	6121      	str	r1, [r4, #16]
 800c720:	07d8      	lsls	r0, r3, #31
 800c722:	d5ea      	bpl.n	800c6fa <_printf_float+0x1a6>
 800c724:	1c4b      	adds	r3, r1, #1
 800c726:	e7e7      	b.n	800c6f8 <_printf_float+0x1a4>
 800c728:	2900      	cmp	r1, #0
 800c72a:	bfd4      	ite	le
 800c72c:	f1c1 0202 	rsble	r2, r1, #2
 800c730:	2201      	movgt	r2, #1
 800c732:	4413      	add	r3, r2
 800c734:	e7e0      	b.n	800c6f8 <_printf_float+0x1a4>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	055a      	lsls	r2, r3, #21
 800c73a:	d407      	bmi.n	800c74c <_printf_float+0x1f8>
 800c73c:	6923      	ldr	r3, [r4, #16]
 800c73e:	4642      	mov	r2, r8
 800c740:	4631      	mov	r1, r6
 800c742:	4628      	mov	r0, r5
 800c744:	47b8      	blx	r7
 800c746:	3001      	adds	r0, #1
 800c748:	d12c      	bne.n	800c7a4 <_printf_float+0x250>
 800c74a:	e764      	b.n	800c616 <_printf_float+0xc2>
 800c74c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c750:	f240 80e0 	bls.w	800c914 <_printf_float+0x3c0>
 800c754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c758:	2200      	movs	r2, #0
 800c75a:	2300      	movs	r3, #0
 800c75c:	f7f4 f9dc 	bl	8000b18 <__aeabi_dcmpeq>
 800c760:	2800      	cmp	r0, #0
 800c762:	d034      	beq.n	800c7ce <_printf_float+0x27a>
 800c764:	4a37      	ldr	r2, [pc, #220]	; (800c844 <_printf_float+0x2f0>)
 800c766:	2301      	movs	r3, #1
 800c768:	4631      	mov	r1, r6
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b8      	blx	r7
 800c76e:	3001      	adds	r0, #1
 800c770:	f43f af51 	beq.w	800c616 <_printf_float+0xc2>
 800c774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c778:	429a      	cmp	r2, r3
 800c77a:	db02      	blt.n	800c782 <_printf_float+0x22e>
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	07d8      	lsls	r0, r3, #31
 800c780:	d510      	bpl.n	800c7a4 <_printf_float+0x250>
 800c782:	ee18 3a10 	vmov	r3, s16
 800c786:	4652      	mov	r2, sl
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	f43f af41 	beq.w	800c616 <_printf_float+0xc2>
 800c794:	f04f 0800 	mov.w	r8, #0
 800c798:	f104 091a 	add.w	r9, r4, #26
 800c79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	4543      	cmp	r3, r8
 800c7a2:	dc09      	bgt.n	800c7b8 <_printf_float+0x264>
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	079b      	lsls	r3, r3, #30
 800c7a8:	f100 8105 	bmi.w	800c9b6 <_printf_float+0x462>
 800c7ac:	68e0      	ldr	r0, [r4, #12]
 800c7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7b0:	4298      	cmp	r0, r3
 800c7b2:	bfb8      	it	lt
 800c7b4:	4618      	movlt	r0, r3
 800c7b6:	e730      	b.n	800c61a <_printf_float+0xc6>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	464a      	mov	r2, r9
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4628      	mov	r0, r5
 800c7c0:	47b8      	blx	r7
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	f43f af27 	beq.w	800c616 <_printf_float+0xc2>
 800c7c8:	f108 0801 	add.w	r8, r8, #1
 800c7cc:	e7e6      	b.n	800c79c <_printf_float+0x248>
 800c7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	dc39      	bgt.n	800c848 <_printf_float+0x2f4>
 800c7d4:	4a1b      	ldr	r2, [pc, #108]	; (800c844 <_printf_float+0x2f0>)
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	4631      	mov	r1, r6
 800c7da:	4628      	mov	r0, r5
 800c7dc:	47b8      	blx	r7
 800c7de:	3001      	adds	r0, #1
 800c7e0:	f43f af19 	beq.w	800c616 <_printf_float+0xc2>
 800c7e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	d102      	bne.n	800c7f2 <_printf_float+0x29e>
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	07d9      	lsls	r1, r3, #31
 800c7f0:	d5d8      	bpl.n	800c7a4 <_printf_float+0x250>
 800c7f2:	ee18 3a10 	vmov	r3, s16
 800c7f6:	4652      	mov	r2, sl
 800c7f8:	4631      	mov	r1, r6
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	47b8      	blx	r7
 800c7fe:	3001      	adds	r0, #1
 800c800:	f43f af09 	beq.w	800c616 <_printf_float+0xc2>
 800c804:	f04f 0900 	mov.w	r9, #0
 800c808:	f104 0a1a 	add.w	sl, r4, #26
 800c80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80e:	425b      	negs	r3, r3
 800c810:	454b      	cmp	r3, r9
 800c812:	dc01      	bgt.n	800c818 <_printf_float+0x2c4>
 800c814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c816:	e792      	b.n	800c73e <_printf_float+0x1ea>
 800c818:	2301      	movs	r3, #1
 800c81a:	4652      	mov	r2, sl
 800c81c:	4631      	mov	r1, r6
 800c81e:	4628      	mov	r0, r5
 800c820:	47b8      	blx	r7
 800c822:	3001      	adds	r0, #1
 800c824:	f43f aef7 	beq.w	800c616 <_printf_float+0xc2>
 800c828:	f109 0901 	add.w	r9, r9, #1
 800c82c:	e7ee      	b.n	800c80c <_printf_float+0x2b8>
 800c82e:	bf00      	nop
 800c830:	7fefffff 	.word	0x7fefffff
 800c834:	08012b9c 	.word	0x08012b9c
 800c838:	08012ba0 	.word	0x08012ba0
 800c83c:	08012ba8 	.word	0x08012ba8
 800c840:	08012ba4 	.word	0x08012ba4
 800c844:	08012bac 	.word	0x08012bac
 800c848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c84a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c84c:	429a      	cmp	r2, r3
 800c84e:	bfa8      	it	ge
 800c850:	461a      	movge	r2, r3
 800c852:	2a00      	cmp	r2, #0
 800c854:	4691      	mov	r9, r2
 800c856:	dc37      	bgt.n	800c8c8 <_printf_float+0x374>
 800c858:	f04f 0b00 	mov.w	fp, #0
 800c85c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c860:	f104 021a 	add.w	r2, r4, #26
 800c864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c866:	9305      	str	r3, [sp, #20]
 800c868:	eba3 0309 	sub.w	r3, r3, r9
 800c86c:	455b      	cmp	r3, fp
 800c86e:	dc33      	bgt.n	800c8d8 <_printf_float+0x384>
 800c870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c874:	429a      	cmp	r2, r3
 800c876:	db3b      	blt.n	800c8f0 <_printf_float+0x39c>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	07da      	lsls	r2, r3, #31
 800c87c:	d438      	bmi.n	800c8f0 <_printf_float+0x39c>
 800c87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c880:	9a05      	ldr	r2, [sp, #20]
 800c882:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c884:	1a9a      	subs	r2, r3, r2
 800c886:	eba3 0901 	sub.w	r9, r3, r1
 800c88a:	4591      	cmp	r9, r2
 800c88c:	bfa8      	it	ge
 800c88e:	4691      	movge	r9, r2
 800c890:	f1b9 0f00 	cmp.w	r9, #0
 800c894:	dc35      	bgt.n	800c902 <_printf_float+0x3ae>
 800c896:	f04f 0800 	mov.w	r8, #0
 800c89a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c89e:	f104 0a1a 	add.w	sl, r4, #26
 800c8a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8a6:	1a9b      	subs	r3, r3, r2
 800c8a8:	eba3 0309 	sub.w	r3, r3, r9
 800c8ac:	4543      	cmp	r3, r8
 800c8ae:	f77f af79 	ble.w	800c7a4 <_printf_float+0x250>
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	4652      	mov	r2, sl
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	47b8      	blx	r7
 800c8bc:	3001      	adds	r0, #1
 800c8be:	f43f aeaa 	beq.w	800c616 <_printf_float+0xc2>
 800c8c2:	f108 0801 	add.w	r8, r8, #1
 800c8c6:	e7ec      	b.n	800c8a2 <_printf_float+0x34e>
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	4642      	mov	r2, r8
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	47b8      	blx	r7
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	d1c0      	bne.n	800c858 <_printf_float+0x304>
 800c8d6:	e69e      	b.n	800c616 <_printf_float+0xc2>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	4631      	mov	r1, r6
 800c8dc:	4628      	mov	r0, r5
 800c8de:	9205      	str	r2, [sp, #20]
 800c8e0:	47b8      	blx	r7
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	f43f ae97 	beq.w	800c616 <_printf_float+0xc2>
 800c8e8:	9a05      	ldr	r2, [sp, #20]
 800c8ea:	f10b 0b01 	add.w	fp, fp, #1
 800c8ee:	e7b9      	b.n	800c864 <_printf_float+0x310>
 800c8f0:	ee18 3a10 	vmov	r3, s16
 800c8f4:	4652      	mov	r2, sl
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b8      	blx	r7
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d1be      	bne.n	800c87e <_printf_float+0x32a>
 800c900:	e689      	b.n	800c616 <_printf_float+0xc2>
 800c902:	9a05      	ldr	r2, [sp, #20]
 800c904:	464b      	mov	r3, r9
 800c906:	4442      	add	r2, r8
 800c908:	4631      	mov	r1, r6
 800c90a:	4628      	mov	r0, r5
 800c90c:	47b8      	blx	r7
 800c90e:	3001      	adds	r0, #1
 800c910:	d1c1      	bne.n	800c896 <_printf_float+0x342>
 800c912:	e680      	b.n	800c616 <_printf_float+0xc2>
 800c914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c916:	2a01      	cmp	r2, #1
 800c918:	dc01      	bgt.n	800c91e <_printf_float+0x3ca>
 800c91a:	07db      	lsls	r3, r3, #31
 800c91c:	d538      	bpl.n	800c990 <_printf_float+0x43c>
 800c91e:	2301      	movs	r3, #1
 800c920:	4642      	mov	r2, r8
 800c922:	4631      	mov	r1, r6
 800c924:	4628      	mov	r0, r5
 800c926:	47b8      	blx	r7
 800c928:	3001      	adds	r0, #1
 800c92a:	f43f ae74 	beq.w	800c616 <_printf_float+0xc2>
 800c92e:	ee18 3a10 	vmov	r3, s16
 800c932:	4652      	mov	r2, sl
 800c934:	4631      	mov	r1, r6
 800c936:	4628      	mov	r0, r5
 800c938:	47b8      	blx	r7
 800c93a:	3001      	adds	r0, #1
 800c93c:	f43f ae6b 	beq.w	800c616 <_printf_float+0xc2>
 800c940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c944:	2200      	movs	r2, #0
 800c946:	2300      	movs	r3, #0
 800c948:	f7f4 f8e6 	bl	8000b18 <__aeabi_dcmpeq>
 800c94c:	b9d8      	cbnz	r0, 800c986 <_printf_float+0x432>
 800c94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c950:	f108 0201 	add.w	r2, r8, #1
 800c954:	3b01      	subs	r3, #1
 800c956:	4631      	mov	r1, r6
 800c958:	4628      	mov	r0, r5
 800c95a:	47b8      	blx	r7
 800c95c:	3001      	adds	r0, #1
 800c95e:	d10e      	bne.n	800c97e <_printf_float+0x42a>
 800c960:	e659      	b.n	800c616 <_printf_float+0xc2>
 800c962:	2301      	movs	r3, #1
 800c964:	4652      	mov	r2, sl
 800c966:	4631      	mov	r1, r6
 800c968:	4628      	mov	r0, r5
 800c96a:	47b8      	blx	r7
 800c96c:	3001      	adds	r0, #1
 800c96e:	f43f ae52 	beq.w	800c616 <_printf_float+0xc2>
 800c972:	f108 0801 	add.w	r8, r8, #1
 800c976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c978:	3b01      	subs	r3, #1
 800c97a:	4543      	cmp	r3, r8
 800c97c:	dcf1      	bgt.n	800c962 <_printf_float+0x40e>
 800c97e:	464b      	mov	r3, r9
 800c980:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c984:	e6dc      	b.n	800c740 <_printf_float+0x1ec>
 800c986:	f04f 0800 	mov.w	r8, #0
 800c98a:	f104 0a1a 	add.w	sl, r4, #26
 800c98e:	e7f2      	b.n	800c976 <_printf_float+0x422>
 800c990:	2301      	movs	r3, #1
 800c992:	4642      	mov	r2, r8
 800c994:	e7df      	b.n	800c956 <_printf_float+0x402>
 800c996:	2301      	movs	r3, #1
 800c998:	464a      	mov	r2, r9
 800c99a:	4631      	mov	r1, r6
 800c99c:	4628      	mov	r0, r5
 800c99e:	47b8      	blx	r7
 800c9a0:	3001      	adds	r0, #1
 800c9a2:	f43f ae38 	beq.w	800c616 <_printf_float+0xc2>
 800c9a6:	f108 0801 	add.w	r8, r8, #1
 800c9aa:	68e3      	ldr	r3, [r4, #12]
 800c9ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9ae:	1a5b      	subs	r3, r3, r1
 800c9b0:	4543      	cmp	r3, r8
 800c9b2:	dcf0      	bgt.n	800c996 <_printf_float+0x442>
 800c9b4:	e6fa      	b.n	800c7ac <_printf_float+0x258>
 800c9b6:	f04f 0800 	mov.w	r8, #0
 800c9ba:	f104 0919 	add.w	r9, r4, #25
 800c9be:	e7f4      	b.n	800c9aa <_printf_float+0x456>

0800c9c0 <_printf_common>:
 800c9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c4:	4616      	mov	r6, r2
 800c9c6:	4699      	mov	r9, r3
 800c9c8:	688a      	ldr	r2, [r1, #8]
 800c9ca:	690b      	ldr	r3, [r1, #16]
 800c9cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	bfb8      	it	lt
 800c9d4:	4613      	movlt	r3, r2
 800c9d6:	6033      	str	r3, [r6, #0]
 800c9d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9dc:	4607      	mov	r7, r0
 800c9de:	460c      	mov	r4, r1
 800c9e0:	b10a      	cbz	r2, 800c9e6 <_printf_common+0x26>
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	6033      	str	r3, [r6, #0]
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	0699      	lsls	r1, r3, #26
 800c9ea:	bf42      	ittt	mi
 800c9ec:	6833      	ldrmi	r3, [r6, #0]
 800c9ee:	3302      	addmi	r3, #2
 800c9f0:	6033      	strmi	r3, [r6, #0]
 800c9f2:	6825      	ldr	r5, [r4, #0]
 800c9f4:	f015 0506 	ands.w	r5, r5, #6
 800c9f8:	d106      	bne.n	800ca08 <_printf_common+0x48>
 800c9fa:	f104 0a19 	add.w	sl, r4, #25
 800c9fe:	68e3      	ldr	r3, [r4, #12]
 800ca00:	6832      	ldr	r2, [r6, #0]
 800ca02:	1a9b      	subs	r3, r3, r2
 800ca04:	42ab      	cmp	r3, r5
 800ca06:	dc26      	bgt.n	800ca56 <_printf_common+0x96>
 800ca08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca0c:	1e13      	subs	r3, r2, #0
 800ca0e:	6822      	ldr	r2, [r4, #0]
 800ca10:	bf18      	it	ne
 800ca12:	2301      	movne	r3, #1
 800ca14:	0692      	lsls	r2, r2, #26
 800ca16:	d42b      	bmi.n	800ca70 <_printf_common+0xb0>
 800ca18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	4638      	mov	r0, r7
 800ca20:	47c0      	blx	r8
 800ca22:	3001      	adds	r0, #1
 800ca24:	d01e      	beq.n	800ca64 <_printf_common+0xa4>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	68e5      	ldr	r5, [r4, #12]
 800ca2a:	6832      	ldr	r2, [r6, #0]
 800ca2c:	f003 0306 	and.w	r3, r3, #6
 800ca30:	2b04      	cmp	r3, #4
 800ca32:	bf08      	it	eq
 800ca34:	1aad      	subeq	r5, r5, r2
 800ca36:	68a3      	ldr	r3, [r4, #8]
 800ca38:	6922      	ldr	r2, [r4, #16]
 800ca3a:	bf0c      	ite	eq
 800ca3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca40:	2500      	movne	r5, #0
 800ca42:	4293      	cmp	r3, r2
 800ca44:	bfc4      	itt	gt
 800ca46:	1a9b      	subgt	r3, r3, r2
 800ca48:	18ed      	addgt	r5, r5, r3
 800ca4a:	2600      	movs	r6, #0
 800ca4c:	341a      	adds	r4, #26
 800ca4e:	42b5      	cmp	r5, r6
 800ca50:	d11a      	bne.n	800ca88 <_printf_common+0xc8>
 800ca52:	2000      	movs	r0, #0
 800ca54:	e008      	b.n	800ca68 <_printf_common+0xa8>
 800ca56:	2301      	movs	r3, #1
 800ca58:	4652      	mov	r2, sl
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	4638      	mov	r0, r7
 800ca5e:	47c0      	blx	r8
 800ca60:	3001      	adds	r0, #1
 800ca62:	d103      	bne.n	800ca6c <_printf_common+0xac>
 800ca64:	f04f 30ff 	mov.w	r0, #4294967295
 800ca68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6c:	3501      	adds	r5, #1
 800ca6e:	e7c6      	b.n	800c9fe <_printf_common+0x3e>
 800ca70:	18e1      	adds	r1, r4, r3
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	2030      	movs	r0, #48	; 0x30
 800ca76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca7a:	4422      	add	r2, r4
 800ca7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca84:	3302      	adds	r3, #2
 800ca86:	e7c7      	b.n	800ca18 <_printf_common+0x58>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	4622      	mov	r2, r4
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	4638      	mov	r0, r7
 800ca90:	47c0      	blx	r8
 800ca92:	3001      	adds	r0, #1
 800ca94:	d0e6      	beq.n	800ca64 <_printf_common+0xa4>
 800ca96:	3601      	adds	r6, #1
 800ca98:	e7d9      	b.n	800ca4e <_printf_common+0x8e>
	...

0800ca9c <_printf_i>:
 800ca9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caa0:	7e0f      	ldrb	r7, [r1, #24]
 800caa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800caa4:	2f78      	cmp	r7, #120	; 0x78
 800caa6:	4691      	mov	r9, r2
 800caa8:	4680      	mov	r8, r0
 800caaa:	460c      	mov	r4, r1
 800caac:	469a      	mov	sl, r3
 800caae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cab2:	d807      	bhi.n	800cac4 <_printf_i+0x28>
 800cab4:	2f62      	cmp	r7, #98	; 0x62
 800cab6:	d80a      	bhi.n	800cace <_printf_i+0x32>
 800cab8:	2f00      	cmp	r7, #0
 800caba:	f000 80d8 	beq.w	800cc6e <_printf_i+0x1d2>
 800cabe:	2f58      	cmp	r7, #88	; 0x58
 800cac0:	f000 80a3 	beq.w	800cc0a <_printf_i+0x16e>
 800cac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cacc:	e03a      	b.n	800cb44 <_printf_i+0xa8>
 800cace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cad2:	2b15      	cmp	r3, #21
 800cad4:	d8f6      	bhi.n	800cac4 <_printf_i+0x28>
 800cad6:	a101      	add	r1, pc, #4	; (adr r1, 800cadc <_printf_i+0x40>)
 800cad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cadc:	0800cb35 	.word	0x0800cb35
 800cae0:	0800cb49 	.word	0x0800cb49
 800cae4:	0800cac5 	.word	0x0800cac5
 800cae8:	0800cac5 	.word	0x0800cac5
 800caec:	0800cac5 	.word	0x0800cac5
 800caf0:	0800cac5 	.word	0x0800cac5
 800caf4:	0800cb49 	.word	0x0800cb49
 800caf8:	0800cac5 	.word	0x0800cac5
 800cafc:	0800cac5 	.word	0x0800cac5
 800cb00:	0800cac5 	.word	0x0800cac5
 800cb04:	0800cac5 	.word	0x0800cac5
 800cb08:	0800cc55 	.word	0x0800cc55
 800cb0c:	0800cb79 	.word	0x0800cb79
 800cb10:	0800cc37 	.word	0x0800cc37
 800cb14:	0800cac5 	.word	0x0800cac5
 800cb18:	0800cac5 	.word	0x0800cac5
 800cb1c:	0800cc77 	.word	0x0800cc77
 800cb20:	0800cac5 	.word	0x0800cac5
 800cb24:	0800cb79 	.word	0x0800cb79
 800cb28:	0800cac5 	.word	0x0800cac5
 800cb2c:	0800cac5 	.word	0x0800cac5
 800cb30:	0800cc3f 	.word	0x0800cc3f
 800cb34:	682b      	ldr	r3, [r5, #0]
 800cb36:	1d1a      	adds	r2, r3, #4
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	602a      	str	r2, [r5, #0]
 800cb3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb44:	2301      	movs	r3, #1
 800cb46:	e0a3      	b.n	800cc90 <_printf_i+0x1f4>
 800cb48:	6820      	ldr	r0, [r4, #0]
 800cb4a:	6829      	ldr	r1, [r5, #0]
 800cb4c:	0606      	lsls	r6, r0, #24
 800cb4e:	f101 0304 	add.w	r3, r1, #4
 800cb52:	d50a      	bpl.n	800cb6a <_printf_i+0xce>
 800cb54:	680e      	ldr	r6, [r1, #0]
 800cb56:	602b      	str	r3, [r5, #0]
 800cb58:	2e00      	cmp	r6, #0
 800cb5a:	da03      	bge.n	800cb64 <_printf_i+0xc8>
 800cb5c:	232d      	movs	r3, #45	; 0x2d
 800cb5e:	4276      	negs	r6, r6
 800cb60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb64:	485e      	ldr	r0, [pc, #376]	; (800cce0 <_printf_i+0x244>)
 800cb66:	230a      	movs	r3, #10
 800cb68:	e019      	b.n	800cb9e <_printf_i+0x102>
 800cb6a:	680e      	ldr	r6, [r1, #0]
 800cb6c:	602b      	str	r3, [r5, #0]
 800cb6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb72:	bf18      	it	ne
 800cb74:	b236      	sxthne	r6, r6
 800cb76:	e7ef      	b.n	800cb58 <_printf_i+0xbc>
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	6820      	ldr	r0, [r4, #0]
 800cb7c:	1d19      	adds	r1, r3, #4
 800cb7e:	6029      	str	r1, [r5, #0]
 800cb80:	0601      	lsls	r1, r0, #24
 800cb82:	d501      	bpl.n	800cb88 <_printf_i+0xec>
 800cb84:	681e      	ldr	r6, [r3, #0]
 800cb86:	e002      	b.n	800cb8e <_printf_i+0xf2>
 800cb88:	0646      	lsls	r6, r0, #25
 800cb8a:	d5fb      	bpl.n	800cb84 <_printf_i+0xe8>
 800cb8c:	881e      	ldrh	r6, [r3, #0]
 800cb8e:	4854      	ldr	r0, [pc, #336]	; (800cce0 <_printf_i+0x244>)
 800cb90:	2f6f      	cmp	r7, #111	; 0x6f
 800cb92:	bf0c      	ite	eq
 800cb94:	2308      	moveq	r3, #8
 800cb96:	230a      	movne	r3, #10
 800cb98:	2100      	movs	r1, #0
 800cb9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb9e:	6865      	ldr	r5, [r4, #4]
 800cba0:	60a5      	str	r5, [r4, #8]
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	bfa2      	ittt	ge
 800cba6:	6821      	ldrge	r1, [r4, #0]
 800cba8:	f021 0104 	bicge.w	r1, r1, #4
 800cbac:	6021      	strge	r1, [r4, #0]
 800cbae:	b90e      	cbnz	r6, 800cbb4 <_printf_i+0x118>
 800cbb0:	2d00      	cmp	r5, #0
 800cbb2:	d04d      	beq.n	800cc50 <_printf_i+0x1b4>
 800cbb4:	4615      	mov	r5, r2
 800cbb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbba:	fb03 6711 	mls	r7, r3, r1, r6
 800cbbe:	5dc7      	ldrb	r7, [r0, r7]
 800cbc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbc4:	4637      	mov	r7, r6
 800cbc6:	42bb      	cmp	r3, r7
 800cbc8:	460e      	mov	r6, r1
 800cbca:	d9f4      	bls.n	800cbb6 <_printf_i+0x11a>
 800cbcc:	2b08      	cmp	r3, #8
 800cbce:	d10b      	bne.n	800cbe8 <_printf_i+0x14c>
 800cbd0:	6823      	ldr	r3, [r4, #0]
 800cbd2:	07de      	lsls	r6, r3, #31
 800cbd4:	d508      	bpl.n	800cbe8 <_printf_i+0x14c>
 800cbd6:	6923      	ldr	r3, [r4, #16]
 800cbd8:	6861      	ldr	r1, [r4, #4]
 800cbda:	4299      	cmp	r1, r3
 800cbdc:	bfde      	ittt	le
 800cbde:	2330      	movle	r3, #48	; 0x30
 800cbe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbe8:	1b52      	subs	r2, r2, r5
 800cbea:	6122      	str	r2, [r4, #16]
 800cbec:	f8cd a000 	str.w	sl, [sp]
 800cbf0:	464b      	mov	r3, r9
 800cbf2:	aa03      	add	r2, sp, #12
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	f7ff fee2 	bl	800c9c0 <_printf_common>
 800cbfc:	3001      	adds	r0, #1
 800cbfe:	d14c      	bne.n	800cc9a <_printf_i+0x1fe>
 800cc00:	f04f 30ff 	mov.w	r0, #4294967295
 800cc04:	b004      	add	sp, #16
 800cc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc0a:	4835      	ldr	r0, [pc, #212]	; (800cce0 <_printf_i+0x244>)
 800cc0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc10:	6829      	ldr	r1, [r5, #0]
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc18:	6029      	str	r1, [r5, #0]
 800cc1a:	061d      	lsls	r5, r3, #24
 800cc1c:	d514      	bpl.n	800cc48 <_printf_i+0x1ac>
 800cc1e:	07df      	lsls	r7, r3, #31
 800cc20:	bf44      	itt	mi
 800cc22:	f043 0320 	orrmi.w	r3, r3, #32
 800cc26:	6023      	strmi	r3, [r4, #0]
 800cc28:	b91e      	cbnz	r6, 800cc32 <_printf_i+0x196>
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	f023 0320 	bic.w	r3, r3, #32
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	2310      	movs	r3, #16
 800cc34:	e7b0      	b.n	800cb98 <_printf_i+0xfc>
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	f043 0320 	orr.w	r3, r3, #32
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	2378      	movs	r3, #120	; 0x78
 800cc40:	4828      	ldr	r0, [pc, #160]	; (800cce4 <_printf_i+0x248>)
 800cc42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc46:	e7e3      	b.n	800cc10 <_printf_i+0x174>
 800cc48:	0659      	lsls	r1, r3, #25
 800cc4a:	bf48      	it	mi
 800cc4c:	b2b6      	uxthmi	r6, r6
 800cc4e:	e7e6      	b.n	800cc1e <_printf_i+0x182>
 800cc50:	4615      	mov	r5, r2
 800cc52:	e7bb      	b.n	800cbcc <_printf_i+0x130>
 800cc54:	682b      	ldr	r3, [r5, #0]
 800cc56:	6826      	ldr	r6, [r4, #0]
 800cc58:	6961      	ldr	r1, [r4, #20]
 800cc5a:	1d18      	adds	r0, r3, #4
 800cc5c:	6028      	str	r0, [r5, #0]
 800cc5e:	0635      	lsls	r5, r6, #24
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	d501      	bpl.n	800cc68 <_printf_i+0x1cc>
 800cc64:	6019      	str	r1, [r3, #0]
 800cc66:	e002      	b.n	800cc6e <_printf_i+0x1d2>
 800cc68:	0670      	lsls	r0, r6, #25
 800cc6a:	d5fb      	bpl.n	800cc64 <_printf_i+0x1c8>
 800cc6c:	8019      	strh	r1, [r3, #0]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	6123      	str	r3, [r4, #16]
 800cc72:	4615      	mov	r5, r2
 800cc74:	e7ba      	b.n	800cbec <_printf_i+0x150>
 800cc76:	682b      	ldr	r3, [r5, #0]
 800cc78:	1d1a      	adds	r2, r3, #4
 800cc7a:	602a      	str	r2, [r5, #0]
 800cc7c:	681d      	ldr	r5, [r3, #0]
 800cc7e:	6862      	ldr	r2, [r4, #4]
 800cc80:	2100      	movs	r1, #0
 800cc82:	4628      	mov	r0, r5
 800cc84:	f7f3 fad4 	bl	8000230 <memchr>
 800cc88:	b108      	cbz	r0, 800cc8e <_printf_i+0x1f2>
 800cc8a:	1b40      	subs	r0, r0, r5
 800cc8c:	6060      	str	r0, [r4, #4]
 800cc8e:	6863      	ldr	r3, [r4, #4]
 800cc90:	6123      	str	r3, [r4, #16]
 800cc92:	2300      	movs	r3, #0
 800cc94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc98:	e7a8      	b.n	800cbec <_printf_i+0x150>
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	462a      	mov	r2, r5
 800cc9e:	4649      	mov	r1, r9
 800cca0:	4640      	mov	r0, r8
 800cca2:	47d0      	blx	sl
 800cca4:	3001      	adds	r0, #1
 800cca6:	d0ab      	beq.n	800cc00 <_printf_i+0x164>
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	079b      	lsls	r3, r3, #30
 800ccac:	d413      	bmi.n	800ccd6 <_printf_i+0x23a>
 800ccae:	68e0      	ldr	r0, [r4, #12]
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	4298      	cmp	r0, r3
 800ccb4:	bfb8      	it	lt
 800ccb6:	4618      	movlt	r0, r3
 800ccb8:	e7a4      	b.n	800cc04 <_printf_i+0x168>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	4632      	mov	r2, r6
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	47d0      	blx	sl
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	d09b      	beq.n	800cc00 <_printf_i+0x164>
 800ccc8:	3501      	adds	r5, #1
 800ccca:	68e3      	ldr	r3, [r4, #12]
 800cccc:	9903      	ldr	r1, [sp, #12]
 800ccce:	1a5b      	subs	r3, r3, r1
 800ccd0:	42ab      	cmp	r3, r5
 800ccd2:	dcf2      	bgt.n	800ccba <_printf_i+0x21e>
 800ccd4:	e7eb      	b.n	800ccae <_printf_i+0x212>
 800ccd6:	2500      	movs	r5, #0
 800ccd8:	f104 0619 	add.w	r6, r4, #25
 800ccdc:	e7f5      	b.n	800ccca <_printf_i+0x22e>
 800ccde:	bf00      	nop
 800cce0:	08012bae 	.word	0x08012bae
 800cce4:	08012bbf 	.word	0x08012bbf

0800cce8 <_scanf_float>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	b087      	sub	sp, #28
 800ccee:	4617      	mov	r7, r2
 800ccf0:	9303      	str	r3, [sp, #12]
 800ccf2:	688b      	ldr	r3, [r1, #8]
 800ccf4:	1e5a      	subs	r2, r3, #1
 800ccf6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ccfa:	bf83      	ittte	hi
 800ccfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cd00:	195b      	addhi	r3, r3, r5
 800cd02:	9302      	strhi	r3, [sp, #8]
 800cd04:	2300      	movls	r3, #0
 800cd06:	bf86      	itte	hi
 800cd08:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cd0c:	608b      	strhi	r3, [r1, #8]
 800cd0e:	9302      	strls	r3, [sp, #8]
 800cd10:	680b      	ldr	r3, [r1, #0]
 800cd12:	468b      	mov	fp, r1
 800cd14:	2500      	movs	r5, #0
 800cd16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cd1a:	f84b 3b1c 	str.w	r3, [fp], #28
 800cd1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cd22:	4680      	mov	r8, r0
 800cd24:	460c      	mov	r4, r1
 800cd26:	465e      	mov	r6, fp
 800cd28:	46aa      	mov	sl, r5
 800cd2a:	46a9      	mov	r9, r5
 800cd2c:	9501      	str	r5, [sp, #4]
 800cd2e:	68a2      	ldr	r2, [r4, #8]
 800cd30:	b152      	cbz	r2, 800cd48 <_scanf_float+0x60>
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b4e      	cmp	r3, #78	; 0x4e
 800cd38:	d864      	bhi.n	800ce04 <_scanf_float+0x11c>
 800cd3a:	2b40      	cmp	r3, #64	; 0x40
 800cd3c:	d83c      	bhi.n	800cdb8 <_scanf_float+0xd0>
 800cd3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cd42:	b2c8      	uxtb	r0, r1
 800cd44:	280e      	cmp	r0, #14
 800cd46:	d93a      	bls.n	800cdbe <_scanf_float+0xd6>
 800cd48:	f1b9 0f00 	cmp.w	r9, #0
 800cd4c:	d003      	beq.n	800cd56 <_scanf_float+0x6e>
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd5a:	f1ba 0f01 	cmp.w	sl, #1
 800cd5e:	f200 8113 	bhi.w	800cf88 <_scanf_float+0x2a0>
 800cd62:	455e      	cmp	r6, fp
 800cd64:	f200 8105 	bhi.w	800cf72 <_scanf_float+0x28a>
 800cd68:	2501      	movs	r5, #1
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	b007      	add	sp, #28
 800cd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cd76:	2a0d      	cmp	r2, #13
 800cd78:	d8e6      	bhi.n	800cd48 <_scanf_float+0x60>
 800cd7a:	a101      	add	r1, pc, #4	; (adr r1, 800cd80 <_scanf_float+0x98>)
 800cd7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd80:	0800cebf 	.word	0x0800cebf
 800cd84:	0800cd49 	.word	0x0800cd49
 800cd88:	0800cd49 	.word	0x0800cd49
 800cd8c:	0800cd49 	.word	0x0800cd49
 800cd90:	0800cf1f 	.word	0x0800cf1f
 800cd94:	0800cef7 	.word	0x0800cef7
 800cd98:	0800cd49 	.word	0x0800cd49
 800cd9c:	0800cd49 	.word	0x0800cd49
 800cda0:	0800cecd 	.word	0x0800cecd
 800cda4:	0800cd49 	.word	0x0800cd49
 800cda8:	0800cd49 	.word	0x0800cd49
 800cdac:	0800cd49 	.word	0x0800cd49
 800cdb0:	0800cd49 	.word	0x0800cd49
 800cdb4:	0800ce85 	.word	0x0800ce85
 800cdb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cdbc:	e7db      	b.n	800cd76 <_scanf_float+0x8e>
 800cdbe:	290e      	cmp	r1, #14
 800cdc0:	d8c2      	bhi.n	800cd48 <_scanf_float+0x60>
 800cdc2:	a001      	add	r0, pc, #4	; (adr r0, 800cdc8 <_scanf_float+0xe0>)
 800cdc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cdc8:	0800ce77 	.word	0x0800ce77
 800cdcc:	0800cd49 	.word	0x0800cd49
 800cdd0:	0800ce77 	.word	0x0800ce77
 800cdd4:	0800cf0b 	.word	0x0800cf0b
 800cdd8:	0800cd49 	.word	0x0800cd49
 800cddc:	0800ce25 	.word	0x0800ce25
 800cde0:	0800ce61 	.word	0x0800ce61
 800cde4:	0800ce61 	.word	0x0800ce61
 800cde8:	0800ce61 	.word	0x0800ce61
 800cdec:	0800ce61 	.word	0x0800ce61
 800cdf0:	0800ce61 	.word	0x0800ce61
 800cdf4:	0800ce61 	.word	0x0800ce61
 800cdf8:	0800ce61 	.word	0x0800ce61
 800cdfc:	0800ce61 	.word	0x0800ce61
 800ce00:	0800ce61 	.word	0x0800ce61
 800ce04:	2b6e      	cmp	r3, #110	; 0x6e
 800ce06:	d809      	bhi.n	800ce1c <_scanf_float+0x134>
 800ce08:	2b60      	cmp	r3, #96	; 0x60
 800ce0a:	d8b2      	bhi.n	800cd72 <_scanf_float+0x8a>
 800ce0c:	2b54      	cmp	r3, #84	; 0x54
 800ce0e:	d077      	beq.n	800cf00 <_scanf_float+0x218>
 800ce10:	2b59      	cmp	r3, #89	; 0x59
 800ce12:	d199      	bne.n	800cd48 <_scanf_float+0x60>
 800ce14:	2d07      	cmp	r5, #7
 800ce16:	d197      	bne.n	800cd48 <_scanf_float+0x60>
 800ce18:	2508      	movs	r5, #8
 800ce1a:	e029      	b.n	800ce70 <_scanf_float+0x188>
 800ce1c:	2b74      	cmp	r3, #116	; 0x74
 800ce1e:	d06f      	beq.n	800cf00 <_scanf_float+0x218>
 800ce20:	2b79      	cmp	r3, #121	; 0x79
 800ce22:	e7f6      	b.n	800ce12 <_scanf_float+0x12a>
 800ce24:	6821      	ldr	r1, [r4, #0]
 800ce26:	05c8      	lsls	r0, r1, #23
 800ce28:	d51a      	bpl.n	800ce60 <_scanf_float+0x178>
 800ce2a:	9b02      	ldr	r3, [sp, #8]
 800ce2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ce30:	6021      	str	r1, [r4, #0]
 800ce32:	f109 0901 	add.w	r9, r9, #1
 800ce36:	b11b      	cbz	r3, 800ce40 <_scanf_float+0x158>
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	3201      	adds	r2, #1
 800ce3c:	9302      	str	r3, [sp, #8]
 800ce3e:	60a2      	str	r2, [r4, #8]
 800ce40:	68a3      	ldr	r3, [r4, #8]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	60a3      	str	r3, [r4, #8]
 800ce46:	6923      	ldr	r3, [r4, #16]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	6123      	str	r3, [r4, #16]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	607b      	str	r3, [r7, #4]
 800ce54:	f340 8084 	ble.w	800cf60 <_scanf_float+0x278>
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	603b      	str	r3, [r7, #0]
 800ce5e:	e766      	b.n	800cd2e <_scanf_float+0x46>
 800ce60:	eb1a 0f05 	cmn.w	sl, r5
 800ce64:	f47f af70 	bne.w	800cd48 <_scanf_float+0x60>
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ce6e:	6022      	str	r2, [r4, #0]
 800ce70:	f806 3b01 	strb.w	r3, [r6], #1
 800ce74:	e7e4      	b.n	800ce40 <_scanf_float+0x158>
 800ce76:	6822      	ldr	r2, [r4, #0]
 800ce78:	0610      	lsls	r0, r2, #24
 800ce7a:	f57f af65 	bpl.w	800cd48 <_scanf_float+0x60>
 800ce7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce82:	e7f4      	b.n	800ce6e <_scanf_float+0x186>
 800ce84:	f1ba 0f00 	cmp.w	sl, #0
 800ce88:	d10e      	bne.n	800cea8 <_scanf_float+0x1c0>
 800ce8a:	f1b9 0f00 	cmp.w	r9, #0
 800ce8e:	d10e      	bne.n	800ceae <_scanf_float+0x1c6>
 800ce90:	6822      	ldr	r2, [r4, #0]
 800ce92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ce96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ce9a:	d108      	bne.n	800ceae <_scanf_float+0x1c6>
 800ce9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cea0:	6022      	str	r2, [r4, #0]
 800cea2:	f04f 0a01 	mov.w	sl, #1
 800cea6:	e7e3      	b.n	800ce70 <_scanf_float+0x188>
 800cea8:	f1ba 0f02 	cmp.w	sl, #2
 800ceac:	d055      	beq.n	800cf5a <_scanf_float+0x272>
 800ceae:	2d01      	cmp	r5, #1
 800ceb0:	d002      	beq.n	800ceb8 <_scanf_float+0x1d0>
 800ceb2:	2d04      	cmp	r5, #4
 800ceb4:	f47f af48 	bne.w	800cd48 <_scanf_float+0x60>
 800ceb8:	3501      	adds	r5, #1
 800ceba:	b2ed      	uxtb	r5, r5
 800cebc:	e7d8      	b.n	800ce70 <_scanf_float+0x188>
 800cebe:	f1ba 0f01 	cmp.w	sl, #1
 800cec2:	f47f af41 	bne.w	800cd48 <_scanf_float+0x60>
 800cec6:	f04f 0a02 	mov.w	sl, #2
 800ceca:	e7d1      	b.n	800ce70 <_scanf_float+0x188>
 800cecc:	b97d      	cbnz	r5, 800ceee <_scanf_float+0x206>
 800cece:	f1b9 0f00 	cmp.w	r9, #0
 800ced2:	f47f af3c 	bne.w	800cd4e <_scanf_float+0x66>
 800ced6:	6822      	ldr	r2, [r4, #0]
 800ced8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cedc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cee0:	f47f af39 	bne.w	800cd56 <_scanf_float+0x6e>
 800cee4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cee8:	6022      	str	r2, [r4, #0]
 800ceea:	2501      	movs	r5, #1
 800ceec:	e7c0      	b.n	800ce70 <_scanf_float+0x188>
 800ceee:	2d03      	cmp	r5, #3
 800cef0:	d0e2      	beq.n	800ceb8 <_scanf_float+0x1d0>
 800cef2:	2d05      	cmp	r5, #5
 800cef4:	e7de      	b.n	800ceb4 <_scanf_float+0x1cc>
 800cef6:	2d02      	cmp	r5, #2
 800cef8:	f47f af26 	bne.w	800cd48 <_scanf_float+0x60>
 800cefc:	2503      	movs	r5, #3
 800cefe:	e7b7      	b.n	800ce70 <_scanf_float+0x188>
 800cf00:	2d06      	cmp	r5, #6
 800cf02:	f47f af21 	bne.w	800cd48 <_scanf_float+0x60>
 800cf06:	2507      	movs	r5, #7
 800cf08:	e7b2      	b.n	800ce70 <_scanf_float+0x188>
 800cf0a:	6822      	ldr	r2, [r4, #0]
 800cf0c:	0591      	lsls	r1, r2, #22
 800cf0e:	f57f af1b 	bpl.w	800cd48 <_scanf_float+0x60>
 800cf12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cf16:	6022      	str	r2, [r4, #0]
 800cf18:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf1c:	e7a8      	b.n	800ce70 <_scanf_float+0x188>
 800cf1e:	6822      	ldr	r2, [r4, #0]
 800cf20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cf24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cf28:	d006      	beq.n	800cf38 <_scanf_float+0x250>
 800cf2a:	0550      	lsls	r0, r2, #21
 800cf2c:	f57f af0c 	bpl.w	800cd48 <_scanf_float+0x60>
 800cf30:	f1b9 0f00 	cmp.w	r9, #0
 800cf34:	f43f af0f 	beq.w	800cd56 <_scanf_float+0x6e>
 800cf38:	0591      	lsls	r1, r2, #22
 800cf3a:	bf58      	it	pl
 800cf3c:	9901      	ldrpl	r1, [sp, #4]
 800cf3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cf42:	bf58      	it	pl
 800cf44:	eba9 0101 	subpl.w	r1, r9, r1
 800cf48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cf4c:	bf58      	it	pl
 800cf4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cf52:	6022      	str	r2, [r4, #0]
 800cf54:	f04f 0900 	mov.w	r9, #0
 800cf58:	e78a      	b.n	800ce70 <_scanf_float+0x188>
 800cf5a:	f04f 0a03 	mov.w	sl, #3
 800cf5e:	e787      	b.n	800ce70 <_scanf_float+0x188>
 800cf60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf64:	4639      	mov	r1, r7
 800cf66:	4640      	mov	r0, r8
 800cf68:	4798      	blx	r3
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	f43f aedf 	beq.w	800cd2e <_scanf_float+0x46>
 800cf70:	e6ea      	b.n	800cd48 <_scanf_float+0x60>
 800cf72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf7a:	463a      	mov	r2, r7
 800cf7c:	4640      	mov	r0, r8
 800cf7e:	4798      	blx	r3
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	3b01      	subs	r3, #1
 800cf84:	6123      	str	r3, [r4, #16]
 800cf86:	e6ec      	b.n	800cd62 <_scanf_float+0x7a>
 800cf88:	1e6b      	subs	r3, r5, #1
 800cf8a:	2b06      	cmp	r3, #6
 800cf8c:	d825      	bhi.n	800cfda <_scanf_float+0x2f2>
 800cf8e:	2d02      	cmp	r5, #2
 800cf90:	d836      	bhi.n	800d000 <_scanf_float+0x318>
 800cf92:	455e      	cmp	r6, fp
 800cf94:	f67f aee8 	bls.w	800cd68 <_scanf_float+0x80>
 800cf98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cfa0:	463a      	mov	r2, r7
 800cfa2:	4640      	mov	r0, r8
 800cfa4:	4798      	blx	r3
 800cfa6:	6923      	ldr	r3, [r4, #16]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	6123      	str	r3, [r4, #16]
 800cfac:	e7f1      	b.n	800cf92 <_scanf_float+0x2aa>
 800cfae:	9802      	ldr	r0, [sp, #8]
 800cfb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cfb8:	9002      	str	r0, [sp, #8]
 800cfba:	463a      	mov	r2, r7
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	4798      	blx	r3
 800cfc0:	6923      	ldr	r3, [r4, #16]
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	6123      	str	r3, [r4, #16]
 800cfc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfca:	fa5f fa8a 	uxtb.w	sl, sl
 800cfce:	f1ba 0f02 	cmp.w	sl, #2
 800cfd2:	d1ec      	bne.n	800cfae <_scanf_float+0x2c6>
 800cfd4:	3d03      	subs	r5, #3
 800cfd6:	b2ed      	uxtb	r5, r5
 800cfd8:	1b76      	subs	r6, r6, r5
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	05da      	lsls	r2, r3, #23
 800cfde:	d52f      	bpl.n	800d040 <_scanf_float+0x358>
 800cfe0:	055b      	lsls	r3, r3, #21
 800cfe2:	d510      	bpl.n	800d006 <_scanf_float+0x31e>
 800cfe4:	455e      	cmp	r6, fp
 800cfe6:	f67f aebf 	bls.w	800cd68 <_scanf_float+0x80>
 800cfea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cff2:	463a      	mov	r2, r7
 800cff4:	4640      	mov	r0, r8
 800cff6:	4798      	blx	r3
 800cff8:	6923      	ldr	r3, [r4, #16]
 800cffa:	3b01      	subs	r3, #1
 800cffc:	6123      	str	r3, [r4, #16]
 800cffe:	e7f1      	b.n	800cfe4 <_scanf_float+0x2fc>
 800d000:	46aa      	mov	sl, r5
 800d002:	9602      	str	r6, [sp, #8]
 800d004:	e7df      	b.n	800cfc6 <_scanf_float+0x2de>
 800d006:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d00a:	6923      	ldr	r3, [r4, #16]
 800d00c:	2965      	cmp	r1, #101	; 0x65
 800d00e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d012:	f106 35ff 	add.w	r5, r6, #4294967295
 800d016:	6123      	str	r3, [r4, #16]
 800d018:	d00c      	beq.n	800d034 <_scanf_float+0x34c>
 800d01a:	2945      	cmp	r1, #69	; 0x45
 800d01c:	d00a      	beq.n	800d034 <_scanf_float+0x34c>
 800d01e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d022:	463a      	mov	r2, r7
 800d024:	4640      	mov	r0, r8
 800d026:	4798      	blx	r3
 800d028:	6923      	ldr	r3, [r4, #16]
 800d02a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d02e:	3b01      	subs	r3, #1
 800d030:	1eb5      	subs	r5, r6, #2
 800d032:	6123      	str	r3, [r4, #16]
 800d034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d038:	463a      	mov	r2, r7
 800d03a:	4640      	mov	r0, r8
 800d03c:	4798      	blx	r3
 800d03e:	462e      	mov	r6, r5
 800d040:	6825      	ldr	r5, [r4, #0]
 800d042:	f015 0510 	ands.w	r5, r5, #16
 800d046:	d159      	bne.n	800d0fc <_scanf_float+0x414>
 800d048:	7035      	strb	r5, [r6, #0]
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d054:	d11b      	bne.n	800d08e <_scanf_float+0x3a6>
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	454b      	cmp	r3, r9
 800d05a:	eba3 0209 	sub.w	r2, r3, r9
 800d05e:	d123      	bne.n	800d0a8 <_scanf_float+0x3c0>
 800d060:	2200      	movs	r2, #0
 800d062:	4659      	mov	r1, fp
 800d064:	4640      	mov	r0, r8
 800d066:	f000 feb1 	bl	800ddcc <_strtod_r>
 800d06a:	6822      	ldr	r2, [r4, #0]
 800d06c:	9b03      	ldr	r3, [sp, #12]
 800d06e:	f012 0f02 	tst.w	r2, #2
 800d072:	ec57 6b10 	vmov	r6, r7, d0
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	d021      	beq.n	800d0be <_scanf_float+0x3d6>
 800d07a:	9903      	ldr	r1, [sp, #12]
 800d07c:	1d1a      	adds	r2, r3, #4
 800d07e:	600a      	str	r2, [r1, #0]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	e9c3 6700 	strd	r6, r7, [r3]
 800d086:	68e3      	ldr	r3, [r4, #12]
 800d088:	3301      	adds	r3, #1
 800d08a:	60e3      	str	r3, [r4, #12]
 800d08c:	e66d      	b.n	800cd6a <_scanf_float+0x82>
 800d08e:	9b04      	ldr	r3, [sp, #16]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d0e5      	beq.n	800d060 <_scanf_float+0x378>
 800d094:	9905      	ldr	r1, [sp, #20]
 800d096:	230a      	movs	r3, #10
 800d098:	462a      	mov	r2, r5
 800d09a:	3101      	adds	r1, #1
 800d09c:	4640      	mov	r0, r8
 800d09e:	f000 ff1d 	bl	800dedc <_strtol_r>
 800d0a2:	9b04      	ldr	r3, [sp, #16]
 800d0a4:	9e05      	ldr	r6, [sp, #20]
 800d0a6:	1ac2      	subs	r2, r0, r3
 800d0a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d0ac:	429e      	cmp	r6, r3
 800d0ae:	bf28      	it	cs
 800d0b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d0b4:	4912      	ldr	r1, [pc, #72]	; (800d100 <_scanf_float+0x418>)
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	f000 f844 	bl	800d144 <siprintf>
 800d0bc:	e7d0      	b.n	800d060 <_scanf_float+0x378>
 800d0be:	9903      	ldr	r1, [sp, #12]
 800d0c0:	f012 0f04 	tst.w	r2, #4
 800d0c4:	f103 0204 	add.w	r2, r3, #4
 800d0c8:	600a      	str	r2, [r1, #0]
 800d0ca:	d1d9      	bne.n	800d080 <_scanf_float+0x398>
 800d0cc:	f8d3 8000 	ldr.w	r8, [r3]
 800d0d0:	ee10 2a10 	vmov	r2, s0
 800d0d4:	ee10 0a10 	vmov	r0, s0
 800d0d8:	463b      	mov	r3, r7
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f7f3 fd4e 	bl	8000b7c <__aeabi_dcmpun>
 800d0e0:	b128      	cbz	r0, 800d0ee <_scanf_float+0x406>
 800d0e2:	4808      	ldr	r0, [pc, #32]	; (800d104 <_scanf_float+0x41c>)
 800d0e4:	f000 f828 	bl	800d138 <nanf>
 800d0e8:	ed88 0a00 	vstr	s0, [r8]
 800d0ec:	e7cb      	b.n	800d086 <_scanf_float+0x39e>
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	f7f3 fda1 	bl	8000c38 <__aeabi_d2f>
 800d0f6:	f8c8 0000 	str.w	r0, [r8]
 800d0fa:	e7c4      	b.n	800d086 <_scanf_float+0x39e>
 800d0fc:	2500      	movs	r5, #0
 800d0fe:	e634      	b.n	800cd6a <_scanf_float+0x82>
 800d100:	08012bd0 	.word	0x08012bd0
 800d104:	08013040 	.word	0x08013040

0800d108 <iprintf>:
 800d108:	b40f      	push	{r0, r1, r2, r3}
 800d10a:	4b0a      	ldr	r3, [pc, #40]	; (800d134 <iprintf+0x2c>)
 800d10c:	b513      	push	{r0, r1, r4, lr}
 800d10e:	681c      	ldr	r4, [r3, #0]
 800d110:	b124      	cbz	r4, 800d11c <iprintf+0x14>
 800d112:	69a3      	ldr	r3, [r4, #24]
 800d114:	b913      	cbnz	r3, 800d11c <iprintf+0x14>
 800d116:	4620      	mov	r0, r4
 800d118:	f001 fdb4 	bl	800ec84 <__sinit>
 800d11c:	ab05      	add	r3, sp, #20
 800d11e:	9a04      	ldr	r2, [sp, #16]
 800d120:	68a1      	ldr	r1, [r4, #8]
 800d122:	9301      	str	r3, [sp, #4]
 800d124:	4620      	mov	r0, r4
 800d126:	f003 f919 	bl	801035c <_vfiprintf_r>
 800d12a:	b002      	add	sp, #8
 800d12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d130:	b004      	add	sp, #16
 800d132:	4770      	bx	lr
 800d134:	20000030 	.word	0x20000030

0800d138 <nanf>:
 800d138:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d140 <nanf+0x8>
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	7fc00000 	.word	0x7fc00000

0800d144 <siprintf>:
 800d144:	b40e      	push	{r1, r2, r3}
 800d146:	b500      	push	{lr}
 800d148:	b09c      	sub	sp, #112	; 0x70
 800d14a:	ab1d      	add	r3, sp, #116	; 0x74
 800d14c:	9002      	str	r0, [sp, #8]
 800d14e:	9006      	str	r0, [sp, #24]
 800d150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d154:	4809      	ldr	r0, [pc, #36]	; (800d17c <siprintf+0x38>)
 800d156:	9107      	str	r1, [sp, #28]
 800d158:	9104      	str	r1, [sp, #16]
 800d15a:	4909      	ldr	r1, [pc, #36]	; (800d180 <siprintf+0x3c>)
 800d15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d160:	9105      	str	r1, [sp, #20]
 800d162:	6800      	ldr	r0, [r0, #0]
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	a902      	add	r1, sp, #8
 800d168:	f002 ffce 	bl	8010108 <_svfiprintf_r>
 800d16c:	9b02      	ldr	r3, [sp, #8]
 800d16e:	2200      	movs	r2, #0
 800d170:	701a      	strb	r2, [r3, #0]
 800d172:	b01c      	add	sp, #112	; 0x70
 800d174:	f85d eb04 	ldr.w	lr, [sp], #4
 800d178:	b003      	add	sp, #12
 800d17a:	4770      	bx	lr
 800d17c:	20000030 	.word	0x20000030
 800d180:	ffff0208 	.word	0xffff0208

0800d184 <sulp>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	4604      	mov	r4, r0
 800d188:	460d      	mov	r5, r1
 800d18a:	ec45 4b10 	vmov	d0, r4, r5
 800d18e:	4616      	mov	r6, r2
 800d190:	f002 fd18 	bl	800fbc4 <__ulp>
 800d194:	ec51 0b10 	vmov	r0, r1, d0
 800d198:	b17e      	cbz	r6, 800d1ba <sulp+0x36>
 800d19a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d19e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dd09      	ble.n	800d1ba <sulp+0x36>
 800d1a6:	051b      	lsls	r3, r3, #20
 800d1a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d1ac:	2400      	movs	r4, #0
 800d1ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d1b2:	4622      	mov	r2, r4
 800d1b4:	462b      	mov	r3, r5
 800d1b6:	f7f3 fa47 	bl	8000648 <__aeabi_dmul>
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	0000      	movs	r0, r0
	...

0800d1c0 <_strtod_l>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	ed2d 8b02 	vpush	{d8}
 800d1c8:	b09d      	sub	sp, #116	; 0x74
 800d1ca:	461f      	mov	r7, r3
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9318      	str	r3, [sp, #96]	; 0x60
 800d1d0:	4ba2      	ldr	r3, [pc, #648]	; (800d45c <_strtod_l+0x29c>)
 800d1d2:	9213      	str	r2, [sp, #76]	; 0x4c
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	9305      	str	r3, [sp, #20]
 800d1d8:	4604      	mov	r4, r0
 800d1da:	4618      	mov	r0, r3
 800d1dc:	4688      	mov	r8, r1
 800d1de:	f7f3 f81f 	bl	8000220 <strlen>
 800d1e2:	f04f 0a00 	mov.w	sl, #0
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	f04f 0b00 	mov.w	fp, #0
 800d1ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d1f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1f2:	781a      	ldrb	r2, [r3, #0]
 800d1f4:	2a2b      	cmp	r2, #43	; 0x2b
 800d1f6:	d04e      	beq.n	800d296 <_strtod_l+0xd6>
 800d1f8:	d83b      	bhi.n	800d272 <_strtod_l+0xb2>
 800d1fa:	2a0d      	cmp	r2, #13
 800d1fc:	d834      	bhi.n	800d268 <_strtod_l+0xa8>
 800d1fe:	2a08      	cmp	r2, #8
 800d200:	d834      	bhi.n	800d26c <_strtod_l+0xac>
 800d202:	2a00      	cmp	r2, #0
 800d204:	d03e      	beq.n	800d284 <_strtod_l+0xc4>
 800d206:	2300      	movs	r3, #0
 800d208:	930a      	str	r3, [sp, #40]	; 0x28
 800d20a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d20c:	7833      	ldrb	r3, [r6, #0]
 800d20e:	2b30      	cmp	r3, #48	; 0x30
 800d210:	f040 80b0 	bne.w	800d374 <_strtod_l+0x1b4>
 800d214:	7873      	ldrb	r3, [r6, #1]
 800d216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d21a:	2b58      	cmp	r3, #88	; 0x58
 800d21c:	d168      	bne.n	800d2f0 <_strtod_l+0x130>
 800d21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	ab18      	add	r3, sp, #96	; 0x60
 800d224:	9702      	str	r7, [sp, #8]
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	4a8d      	ldr	r2, [pc, #564]	; (800d460 <_strtod_l+0x2a0>)
 800d22a:	ab19      	add	r3, sp, #100	; 0x64
 800d22c:	a917      	add	r1, sp, #92	; 0x5c
 800d22e:	4620      	mov	r0, r4
 800d230:	f001 fe2c 	bl	800ee8c <__gethex>
 800d234:	f010 0707 	ands.w	r7, r0, #7
 800d238:	4605      	mov	r5, r0
 800d23a:	d005      	beq.n	800d248 <_strtod_l+0x88>
 800d23c:	2f06      	cmp	r7, #6
 800d23e:	d12c      	bne.n	800d29a <_strtod_l+0xda>
 800d240:	3601      	adds	r6, #1
 800d242:	2300      	movs	r3, #0
 800d244:	9617      	str	r6, [sp, #92]	; 0x5c
 800d246:	930a      	str	r3, [sp, #40]	; 0x28
 800d248:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f040 8590 	bne.w	800dd70 <_strtod_l+0xbb0>
 800d250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d252:	b1eb      	cbz	r3, 800d290 <_strtod_l+0xd0>
 800d254:	4652      	mov	r2, sl
 800d256:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d25a:	ec43 2b10 	vmov	d0, r2, r3
 800d25e:	b01d      	add	sp, #116	; 0x74
 800d260:	ecbd 8b02 	vpop	{d8}
 800d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	2a20      	cmp	r2, #32
 800d26a:	d1cc      	bne.n	800d206 <_strtod_l+0x46>
 800d26c:	3301      	adds	r3, #1
 800d26e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d270:	e7be      	b.n	800d1f0 <_strtod_l+0x30>
 800d272:	2a2d      	cmp	r2, #45	; 0x2d
 800d274:	d1c7      	bne.n	800d206 <_strtod_l+0x46>
 800d276:	2201      	movs	r2, #1
 800d278:	920a      	str	r2, [sp, #40]	; 0x28
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d27e:	785b      	ldrb	r3, [r3, #1]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1c2      	bne.n	800d20a <_strtod_l+0x4a>
 800d284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d286:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f040 856e 	bne.w	800dd6c <_strtod_l+0xbac>
 800d290:	4652      	mov	r2, sl
 800d292:	465b      	mov	r3, fp
 800d294:	e7e1      	b.n	800d25a <_strtod_l+0x9a>
 800d296:	2200      	movs	r2, #0
 800d298:	e7ee      	b.n	800d278 <_strtod_l+0xb8>
 800d29a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d29c:	b13a      	cbz	r2, 800d2ae <_strtod_l+0xee>
 800d29e:	2135      	movs	r1, #53	; 0x35
 800d2a0:	a81a      	add	r0, sp, #104	; 0x68
 800d2a2:	f002 fd9a 	bl	800fdda <__copybits>
 800d2a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f002 f959 	bl	800f560 <_Bfree>
 800d2ae:	3f01      	subs	r7, #1
 800d2b0:	2f04      	cmp	r7, #4
 800d2b2:	d806      	bhi.n	800d2c2 <_strtod_l+0x102>
 800d2b4:	e8df f007 	tbb	[pc, r7]
 800d2b8:	1714030a 	.word	0x1714030a
 800d2bc:	0a          	.byte	0x0a
 800d2bd:	00          	.byte	0x00
 800d2be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d2c2:	0728      	lsls	r0, r5, #28
 800d2c4:	d5c0      	bpl.n	800d248 <_strtod_l+0x88>
 800d2c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d2ca:	e7bd      	b.n	800d248 <_strtod_l+0x88>
 800d2cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d2d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d2d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d2d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d2da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d2de:	e7f0      	b.n	800d2c2 <_strtod_l+0x102>
 800d2e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d464 <_strtod_l+0x2a4>
 800d2e4:	e7ed      	b.n	800d2c2 <_strtod_l+0x102>
 800d2e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d2ea:	f04f 3aff 	mov.w	sl, #4294967295
 800d2ee:	e7e8      	b.n	800d2c2 <_strtod_l+0x102>
 800d2f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d2f6:	785b      	ldrb	r3, [r3, #1]
 800d2f8:	2b30      	cmp	r3, #48	; 0x30
 800d2fa:	d0f9      	beq.n	800d2f0 <_strtod_l+0x130>
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d0a3      	beq.n	800d248 <_strtod_l+0x88>
 800d300:	2301      	movs	r3, #1
 800d302:	f04f 0900 	mov.w	r9, #0
 800d306:	9304      	str	r3, [sp, #16]
 800d308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d30a:	9308      	str	r3, [sp, #32]
 800d30c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d310:	464f      	mov	r7, r9
 800d312:	220a      	movs	r2, #10
 800d314:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d316:	7806      	ldrb	r6, [r0, #0]
 800d318:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d31c:	b2d9      	uxtb	r1, r3
 800d31e:	2909      	cmp	r1, #9
 800d320:	d92a      	bls.n	800d378 <_strtod_l+0x1b8>
 800d322:	9905      	ldr	r1, [sp, #20]
 800d324:	462a      	mov	r2, r5
 800d326:	f003 f9a6 	bl	8010676 <strncmp>
 800d32a:	b398      	cbz	r0, 800d394 <_strtod_l+0x1d4>
 800d32c:	2000      	movs	r0, #0
 800d32e:	4632      	mov	r2, r6
 800d330:	463d      	mov	r5, r7
 800d332:	9005      	str	r0, [sp, #20]
 800d334:	4603      	mov	r3, r0
 800d336:	2a65      	cmp	r2, #101	; 0x65
 800d338:	d001      	beq.n	800d33e <_strtod_l+0x17e>
 800d33a:	2a45      	cmp	r2, #69	; 0x45
 800d33c:	d118      	bne.n	800d370 <_strtod_l+0x1b0>
 800d33e:	b91d      	cbnz	r5, 800d348 <_strtod_l+0x188>
 800d340:	9a04      	ldr	r2, [sp, #16]
 800d342:	4302      	orrs	r2, r0
 800d344:	d09e      	beq.n	800d284 <_strtod_l+0xc4>
 800d346:	2500      	movs	r5, #0
 800d348:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d34c:	f108 0201 	add.w	r2, r8, #1
 800d350:	9217      	str	r2, [sp, #92]	; 0x5c
 800d352:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d356:	2a2b      	cmp	r2, #43	; 0x2b
 800d358:	d075      	beq.n	800d446 <_strtod_l+0x286>
 800d35a:	2a2d      	cmp	r2, #45	; 0x2d
 800d35c:	d07b      	beq.n	800d456 <_strtod_l+0x296>
 800d35e:	f04f 0c00 	mov.w	ip, #0
 800d362:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d366:	2909      	cmp	r1, #9
 800d368:	f240 8082 	bls.w	800d470 <_strtod_l+0x2b0>
 800d36c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d370:	2600      	movs	r6, #0
 800d372:	e09d      	b.n	800d4b0 <_strtod_l+0x2f0>
 800d374:	2300      	movs	r3, #0
 800d376:	e7c4      	b.n	800d302 <_strtod_l+0x142>
 800d378:	2f08      	cmp	r7, #8
 800d37a:	bfd8      	it	le
 800d37c:	9907      	ldrle	r1, [sp, #28]
 800d37e:	f100 0001 	add.w	r0, r0, #1
 800d382:	bfda      	itte	le
 800d384:	fb02 3301 	mlale	r3, r2, r1, r3
 800d388:	9307      	strle	r3, [sp, #28]
 800d38a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d38e:	3701      	adds	r7, #1
 800d390:	9017      	str	r0, [sp, #92]	; 0x5c
 800d392:	e7bf      	b.n	800d314 <_strtod_l+0x154>
 800d394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d396:	195a      	adds	r2, r3, r5
 800d398:	9217      	str	r2, [sp, #92]	; 0x5c
 800d39a:	5d5a      	ldrb	r2, [r3, r5]
 800d39c:	2f00      	cmp	r7, #0
 800d39e:	d037      	beq.n	800d410 <_strtod_l+0x250>
 800d3a0:	9005      	str	r0, [sp, #20]
 800d3a2:	463d      	mov	r5, r7
 800d3a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d3a8:	2b09      	cmp	r3, #9
 800d3aa:	d912      	bls.n	800d3d2 <_strtod_l+0x212>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e7c2      	b.n	800d336 <_strtod_l+0x176>
 800d3b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d3b6:	785a      	ldrb	r2, [r3, #1]
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	2a30      	cmp	r2, #48	; 0x30
 800d3bc:	d0f8      	beq.n	800d3b0 <_strtod_l+0x1f0>
 800d3be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d3c2:	2b08      	cmp	r3, #8
 800d3c4:	f200 84d9 	bhi.w	800dd7a <_strtod_l+0xbba>
 800d3c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3ca:	9005      	str	r0, [sp, #20]
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	9308      	str	r3, [sp, #32]
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	3a30      	subs	r2, #48	; 0x30
 800d3d4:	f100 0301 	add.w	r3, r0, #1
 800d3d8:	d014      	beq.n	800d404 <_strtod_l+0x244>
 800d3da:	9905      	ldr	r1, [sp, #20]
 800d3dc:	4419      	add	r1, r3
 800d3de:	9105      	str	r1, [sp, #20]
 800d3e0:	462b      	mov	r3, r5
 800d3e2:	eb00 0e05 	add.w	lr, r0, r5
 800d3e6:	210a      	movs	r1, #10
 800d3e8:	4573      	cmp	r3, lr
 800d3ea:	d113      	bne.n	800d414 <_strtod_l+0x254>
 800d3ec:	182b      	adds	r3, r5, r0
 800d3ee:	2b08      	cmp	r3, #8
 800d3f0:	f105 0501 	add.w	r5, r5, #1
 800d3f4:	4405      	add	r5, r0
 800d3f6:	dc1c      	bgt.n	800d432 <_strtod_l+0x272>
 800d3f8:	9907      	ldr	r1, [sp, #28]
 800d3fa:	230a      	movs	r3, #10
 800d3fc:	fb03 2301 	mla	r3, r3, r1, r2
 800d400:	9307      	str	r3, [sp, #28]
 800d402:	2300      	movs	r3, #0
 800d404:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d406:	1c51      	adds	r1, r2, #1
 800d408:	9117      	str	r1, [sp, #92]	; 0x5c
 800d40a:	7852      	ldrb	r2, [r2, #1]
 800d40c:	4618      	mov	r0, r3
 800d40e:	e7c9      	b.n	800d3a4 <_strtod_l+0x1e4>
 800d410:	4638      	mov	r0, r7
 800d412:	e7d2      	b.n	800d3ba <_strtod_l+0x1fa>
 800d414:	2b08      	cmp	r3, #8
 800d416:	dc04      	bgt.n	800d422 <_strtod_l+0x262>
 800d418:	9e07      	ldr	r6, [sp, #28]
 800d41a:	434e      	muls	r6, r1
 800d41c:	9607      	str	r6, [sp, #28]
 800d41e:	3301      	adds	r3, #1
 800d420:	e7e2      	b.n	800d3e8 <_strtod_l+0x228>
 800d422:	f103 0c01 	add.w	ip, r3, #1
 800d426:	f1bc 0f10 	cmp.w	ip, #16
 800d42a:	bfd8      	it	le
 800d42c:	fb01 f909 	mulle.w	r9, r1, r9
 800d430:	e7f5      	b.n	800d41e <_strtod_l+0x25e>
 800d432:	2d10      	cmp	r5, #16
 800d434:	bfdc      	itt	le
 800d436:	230a      	movle	r3, #10
 800d438:	fb03 2909 	mlale	r9, r3, r9, r2
 800d43c:	e7e1      	b.n	800d402 <_strtod_l+0x242>
 800d43e:	2300      	movs	r3, #0
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	2301      	movs	r3, #1
 800d444:	e77c      	b.n	800d340 <_strtod_l+0x180>
 800d446:	f04f 0c00 	mov.w	ip, #0
 800d44a:	f108 0202 	add.w	r2, r8, #2
 800d44e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d450:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d454:	e785      	b.n	800d362 <_strtod_l+0x1a2>
 800d456:	f04f 0c01 	mov.w	ip, #1
 800d45a:	e7f6      	b.n	800d44a <_strtod_l+0x28a>
 800d45c:	08012e84 	.word	0x08012e84
 800d460:	08012bd8 	.word	0x08012bd8
 800d464:	7ff00000 	.word	0x7ff00000
 800d468:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d46a:	1c51      	adds	r1, r2, #1
 800d46c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d46e:	7852      	ldrb	r2, [r2, #1]
 800d470:	2a30      	cmp	r2, #48	; 0x30
 800d472:	d0f9      	beq.n	800d468 <_strtod_l+0x2a8>
 800d474:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d478:	2908      	cmp	r1, #8
 800d47a:	f63f af79 	bhi.w	800d370 <_strtod_l+0x1b0>
 800d47e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d482:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d484:	9206      	str	r2, [sp, #24]
 800d486:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d488:	1c51      	adds	r1, r2, #1
 800d48a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d48c:	7852      	ldrb	r2, [r2, #1]
 800d48e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d492:	2e09      	cmp	r6, #9
 800d494:	d937      	bls.n	800d506 <_strtod_l+0x346>
 800d496:	9e06      	ldr	r6, [sp, #24]
 800d498:	1b89      	subs	r1, r1, r6
 800d49a:	2908      	cmp	r1, #8
 800d49c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d4a0:	dc02      	bgt.n	800d4a8 <_strtod_l+0x2e8>
 800d4a2:	4576      	cmp	r6, lr
 800d4a4:	bfa8      	it	ge
 800d4a6:	4676      	movge	r6, lr
 800d4a8:	f1bc 0f00 	cmp.w	ip, #0
 800d4ac:	d000      	beq.n	800d4b0 <_strtod_l+0x2f0>
 800d4ae:	4276      	negs	r6, r6
 800d4b0:	2d00      	cmp	r5, #0
 800d4b2:	d14d      	bne.n	800d550 <_strtod_l+0x390>
 800d4b4:	9904      	ldr	r1, [sp, #16]
 800d4b6:	4301      	orrs	r1, r0
 800d4b8:	f47f aec6 	bne.w	800d248 <_strtod_l+0x88>
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f47f aee1 	bne.w	800d284 <_strtod_l+0xc4>
 800d4c2:	2a69      	cmp	r2, #105	; 0x69
 800d4c4:	d027      	beq.n	800d516 <_strtod_l+0x356>
 800d4c6:	dc24      	bgt.n	800d512 <_strtod_l+0x352>
 800d4c8:	2a49      	cmp	r2, #73	; 0x49
 800d4ca:	d024      	beq.n	800d516 <_strtod_l+0x356>
 800d4cc:	2a4e      	cmp	r2, #78	; 0x4e
 800d4ce:	f47f aed9 	bne.w	800d284 <_strtod_l+0xc4>
 800d4d2:	499f      	ldr	r1, [pc, #636]	; (800d750 <_strtod_l+0x590>)
 800d4d4:	a817      	add	r0, sp, #92	; 0x5c
 800d4d6:	f001 ff31 	bl	800f33c <__match>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f43f aed2 	beq.w	800d284 <_strtod_l+0xc4>
 800d4e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b28      	cmp	r3, #40	; 0x28
 800d4e6:	d12d      	bne.n	800d544 <_strtod_l+0x384>
 800d4e8:	499a      	ldr	r1, [pc, #616]	; (800d754 <_strtod_l+0x594>)
 800d4ea:	aa1a      	add	r2, sp, #104	; 0x68
 800d4ec:	a817      	add	r0, sp, #92	; 0x5c
 800d4ee:	f001 ff39 	bl	800f364 <__hexnan>
 800d4f2:	2805      	cmp	r0, #5
 800d4f4:	d126      	bne.n	800d544 <_strtod_l+0x384>
 800d4f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d4fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d500:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d504:	e6a0      	b.n	800d248 <_strtod_l+0x88>
 800d506:	210a      	movs	r1, #10
 800d508:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d50c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d510:	e7b9      	b.n	800d486 <_strtod_l+0x2c6>
 800d512:	2a6e      	cmp	r2, #110	; 0x6e
 800d514:	e7db      	b.n	800d4ce <_strtod_l+0x30e>
 800d516:	4990      	ldr	r1, [pc, #576]	; (800d758 <_strtod_l+0x598>)
 800d518:	a817      	add	r0, sp, #92	; 0x5c
 800d51a:	f001 ff0f 	bl	800f33c <__match>
 800d51e:	2800      	cmp	r0, #0
 800d520:	f43f aeb0 	beq.w	800d284 <_strtod_l+0xc4>
 800d524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d526:	498d      	ldr	r1, [pc, #564]	; (800d75c <_strtod_l+0x59c>)
 800d528:	3b01      	subs	r3, #1
 800d52a:	a817      	add	r0, sp, #92	; 0x5c
 800d52c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d52e:	f001 ff05 	bl	800f33c <__match>
 800d532:	b910      	cbnz	r0, 800d53a <_strtod_l+0x37a>
 800d534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d536:	3301      	adds	r3, #1
 800d538:	9317      	str	r3, [sp, #92]	; 0x5c
 800d53a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d76c <_strtod_l+0x5ac>
 800d53e:	f04f 0a00 	mov.w	sl, #0
 800d542:	e681      	b.n	800d248 <_strtod_l+0x88>
 800d544:	4886      	ldr	r0, [pc, #536]	; (800d760 <_strtod_l+0x5a0>)
 800d546:	f003 f83b 	bl	80105c0 <nan>
 800d54a:	ec5b ab10 	vmov	sl, fp, d0
 800d54e:	e67b      	b.n	800d248 <_strtod_l+0x88>
 800d550:	9b05      	ldr	r3, [sp, #20]
 800d552:	9807      	ldr	r0, [sp, #28]
 800d554:	1af3      	subs	r3, r6, r3
 800d556:	2f00      	cmp	r7, #0
 800d558:	bf08      	it	eq
 800d55a:	462f      	moveq	r7, r5
 800d55c:	2d10      	cmp	r5, #16
 800d55e:	9306      	str	r3, [sp, #24]
 800d560:	46a8      	mov	r8, r5
 800d562:	bfa8      	it	ge
 800d564:	f04f 0810 	movge.w	r8, #16
 800d568:	f7f2 fff4 	bl	8000554 <__aeabi_ui2d>
 800d56c:	2d09      	cmp	r5, #9
 800d56e:	4682      	mov	sl, r0
 800d570:	468b      	mov	fp, r1
 800d572:	dd13      	ble.n	800d59c <_strtod_l+0x3dc>
 800d574:	4b7b      	ldr	r3, [pc, #492]	; (800d764 <_strtod_l+0x5a4>)
 800d576:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d57a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d57e:	f7f3 f863 	bl	8000648 <__aeabi_dmul>
 800d582:	4682      	mov	sl, r0
 800d584:	4648      	mov	r0, r9
 800d586:	468b      	mov	fp, r1
 800d588:	f7f2 ffe4 	bl	8000554 <__aeabi_ui2d>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	4650      	mov	r0, sl
 800d592:	4659      	mov	r1, fp
 800d594:	f7f2 fea2 	bl	80002dc <__adddf3>
 800d598:	4682      	mov	sl, r0
 800d59a:	468b      	mov	fp, r1
 800d59c:	2d0f      	cmp	r5, #15
 800d59e:	dc38      	bgt.n	800d612 <_strtod_l+0x452>
 800d5a0:	9b06      	ldr	r3, [sp, #24]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f43f ae50 	beq.w	800d248 <_strtod_l+0x88>
 800d5a8:	dd24      	ble.n	800d5f4 <_strtod_l+0x434>
 800d5aa:	2b16      	cmp	r3, #22
 800d5ac:	dc0b      	bgt.n	800d5c6 <_strtod_l+0x406>
 800d5ae:	496d      	ldr	r1, [pc, #436]	; (800d764 <_strtod_l+0x5a4>)
 800d5b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5b8:	4652      	mov	r2, sl
 800d5ba:	465b      	mov	r3, fp
 800d5bc:	f7f3 f844 	bl	8000648 <__aeabi_dmul>
 800d5c0:	4682      	mov	sl, r0
 800d5c2:	468b      	mov	fp, r1
 800d5c4:	e640      	b.n	800d248 <_strtod_l+0x88>
 800d5c6:	9a06      	ldr	r2, [sp, #24]
 800d5c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	db20      	blt.n	800d612 <_strtod_l+0x452>
 800d5d0:	4c64      	ldr	r4, [pc, #400]	; (800d764 <_strtod_l+0x5a4>)
 800d5d2:	f1c5 050f 	rsb	r5, r5, #15
 800d5d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d5da:	4652      	mov	r2, sl
 800d5dc:	465b      	mov	r3, fp
 800d5de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5e2:	f7f3 f831 	bl	8000648 <__aeabi_dmul>
 800d5e6:	9b06      	ldr	r3, [sp, #24]
 800d5e8:	1b5d      	subs	r5, r3, r5
 800d5ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d5ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d5f2:	e7e3      	b.n	800d5bc <_strtod_l+0x3fc>
 800d5f4:	9b06      	ldr	r3, [sp, #24]
 800d5f6:	3316      	adds	r3, #22
 800d5f8:	db0b      	blt.n	800d612 <_strtod_l+0x452>
 800d5fa:	9b05      	ldr	r3, [sp, #20]
 800d5fc:	1b9e      	subs	r6, r3, r6
 800d5fe:	4b59      	ldr	r3, [pc, #356]	; (800d764 <_strtod_l+0x5a4>)
 800d600:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d604:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d608:	4650      	mov	r0, sl
 800d60a:	4659      	mov	r1, fp
 800d60c:	f7f3 f946 	bl	800089c <__aeabi_ddiv>
 800d610:	e7d6      	b.n	800d5c0 <_strtod_l+0x400>
 800d612:	9b06      	ldr	r3, [sp, #24]
 800d614:	eba5 0808 	sub.w	r8, r5, r8
 800d618:	4498      	add	r8, r3
 800d61a:	f1b8 0f00 	cmp.w	r8, #0
 800d61e:	dd74      	ble.n	800d70a <_strtod_l+0x54a>
 800d620:	f018 030f 	ands.w	r3, r8, #15
 800d624:	d00a      	beq.n	800d63c <_strtod_l+0x47c>
 800d626:	494f      	ldr	r1, [pc, #316]	; (800d764 <_strtod_l+0x5a4>)
 800d628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d62c:	4652      	mov	r2, sl
 800d62e:	465b      	mov	r3, fp
 800d630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d634:	f7f3 f808 	bl	8000648 <__aeabi_dmul>
 800d638:	4682      	mov	sl, r0
 800d63a:	468b      	mov	fp, r1
 800d63c:	f038 080f 	bics.w	r8, r8, #15
 800d640:	d04f      	beq.n	800d6e2 <_strtod_l+0x522>
 800d642:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d646:	dd22      	ble.n	800d68e <_strtod_l+0x4ce>
 800d648:	2500      	movs	r5, #0
 800d64a:	462e      	mov	r6, r5
 800d64c:	9507      	str	r5, [sp, #28]
 800d64e:	9505      	str	r5, [sp, #20]
 800d650:	2322      	movs	r3, #34	; 0x22
 800d652:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d76c <_strtod_l+0x5ac>
 800d656:	6023      	str	r3, [r4, #0]
 800d658:	f04f 0a00 	mov.w	sl, #0
 800d65c:	9b07      	ldr	r3, [sp, #28]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f43f adf2 	beq.w	800d248 <_strtod_l+0x88>
 800d664:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d666:	4620      	mov	r0, r4
 800d668:	f001 ff7a 	bl	800f560 <_Bfree>
 800d66c:	9905      	ldr	r1, [sp, #20]
 800d66e:	4620      	mov	r0, r4
 800d670:	f001 ff76 	bl	800f560 <_Bfree>
 800d674:	4631      	mov	r1, r6
 800d676:	4620      	mov	r0, r4
 800d678:	f001 ff72 	bl	800f560 <_Bfree>
 800d67c:	9907      	ldr	r1, [sp, #28]
 800d67e:	4620      	mov	r0, r4
 800d680:	f001 ff6e 	bl	800f560 <_Bfree>
 800d684:	4629      	mov	r1, r5
 800d686:	4620      	mov	r0, r4
 800d688:	f001 ff6a 	bl	800f560 <_Bfree>
 800d68c:	e5dc      	b.n	800d248 <_strtod_l+0x88>
 800d68e:	4b36      	ldr	r3, [pc, #216]	; (800d768 <_strtod_l+0x5a8>)
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	2300      	movs	r3, #0
 800d694:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d698:	4650      	mov	r0, sl
 800d69a:	4659      	mov	r1, fp
 800d69c:	4699      	mov	r9, r3
 800d69e:	f1b8 0f01 	cmp.w	r8, #1
 800d6a2:	dc21      	bgt.n	800d6e8 <_strtod_l+0x528>
 800d6a4:	b10b      	cbz	r3, 800d6aa <_strtod_l+0x4ea>
 800d6a6:	4682      	mov	sl, r0
 800d6a8:	468b      	mov	fp, r1
 800d6aa:	4b2f      	ldr	r3, [pc, #188]	; (800d768 <_strtod_l+0x5a8>)
 800d6ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d6b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d6b4:	4652      	mov	r2, sl
 800d6b6:	465b      	mov	r3, fp
 800d6b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d6bc:	f7f2 ffc4 	bl	8000648 <__aeabi_dmul>
 800d6c0:	4b2a      	ldr	r3, [pc, #168]	; (800d76c <_strtod_l+0x5ac>)
 800d6c2:	460a      	mov	r2, r1
 800d6c4:	400b      	ands	r3, r1
 800d6c6:	492a      	ldr	r1, [pc, #168]	; (800d770 <_strtod_l+0x5b0>)
 800d6c8:	428b      	cmp	r3, r1
 800d6ca:	4682      	mov	sl, r0
 800d6cc:	d8bc      	bhi.n	800d648 <_strtod_l+0x488>
 800d6ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d6d2:	428b      	cmp	r3, r1
 800d6d4:	bf86      	itte	hi
 800d6d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d774 <_strtod_l+0x5b4>
 800d6da:	f04f 3aff 	movhi.w	sl, #4294967295
 800d6de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	9304      	str	r3, [sp, #16]
 800d6e6:	e084      	b.n	800d7f2 <_strtod_l+0x632>
 800d6e8:	f018 0f01 	tst.w	r8, #1
 800d6ec:	d005      	beq.n	800d6fa <_strtod_l+0x53a>
 800d6ee:	9b04      	ldr	r3, [sp, #16]
 800d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f4:	f7f2 ffa8 	bl	8000648 <__aeabi_dmul>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	9a04      	ldr	r2, [sp, #16]
 800d6fc:	3208      	adds	r2, #8
 800d6fe:	f109 0901 	add.w	r9, r9, #1
 800d702:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d706:	9204      	str	r2, [sp, #16]
 800d708:	e7c9      	b.n	800d69e <_strtod_l+0x4de>
 800d70a:	d0ea      	beq.n	800d6e2 <_strtod_l+0x522>
 800d70c:	f1c8 0800 	rsb	r8, r8, #0
 800d710:	f018 020f 	ands.w	r2, r8, #15
 800d714:	d00a      	beq.n	800d72c <_strtod_l+0x56c>
 800d716:	4b13      	ldr	r3, [pc, #76]	; (800d764 <_strtod_l+0x5a4>)
 800d718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d71c:	4650      	mov	r0, sl
 800d71e:	4659      	mov	r1, fp
 800d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d724:	f7f3 f8ba 	bl	800089c <__aeabi_ddiv>
 800d728:	4682      	mov	sl, r0
 800d72a:	468b      	mov	fp, r1
 800d72c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d730:	d0d7      	beq.n	800d6e2 <_strtod_l+0x522>
 800d732:	f1b8 0f1f 	cmp.w	r8, #31
 800d736:	dd1f      	ble.n	800d778 <_strtod_l+0x5b8>
 800d738:	2500      	movs	r5, #0
 800d73a:	462e      	mov	r6, r5
 800d73c:	9507      	str	r5, [sp, #28]
 800d73e:	9505      	str	r5, [sp, #20]
 800d740:	2322      	movs	r3, #34	; 0x22
 800d742:	f04f 0a00 	mov.w	sl, #0
 800d746:	f04f 0b00 	mov.w	fp, #0
 800d74a:	6023      	str	r3, [r4, #0]
 800d74c:	e786      	b.n	800d65c <_strtod_l+0x49c>
 800d74e:	bf00      	nop
 800d750:	08012ba9 	.word	0x08012ba9
 800d754:	08012bec 	.word	0x08012bec
 800d758:	08012ba1 	.word	0x08012ba1
 800d75c:	08012d2c 	.word	0x08012d2c
 800d760:	08013040 	.word	0x08013040
 800d764:	08012f20 	.word	0x08012f20
 800d768:	08012ef8 	.word	0x08012ef8
 800d76c:	7ff00000 	.word	0x7ff00000
 800d770:	7ca00000 	.word	0x7ca00000
 800d774:	7fefffff 	.word	0x7fefffff
 800d778:	f018 0310 	ands.w	r3, r8, #16
 800d77c:	bf18      	it	ne
 800d77e:	236a      	movne	r3, #106	; 0x6a
 800d780:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800db30 <_strtod_l+0x970>
 800d784:	9304      	str	r3, [sp, #16]
 800d786:	4650      	mov	r0, sl
 800d788:	4659      	mov	r1, fp
 800d78a:	2300      	movs	r3, #0
 800d78c:	f018 0f01 	tst.w	r8, #1
 800d790:	d004      	beq.n	800d79c <_strtod_l+0x5dc>
 800d792:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d796:	f7f2 ff57 	bl	8000648 <__aeabi_dmul>
 800d79a:	2301      	movs	r3, #1
 800d79c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d7a0:	f109 0908 	add.w	r9, r9, #8
 800d7a4:	d1f2      	bne.n	800d78c <_strtod_l+0x5cc>
 800d7a6:	b10b      	cbz	r3, 800d7ac <_strtod_l+0x5ec>
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	468b      	mov	fp, r1
 800d7ac:	9b04      	ldr	r3, [sp, #16]
 800d7ae:	b1c3      	cbz	r3, 800d7e2 <_strtod_l+0x622>
 800d7b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d7b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	4659      	mov	r1, fp
 800d7bc:	dd11      	ble.n	800d7e2 <_strtod_l+0x622>
 800d7be:	2b1f      	cmp	r3, #31
 800d7c0:	f340 8124 	ble.w	800da0c <_strtod_l+0x84c>
 800d7c4:	2b34      	cmp	r3, #52	; 0x34
 800d7c6:	bfde      	ittt	le
 800d7c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d7cc:	f04f 33ff 	movle.w	r3, #4294967295
 800d7d0:	fa03 f202 	lslle.w	r2, r3, r2
 800d7d4:	f04f 0a00 	mov.w	sl, #0
 800d7d8:	bfcc      	ite	gt
 800d7da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d7de:	ea02 0b01 	andle.w	fp, r2, r1
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	4650      	mov	r0, sl
 800d7e8:	4659      	mov	r1, fp
 800d7ea:	f7f3 f995 	bl	8000b18 <__aeabi_dcmpeq>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d1a2      	bne.n	800d738 <_strtod_l+0x578>
 800d7f2:	9b07      	ldr	r3, [sp, #28]
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	9908      	ldr	r1, [sp, #32]
 800d7f8:	462b      	mov	r3, r5
 800d7fa:	463a      	mov	r2, r7
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f001 ff17 	bl	800f630 <__s2b>
 800d802:	9007      	str	r0, [sp, #28]
 800d804:	2800      	cmp	r0, #0
 800d806:	f43f af1f 	beq.w	800d648 <_strtod_l+0x488>
 800d80a:	9b05      	ldr	r3, [sp, #20]
 800d80c:	1b9e      	subs	r6, r3, r6
 800d80e:	9b06      	ldr	r3, [sp, #24]
 800d810:	2b00      	cmp	r3, #0
 800d812:	bfb4      	ite	lt
 800d814:	4633      	movlt	r3, r6
 800d816:	2300      	movge	r3, #0
 800d818:	930c      	str	r3, [sp, #48]	; 0x30
 800d81a:	9b06      	ldr	r3, [sp, #24]
 800d81c:	2500      	movs	r5, #0
 800d81e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d822:	9312      	str	r3, [sp, #72]	; 0x48
 800d824:	462e      	mov	r6, r5
 800d826:	9b07      	ldr	r3, [sp, #28]
 800d828:	4620      	mov	r0, r4
 800d82a:	6859      	ldr	r1, [r3, #4]
 800d82c:	f001 fe58 	bl	800f4e0 <_Balloc>
 800d830:	9005      	str	r0, [sp, #20]
 800d832:	2800      	cmp	r0, #0
 800d834:	f43f af0c 	beq.w	800d650 <_strtod_l+0x490>
 800d838:	9b07      	ldr	r3, [sp, #28]
 800d83a:	691a      	ldr	r2, [r3, #16]
 800d83c:	3202      	adds	r2, #2
 800d83e:	f103 010c 	add.w	r1, r3, #12
 800d842:	0092      	lsls	r2, r2, #2
 800d844:	300c      	adds	r0, #12
 800d846:	f7fe fdcf 	bl	800c3e8 <memcpy>
 800d84a:	ec4b ab10 	vmov	d0, sl, fp
 800d84e:	aa1a      	add	r2, sp, #104	; 0x68
 800d850:	a919      	add	r1, sp, #100	; 0x64
 800d852:	4620      	mov	r0, r4
 800d854:	f002 fa32 	bl	800fcbc <__d2b>
 800d858:	ec4b ab18 	vmov	d8, sl, fp
 800d85c:	9018      	str	r0, [sp, #96]	; 0x60
 800d85e:	2800      	cmp	r0, #0
 800d860:	f43f aef6 	beq.w	800d650 <_strtod_l+0x490>
 800d864:	2101      	movs	r1, #1
 800d866:	4620      	mov	r0, r4
 800d868:	f001 ff7c 	bl	800f764 <__i2b>
 800d86c:	4606      	mov	r6, r0
 800d86e:	2800      	cmp	r0, #0
 800d870:	f43f aeee 	beq.w	800d650 <_strtod_l+0x490>
 800d874:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d876:	9904      	ldr	r1, [sp, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	bfab      	itete	ge
 800d87c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d87e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d880:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d882:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d886:	bfac      	ite	ge
 800d888:	eb03 0902 	addge.w	r9, r3, r2
 800d88c:	1ad7      	sublt	r7, r2, r3
 800d88e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d890:	eba3 0801 	sub.w	r8, r3, r1
 800d894:	4490      	add	r8, r2
 800d896:	4ba1      	ldr	r3, [pc, #644]	; (800db1c <_strtod_l+0x95c>)
 800d898:	f108 38ff 	add.w	r8, r8, #4294967295
 800d89c:	4598      	cmp	r8, r3
 800d89e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d8a2:	f280 80c7 	bge.w	800da34 <_strtod_l+0x874>
 800d8a6:	eba3 0308 	sub.w	r3, r3, r8
 800d8aa:	2b1f      	cmp	r3, #31
 800d8ac:	eba2 0203 	sub.w	r2, r2, r3
 800d8b0:	f04f 0101 	mov.w	r1, #1
 800d8b4:	f300 80b1 	bgt.w	800da1a <_strtod_l+0x85a>
 800d8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8bc:	930d      	str	r3, [sp, #52]	; 0x34
 800d8be:	2300      	movs	r3, #0
 800d8c0:	9308      	str	r3, [sp, #32]
 800d8c2:	eb09 0802 	add.w	r8, r9, r2
 800d8c6:	9b04      	ldr	r3, [sp, #16]
 800d8c8:	45c1      	cmp	r9, r8
 800d8ca:	4417      	add	r7, r2
 800d8cc:	441f      	add	r7, r3
 800d8ce:	464b      	mov	r3, r9
 800d8d0:	bfa8      	it	ge
 800d8d2:	4643      	movge	r3, r8
 800d8d4:	42bb      	cmp	r3, r7
 800d8d6:	bfa8      	it	ge
 800d8d8:	463b      	movge	r3, r7
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	bfc2      	ittt	gt
 800d8de:	eba8 0803 	subgt.w	r8, r8, r3
 800d8e2:	1aff      	subgt	r7, r7, r3
 800d8e4:	eba9 0903 	subgt.w	r9, r9, r3
 800d8e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	dd17      	ble.n	800d91e <_strtod_l+0x75e>
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f001 fff6 	bl	800f8e4 <__pow5mult>
 800d8f8:	4606      	mov	r6, r0
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	f43f aea8 	beq.w	800d650 <_strtod_l+0x490>
 800d900:	4601      	mov	r1, r0
 800d902:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d904:	4620      	mov	r0, r4
 800d906:	f001 ff43 	bl	800f790 <__multiply>
 800d90a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f43f ae9f 	beq.w	800d650 <_strtod_l+0x490>
 800d912:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d914:	4620      	mov	r0, r4
 800d916:	f001 fe23 	bl	800f560 <_Bfree>
 800d91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d91c:	9318      	str	r3, [sp, #96]	; 0x60
 800d91e:	f1b8 0f00 	cmp.w	r8, #0
 800d922:	f300 808c 	bgt.w	800da3e <_strtod_l+0x87e>
 800d926:	9b06      	ldr	r3, [sp, #24]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	dd08      	ble.n	800d93e <_strtod_l+0x77e>
 800d92c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d92e:	9905      	ldr	r1, [sp, #20]
 800d930:	4620      	mov	r0, r4
 800d932:	f001 ffd7 	bl	800f8e4 <__pow5mult>
 800d936:	9005      	str	r0, [sp, #20]
 800d938:	2800      	cmp	r0, #0
 800d93a:	f43f ae89 	beq.w	800d650 <_strtod_l+0x490>
 800d93e:	2f00      	cmp	r7, #0
 800d940:	dd08      	ble.n	800d954 <_strtod_l+0x794>
 800d942:	9905      	ldr	r1, [sp, #20]
 800d944:	463a      	mov	r2, r7
 800d946:	4620      	mov	r0, r4
 800d948:	f002 f826 	bl	800f998 <__lshift>
 800d94c:	9005      	str	r0, [sp, #20]
 800d94e:	2800      	cmp	r0, #0
 800d950:	f43f ae7e 	beq.w	800d650 <_strtod_l+0x490>
 800d954:	f1b9 0f00 	cmp.w	r9, #0
 800d958:	dd08      	ble.n	800d96c <_strtod_l+0x7ac>
 800d95a:	4631      	mov	r1, r6
 800d95c:	464a      	mov	r2, r9
 800d95e:	4620      	mov	r0, r4
 800d960:	f002 f81a 	bl	800f998 <__lshift>
 800d964:	4606      	mov	r6, r0
 800d966:	2800      	cmp	r0, #0
 800d968:	f43f ae72 	beq.w	800d650 <_strtod_l+0x490>
 800d96c:	9a05      	ldr	r2, [sp, #20]
 800d96e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d970:	4620      	mov	r0, r4
 800d972:	f002 f89d 	bl	800fab0 <__mdiff>
 800d976:	4605      	mov	r5, r0
 800d978:	2800      	cmp	r0, #0
 800d97a:	f43f ae69 	beq.w	800d650 <_strtod_l+0x490>
 800d97e:	68c3      	ldr	r3, [r0, #12]
 800d980:	930b      	str	r3, [sp, #44]	; 0x2c
 800d982:	2300      	movs	r3, #0
 800d984:	60c3      	str	r3, [r0, #12]
 800d986:	4631      	mov	r1, r6
 800d988:	f002 f876 	bl	800fa78 <__mcmp>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	da60      	bge.n	800da52 <_strtod_l+0x892>
 800d990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d992:	ea53 030a 	orrs.w	r3, r3, sl
 800d996:	f040 8082 	bne.w	800da9e <_strtod_l+0x8de>
 800d99a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d17d      	bne.n	800da9e <_strtod_l+0x8de>
 800d9a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d9a6:	0d1b      	lsrs	r3, r3, #20
 800d9a8:	051b      	lsls	r3, r3, #20
 800d9aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d9ae:	d976      	bls.n	800da9e <_strtod_l+0x8de>
 800d9b0:	696b      	ldr	r3, [r5, #20]
 800d9b2:	b913      	cbnz	r3, 800d9ba <_strtod_l+0x7fa>
 800d9b4:	692b      	ldr	r3, [r5, #16]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	dd71      	ble.n	800da9e <_strtod_l+0x8de>
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	2201      	movs	r2, #1
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f001 ffea 	bl	800f998 <__lshift>
 800d9c4:	4631      	mov	r1, r6
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	f002 f856 	bl	800fa78 <__mcmp>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	dd66      	ble.n	800da9e <_strtod_l+0x8de>
 800d9d0:	9904      	ldr	r1, [sp, #16]
 800d9d2:	4a53      	ldr	r2, [pc, #332]	; (800db20 <_strtod_l+0x960>)
 800d9d4:	465b      	mov	r3, fp
 800d9d6:	2900      	cmp	r1, #0
 800d9d8:	f000 8081 	beq.w	800dade <_strtod_l+0x91e>
 800d9dc:	ea02 010b 	and.w	r1, r2, fp
 800d9e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d9e4:	dc7b      	bgt.n	800dade <_strtod_l+0x91e>
 800d9e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d9ea:	f77f aea9 	ble.w	800d740 <_strtod_l+0x580>
 800d9ee:	4b4d      	ldr	r3, [pc, #308]	; (800db24 <_strtod_l+0x964>)
 800d9f0:	4650      	mov	r0, sl
 800d9f2:	4659      	mov	r1, fp
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f7f2 fe27 	bl	8000648 <__aeabi_dmul>
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4303      	orrs	r3, r0
 800d9fe:	bf08      	it	eq
 800da00:	2322      	moveq	r3, #34	; 0x22
 800da02:	4682      	mov	sl, r0
 800da04:	468b      	mov	fp, r1
 800da06:	bf08      	it	eq
 800da08:	6023      	streq	r3, [r4, #0]
 800da0a:	e62b      	b.n	800d664 <_strtod_l+0x4a4>
 800da0c:	f04f 32ff 	mov.w	r2, #4294967295
 800da10:	fa02 f303 	lsl.w	r3, r2, r3
 800da14:	ea03 0a0a 	and.w	sl, r3, sl
 800da18:	e6e3      	b.n	800d7e2 <_strtod_l+0x622>
 800da1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800da1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800da22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800da26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800da2a:	fa01 f308 	lsl.w	r3, r1, r8
 800da2e:	9308      	str	r3, [sp, #32]
 800da30:	910d      	str	r1, [sp, #52]	; 0x34
 800da32:	e746      	b.n	800d8c2 <_strtod_l+0x702>
 800da34:	2300      	movs	r3, #0
 800da36:	9308      	str	r3, [sp, #32]
 800da38:	2301      	movs	r3, #1
 800da3a:	930d      	str	r3, [sp, #52]	; 0x34
 800da3c:	e741      	b.n	800d8c2 <_strtod_l+0x702>
 800da3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da40:	4642      	mov	r2, r8
 800da42:	4620      	mov	r0, r4
 800da44:	f001 ffa8 	bl	800f998 <__lshift>
 800da48:	9018      	str	r0, [sp, #96]	; 0x60
 800da4a:	2800      	cmp	r0, #0
 800da4c:	f47f af6b 	bne.w	800d926 <_strtod_l+0x766>
 800da50:	e5fe      	b.n	800d650 <_strtod_l+0x490>
 800da52:	465f      	mov	r7, fp
 800da54:	d16e      	bne.n	800db34 <_strtod_l+0x974>
 800da56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da5c:	b342      	cbz	r2, 800dab0 <_strtod_l+0x8f0>
 800da5e:	4a32      	ldr	r2, [pc, #200]	; (800db28 <_strtod_l+0x968>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d128      	bne.n	800dab6 <_strtod_l+0x8f6>
 800da64:	9b04      	ldr	r3, [sp, #16]
 800da66:	4651      	mov	r1, sl
 800da68:	b1eb      	cbz	r3, 800daa6 <_strtod_l+0x8e6>
 800da6a:	4b2d      	ldr	r3, [pc, #180]	; (800db20 <_strtod_l+0x960>)
 800da6c:	403b      	ands	r3, r7
 800da6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800da72:	f04f 32ff 	mov.w	r2, #4294967295
 800da76:	d819      	bhi.n	800daac <_strtod_l+0x8ec>
 800da78:	0d1b      	lsrs	r3, r3, #20
 800da7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da7e:	fa02 f303 	lsl.w	r3, r2, r3
 800da82:	4299      	cmp	r1, r3
 800da84:	d117      	bne.n	800dab6 <_strtod_l+0x8f6>
 800da86:	4b29      	ldr	r3, [pc, #164]	; (800db2c <_strtod_l+0x96c>)
 800da88:	429f      	cmp	r7, r3
 800da8a:	d102      	bne.n	800da92 <_strtod_l+0x8d2>
 800da8c:	3101      	adds	r1, #1
 800da8e:	f43f addf 	beq.w	800d650 <_strtod_l+0x490>
 800da92:	4b23      	ldr	r3, [pc, #140]	; (800db20 <_strtod_l+0x960>)
 800da94:	403b      	ands	r3, r7
 800da96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800da9a:	f04f 0a00 	mov.w	sl, #0
 800da9e:	9b04      	ldr	r3, [sp, #16]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1a4      	bne.n	800d9ee <_strtod_l+0x82e>
 800daa4:	e5de      	b.n	800d664 <_strtod_l+0x4a4>
 800daa6:	f04f 33ff 	mov.w	r3, #4294967295
 800daaa:	e7ea      	b.n	800da82 <_strtod_l+0x8c2>
 800daac:	4613      	mov	r3, r2
 800daae:	e7e8      	b.n	800da82 <_strtod_l+0x8c2>
 800dab0:	ea53 030a 	orrs.w	r3, r3, sl
 800dab4:	d08c      	beq.n	800d9d0 <_strtod_l+0x810>
 800dab6:	9b08      	ldr	r3, [sp, #32]
 800dab8:	b1db      	cbz	r3, 800daf2 <_strtod_l+0x932>
 800daba:	423b      	tst	r3, r7
 800dabc:	d0ef      	beq.n	800da9e <_strtod_l+0x8de>
 800dabe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac0:	9a04      	ldr	r2, [sp, #16]
 800dac2:	4650      	mov	r0, sl
 800dac4:	4659      	mov	r1, fp
 800dac6:	b1c3      	cbz	r3, 800dafa <_strtod_l+0x93a>
 800dac8:	f7ff fb5c 	bl	800d184 <sulp>
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	ec51 0b18 	vmov	r0, r1, d8
 800dad4:	f7f2 fc02 	bl	80002dc <__adddf3>
 800dad8:	4682      	mov	sl, r0
 800dada:	468b      	mov	fp, r1
 800dadc:	e7df      	b.n	800da9e <_strtod_l+0x8de>
 800dade:	4013      	ands	r3, r2
 800dae0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dae4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dae8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800daec:	f04f 3aff 	mov.w	sl, #4294967295
 800daf0:	e7d5      	b.n	800da9e <_strtod_l+0x8de>
 800daf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800daf4:	ea13 0f0a 	tst.w	r3, sl
 800daf8:	e7e0      	b.n	800dabc <_strtod_l+0x8fc>
 800dafa:	f7ff fb43 	bl	800d184 <sulp>
 800dafe:	4602      	mov	r2, r0
 800db00:	460b      	mov	r3, r1
 800db02:	ec51 0b18 	vmov	r0, r1, d8
 800db06:	f7f2 fbe7 	bl	80002d8 <__aeabi_dsub>
 800db0a:	2200      	movs	r2, #0
 800db0c:	2300      	movs	r3, #0
 800db0e:	4682      	mov	sl, r0
 800db10:	468b      	mov	fp, r1
 800db12:	f7f3 f801 	bl	8000b18 <__aeabi_dcmpeq>
 800db16:	2800      	cmp	r0, #0
 800db18:	d0c1      	beq.n	800da9e <_strtod_l+0x8de>
 800db1a:	e611      	b.n	800d740 <_strtod_l+0x580>
 800db1c:	fffffc02 	.word	0xfffffc02
 800db20:	7ff00000 	.word	0x7ff00000
 800db24:	39500000 	.word	0x39500000
 800db28:	000fffff 	.word	0x000fffff
 800db2c:	7fefffff 	.word	0x7fefffff
 800db30:	08012c00 	.word	0x08012c00
 800db34:	4631      	mov	r1, r6
 800db36:	4628      	mov	r0, r5
 800db38:	f002 f91c 	bl	800fd74 <__ratio>
 800db3c:	ec59 8b10 	vmov	r8, r9, d0
 800db40:	ee10 0a10 	vmov	r0, s0
 800db44:	2200      	movs	r2, #0
 800db46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db4a:	4649      	mov	r1, r9
 800db4c:	f7f2 fff8 	bl	8000b40 <__aeabi_dcmple>
 800db50:	2800      	cmp	r0, #0
 800db52:	d07a      	beq.n	800dc4a <_strtod_l+0xa8a>
 800db54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db56:	2b00      	cmp	r3, #0
 800db58:	d04a      	beq.n	800dbf0 <_strtod_l+0xa30>
 800db5a:	4b95      	ldr	r3, [pc, #596]	; (800ddb0 <_strtod_l+0xbf0>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800db62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ddb0 <_strtod_l+0xbf0>
 800db66:	f04f 0800 	mov.w	r8, #0
 800db6a:	4b92      	ldr	r3, [pc, #584]	; (800ddb4 <_strtod_l+0xbf4>)
 800db6c:	403b      	ands	r3, r7
 800db6e:	930d      	str	r3, [sp, #52]	; 0x34
 800db70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db72:	4b91      	ldr	r3, [pc, #580]	; (800ddb8 <_strtod_l+0xbf8>)
 800db74:	429a      	cmp	r2, r3
 800db76:	f040 80b0 	bne.w	800dcda <_strtod_l+0xb1a>
 800db7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800db82:	ec4b ab10 	vmov	d0, sl, fp
 800db86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db8a:	f002 f81b 	bl	800fbc4 <__ulp>
 800db8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db92:	ec53 2b10 	vmov	r2, r3, d0
 800db96:	f7f2 fd57 	bl	8000648 <__aeabi_dmul>
 800db9a:	4652      	mov	r2, sl
 800db9c:	465b      	mov	r3, fp
 800db9e:	f7f2 fb9d 	bl	80002dc <__adddf3>
 800dba2:	460b      	mov	r3, r1
 800dba4:	4983      	ldr	r1, [pc, #524]	; (800ddb4 <_strtod_l+0xbf4>)
 800dba6:	4a85      	ldr	r2, [pc, #532]	; (800ddbc <_strtod_l+0xbfc>)
 800dba8:	4019      	ands	r1, r3
 800dbaa:	4291      	cmp	r1, r2
 800dbac:	4682      	mov	sl, r0
 800dbae:	d960      	bls.n	800dc72 <_strtod_l+0xab2>
 800dbb0:	ee18 3a90 	vmov	r3, s17
 800dbb4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d104      	bne.n	800dbc6 <_strtod_l+0xa06>
 800dbbc:	ee18 3a10 	vmov	r3, s16
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	f43f ad45 	beq.w	800d650 <_strtod_l+0x490>
 800dbc6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ddc8 <_strtod_l+0xc08>
 800dbca:	f04f 3aff 	mov.w	sl, #4294967295
 800dbce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f001 fcc5 	bl	800f560 <_Bfree>
 800dbd6:	9905      	ldr	r1, [sp, #20]
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f001 fcc1 	bl	800f560 <_Bfree>
 800dbde:	4631      	mov	r1, r6
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f001 fcbd 	bl	800f560 <_Bfree>
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f001 fcb9 	bl	800f560 <_Bfree>
 800dbee:	e61a      	b.n	800d826 <_strtod_l+0x666>
 800dbf0:	f1ba 0f00 	cmp.w	sl, #0
 800dbf4:	d11b      	bne.n	800dc2e <_strtod_l+0xa6e>
 800dbf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbfa:	b9f3      	cbnz	r3, 800dc3a <_strtod_l+0xa7a>
 800dbfc:	4b6c      	ldr	r3, [pc, #432]	; (800ddb0 <_strtod_l+0xbf0>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	4640      	mov	r0, r8
 800dc02:	4649      	mov	r1, r9
 800dc04:	f7f2 ff92 	bl	8000b2c <__aeabi_dcmplt>
 800dc08:	b9d0      	cbnz	r0, 800dc40 <_strtod_l+0xa80>
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	4649      	mov	r1, r9
 800dc0e:	4b6c      	ldr	r3, [pc, #432]	; (800ddc0 <_strtod_l+0xc00>)
 800dc10:	2200      	movs	r2, #0
 800dc12:	f7f2 fd19 	bl	8000648 <__aeabi_dmul>
 800dc16:	4680      	mov	r8, r0
 800dc18:	4689      	mov	r9, r1
 800dc1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dc1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dc22:	9315      	str	r3, [sp, #84]	; 0x54
 800dc24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dc28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc2c:	e79d      	b.n	800db6a <_strtod_l+0x9aa>
 800dc2e:	f1ba 0f01 	cmp.w	sl, #1
 800dc32:	d102      	bne.n	800dc3a <_strtod_l+0xa7a>
 800dc34:	2f00      	cmp	r7, #0
 800dc36:	f43f ad83 	beq.w	800d740 <_strtod_l+0x580>
 800dc3a:	4b62      	ldr	r3, [pc, #392]	; (800ddc4 <_strtod_l+0xc04>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	e78e      	b.n	800db5e <_strtod_l+0x99e>
 800dc40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ddc0 <_strtod_l+0xc00>
 800dc44:	f04f 0800 	mov.w	r8, #0
 800dc48:	e7e7      	b.n	800dc1a <_strtod_l+0xa5a>
 800dc4a:	4b5d      	ldr	r3, [pc, #372]	; (800ddc0 <_strtod_l+0xc00>)
 800dc4c:	4640      	mov	r0, r8
 800dc4e:	4649      	mov	r1, r9
 800dc50:	2200      	movs	r2, #0
 800dc52:	f7f2 fcf9 	bl	8000648 <__aeabi_dmul>
 800dc56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc58:	4680      	mov	r8, r0
 800dc5a:	4689      	mov	r9, r1
 800dc5c:	b933      	cbnz	r3, 800dc6c <_strtod_l+0xaac>
 800dc5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc62:	900e      	str	r0, [sp, #56]	; 0x38
 800dc64:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dc6a:	e7dd      	b.n	800dc28 <_strtod_l+0xa68>
 800dc6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dc70:	e7f9      	b.n	800dc66 <_strtod_l+0xaa6>
 800dc72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dc76:	9b04      	ldr	r3, [sp, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1a8      	bne.n	800dbce <_strtod_l+0xa0e>
 800dc7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc82:	0d1b      	lsrs	r3, r3, #20
 800dc84:	051b      	lsls	r3, r3, #20
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d1a1      	bne.n	800dbce <_strtod_l+0xa0e>
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	f7f3 f949 	bl	8000f24 <__aeabi_d2lz>
 800dc92:	f7f2 fcab 	bl	80005ec <__aeabi_l2d>
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	4649      	mov	r1, r9
 800dc9e:	f7f2 fb1b 	bl	80002d8 <__aeabi_dsub>
 800dca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dca8:	ea43 030a 	orr.w	r3, r3, sl
 800dcac:	4313      	orrs	r3, r2
 800dcae:	4680      	mov	r8, r0
 800dcb0:	4689      	mov	r9, r1
 800dcb2:	d055      	beq.n	800dd60 <_strtod_l+0xba0>
 800dcb4:	a336      	add	r3, pc, #216	; (adr r3, 800dd90 <_strtod_l+0xbd0>)
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	f7f2 ff37 	bl	8000b2c <__aeabi_dcmplt>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	f47f acd0 	bne.w	800d664 <_strtod_l+0x4a4>
 800dcc4:	a334      	add	r3, pc, #208	; (adr r3, 800dd98 <_strtod_l+0xbd8>)
 800dcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcca:	4640      	mov	r0, r8
 800dccc:	4649      	mov	r1, r9
 800dcce:	f7f2 ff4b 	bl	8000b68 <__aeabi_dcmpgt>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	f43f af7b 	beq.w	800dbce <_strtod_l+0xa0e>
 800dcd8:	e4c4      	b.n	800d664 <_strtod_l+0x4a4>
 800dcda:	9b04      	ldr	r3, [sp, #16]
 800dcdc:	b333      	cbz	r3, 800dd2c <_strtod_l+0xb6c>
 800dcde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dce0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dce4:	d822      	bhi.n	800dd2c <_strtod_l+0xb6c>
 800dce6:	a32e      	add	r3, pc, #184	; (adr r3, 800dda0 <_strtod_l+0xbe0>)
 800dce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcec:	4640      	mov	r0, r8
 800dcee:	4649      	mov	r1, r9
 800dcf0:	f7f2 ff26 	bl	8000b40 <__aeabi_dcmple>
 800dcf4:	b1a0      	cbz	r0, 800dd20 <_strtod_l+0xb60>
 800dcf6:	4649      	mov	r1, r9
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	f7f2 ff7d 	bl	8000bf8 <__aeabi_d2uiz>
 800dcfe:	2801      	cmp	r0, #1
 800dd00:	bf38      	it	cc
 800dd02:	2001      	movcc	r0, #1
 800dd04:	f7f2 fc26 	bl	8000554 <__aeabi_ui2d>
 800dd08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4689      	mov	r9, r1
 800dd0e:	bb23      	cbnz	r3, 800dd5a <_strtod_l+0xb9a>
 800dd10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd14:	9010      	str	r0, [sp, #64]	; 0x40
 800dd16:	9311      	str	r3, [sp, #68]	; 0x44
 800dd18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dd1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dd28:	1a9b      	subs	r3, r3, r2
 800dd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd30:	eeb0 0a48 	vmov.f32	s0, s16
 800dd34:	eef0 0a68 	vmov.f32	s1, s17
 800dd38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd3c:	f001 ff42 	bl	800fbc4 <__ulp>
 800dd40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd44:	ec53 2b10 	vmov	r2, r3, d0
 800dd48:	f7f2 fc7e 	bl	8000648 <__aeabi_dmul>
 800dd4c:	ec53 2b18 	vmov	r2, r3, d8
 800dd50:	f7f2 fac4 	bl	80002dc <__adddf3>
 800dd54:	4682      	mov	sl, r0
 800dd56:	468b      	mov	fp, r1
 800dd58:	e78d      	b.n	800dc76 <_strtod_l+0xab6>
 800dd5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dd5e:	e7db      	b.n	800dd18 <_strtod_l+0xb58>
 800dd60:	a311      	add	r3, pc, #68	; (adr r3, 800dda8 <_strtod_l+0xbe8>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 fee1 	bl	8000b2c <__aeabi_dcmplt>
 800dd6a:	e7b2      	b.n	800dcd2 <_strtod_l+0xb12>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dd72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd74:	6013      	str	r3, [r2, #0]
 800dd76:	f7ff ba6b 	b.w	800d250 <_strtod_l+0x90>
 800dd7a:	2a65      	cmp	r2, #101	; 0x65
 800dd7c:	f43f ab5f 	beq.w	800d43e <_strtod_l+0x27e>
 800dd80:	2a45      	cmp	r2, #69	; 0x45
 800dd82:	f43f ab5c 	beq.w	800d43e <_strtod_l+0x27e>
 800dd86:	2301      	movs	r3, #1
 800dd88:	f7ff bb94 	b.w	800d4b4 <_strtod_l+0x2f4>
 800dd8c:	f3af 8000 	nop.w
 800dd90:	94a03595 	.word	0x94a03595
 800dd94:	3fdfffff 	.word	0x3fdfffff
 800dd98:	35afe535 	.word	0x35afe535
 800dd9c:	3fe00000 	.word	0x3fe00000
 800dda0:	ffc00000 	.word	0xffc00000
 800dda4:	41dfffff 	.word	0x41dfffff
 800dda8:	94a03595 	.word	0x94a03595
 800ddac:	3fcfffff 	.word	0x3fcfffff
 800ddb0:	3ff00000 	.word	0x3ff00000
 800ddb4:	7ff00000 	.word	0x7ff00000
 800ddb8:	7fe00000 	.word	0x7fe00000
 800ddbc:	7c9fffff 	.word	0x7c9fffff
 800ddc0:	3fe00000 	.word	0x3fe00000
 800ddc4:	bff00000 	.word	0xbff00000
 800ddc8:	7fefffff 	.word	0x7fefffff

0800ddcc <_strtod_r>:
 800ddcc:	4b01      	ldr	r3, [pc, #4]	; (800ddd4 <_strtod_r+0x8>)
 800ddce:	f7ff b9f7 	b.w	800d1c0 <_strtod_l>
 800ddd2:	bf00      	nop
 800ddd4:	20000098 	.word	0x20000098

0800ddd8 <_strtol_l.constprop.0>:
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddde:	d001      	beq.n	800dde4 <_strtol_l.constprop.0+0xc>
 800dde0:	2b24      	cmp	r3, #36	; 0x24
 800dde2:	d906      	bls.n	800ddf2 <_strtol_l.constprop.0+0x1a>
 800dde4:	f7fe fad6 	bl	800c394 <__errno>
 800dde8:	2316      	movs	r3, #22
 800ddea:	6003      	str	r3, [r0, #0]
 800ddec:	2000      	movs	r0, #0
 800ddee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddf2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ded8 <_strtol_l.constprop.0+0x100>
 800ddf6:	460d      	mov	r5, r1
 800ddf8:	462e      	mov	r6, r5
 800ddfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddfe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800de02:	f017 0708 	ands.w	r7, r7, #8
 800de06:	d1f7      	bne.n	800ddf8 <_strtol_l.constprop.0+0x20>
 800de08:	2c2d      	cmp	r4, #45	; 0x2d
 800de0a:	d132      	bne.n	800de72 <_strtol_l.constprop.0+0x9a>
 800de0c:	782c      	ldrb	r4, [r5, #0]
 800de0e:	2701      	movs	r7, #1
 800de10:	1cb5      	adds	r5, r6, #2
 800de12:	2b00      	cmp	r3, #0
 800de14:	d05b      	beq.n	800dece <_strtol_l.constprop.0+0xf6>
 800de16:	2b10      	cmp	r3, #16
 800de18:	d109      	bne.n	800de2e <_strtol_l.constprop.0+0x56>
 800de1a:	2c30      	cmp	r4, #48	; 0x30
 800de1c:	d107      	bne.n	800de2e <_strtol_l.constprop.0+0x56>
 800de1e:	782c      	ldrb	r4, [r5, #0]
 800de20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800de24:	2c58      	cmp	r4, #88	; 0x58
 800de26:	d14d      	bne.n	800dec4 <_strtol_l.constprop.0+0xec>
 800de28:	786c      	ldrb	r4, [r5, #1]
 800de2a:	2310      	movs	r3, #16
 800de2c:	3502      	adds	r5, #2
 800de2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800de32:	f108 38ff 	add.w	r8, r8, #4294967295
 800de36:	f04f 0c00 	mov.w	ip, #0
 800de3a:	fbb8 f9f3 	udiv	r9, r8, r3
 800de3e:	4666      	mov	r6, ip
 800de40:	fb03 8a19 	mls	sl, r3, r9, r8
 800de44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800de48:	f1be 0f09 	cmp.w	lr, #9
 800de4c:	d816      	bhi.n	800de7c <_strtol_l.constprop.0+0xa4>
 800de4e:	4674      	mov	r4, lr
 800de50:	42a3      	cmp	r3, r4
 800de52:	dd24      	ble.n	800de9e <_strtol_l.constprop.0+0xc6>
 800de54:	f1bc 0f00 	cmp.w	ip, #0
 800de58:	db1e      	blt.n	800de98 <_strtol_l.constprop.0+0xc0>
 800de5a:	45b1      	cmp	r9, r6
 800de5c:	d31c      	bcc.n	800de98 <_strtol_l.constprop.0+0xc0>
 800de5e:	d101      	bne.n	800de64 <_strtol_l.constprop.0+0x8c>
 800de60:	45a2      	cmp	sl, r4
 800de62:	db19      	blt.n	800de98 <_strtol_l.constprop.0+0xc0>
 800de64:	fb06 4603 	mla	r6, r6, r3, r4
 800de68:	f04f 0c01 	mov.w	ip, #1
 800de6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de70:	e7e8      	b.n	800de44 <_strtol_l.constprop.0+0x6c>
 800de72:	2c2b      	cmp	r4, #43	; 0x2b
 800de74:	bf04      	itt	eq
 800de76:	782c      	ldrbeq	r4, [r5, #0]
 800de78:	1cb5      	addeq	r5, r6, #2
 800de7a:	e7ca      	b.n	800de12 <_strtol_l.constprop.0+0x3a>
 800de7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800de80:	f1be 0f19 	cmp.w	lr, #25
 800de84:	d801      	bhi.n	800de8a <_strtol_l.constprop.0+0xb2>
 800de86:	3c37      	subs	r4, #55	; 0x37
 800de88:	e7e2      	b.n	800de50 <_strtol_l.constprop.0+0x78>
 800de8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800de8e:	f1be 0f19 	cmp.w	lr, #25
 800de92:	d804      	bhi.n	800de9e <_strtol_l.constprop.0+0xc6>
 800de94:	3c57      	subs	r4, #87	; 0x57
 800de96:	e7db      	b.n	800de50 <_strtol_l.constprop.0+0x78>
 800de98:	f04f 3cff 	mov.w	ip, #4294967295
 800de9c:	e7e6      	b.n	800de6c <_strtol_l.constprop.0+0x94>
 800de9e:	f1bc 0f00 	cmp.w	ip, #0
 800dea2:	da05      	bge.n	800deb0 <_strtol_l.constprop.0+0xd8>
 800dea4:	2322      	movs	r3, #34	; 0x22
 800dea6:	6003      	str	r3, [r0, #0]
 800dea8:	4646      	mov	r6, r8
 800deaa:	b942      	cbnz	r2, 800debe <_strtol_l.constprop.0+0xe6>
 800deac:	4630      	mov	r0, r6
 800deae:	e79e      	b.n	800ddee <_strtol_l.constprop.0+0x16>
 800deb0:	b107      	cbz	r7, 800deb4 <_strtol_l.constprop.0+0xdc>
 800deb2:	4276      	negs	r6, r6
 800deb4:	2a00      	cmp	r2, #0
 800deb6:	d0f9      	beq.n	800deac <_strtol_l.constprop.0+0xd4>
 800deb8:	f1bc 0f00 	cmp.w	ip, #0
 800debc:	d000      	beq.n	800dec0 <_strtol_l.constprop.0+0xe8>
 800debe:	1e69      	subs	r1, r5, #1
 800dec0:	6011      	str	r1, [r2, #0]
 800dec2:	e7f3      	b.n	800deac <_strtol_l.constprop.0+0xd4>
 800dec4:	2430      	movs	r4, #48	; 0x30
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1b1      	bne.n	800de2e <_strtol_l.constprop.0+0x56>
 800deca:	2308      	movs	r3, #8
 800decc:	e7af      	b.n	800de2e <_strtol_l.constprop.0+0x56>
 800dece:	2c30      	cmp	r4, #48	; 0x30
 800ded0:	d0a5      	beq.n	800de1e <_strtol_l.constprop.0+0x46>
 800ded2:	230a      	movs	r3, #10
 800ded4:	e7ab      	b.n	800de2e <_strtol_l.constprop.0+0x56>
 800ded6:	bf00      	nop
 800ded8:	08012c29 	.word	0x08012c29

0800dedc <_strtol_r>:
 800dedc:	f7ff bf7c 	b.w	800ddd8 <_strtol_l.constprop.0>

0800dee0 <quorem>:
 800dee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	6903      	ldr	r3, [r0, #16]
 800dee6:	690c      	ldr	r4, [r1, #16]
 800dee8:	42a3      	cmp	r3, r4
 800deea:	4607      	mov	r7, r0
 800deec:	f2c0 8081 	blt.w	800dff2 <quorem+0x112>
 800def0:	3c01      	subs	r4, #1
 800def2:	f101 0814 	add.w	r8, r1, #20
 800def6:	f100 0514 	add.w	r5, r0, #20
 800defa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800defe:	9301      	str	r3, [sp, #4]
 800df00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df08:	3301      	adds	r3, #1
 800df0a:	429a      	cmp	r2, r3
 800df0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800df10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df14:	fbb2 f6f3 	udiv	r6, r2, r3
 800df18:	d331      	bcc.n	800df7e <quorem+0x9e>
 800df1a:	f04f 0e00 	mov.w	lr, #0
 800df1e:	4640      	mov	r0, r8
 800df20:	46ac      	mov	ip, r5
 800df22:	46f2      	mov	sl, lr
 800df24:	f850 2b04 	ldr.w	r2, [r0], #4
 800df28:	b293      	uxth	r3, r2
 800df2a:	fb06 e303 	mla	r3, r6, r3, lr
 800df2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800df32:	b29b      	uxth	r3, r3
 800df34:	ebaa 0303 	sub.w	r3, sl, r3
 800df38:	f8dc a000 	ldr.w	sl, [ip]
 800df3c:	0c12      	lsrs	r2, r2, #16
 800df3e:	fa13 f38a 	uxtah	r3, r3, sl
 800df42:	fb06 e202 	mla	r2, r6, r2, lr
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	9b00      	ldr	r3, [sp, #0]
 800df4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800df4e:	b292      	uxth	r2, r2
 800df50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800df54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df58:	f8bd 3000 	ldrh.w	r3, [sp]
 800df5c:	4581      	cmp	r9, r0
 800df5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df62:	f84c 3b04 	str.w	r3, [ip], #4
 800df66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800df6a:	d2db      	bcs.n	800df24 <quorem+0x44>
 800df6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800df70:	b92b      	cbnz	r3, 800df7e <quorem+0x9e>
 800df72:	9b01      	ldr	r3, [sp, #4]
 800df74:	3b04      	subs	r3, #4
 800df76:	429d      	cmp	r5, r3
 800df78:	461a      	mov	r2, r3
 800df7a:	d32e      	bcc.n	800dfda <quorem+0xfa>
 800df7c:	613c      	str	r4, [r7, #16]
 800df7e:	4638      	mov	r0, r7
 800df80:	f001 fd7a 	bl	800fa78 <__mcmp>
 800df84:	2800      	cmp	r0, #0
 800df86:	db24      	blt.n	800dfd2 <quorem+0xf2>
 800df88:	3601      	adds	r6, #1
 800df8a:	4628      	mov	r0, r5
 800df8c:	f04f 0c00 	mov.w	ip, #0
 800df90:	f858 2b04 	ldr.w	r2, [r8], #4
 800df94:	f8d0 e000 	ldr.w	lr, [r0]
 800df98:	b293      	uxth	r3, r2
 800df9a:	ebac 0303 	sub.w	r3, ip, r3
 800df9e:	0c12      	lsrs	r2, r2, #16
 800dfa0:	fa13 f38e 	uxtah	r3, r3, lr
 800dfa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dfa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfb2:	45c1      	cmp	r9, r8
 800dfb4:	f840 3b04 	str.w	r3, [r0], #4
 800dfb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dfbc:	d2e8      	bcs.n	800df90 <quorem+0xb0>
 800dfbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfc6:	b922      	cbnz	r2, 800dfd2 <quorem+0xf2>
 800dfc8:	3b04      	subs	r3, #4
 800dfca:	429d      	cmp	r5, r3
 800dfcc:	461a      	mov	r2, r3
 800dfce:	d30a      	bcc.n	800dfe6 <quorem+0x106>
 800dfd0:	613c      	str	r4, [r7, #16]
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	b003      	add	sp, #12
 800dfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfda:	6812      	ldr	r2, [r2, #0]
 800dfdc:	3b04      	subs	r3, #4
 800dfde:	2a00      	cmp	r2, #0
 800dfe0:	d1cc      	bne.n	800df7c <quorem+0x9c>
 800dfe2:	3c01      	subs	r4, #1
 800dfe4:	e7c7      	b.n	800df76 <quorem+0x96>
 800dfe6:	6812      	ldr	r2, [r2, #0]
 800dfe8:	3b04      	subs	r3, #4
 800dfea:	2a00      	cmp	r2, #0
 800dfec:	d1f0      	bne.n	800dfd0 <quorem+0xf0>
 800dfee:	3c01      	subs	r4, #1
 800dff0:	e7eb      	b.n	800dfca <quorem+0xea>
 800dff2:	2000      	movs	r0, #0
 800dff4:	e7ee      	b.n	800dfd4 <quorem+0xf4>
	...

0800dff8 <_dtoa_r>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	ed2d 8b04 	vpush	{d8-d9}
 800e000:	ec57 6b10 	vmov	r6, r7, d0
 800e004:	b093      	sub	sp, #76	; 0x4c
 800e006:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e008:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e00c:	9106      	str	r1, [sp, #24]
 800e00e:	ee10 aa10 	vmov	sl, s0
 800e012:	4604      	mov	r4, r0
 800e014:	9209      	str	r2, [sp, #36]	; 0x24
 800e016:	930c      	str	r3, [sp, #48]	; 0x30
 800e018:	46bb      	mov	fp, r7
 800e01a:	b975      	cbnz	r5, 800e03a <_dtoa_r+0x42>
 800e01c:	2010      	movs	r0, #16
 800e01e:	f001 fa45 	bl	800f4ac <malloc>
 800e022:	4602      	mov	r2, r0
 800e024:	6260      	str	r0, [r4, #36]	; 0x24
 800e026:	b920      	cbnz	r0, 800e032 <_dtoa_r+0x3a>
 800e028:	4ba7      	ldr	r3, [pc, #668]	; (800e2c8 <_dtoa_r+0x2d0>)
 800e02a:	21ea      	movs	r1, #234	; 0xea
 800e02c:	48a7      	ldr	r0, [pc, #668]	; (800e2cc <_dtoa_r+0x2d4>)
 800e02e:	f002 fc17 	bl	8010860 <__assert_func>
 800e032:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e036:	6005      	str	r5, [r0, #0]
 800e038:	60c5      	str	r5, [r0, #12]
 800e03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e03c:	6819      	ldr	r1, [r3, #0]
 800e03e:	b151      	cbz	r1, 800e056 <_dtoa_r+0x5e>
 800e040:	685a      	ldr	r2, [r3, #4]
 800e042:	604a      	str	r2, [r1, #4]
 800e044:	2301      	movs	r3, #1
 800e046:	4093      	lsls	r3, r2
 800e048:	608b      	str	r3, [r1, #8]
 800e04a:	4620      	mov	r0, r4
 800e04c:	f001 fa88 	bl	800f560 <_Bfree>
 800e050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e052:	2200      	movs	r2, #0
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	1e3b      	subs	r3, r7, #0
 800e058:	bfaa      	itet	ge
 800e05a:	2300      	movge	r3, #0
 800e05c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e060:	f8c8 3000 	strge.w	r3, [r8]
 800e064:	4b9a      	ldr	r3, [pc, #616]	; (800e2d0 <_dtoa_r+0x2d8>)
 800e066:	bfbc      	itt	lt
 800e068:	2201      	movlt	r2, #1
 800e06a:	f8c8 2000 	strlt.w	r2, [r8]
 800e06e:	ea33 030b 	bics.w	r3, r3, fp
 800e072:	d11b      	bne.n	800e0ac <_dtoa_r+0xb4>
 800e074:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e076:	f242 730f 	movw	r3, #9999	; 0x270f
 800e07a:	6013      	str	r3, [r2, #0]
 800e07c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e080:	4333      	orrs	r3, r6
 800e082:	f000 8592 	beq.w	800ebaa <_dtoa_r+0xbb2>
 800e086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e088:	b963      	cbnz	r3, 800e0a4 <_dtoa_r+0xac>
 800e08a:	4b92      	ldr	r3, [pc, #584]	; (800e2d4 <_dtoa_r+0x2dc>)
 800e08c:	e022      	b.n	800e0d4 <_dtoa_r+0xdc>
 800e08e:	4b92      	ldr	r3, [pc, #584]	; (800e2d8 <_dtoa_r+0x2e0>)
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	3308      	adds	r3, #8
 800e094:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	9801      	ldr	r0, [sp, #4]
 800e09a:	b013      	add	sp, #76	; 0x4c
 800e09c:	ecbd 8b04 	vpop	{d8-d9}
 800e0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a4:	4b8b      	ldr	r3, [pc, #556]	; (800e2d4 <_dtoa_r+0x2dc>)
 800e0a6:	9301      	str	r3, [sp, #4]
 800e0a8:	3303      	adds	r3, #3
 800e0aa:	e7f3      	b.n	800e094 <_dtoa_r+0x9c>
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	4650      	mov	r0, sl
 800e0b2:	4659      	mov	r1, fp
 800e0b4:	f7f2 fd30 	bl	8000b18 <__aeabi_dcmpeq>
 800e0b8:	ec4b ab19 	vmov	d9, sl, fp
 800e0bc:	4680      	mov	r8, r0
 800e0be:	b158      	cbz	r0, 800e0d8 <_dtoa_r+0xe0>
 800e0c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	6013      	str	r3, [r2, #0]
 800e0c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f000 856b 	beq.w	800eba4 <_dtoa_r+0xbac>
 800e0ce:	4883      	ldr	r0, [pc, #524]	; (800e2dc <_dtoa_r+0x2e4>)
 800e0d0:	6018      	str	r0, [r3, #0]
 800e0d2:	1e43      	subs	r3, r0, #1
 800e0d4:	9301      	str	r3, [sp, #4]
 800e0d6:	e7df      	b.n	800e098 <_dtoa_r+0xa0>
 800e0d8:	ec4b ab10 	vmov	d0, sl, fp
 800e0dc:	aa10      	add	r2, sp, #64	; 0x40
 800e0de:	a911      	add	r1, sp, #68	; 0x44
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f001 fdeb 	bl	800fcbc <__d2b>
 800e0e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e0ea:	ee08 0a10 	vmov	s16, r0
 800e0ee:	2d00      	cmp	r5, #0
 800e0f0:	f000 8084 	beq.w	800e1fc <_dtoa_r+0x204>
 800e0f4:	ee19 3a90 	vmov	r3, s19
 800e0f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e100:	4656      	mov	r6, sl
 800e102:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e106:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e10a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e10e:	4b74      	ldr	r3, [pc, #464]	; (800e2e0 <_dtoa_r+0x2e8>)
 800e110:	2200      	movs	r2, #0
 800e112:	4630      	mov	r0, r6
 800e114:	4639      	mov	r1, r7
 800e116:	f7f2 f8df 	bl	80002d8 <__aeabi_dsub>
 800e11a:	a365      	add	r3, pc, #404	; (adr r3, 800e2b0 <_dtoa_r+0x2b8>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f7f2 fa92 	bl	8000648 <__aeabi_dmul>
 800e124:	a364      	add	r3, pc, #400	; (adr r3, 800e2b8 <_dtoa_r+0x2c0>)
 800e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12a:	f7f2 f8d7 	bl	80002dc <__adddf3>
 800e12e:	4606      	mov	r6, r0
 800e130:	4628      	mov	r0, r5
 800e132:	460f      	mov	r7, r1
 800e134:	f7f2 fa1e 	bl	8000574 <__aeabi_i2d>
 800e138:	a361      	add	r3, pc, #388	; (adr r3, 800e2c0 <_dtoa_r+0x2c8>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	f7f2 fa83 	bl	8000648 <__aeabi_dmul>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4630      	mov	r0, r6
 800e148:	4639      	mov	r1, r7
 800e14a:	f7f2 f8c7 	bl	80002dc <__adddf3>
 800e14e:	4606      	mov	r6, r0
 800e150:	460f      	mov	r7, r1
 800e152:	f7f2 fd29 	bl	8000ba8 <__aeabi_d2iz>
 800e156:	2200      	movs	r2, #0
 800e158:	9000      	str	r0, [sp, #0]
 800e15a:	2300      	movs	r3, #0
 800e15c:	4630      	mov	r0, r6
 800e15e:	4639      	mov	r1, r7
 800e160:	f7f2 fce4 	bl	8000b2c <__aeabi_dcmplt>
 800e164:	b150      	cbz	r0, 800e17c <_dtoa_r+0x184>
 800e166:	9800      	ldr	r0, [sp, #0]
 800e168:	f7f2 fa04 	bl	8000574 <__aeabi_i2d>
 800e16c:	4632      	mov	r2, r6
 800e16e:	463b      	mov	r3, r7
 800e170:	f7f2 fcd2 	bl	8000b18 <__aeabi_dcmpeq>
 800e174:	b910      	cbnz	r0, 800e17c <_dtoa_r+0x184>
 800e176:	9b00      	ldr	r3, [sp, #0]
 800e178:	3b01      	subs	r3, #1
 800e17a:	9300      	str	r3, [sp, #0]
 800e17c:	9b00      	ldr	r3, [sp, #0]
 800e17e:	2b16      	cmp	r3, #22
 800e180:	d85a      	bhi.n	800e238 <_dtoa_r+0x240>
 800e182:	9a00      	ldr	r2, [sp, #0]
 800e184:	4b57      	ldr	r3, [pc, #348]	; (800e2e4 <_dtoa_r+0x2ec>)
 800e186:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	ec51 0b19 	vmov	r0, r1, d9
 800e192:	f7f2 fccb 	bl	8000b2c <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	d050      	beq.n	800e23c <_dtoa_r+0x244>
 800e19a:	9b00      	ldr	r3, [sp, #0]
 800e19c:	3b01      	subs	r3, #1
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1a6:	1b5d      	subs	r5, r3, r5
 800e1a8:	1e6b      	subs	r3, r5, #1
 800e1aa:	9305      	str	r3, [sp, #20]
 800e1ac:	bf45      	ittet	mi
 800e1ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800e1b2:	9304      	strmi	r3, [sp, #16]
 800e1b4:	2300      	movpl	r3, #0
 800e1b6:	2300      	movmi	r3, #0
 800e1b8:	bf4c      	ite	mi
 800e1ba:	9305      	strmi	r3, [sp, #20]
 800e1bc:	9304      	strpl	r3, [sp, #16]
 800e1be:	9b00      	ldr	r3, [sp, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	db3d      	blt.n	800e240 <_dtoa_r+0x248>
 800e1c4:	9b05      	ldr	r3, [sp, #20]
 800e1c6:	9a00      	ldr	r2, [sp, #0]
 800e1c8:	920a      	str	r2, [sp, #40]	; 0x28
 800e1ca:	4413      	add	r3, r2
 800e1cc:	9305      	str	r3, [sp, #20]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9307      	str	r3, [sp, #28]
 800e1d2:	9b06      	ldr	r3, [sp, #24]
 800e1d4:	2b09      	cmp	r3, #9
 800e1d6:	f200 8089 	bhi.w	800e2ec <_dtoa_r+0x2f4>
 800e1da:	2b05      	cmp	r3, #5
 800e1dc:	bfc4      	itt	gt
 800e1de:	3b04      	subgt	r3, #4
 800e1e0:	9306      	strgt	r3, [sp, #24]
 800e1e2:	9b06      	ldr	r3, [sp, #24]
 800e1e4:	f1a3 0302 	sub.w	r3, r3, #2
 800e1e8:	bfcc      	ite	gt
 800e1ea:	2500      	movgt	r5, #0
 800e1ec:	2501      	movle	r5, #1
 800e1ee:	2b03      	cmp	r3, #3
 800e1f0:	f200 8087 	bhi.w	800e302 <_dtoa_r+0x30a>
 800e1f4:	e8df f003 	tbb	[pc, r3]
 800e1f8:	59383a2d 	.word	0x59383a2d
 800e1fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e200:	441d      	add	r5, r3
 800e202:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e206:	2b20      	cmp	r3, #32
 800e208:	bfc1      	itttt	gt
 800e20a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e20e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e212:	fa0b f303 	lslgt.w	r3, fp, r3
 800e216:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e21a:	bfda      	itte	le
 800e21c:	f1c3 0320 	rsble	r3, r3, #32
 800e220:	fa06 f003 	lslle.w	r0, r6, r3
 800e224:	4318      	orrgt	r0, r3
 800e226:	f7f2 f995 	bl	8000554 <__aeabi_ui2d>
 800e22a:	2301      	movs	r3, #1
 800e22c:	4606      	mov	r6, r0
 800e22e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e232:	3d01      	subs	r5, #1
 800e234:	930e      	str	r3, [sp, #56]	; 0x38
 800e236:	e76a      	b.n	800e10e <_dtoa_r+0x116>
 800e238:	2301      	movs	r3, #1
 800e23a:	e7b2      	b.n	800e1a2 <_dtoa_r+0x1aa>
 800e23c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e23e:	e7b1      	b.n	800e1a4 <_dtoa_r+0x1ac>
 800e240:	9b04      	ldr	r3, [sp, #16]
 800e242:	9a00      	ldr	r2, [sp, #0]
 800e244:	1a9b      	subs	r3, r3, r2
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	4253      	negs	r3, r2
 800e24a:	9307      	str	r3, [sp, #28]
 800e24c:	2300      	movs	r3, #0
 800e24e:	930a      	str	r3, [sp, #40]	; 0x28
 800e250:	e7bf      	b.n	800e1d2 <_dtoa_r+0x1da>
 800e252:	2300      	movs	r3, #0
 800e254:	9308      	str	r3, [sp, #32]
 800e256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e258:	2b00      	cmp	r3, #0
 800e25a:	dc55      	bgt.n	800e308 <_dtoa_r+0x310>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e262:	461a      	mov	r2, r3
 800e264:	9209      	str	r2, [sp, #36]	; 0x24
 800e266:	e00c      	b.n	800e282 <_dtoa_r+0x28a>
 800e268:	2301      	movs	r3, #1
 800e26a:	e7f3      	b.n	800e254 <_dtoa_r+0x25c>
 800e26c:	2300      	movs	r3, #0
 800e26e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e270:	9308      	str	r3, [sp, #32]
 800e272:	9b00      	ldr	r3, [sp, #0]
 800e274:	4413      	add	r3, r2
 800e276:	9302      	str	r3, [sp, #8]
 800e278:	3301      	adds	r3, #1
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	9303      	str	r3, [sp, #12]
 800e27e:	bfb8      	it	lt
 800e280:	2301      	movlt	r3, #1
 800e282:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e284:	2200      	movs	r2, #0
 800e286:	6042      	str	r2, [r0, #4]
 800e288:	2204      	movs	r2, #4
 800e28a:	f102 0614 	add.w	r6, r2, #20
 800e28e:	429e      	cmp	r6, r3
 800e290:	6841      	ldr	r1, [r0, #4]
 800e292:	d93d      	bls.n	800e310 <_dtoa_r+0x318>
 800e294:	4620      	mov	r0, r4
 800e296:	f001 f923 	bl	800f4e0 <_Balloc>
 800e29a:	9001      	str	r0, [sp, #4]
 800e29c:	2800      	cmp	r0, #0
 800e29e:	d13b      	bne.n	800e318 <_dtoa_r+0x320>
 800e2a0:	4b11      	ldr	r3, [pc, #68]	; (800e2e8 <_dtoa_r+0x2f0>)
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e2a8:	e6c0      	b.n	800e02c <_dtoa_r+0x34>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	e7df      	b.n	800e26e <_dtoa_r+0x276>
 800e2ae:	bf00      	nop
 800e2b0:	636f4361 	.word	0x636f4361
 800e2b4:	3fd287a7 	.word	0x3fd287a7
 800e2b8:	8b60c8b3 	.word	0x8b60c8b3
 800e2bc:	3fc68a28 	.word	0x3fc68a28
 800e2c0:	509f79fb 	.word	0x509f79fb
 800e2c4:	3fd34413 	.word	0x3fd34413
 800e2c8:	08012d36 	.word	0x08012d36
 800e2cc:	08012d4d 	.word	0x08012d4d
 800e2d0:	7ff00000 	.word	0x7ff00000
 800e2d4:	08012d32 	.word	0x08012d32
 800e2d8:	08012d29 	.word	0x08012d29
 800e2dc:	08012bad 	.word	0x08012bad
 800e2e0:	3ff80000 	.word	0x3ff80000
 800e2e4:	08012f20 	.word	0x08012f20
 800e2e8:	08012da8 	.word	0x08012da8
 800e2ec:	2501      	movs	r5, #1
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	9306      	str	r3, [sp, #24]
 800e2f2:	9508      	str	r5, [sp, #32]
 800e2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	2312      	movs	r3, #18
 800e300:	e7b0      	b.n	800e264 <_dtoa_r+0x26c>
 800e302:	2301      	movs	r3, #1
 800e304:	9308      	str	r3, [sp, #32]
 800e306:	e7f5      	b.n	800e2f4 <_dtoa_r+0x2fc>
 800e308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e30a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e30e:	e7b8      	b.n	800e282 <_dtoa_r+0x28a>
 800e310:	3101      	adds	r1, #1
 800e312:	6041      	str	r1, [r0, #4]
 800e314:	0052      	lsls	r2, r2, #1
 800e316:	e7b8      	b.n	800e28a <_dtoa_r+0x292>
 800e318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e31a:	9a01      	ldr	r2, [sp, #4]
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	9b03      	ldr	r3, [sp, #12]
 800e320:	2b0e      	cmp	r3, #14
 800e322:	f200 809d 	bhi.w	800e460 <_dtoa_r+0x468>
 800e326:	2d00      	cmp	r5, #0
 800e328:	f000 809a 	beq.w	800e460 <_dtoa_r+0x468>
 800e32c:	9b00      	ldr	r3, [sp, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	dd32      	ble.n	800e398 <_dtoa_r+0x3a0>
 800e332:	4ab7      	ldr	r2, [pc, #732]	; (800e610 <_dtoa_r+0x618>)
 800e334:	f003 030f 	and.w	r3, r3, #15
 800e338:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e33c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e340:	9b00      	ldr	r3, [sp, #0]
 800e342:	05d8      	lsls	r0, r3, #23
 800e344:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e348:	d516      	bpl.n	800e378 <_dtoa_r+0x380>
 800e34a:	4bb2      	ldr	r3, [pc, #712]	; (800e614 <_dtoa_r+0x61c>)
 800e34c:	ec51 0b19 	vmov	r0, r1, d9
 800e350:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e354:	f7f2 faa2 	bl	800089c <__aeabi_ddiv>
 800e358:	f007 070f 	and.w	r7, r7, #15
 800e35c:	4682      	mov	sl, r0
 800e35e:	468b      	mov	fp, r1
 800e360:	2503      	movs	r5, #3
 800e362:	4eac      	ldr	r6, [pc, #688]	; (800e614 <_dtoa_r+0x61c>)
 800e364:	b957      	cbnz	r7, 800e37c <_dtoa_r+0x384>
 800e366:	4642      	mov	r2, r8
 800e368:	464b      	mov	r3, r9
 800e36a:	4650      	mov	r0, sl
 800e36c:	4659      	mov	r1, fp
 800e36e:	f7f2 fa95 	bl	800089c <__aeabi_ddiv>
 800e372:	4682      	mov	sl, r0
 800e374:	468b      	mov	fp, r1
 800e376:	e028      	b.n	800e3ca <_dtoa_r+0x3d2>
 800e378:	2502      	movs	r5, #2
 800e37a:	e7f2      	b.n	800e362 <_dtoa_r+0x36a>
 800e37c:	07f9      	lsls	r1, r7, #31
 800e37e:	d508      	bpl.n	800e392 <_dtoa_r+0x39a>
 800e380:	4640      	mov	r0, r8
 800e382:	4649      	mov	r1, r9
 800e384:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e388:	f7f2 f95e 	bl	8000648 <__aeabi_dmul>
 800e38c:	3501      	adds	r5, #1
 800e38e:	4680      	mov	r8, r0
 800e390:	4689      	mov	r9, r1
 800e392:	107f      	asrs	r7, r7, #1
 800e394:	3608      	adds	r6, #8
 800e396:	e7e5      	b.n	800e364 <_dtoa_r+0x36c>
 800e398:	f000 809b 	beq.w	800e4d2 <_dtoa_r+0x4da>
 800e39c:	9b00      	ldr	r3, [sp, #0]
 800e39e:	4f9d      	ldr	r7, [pc, #628]	; (800e614 <_dtoa_r+0x61c>)
 800e3a0:	425e      	negs	r6, r3
 800e3a2:	4b9b      	ldr	r3, [pc, #620]	; (800e610 <_dtoa_r+0x618>)
 800e3a4:	f006 020f 	and.w	r2, r6, #15
 800e3a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b0:	ec51 0b19 	vmov	r0, r1, d9
 800e3b4:	f7f2 f948 	bl	8000648 <__aeabi_dmul>
 800e3b8:	1136      	asrs	r6, r6, #4
 800e3ba:	4682      	mov	sl, r0
 800e3bc:	468b      	mov	fp, r1
 800e3be:	2300      	movs	r3, #0
 800e3c0:	2502      	movs	r5, #2
 800e3c2:	2e00      	cmp	r6, #0
 800e3c4:	d17a      	bne.n	800e4bc <_dtoa_r+0x4c4>
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1d3      	bne.n	800e372 <_dtoa_r+0x37a>
 800e3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 8082 	beq.w	800e4d6 <_dtoa_r+0x4de>
 800e3d2:	4b91      	ldr	r3, [pc, #580]	; (800e618 <_dtoa_r+0x620>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	4659      	mov	r1, fp
 800e3da:	f7f2 fba7 	bl	8000b2c <__aeabi_dcmplt>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d079      	beq.n	800e4d6 <_dtoa_r+0x4de>
 800e3e2:	9b03      	ldr	r3, [sp, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d076      	beq.n	800e4d6 <_dtoa_r+0x4de>
 800e3e8:	9b02      	ldr	r3, [sp, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	dd36      	ble.n	800e45c <_dtoa_r+0x464>
 800e3ee:	9b00      	ldr	r3, [sp, #0]
 800e3f0:	4650      	mov	r0, sl
 800e3f2:	4659      	mov	r1, fp
 800e3f4:	1e5f      	subs	r7, r3, #1
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	4b88      	ldr	r3, [pc, #544]	; (800e61c <_dtoa_r+0x624>)
 800e3fa:	f7f2 f925 	bl	8000648 <__aeabi_dmul>
 800e3fe:	9e02      	ldr	r6, [sp, #8]
 800e400:	4682      	mov	sl, r0
 800e402:	468b      	mov	fp, r1
 800e404:	3501      	adds	r5, #1
 800e406:	4628      	mov	r0, r5
 800e408:	f7f2 f8b4 	bl	8000574 <__aeabi_i2d>
 800e40c:	4652      	mov	r2, sl
 800e40e:	465b      	mov	r3, fp
 800e410:	f7f2 f91a 	bl	8000648 <__aeabi_dmul>
 800e414:	4b82      	ldr	r3, [pc, #520]	; (800e620 <_dtoa_r+0x628>)
 800e416:	2200      	movs	r2, #0
 800e418:	f7f1 ff60 	bl	80002dc <__adddf3>
 800e41c:	46d0      	mov	r8, sl
 800e41e:	46d9      	mov	r9, fp
 800e420:	4682      	mov	sl, r0
 800e422:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e426:	2e00      	cmp	r6, #0
 800e428:	d158      	bne.n	800e4dc <_dtoa_r+0x4e4>
 800e42a:	4b7e      	ldr	r3, [pc, #504]	; (800e624 <_dtoa_r+0x62c>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	4640      	mov	r0, r8
 800e430:	4649      	mov	r1, r9
 800e432:	f7f1 ff51 	bl	80002d8 <__aeabi_dsub>
 800e436:	4652      	mov	r2, sl
 800e438:	465b      	mov	r3, fp
 800e43a:	4680      	mov	r8, r0
 800e43c:	4689      	mov	r9, r1
 800e43e:	f7f2 fb93 	bl	8000b68 <__aeabi_dcmpgt>
 800e442:	2800      	cmp	r0, #0
 800e444:	f040 8295 	bne.w	800e972 <_dtoa_r+0x97a>
 800e448:	4652      	mov	r2, sl
 800e44a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e44e:	4640      	mov	r0, r8
 800e450:	4649      	mov	r1, r9
 800e452:	f7f2 fb6b 	bl	8000b2c <__aeabi_dcmplt>
 800e456:	2800      	cmp	r0, #0
 800e458:	f040 8289 	bne.w	800e96e <_dtoa_r+0x976>
 800e45c:	ec5b ab19 	vmov	sl, fp, d9
 800e460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e462:	2b00      	cmp	r3, #0
 800e464:	f2c0 8148 	blt.w	800e6f8 <_dtoa_r+0x700>
 800e468:	9a00      	ldr	r2, [sp, #0]
 800e46a:	2a0e      	cmp	r2, #14
 800e46c:	f300 8144 	bgt.w	800e6f8 <_dtoa_r+0x700>
 800e470:	4b67      	ldr	r3, [pc, #412]	; (800e610 <_dtoa_r+0x618>)
 800e472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e476:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f280 80d5 	bge.w	800e62c <_dtoa_r+0x634>
 800e482:	9b03      	ldr	r3, [sp, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	f300 80d1 	bgt.w	800e62c <_dtoa_r+0x634>
 800e48a:	f040 826f 	bne.w	800e96c <_dtoa_r+0x974>
 800e48e:	4b65      	ldr	r3, [pc, #404]	; (800e624 <_dtoa_r+0x62c>)
 800e490:	2200      	movs	r2, #0
 800e492:	4640      	mov	r0, r8
 800e494:	4649      	mov	r1, r9
 800e496:	f7f2 f8d7 	bl	8000648 <__aeabi_dmul>
 800e49a:	4652      	mov	r2, sl
 800e49c:	465b      	mov	r3, fp
 800e49e:	f7f2 fb59 	bl	8000b54 <__aeabi_dcmpge>
 800e4a2:	9e03      	ldr	r6, [sp, #12]
 800e4a4:	4637      	mov	r7, r6
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f040 8245 	bne.w	800e936 <_dtoa_r+0x93e>
 800e4ac:	9d01      	ldr	r5, [sp, #4]
 800e4ae:	2331      	movs	r3, #49	; 0x31
 800e4b0:	f805 3b01 	strb.w	r3, [r5], #1
 800e4b4:	9b00      	ldr	r3, [sp, #0]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	e240      	b.n	800e93e <_dtoa_r+0x946>
 800e4bc:	07f2      	lsls	r2, r6, #31
 800e4be:	d505      	bpl.n	800e4cc <_dtoa_r+0x4d4>
 800e4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4c4:	f7f2 f8c0 	bl	8000648 <__aeabi_dmul>
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	1076      	asrs	r6, r6, #1
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	e777      	b.n	800e3c2 <_dtoa_r+0x3ca>
 800e4d2:	2502      	movs	r5, #2
 800e4d4:	e779      	b.n	800e3ca <_dtoa_r+0x3d2>
 800e4d6:	9f00      	ldr	r7, [sp, #0]
 800e4d8:	9e03      	ldr	r6, [sp, #12]
 800e4da:	e794      	b.n	800e406 <_dtoa_r+0x40e>
 800e4dc:	9901      	ldr	r1, [sp, #4]
 800e4de:	4b4c      	ldr	r3, [pc, #304]	; (800e610 <_dtoa_r+0x618>)
 800e4e0:	4431      	add	r1, r6
 800e4e2:	910d      	str	r1, [sp, #52]	; 0x34
 800e4e4:	9908      	ldr	r1, [sp, #32]
 800e4e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e4ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4ee:	2900      	cmp	r1, #0
 800e4f0:	d043      	beq.n	800e57a <_dtoa_r+0x582>
 800e4f2:	494d      	ldr	r1, [pc, #308]	; (800e628 <_dtoa_r+0x630>)
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	f7f2 f9d1 	bl	800089c <__aeabi_ddiv>
 800e4fa:	4652      	mov	r2, sl
 800e4fc:	465b      	mov	r3, fp
 800e4fe:	f7f1 feeb 	bl	80002d8 <__aeabi_dsub>
 800e502:	9d01      	ldr	r5, [sp, #4]
 800e504:	4682      	mov	sl, r0
 800e506:	468b      	mov	fp, r1
 800e508:	4649      	mov	r1, r9
 800e50a:	4640      	mov	r0, r8
 800e50c:	f7f2 fb4c 	bl	8000ba8 <__aeabi_d2iz>
 800e510:	4606      	mov	r6, r0
 800e512:	f7f2 f82f 	bl	8000574 <__aeabi_i2d>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	4640      	mov	r0, r8
 800e51c:	4649      	mov	r1, r9
 800e51e:	f7f1 fedb 	bl	80002d8 <__aeabi_dsub>
 800e522:	3630      	adds	r6, #48	; 0x30
 800e524:	f805 6b01 	strb.w	r6, [r5], #1
 800e528:	4652      	mov	r2, sl
 800e52a:	465b      	mov	r3, fp
 800e52c:	4680      	mov	r8, r0
 800e52e:	4689      	mov	r9, r1
 800e530:	f7f2 fafc 	bl	8000b2c <__aeabi_dcmplt>
 800e534:	2800      	cmp	r0, #0
 800e536:	d163      	bne.n	800e600 <_dtoa_r+0x608>
 800e538:	4642      	mov	r2, r8
 800e53a:	464b      	mov	r3, r9
 800e53c:	4936      	ldr	r1, [pc, #216]	; (800e618 <_dtoa_r+0x620>)
 800e53e:	2000      	movs	r0, #0
 800e540:	f7f1 feca 	bl	80002d8 <__aeabi_dsub>
 800e544:	4652      	mov	r2, sl
 800e546:	465b      	mov	r3, fp
 800e548:	f7f2 faf0 	bl	8000b2c <__aeabi_dcmplt>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	f040 80b5 	bne.w	800e6bc <_dtoa_r+0x6c4>
 800e552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e554:	429d      	cmp	r5, r3
 800e556:	d081      	beq.n	800e45c <_dtoa_r+0x464>
 800e558:	4b30      	ldr	r3, [pc, #192]	; (800e61c <_dtoa_r+0x624>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	4650      	mov	r0, sl
 800e55e:	4659      	mov	r1, fp
 800e560:	f7f2 f872 	bl	8000648 <__aeabi_dmul>
 800e564:	4b2d      	ldr	r3, [pc, #180]	; (800e61c <_dtoa_r+0x624>)
 800e566:	4682      	mov	sl, r0
 800e568:	468b      	mov	fp, r1
 800e56a:	4640      	mov	r0, r8
 800e56c:	4649      	mov	r1, r9
 800e56e:	2200      	movs	r2, #0
 800e570:	f7f2 f86a 	bl	8000648 <__aeabi_dmul>
 800e574:	4680      	mov	r8, r0
 800e576:	4689      	mov	r9, r1
 800e578:	e7c6      	b.n	800e508 <_dtoa_r+0x510>
 800e57a:	4650      	mov	r0, sl
 800e57c:	4659      	mov	r1, fp
 800e57e:	f7f2 f863 	bl	8000648 <__aeabi_dmul>
 800e582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e584:	9d01      	ldr	r5, [sp, #4]
 800e586:	930f      	str	r3, [sp, #60]	; 0x3c
 800e588:	4682      	mov	sl, r0
 800e58a:	468b      	mov	fp, r1
 800e58c:	4649      	mov	r1, r9
 800e58e:	4640      	mov	r0, r8
 800e590:	f7f2 fb0a 	bl	8000ba8 <__aeabi_d2iz>
 800e594:	4606      	mov	r6, r0
 800e596:	f7f1 ffed 	bl	8000574 <__aeabi_i2d>
 800e59a:	3630      	adds	r6, #48	; 0x30
 800e59c:	4602      	mov	r2, r0
 800e59e:	460b      	mov	r3, r1
 800e5a0:	4640      	mov	r0, r8
 800e5a2:	4649      	mov	r1, r9
 800e5a4:	f7f1 fe98 	bl	80002d8 <__aeabi_dsub>
 800e5a8:	f805 6b01 	strb.w	r6, [r5], #1
 800e5ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5ae:	429d      	cmp	r5, r3
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	4689      	mov	r9, r1
 800e5b4:	f04f 0200 	mov.w	r2, #0
 800e5b8:	d124      	bne.n	800e604 <_dtoa_r+0x60c>
 800e5ba:	4b1b      	ldr	r3, [pc, #108]	; (800e628 <_dtoa_r+0x630>)
 800e5bc:	4650      	mov	r0, sl
 800e5be:	4659      	mov	r1, fp
 800e5c0:	f7f1 fe8c 	bl	80002dc <__adddf3>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	4640      	mov	r0, r8
 800e5ca:	4649      	mov	r1, r9
 800e5cc:	f7f2 facc 	bl	8000b68 <__aeabi_dcmpgt>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d173      	bne.n	800e6bc <_dtoa_r+0x6c4>
 800e5d4:	4652      	mov	r2, sl
 800e5d6:	465b      	mov	r3, fp
 800e5d8:	4913      	ldr	r1, [pc, #76]	; (800e628 <_dtoa_r+0x630>)
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f7f1 fe7c 	bl	80002d8 <__aeabi_dsub>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4640      	mov	r0, r8
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	f7f2 faa0 	bl	8000b2c <__aeabi_dcmplt>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	f43f af35 	beq.w	800e45c <_dtoa_r+0x464>
 800e5f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e5f4:	1e6b      	subs	r3, r5, #1
 800e5f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e5fc:	2b30      	cmp	r3, #48	; 0x30
 800e5fe:	d0f8      	beq.n	800e5f2 <_dtoa_r+0x5fa>
 800e600:	9700      	str	r7, [sp, #0]
 800e602:	e049      	b.n	800e698 <_dtoa_r+0x6a0>
 800e604:	4b05      	ldr	r3, [pc, #20]	; (800e61c <_dtoa_r+0x624>)
 800e606:	f7f2 f81f 	bl	8000648 <__aeabi_dmul>
 800e60a:	4680      	mov	r8, r0
 800e60c:	4689      	mov	r9, r1
 800e60e:	e7bd      	b.n	800e58c <_dtoa_r+0x594>
 800e610:	08012f20 	.word	0x08012f20
 800e614:	08012ef8 	.word	0x08012ef8
 800e618:	3ff00000 	.word	0x3ff00000
 800e61c:	40240000 	.word	0x40240000
 800e620:	401c0000 	.word	0x401c0000
 800e624:	40140000 	.word	0x40140000
 800e628:	3fe00000 	.word	0x3fe00000
 800e62c:	9d01      	ldr	r5, [sp, #4]
 800e62e:	4656      	mov	r6, sl
 800e630:	465f      	mov	r7, fp
 800e632:	4642      	mov	r2, r8
 800e634:	464b      	mov	r3, r9
 800e636:	4630      	mov	r0, r6
 800e638:	4639      	mov	r1, r7
 800e63a:	f7f2 f92f 	bl	800089c <__aeabi_ddiv>
 800e63e:	f7f2 fab3 	bl	8000ba8 <__aeabi_d2iz>
 800e642:	4682      	mov	sl, r0
 800e644:	f7f1 ff96 	bl	8000574 <__aeabi_i2d>
 800e648:	4642      	mov	r2, r8
 800e64a:	464b      	mov	r3, r9
 800e64c:	f7f1 fffc 	bl	8000648 <__aeabi_dmul>
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	4630      	mov	r0, r6
 800e656:	4639      	mov	r1, r7
 800e658:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e65c:	f7f1 fe3c 	bl	80002d8 <__aeabi_dsub>
 800e660:	f805 6b01 	strb.w	r6, [r5], #1
 800e664:	9e01      	ldr	r6, [sp, #4]
 800e666:	9f03      	ldr	r7, [sp, #12]
 800e668:	1bae      	subs	r6, r5, r6
 800e66a:	42b7      	cmp	r7, r6
 800e66c:	4602      	mov	r2, r0
 800e66e:	460b      	mov	r3, r1
 800e670:	d135      	bne.n	800e6de <_dtoa_r+0x6e6>
 800e672:	f7f1 fe33 	bl	80002dc <__adddf3>
 800e676:	4642      	mov	r2, r8
 800e678:	464b      	mov	r3, r9
 800e67a:	4606      	mov	r6, r0
 800e67c:	460f      	mov	r7, r1
 800e67e:	f7f2 fa73 	bl	8000b68 <__aeabi_dcmpgt>
 800e682:	b9d0      	cbnz	r0, 800e6ba <_dtoa_r+0x6c2>
 800e684:	4642      	mov	r2, r8
 800e686:	464b      	mov	r3, r9
 800e688:	4630      	mov	r0, r6
 800e68a:	4639      	mov	r1, r7
 800e68c:	f7f2 fa44 	bl	8000b18 <__aeabi_dcmpeq>
 800e690:	b110      	cbz	r0, 800e698 <_dtoa_r+0x6a0>
 800e692:	f01a 0f01 	tst.w	sl, #1
 800e696:	d110      	bne.n	800e6ba <_dtoa_r+0x6c2>
 800e698:	4620      	mov	r0, r4
 800e69a:	ee18 1a10 	vmov	r1, s16
 800e69e:	f000 ff5f 	bl	800f560 <_Bfree>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	9800      	ldr	r0, [sp, #0]
 800e6a6:	702b      	strb	r3, [r5, #0]
 800e6a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6aa:	3001      	adds	r0, #1
 800e6ac:	6018      	str	r0, [r3, #0]
 800e6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f43f acf1 	beq.w	800e098 <_dtoa_r+0xa0>
 800e6b6:	601d      	str	r5, [r3, #0]
 800e6b8:	e4ee      	b.n	800e098 <_dtoa_r+0xa0>
 800e6ba:	9f00      	ldr	r7, [sp, #0]
 800e6bc:	462b      	mov	r3, r5
 800e6be:	461d      	mov	r5, r3
 800e6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6c4:	2a39      	cmp	r2, #57	; 0x39
 800e6c6:	d106      	bne.n	800e6d6 <_dtoa_r+0x6de>
 800e6c8:	9a01      	ldr	r2, [sp, #4]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d1f7      	bne.n	800e6be <_dtoa_r+0x6c6>
 800e6ce:	9901      	ldr	r1, [sp, #4]
 800e6d0:	2230      	movs	r2, #48	; 0x30
 800e6d2:	3701      	adds	r7, #1
 800e6d4:	700a      	strb	r2, [r1, #0]
 800e6d6:	781a      	ldrb	r2, [r3, #0]
 800e6d8:	3201      	adds	r2, #1
 800e6da:	701a      	strb	r2, [r3, #0]
 800e6dc:	e790      	b.n	800e600 <_dtoa_r+0x608>
 800e6de:	4ba6      	ldr	r3, [pc, #664]	; (800e978 <_dtoa_r+0x980>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f7f1 ffb1 	bl	8000648 <__aeabi_dmul>
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4606      	mov	r6, r0
 800e6ec:	460f      	mov	r7, r1
 800e6ee:	f7f2 fa13 	bl	8000b18 <__aeabi_dcmpeq>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	d09d      	beq.n	800e632 <_dtoa_r+0x63a>
 800e6f6:	e7cf      	b.n	800e698 <_dtoa_r+0x6a0>
 800e6f8:	9a08      	ldr	r2, [sp, #32]
 800e6fa:	2a00      	cmp	r2, #0
 800e6fc:	f000 80d7 	beq.w	800e8ae <_dtoa_r+0x8b6>
 800e700:	9a06      	ldr	r2, [sp, #24]
 800e702:	2a01      	cmp	r2, #1
 800e704:	f300 80ba 	bgt.w	800e87c <_dtoa_r+0x884>
 800e708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e70a:	2a00      	cmp	r2, #0
 800e70c:	f000 80b2 	beq.w	800e874 <_dtoa_r+0x87c>
 800e710:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e714:	9e07      	ldr	r6, [sp, #28]
 800e716:	9d04      	ldr	r5, [sp, #16]
 800e718:	9a04      	ldr	r2, [sp, #16]
 800e71a:	441a      	add	r2, r3
 800e71c:	9204      	str	r2, [sp, #16]
 800e71e:	9a05      	ldr	r2, [sp, #20]
 800e720:	2101      	movs	r1, #1
 800e722:	441a      	add	r2, r3
 800e724:	4620      	mov	r0, r4
 800e726:	9205      	str	r2, [sp, #20]
 800e728:	f001 f81c 	bl	800f764 <__i2b>
 800e72c:	4607      	mov	r7, r0
 800e72e:	2d00      	cmp	r5, #0
 800e730:	dd0c      	ble.n	800e74c <_dtoa_r+0x754>
 800e732:	9b05      	ldr	r3, [sp, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	dd09      	ble.n	800e74c <_dtoa_r+0x754>
 800e738:	42ab      	cmp	r3, r5
 800e73a:	9a04      	ldr	r2, [sp, #16]
 800e73c:	bfa8      	it	ge
 800e73e:	462b      	movge	r3, r5
 800e740:	1ad2      	subs	r2, r2, r3
 800e742:	9204      	str	r2, [sp, #16]
 800e744:	9a05      	ldr	r2, [sp, #20]
 800e746:	1aed      	subs	r5, r5, r3
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	9305      	str	r3, [sp, #20]
 800e74c:	9b07      	ldr	r3, [sp, #28]
 800e74e:	b31b      	cbz	r3, 800e798 <_dtoa_r+0x7a0>
 800e750:	9b08      	ldr	r3, [sp, #32]
 800e752:	2b00      	cmp	r3, #0
 800e754:	f000 80af 	beq.w	800e8b6 <_dtoa_r+0x8be>
 800e758:	2e00      	cmp	r6, #0
 800e75a:	dd13      	ble.n	800e784 <_dtoa_r+0x78c>
 800e75c:	4639      	mov	r1, r7
 800e75e:	4632      	mov	r2, r6
 800e760:	4620      	mov	r0, r4
 800e762:	f001 f8bf 	bl	800f8e4 <__pow5mult>
 800e766:	ee18 2a10 	vmov	r2, s16
 800e76a:	4601      	mov	r1, r0
 800e76c:	4607      	mov	r7, r0
 800e76e:	4620      	mov	r0, r4
 800e770:	f001 f80e 	bl	800f790 <__multiply>
 800e774:	ee18 1a10 	vmov	r1, s16
 800e778:	4680      	mov	r8, r0
 800e77a:	4620      	mov	r0, r4
 800e77c:	f000 fef0 	bl	800f560 <_Bfree>
 800e780:	ee08 8a10 	vmov	s16, r8
 800e784:	9b07      	ldr	r3, [sp, #28]
 800e786:	1b9a      	subs	r2, r3, r6
 800e788:	d006      	beq.n	800e798 <_dtoa_r+0x7a0>
 800e78a:	ee18 1a10 	vmov	r1, s16
 800e78e:	4620      	mov	r0, r4
 800e790:	f001 f8a8 	bl	800f8e4 <__pow5mult>
 800e794:	ee08 0a10 	vmov	s16, r0
 800e798:	2101      	movs	r1, #1
 800e79a:	4620      	mov	r0, r4
 800e79c:	f000 ffe2 	bl	800f764 <__i2b>
 800e7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	f340 8088 	ble.w	800e8ba <_dtoa_r+0x8c2>
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	4601      	mov	r1, r0
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f001 f898 	bl	800f8e4 <__pow5mult>
 800e7b4:	9b06      	ldr	r3, [sp, #24]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	f340 8081 	ble.w	800e8c0 <_dtoa_r+0x8c8>
 800e7be:	f04f 0800 	mov.w	r8, #0
 800e7c2:	6933      	ldr	r3, [r6, #16]
 800e7c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e7c8:	6918      	ldr	r0, [r3, #16]
 800e7ca:	f000 ff7b 	bl	800f6c4 <__hi0bits>
 800e7ce:	f1c0 0020 	rsb	r0, r0, #32
 800e7d2:	9b05      	ldr	r3, [sp, #20]
 800e7d4:	4418      	add	r0, r3
 800e7d6:	f010 001f 	ands.w	r0, r0, #31
 800e7da:	f000 8092 	beq.w	800e902 <_dtoa_r+0x90a>
 800e7de:	f1c0 0320 	rsb	r3, r0, #32
 800e7e2:	2b04      	cmp	r3, #4
 800e7e4:	f340 808a 	ble.w	800e8fc <_dtoa_r+0x904>
 800e7e8:	f1c0 001c 	rsb	r0, r0, #28
 800e7ec:	9b04      	ldr	r3, [sp, #16]
 800e7ee:	4403      	add	r3, r0
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	9b05      	ldr	r3, [sp, #20]
 800e7f4:	4403      	add	r3, r0
 800e7f6:	4405      	add	r5, r0
 800e7f8:	9305      	str	r3, [sp, #20]
 800e7fa:	9b04      	ldr	r3, [sp, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dd07      	ble.n	800e810 <_dtoa_r+0x818>
 800e800:	ee18 1a10 	vmov	r1, s16
 800e804:	461a      	mov	r2, r3
 800e806:	4620      	mov	r0, r4
 800e808:	f001 f8c6 	bl	800f998 <__lshift>
 800e80c:	ee08 0a10 	vmov	s16, r0
 800e810:	9b05      	ldr	r3, [sp, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	dd05      	ble.n	800e822 <_dtoa_r+0x82a>
 800e816:	4631      	mov	r1, r6
 800e818:	461a      	mov	r2, r3
 800e81a:	4620      	mov	r0, r4
 800e81c:	f001 f8bc 	bl	800f998 <__lshift>
 800e820:	4606      	mov	r6, r0
 800e822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e824:	2b00      	cmp	r3, #0
 800e826:	d06e      	beq.n	800e906 <_dtoa_r+0x90e>
 800e828:	ee18 0a10 	vmov	r0, s16
 800e82c:	4631      	mov	r1, r6
 800e82e:	f001 f923 	bl	800fa78 <__mcmp>
 800e832:	2800      	cmp	r0, #0
 800e834:	da67      	bge.n	800e906 <_dtoa_r+0x90e>
 800e836:	9b00      	ldr	r3, [sp, #0]
 800e838:	3b01      	subs	r3, #1
 800e83a:	ee18 1a10 	vmov	r1, s16
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	220a      	movs	r2, #10
 800e842:	2300      	movs	r3, #0
 800e844:	4620      	mov	r0, r4
 800e846:	f000 fead 	bl	800f5a4 <__multadd>
 800e84a:	9b08      	ldr	r3, [sp, #32]
 800e84c:	ee08 0a10 	vmov	s16, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	f000 81b1 	beq.w	800ebb8 <_dtoa_r+0xbc0>
 800e856:	2300      	movs	r3, #0
 800e858:	4639      	mov	r1, r7
 800e85a:	220a      	movs	r2, #10
 800e85c:	4620      	mov	r0, r4
 800e85e:	f000 fea1 	bl	800f5a4 <__multadd>
 800e862:	9b02      	ldr	r3, [sp, #8]
 800e864:	2b00      	cmp	r3, #0
 800e866:	4607      	mov	r7, r0
 800e868:	f300 808e 	bgt.w	800e988 <_dtoa_r+0x990>
 800e86c:	9b06      	ldr	r3, [sp, #24]
 800e86e:	2b02      	cmp	r3, #2
 800e870:	dc51      	bgt.n	800e916 <_dtoa_r+0x91e>
 800e872:	e089      	b.n	800e988 <_dtoa_r+0x990>
 800e874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e87a:	e74b      	b.n	800e714 <_dtoa_r+0x71c>
 800e87c:	9b03      	ldr	r3, [sp, #12]
 800e87e:	1e5e      	subs	r6, r3, #1
 800e880:	9b07      	ldr	r3, [sp, #28]
 800e882:	42b3      	cmp	r3, r6
 800e884:	bfbf      	itttt	lt
 800e886:	9b07      	ldrlt	r3, [sp, #28]
 800e888:	9607      	strlt	r6, [sp, #28]
 800e88a:	1af2      	sublt	r2, r6, r3
 800e88c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e88e:	bfb6      	itet	lt
 800e890:	189b      	addlt	r3, r3, r2
 800e892:	1b9e      	subge	r6, r3, r6
 800e894:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e896:	9b03      	ldr	r3, [sp, #12]
 800e898:	bfb8      	it	lt
 800e89a:	2600      	movlt	r6, #0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	bfb7      	itett	lt
 800e8a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e8a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e8a8:	1a9d      	sublt	r5, r3, r2
 800e8aa:	2300      	movlt	r3, #0
 800e8ac:	e734      	b.n	800e718 <_dtoa_r+0x720>
 800e8ae:	9e07      	ldr	r6, [sp, #28]
 800e8b0:	9d04      	ldr	r5, [sp, #16]
 800e8b2:	9f08      	ldr	r7, [sp, #32]
 800e8b4:	e73b      	b.n	800e72e <_dtoa_r+0x736>
 800e8b6:	9a07      	ldr	r2, [sp, #28]
 800e8b8:	e767      	b.n	800e78a <_dtoa_r+0x792>
 800e8ba:	9b06      	ldr	r3, [sp, #24]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	dc18      	bgt.n	800e8f2 <_dtoa_r+0x8fa>
 800e8c0:	f1ba 0f00 	cmp.w	sl, #0
 800e8c4:	d115      	bne.n	800e8f2 <_dtoa_r+0x8fa>
 800e8c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8ca:	b993      	cbnz	r3, 800e8f2 <_dtoa_r+0x8fa>
 800e8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8d0:	0d1b      	lsrs	r3, r3, #20
 800e8d2:	051b      	lsls	r3, r3, #20
 800e8d4:	b183      	cbz	r3, 800e8f8 <_dtoa_r+0x900>
 800e8d6:	9b04      	ldr	r3, [sp, #16]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	9304      	str	r3, [sp, #16]
 800e8dc:	9b05      	ldr	r3, [sp, #20]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	9305      	str	r3, [sp, #20]
 800e8e2:	f04f 0801 	mov.w	r8, #1
 800e8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f47f af6a 	bne.w	800e7c2 <_dtoa_r+0x7ca>
 800e8ee:	2001      	movs	r0, #1
 800e8f0:	e76f      	b.n	800e7d2 <_dtoa_r+0x7da>
 800e8f2:	f04f 0800 	mov.w	r8, #0
 800e8f6:	e7f6      	b.n	800e8e6 <_dtoa_r+0x8ee>
 800e8f8:	4698      	mov	r8, r3
 800e8fa:	e7f4      	b.n	800e8e6 <_dtoa_r+0x8ee>
 800e8fc:	f43f af7d 	beq.w	800e7fa <_dtoa_r+0x802>
 800e900:	4618      	mov	r0, r3
 800e902:	301c      	adds	r0, #28
 800e904:	e772      	b.n	800e7ec <_dtoa_r+0x7f4>
 800e906:	9b03      	ldr	r3, [sp, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	dc37      	bgt.n	800e97c <_dtoa_r+0x984>
 800e90c:	9b06      	ldr	r3, [sp, #24]
 800e90e:	2b02      	cmp	r3, #2
 800e910:	dd34      	ble.n	800e97c <_dtoa_r+0x984>
 800e912:	9b03      	ldr	r3, [sp, #12]
 800e914:	9302      	str	r3, [sp, #8]
 800e916:	9b02      	ldr	r3, [sp, #8]
 800e918:	b96b      	cbnz	r3, 800e936 <_dtoa_r+0x93e>
 800e91a:	4631      	mov	r1, r6
 800e91c:	2205      	movs	r2, #5
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 fe40 	bl	800f5a4 <__multadd>
 800e924:	4601      	mov	r1, r0
 800e926:	4606      	mov	r6, r0
 800e928:	ee18 0a10 	vmov	r0, s16
 800e92c:	f001 f8a4 	bl	800fa78 <__mcmp>
 800e930:	2800      	cmp	r0, #0
 800e932:	f73f adbb 	bgt.w	800e4ac <_dtoa_r+0x4b4>
 800e936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e938:	9d01      	ldr	r5, [sp, #4]
 800e93a:	43db      	mvns	r3, r3
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	f04f 0800 	mov.w	r8, #0
 800e942:	4631      	mov	r1, r6
 800e944:	4620      	mov	r0, r4
 800e946:	f000 fe0b 	bl	800f560 <_Bfree>
 800e94a:	2f00      	cmp	r7, #0
 800e94c:	f43f aea4 	beq.w	800e698 <_dtoa_r+0x6a0>
 800e950:	f1b8 0f00 	cmp.w	r8, #0
 800e954:	d005      	beq.n	800e962 <_dtoa_r+0x96a>
 800e956:	45b8      	cmp	r8, r7
 800e958:	d003      	beq.n	800e962 <_dtoa_r+0x96a>
 800e95a:	4641      	mov	r1, r8
 800e95c:	4620      	mov	r0, r4
 800e95e:	f000 fdff 	bl	800f560 <_Bfree>
 800e962:	4639      	mov	r1, r7
 800e964:	4620      	mov	r0, r4
 800e966:	f000 fdfb 	bl	800f560 <_Bfree>
 800e96a:	e695      	b.n	800e698 <_dtoa_r+0x6a0>
 800e96c:	2600      	movs	r6, #0
 800e96e:	4637      	mov	r7, r6
 800e970:	e7e1      	b.n	800e936 <_dtoa_r+0x93e>
 800e972:	9700      	str	r7, [sp, #0]
 800e974:	4637      	mov	r7, r6
 800e976:	e599      	b.n	800e4ac <_dtoa_r+0x4b4>
 800e978:	40240000 	.word	0x40240000
 800e97c:	9b08      	ldr	r3, [sp, #32]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 80ca 	beq.w	800eb18 <_dtoa_r+0xb20>
 800e984:	9b03      	ldr	r3, [sp, #12]
 800e986:	9302      	str	r3, [sp, #8]
 800e988:	2d00      	cmp	r5, #0
 800e98a:	dd05      	ble.n	800e998 <_dtoa_r+0x9a0>
 800e98c:	4639      	mov	r1, r7
 800e98e:	462a      	mov	r2, r5
 800e990:	4620      	mov	r0, r4
 800e992:	f001 f801 	bl	800f998 <__lshift>
 800e996:	4607      	mov	r7, r0
 800e998:	f1b8 0f00 	cmp.w	r8, #0
 800e99c:	d05b      	beq.n	800ea56 <_dtoa_r+0xa5e>
 800e99e:	6879      	ldr	r1, [r7, #4]
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f000 fd9d 	bl	800f4e0 <_Balloc>
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	b928      	cbnz	r0, 800e9b6 <_dtoa_r+0x9be>
 800e9aa:	4b87      	ldr	r3, [pc, #540]	; (800ebc8 <_dtoa_r+0xbd0>)
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e9b2:	f7ff bb3b 	b.w	800e02c <_dtoa_r+0x34>
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	3202      	adds	r2, #2
 800e9ba:	0092      	lsls	r2, r2, #2
 800e9bc:	f107 010c 	add.w	r1, r7, #12
 800e9c0:	300c      	adds	r0, #12
 800e9c2:	f7fd fd11 	bl	800c3e8 <memcpy>
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f000 ffe4 	bl	800f998 <__lshift>
 800e9d0:	9b01      	ldr	r3, [sp, #4]
 800e9d2:	f103 0901 	add.w	r9, r3, #1
 800e9d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e9da:	4413      	add	r3, r2
 800e9dc:	9305      	str	r3, [sp, #20]
 800e9de:	f00a 0301 	and.w	r3, sl, #1
 800e9e2:	46b8      	mov	r8, r7
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	4631      	mov	r1, r6
 800e9ea:	ee18 0a10 	vmov	r0, s16
 800e9ee:	f7ff fa77 	bl	800dee0 <quorem>
 800e9f2:	4641      	mov	r1, r8
 800e9f4:	9002      	str	r0, [sp, #8]
 800e9f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e9fa:	ee18 0a10 	vmov	r0, s16
 800e9fe:	f001 f83b 	bl	800fa78 <__mcmp>
 800ea02:	463a      	mov	r2, r7
 800ea04:	9003      	str	r0, [sp, #12]
 800ea06:	4631      	mov	r1, r6
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f001 f851 	bl	800fab0 <__mdiff>
 800ea0e:	68c2      	ldr	r2, [r0, #12]
 800ea10:	f109 3bff 	add.w	fp, r9, #4294967295
 800ea14:	4605      	mov	r5, r0
 800ea16:	bb02      	cbnz	r2, 800ea5a <_dtoa_r+0xa62>
 800ea18:	4601      	mov	r1, r0
 800ea1a:	ee18 0a10 	vmov	r0, s16
 800ea1e:	f001 f82b 	bl	800fa78 <__mcmp>
 800ea22:	4602      	mov	r2, r0
 800ea24:	4629      	mov	r1, r5
 800ea26:	4620      	mov	r0, r4
 800ea28:	9207      	str	r2, [sp, #28]
 800ea2a:	f000 fd99 	bl	800f560 <_Bfree>
 800ea2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ea32:	ea43 0102 	orr.w	r1, r3, r2
 800ea36:	9b04      	ldr	r3, [sp, #16]
 800ea38:	430b      	orrs	r3, r1
 800ea3a:	464d      	mov	r5, r9
 800ea3c:	d10f      	bne.n	800ea5e <_dtoa_r+0xa66>
 800ea3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea42:	d02a      	beq.n	800ea9a <_dtoa_r+0xaa2>
 800ea44:	9b03      	ldr	r3, [sp, #12]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	dd02      	ble.n	800ea50 <_dtoa_r+0xa58>
 800ea4a:	9b02      	ldr	r3, [sp, #8]
 800ea4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ea50:	f88b a000 	strb.w	sl, [fp]
 800ea54:	e775      	b.n	800e942 <_dtoa_r+0x94a>
 800ea56:	4638      	mov	r0, r7
 800ea58:	e7ba      	b.n	800e9d0 <_dtoa_r+0x9d8>
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	e7e2      	b.n	800ea24 <_dtoa_r+0xa2c>
 800ea5e:	9b03      	ldr	r3, [sp, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	db04      	blt.n	800ea6e <_dtoa_r+0xa76>
 800ea64:	9906      	ldr	r1, [sp, #24]
 800ea66:	430b      	orrs	r3, r1
 800ea68:	9904      	ldr	r1, [sp, #16]
 800ea6a:	430b      	orrs	r3, r1
 800ea6c:	d122      	bne.n	800eab4 <_dtoa_r+0xabc>
 800ea6e:	2a00      	cmp	r2, #0
 800ea70:	ddee      	ble.n	800ea50 <_dtoa_r+0xa58>
 800ea72:	ee18 1a10 	vmov	r1, s16
 800ea76:	2201      	movs	r2, #1
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f000 ff8d 	bl	800f998 <__lshift>
 800ea7e:	4631      	mov	r1, r6
 800ea80:	ee08 0a10 	vmov	s16, r0
 800ea84:	f000 fff8 	bl	800fa78 <__mcmp>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	dc03      	bgt.n	800ea94 <_dtoa_r+0xa9c>
 800ea8c:	d1e0      	bne.n	800ea50 <_dtoa_r+0xa58>
 800ea8e:	f01a 0f01 	tst.w	sl, #1
 800ea92:	d0dd      	beq.n	800ea50 <_dtoa_r+0xa58>
 800ea94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea98:	d1d7      	bne.n	800ea4a <_dtoa_r+0xa52>
 800ea9a:	2339      	movs	r3, #57	; 0x39
 800ea9c:	f88b 3000 	strb.w	r3, [fp]
 800eaa0:	462b      	mov	r3, r5
 800eaa2:	461d      	mov	r5, r3
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eaaa:	2a39      	cmp	r2, #57	; 0x39
 800eaac:	d071      	beq.n	800eb92 <_dtoa_r+0xb9a>
 800eaae:	3201      	adds	r2, #1
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	e746      	b.n	800e942 <_dtoa_r+0x94a>
 800eab4:	2a00      	cmp	r2, #0
 800eab6:	dd07      	ble.n	800eac8 <_dtoa_r+0xad0>
 800eab8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eabc:	d0ed      	beq.n	800ea9a <_dtoa_r+0xaa2>
 800eabe:	f10a 0301 	add.w	r3, sl, #1
 800eac2:	f88b 3000 	strb.w	r3, [fp]
 800eac6:	e73c      	b.n	800e942 <_dtoa_r+0x94a>
 800eac8:	9b05      	ldr	r3, [sp, #20]
 800eaca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800eace:	4599      	cmp	r9, r3
 800ead0:	d047      	beq.n	800eb62 <_dtoa_r+0xb6a>
 800ead2:	ee18 1a10 	vmov	r1, s16
 800ead6:	2300      	movs	r3, #0
 800ead8:	220a      	movs	r2, #10
 800eada:	4620      	mov	r0, r4
 800eadc:	f000 fd62 	bl	800f5a4 <__multadd>
 800eae0:	45b8      	cmp	r8, r7
 800eae2:	ee08 0a10 	vmov	s16, r0
 800eae6:	f04f 0300 	mov.w	r3, #0
 800eaea:	f04f 020a 	mov.w	r2, #10
 800eaee:	4641      	mov	r1, r8
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	d106      	bne.n	800eb02 <_dtoa_r+0xb0a>
 800eaf4:	f000 fd56 	bl	800f5a4 <__multadd>
 800eaf8:	4680      	mov	r8, r0
 800eafa:	4607      	mov	r7, r0
 800eafc:	f109 0901 	add.w	r9, r9, #1
 800eb00:	e772      	b.n	800e9e8 <_dtoa_r+0x9f0>
 800eb02:	f000 fd4f 	bl	800f5a4 <__multadd>
 800eb06:	4639      	mov	r1, r7
 800eb08:	4680      	mov	r8, r0
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	220a      	movs	r2, #10
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f000 fd48 	bl	800f5a4 <__multadd>
 800eb14:	4607      	mov	r7, r0
 800eb16:	e7f1      	b.n	800eafc <_dtoa_r+0xb04>
 800eb18:	9b03      	ldr	r3, [sp, #12]
 800eb1a:	9302      	str	r3, [sp, #8]
 800eb1c:	9d01      	ldr	r5, [sp, #4]
 800eb1e:	ee18 0a10 	vmov	r0, s16
 800eb22:	4631      	mov	r1, r6
 800eb24:	f7ff f9dc 	bl	800dee0 <quorem>
 800eb28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb2c:	9b01      	ldr	r3, [sp, #4]
 800eb2e:	f805 ab01 	strb.w	sl, [r5], #1
 800eb32:	1aea      	subs	r2, r5, r3
 800eb34:	9b02      	ldr	r3, [sp, #8]
 800eb36:	4293      	cmp	r3, r2
 800eb38:	dd09      	ble.n	800eb4e <_dtoa_r+0xb56>
 800eb3a:	ee18 1a10 	vmov	r1, s16
 800eb3e:	2300      	movs	r3, #0
 800eb40:	220a      	movs	r2, #10
 800eb42:	4620      	mov	r0, r4
 800eb44:	f000 fd2e 	bl	800f5a4 <__multadd>
 800eb48:	ee08 0a10 	vmov	s16, r0
 800eb4c:	e7e7      	b.n	800eb1e <_dtoa_r+0xb26>
 800eb4e:	9b02      	ldr	r3, [sp, #8]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	bfc8      	it	gt
 800eb54:	461d      	movgt	r5, r3
 800eb56:	9b01      	ldr	r3, [sp, #4]
 800eb58:	bfd8      	it	le
 800eb5a:	2501      	movle	r5, #1
 800eb5c:	441d      	add	r5, r3
 800eb5e:	f04f 0800 	mov.w	r8, #0
 800eb62:	ee18 1a10 	vmov	r1, s16
 800eb66:	2201      	movs	r2, #1
 800eb68:	4620      	mov	r0, r4
 800eb6a:	f000 ff15 	bl	800f998 <__lshift>
 800eb6e:	4631      	mov	r1, r6
 800eb70:	ee08 0a10 	vmov	s16, r0
 800eb74:	f000 ff80 	bl	800fa78 <__mcmp>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	dc91      	bgt.n	800eaa0 <_dtoa_r+0xaa8>
 800eb7c:	d102      	bne.n	800eb84 <_dtoa_r+0xb8c>
 800eb7e:	f01a 0f01 	tst.w	sl, #1
 800eb82:	d18d      	bne.n	800eaa0 <_dtoa_r+0xaa8>
 800eb84:	462b      	mov	r3, r5
 800eb86:	461d      	mov	r5, r3
 800eb88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb8c:	2a30      	cmp	r2, #48	; 0x30
 800eb8e:	d0fa      	beq.n	800eb86 <_dtoa_r+0xb8e>
 800eb90:	e6d7      	b.n	800e942 <_dtoa_r+0x94a>
 800eb92:	9a01      	ldr	r2, [sp, #4]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d184      	bne.n	800eaa2 <_dtoa_r+0xaaa>
 800eb98:	9b00      	ldr	r3, [sp, #0]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	2331      	movs	r3, #49	; 0x31
 800eba0:	7013      	strb	r3, [r2, #0]
 800eba2:	e6ce      	b.n	800e942 <_dtoa_r+0x94a>
 800eba4:	4b09      	ldr	r3, [pc, #36]	; (800ebcc <_dtoa_r+0xbd4>)
 800eba6:	f7ff ba95 	b.w	800e0d4 <_dtoa_r+0xdc>
 800ebaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f47f aa6e 	bne.w	800e08e <_dtoa_r+0x96>
 800ebb2:	4b07      	ldr	r3, [pc, #28]	; (800ebd0 <_dtoa_r+0xbd8>)
 800ebb4:	f7ff ba8e 	b.w	800e0d4 <_dtoa_r+0xdc>
 800ebb8:	9b02      	ldr	r3, [sp, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	dcae      	bgt.n	800eb1c <_dtoa_r+0xb24>
 800ebbe:	9b06      	ldr	r3, [sp, #24]
 800ebc0:	2b02      	cmp	r3, #2
 800ebc2:	f73f aea8 	bgt.w	800e916 <_dtoa_r+0x91e>
 800ebc6:	e7a9      	b.n	800eb1c <_dtoa_r+0xb24>
 800ebc8:	08012da8 	.word	0x08012da8
 800ebcc:	08012bac 	.word	0x08012bac
 800ebd0:	08012d29 	.word	0x08012d29

0800ebd4 <std>:
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	b510      	push	{r4, lr}
 800ebd8:	4604      	mov	r4, r0
 800ebda:	e9c0 3300 	strd	r3, r3, [r0]
 800ebde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebe2:	6083      	str	r3, [r0, #8]
 800ebe4:	8181      	strh	r1, [r0, #12]
 800ebe6:	6643      	str	r3, [r0, #100]	; 0x64
 800ebe8:	81c2      	strh	r2, [r0, #14]
 800ebea:	6183      	str	r3, [r0, #24]
 800ebec:	4619      	mov	r1, r3
 800ebee:	2208      	movs	r2, #8
 800ebf0:	305c      	adds	r0, #92	; 0x5c
 800ebf2:	f7fd fc07 	bl	800c404 <memset>
 800ebf6:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <std+0x38>)
 800ebf8:	6263      	str	r3, [r4, #36]	; 0x24
 800ebfa:	4b05      	ldr	r3, [pc, #20]	; (800ec10 <std+0x3c>)
 800ebfc:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebfe:	4b05      	ldr	r3, [pc, #20]	; (800ec14 <std+0x40>)
 800ec00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec02:	4b05      	ldr	r3, [pc, #20]	; (800ec18 <std+0x44>)
 800ec04:	6224      	str	r4, [r4, #32]
 800ec06:	6323      	str	r3, [r4, #48]	; 0x30
 800ec08:	bd10      	pop	{r4, pc}
 800ec0a:	bf00      	nop
 800ec0c:	080105f1 	.word	0x080105f1
 800ec10:	08010613 	.word	0x08010613
 800ec14:	0801064b 	.word	0x0801064b
 800ec18:	0801066f 	.word	0x0801066f

0800ec1c <_cleanup_r>:
 800ec1c:	4901      	ldr	r1, [pc, #4]	; (800ec24 <_cleanup_r+0x8>)
 800ec1e:	f000 b8af 	b.w	800ed80 <_fwalk_reent>
 800ec22:	bf00      	nop
 800ec24:	080109c9 	.word	0x080109c9

0800ec28 <__sfmoreglue>:
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	2268      	movs	r2, #104	; 0x68
 800ec2c:	1e4d      	subs	r5, r1, #1
 800ec2e:	4355      	muls	r5, r2
 800ec30:	460e      	mov	r6, r1
 800ec32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec36:	f001 f997 	bl	800ff68 <_malloc_r>
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	b140      	cbz	r0, 800ec50 <__sfmoreglue+0x28>
 800ec3e:	2100      	movs	r1, #0
 800ec40:	e9c0 1600 	strd	r1, r6, [r0]
 800ec44:	300c      	adds	r0, #12
 800ec46:	60a0      	str	r0, [r4, #8]
 800ec48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec4c:	f7fd fbda 	bl	800c404 <memset>
 800ec50:	4620      	mov	r0, r4
 800ec52:	bd70      	pop	{r4, r5, r6, pc}

0800ec54 <__sfp_lock_acquire>:
 800ec54:	4801      	ldr	r0, [pc, #4]	; (800ec5c <__sfp_lock_acquire+0x8>)
 800ec56:	f000 bc26 	b.w	800f4a6 <__retarget_lock_acquire_recursive>
 800ec5a:	bf00      	nop
 800ec5c:	2000078d 	.word	0x2000078d

0800ec60 <__sfp_lock_release>:
 800ec60:	4801      	ldr	r0, [pc, #4]	; (800ec68 <__sfp_lock_release+0x8>)
 800ec62:	f000 bc21 	b.w	800f4a8 <__retarget_lock_release_recursive>
 800ec66:	bf00      	nop
 800ec68:	2000078d 	.word	0x2000078d

0800ec6c <__sinit_lock_acquire>:
 800ec6c:	4801      	ldr	r0, [pc, #4]	; (800ec74 <__sinit_lock_acquire+0x8>)
 800ec6e:	f000 bc1a 	b.w	800f4a6 <__retarget_lock_acquire_recursive>
 800ec72:	bf00      	nop
 800ec74:	2000078e 	.word	0x2000078e

0800ec78 <__sinit_lock_release>:
 800ec78:	4801      	ldr	r0, [pc, #4]	; (800ec80 <__sinit_lock_release+0x8>)
 800ec7a:	f000 bc15 	b.w	800f4a8 <__retarget_lock_release_recursive>
 800ec7e:	bf00      	nop
 800ec80:	2000078e 	.word	0x2000078e

0800ec84 <__sinit>:
 800ec84:	b510      	push	{r4, lr}
 800ec86:	4604      	mov	r4, r0
 800ec88:	f7ff fff0 	bl	800ec6c <__sinit_lock_acquire>
 800ec8c:	69a3      	ldr	r3, [r4, #24]
 800ec8e:	b11b      	cbz	r3, 800ec98 <__sinit+0x14>
 800ec90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec94:	f7ff bff0 	b.w	800ec78 <__sinit_lock_release>
 800ec98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec9c:	6523      	str	r3, [r4, #80]	; 0x50
 800ec9e:	4b13      	ldr	r3, [pc, #76]	; (800ecec <__sinit+0x68>)
 800eca0:	4a13      	ldr	r2, [pc, #76]	; (800ecf0 <__sinit+0x6c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	62a2      	str	r2, [r4, #40]	; 0x28
 800eca6:	42a3      	cmp	r3, r4
 800eca8:	bf04      	itt	eq
 800ecaa:	2301      	moveq	r3, #1
 800ecac:	61a3      	streq	r3, [r4, #24]
 800ecae:	4620      	mov	r0, r4
 800ecb0:	f000 f820 	bl	800ecf4 <__sfp>
 800ecb4:	6060      	str	r0, [r4, #4]
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 f81c 	bl	800ecf4 <__sfp>
 800ecbc:	60a0      	str	r0, [r4, #8]
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 f818 	bl	800ecf4 <__sfp>
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	60e0      	str	r0, [r4, #12]
 800ecc8:	2104      	movs	r1, #4
 800ecca:	6860      	ldr	r0, [r4, #4]
 800eccc:	f7ff ff82 	bl	800ebd4 <std>
 800ecd0:	68a0      	ldr	r0, [r4, #8]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	2109      	movs	r1, #9
 800ecd6:	f7ff ff7d 	bl	800ebd4 <std>
 800ecda:	68e0      	ldr	r0, [r4, #12]
 800ecdc:	2202      	movs	r2, #2
 800ecde:	2112      	movs	r1, #18
 800ece0:	f7ff ff78 	bl	800ebd4 <std>
 800ece4:	2301      	movs	r3, #1
 800ece6:	61a3      	str	r3, [r4, #24]
 800ece8:	e7d2      	b.n	800ec90 <__sinit+0xc>
 800ecea:	bf00      	nop
 800ecec:	08012b98 	.word	0x08012b98
 800ecf0:	0800ec1d 	.word	0x0800ec1d

0800ecf4 <__sfp>:
 800ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf6:	4607      	mov	r7, r0
 800ecf8:	f7ff ffac 	bl	800ec54 <__sfp_lock_acquire>
 800ecfc:	4b1e      	ldr	r3, [pc, #120]	; (800ed78 <__sfp+0x84>)
 800ecfe:	681e      	ldr	r6, [r3, #0]
 800ed00:	69b3      	ldr	r3, [r6, #24]
 800ed02:	b913      	cbnz	r3, 800ed0a <__sfp+0x16>
 800ed04:	4630      	mov	r0, r6
 800ed06:	f7ff ffbd 	bl	800ec84 <__sinit>
 800ed0a:	3648      	adds	r6, #72	; 0x48
 800ed0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed10:	3b01      	subs	r3, #1
 800ed12:	d503      	bpl.n	800ed1c <__sfp+0x28>
 800ed14:	6833      	ldr	r3, [r6, #0]
 800ed16:	b30b      	cbz	r3, 800ed5c <__sfp+0x68>
 800ed18:	6836      	ldr	r6, [r6, #0]
 800ed1a:	e7f7      	b.n	800ed0c <__sfp+0x18>
 800ed1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed20:	b9d5      	cbnz	r5, 800ed58 <__sfp+0x64>
 800ed22:	4b16      	ldr	r3, [pc, #88]	; (800ed7c <__sfp+0x88>)
 800ed24:	60e3      	str	r3, [r4, #12]
 800ed26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed2a:	6665      	str	r5, [r4, #100]	; 0x64
 800ed2c:	f000 fbba 	bl	800f4a4 <__retarget_lock_init_recursive>
 800ed30:	f7ff ff96 	bl	800ec60 <__sfp_lock_release>
 800ed34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed3c:	6025      	str	r5, [r4, #0]
 800ed3e:	61a5      	str	r5, [r4, #24]
 800ed40:	2208      	movs	r2, #8
 800ed42:	4629      	mov	r1, r5
 800ed44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed48:	f7fd fb5c 	bl	800c404 <memset>
 800ed4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed54:	4620      	mov	r0, r4
 800ed56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed58:	3468      	adds	r4, #104	; 0x68
 800ed5a:	e7d9      	b.n	800ed10 <__sfp+0x1c>
 800ed5c:	2104      	movs	r1, #4
 800ed5e:	4638      	mov	r0, r7
 800ed60:	f7ff ff62 	bl	800ec28 <__sfmoreglue>
 800ed64:	4604      	mov	r4, r0
 800ed66:	6030      	str	r0, [r6, #0]
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d1d5      	bne.n	800ed18 <__sfp+0x24>
 800ed6c:	f7ff ff78 	bl	800ec60 <__sfp_lock_release>
 800ed70:	230c      	movs	r3, #12
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	e7ee      	b.n	800ed54 <__sfp+0x60>
 800ed76:	bf00      	nop
 800ed78:	08012b98 	.word	0x08012b98
 800ed7c:	ffff0001 	.word	0xffff0001

0800ed80 <_fwalk_reent>:
 800ed80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed84:	4606      	mov	r6, r0
 800ed86:	4688      	mov	r8, r1
 800ed88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed8c:	2700      	movs	r7, #0
 800ed8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed92:	f1b9 0901 	subs.w	r9, r9, #1
 800ed96:	d505      	bpl.n	800eda4 <_fwalk_reent+0x24>
 800ed98:	6824      	ldr	r4, [r4, #0]
 800ed9a:	2c00      	cmp	r4, #0
 800ed9c:	d1f7      	bne.n	800ed8e <_fwalk_reent+0xe>
 800ed9e:	4638      	mov	r0, r7
 800eda0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eda4:	89ab      	ldrh	r3, [r5, #12]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d907      	bls.n	800edba <_fwalk_reent+0x3a>
 800edaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edae:	3301      	adds	r3, #1
 800edb0:	d003      	beq.n	800edba <_fwalk_reent+0x3a>
 800edb2:	4629      	mov	r1, r5
 800edb4:	4630      	mov	r0, r6
 800edb6:	47c0      	blx	r8
 800edb8:	4307      	orrs	r7, r0
 800edba:	3568      	adds	r5, #104	; 0x68
 800edbc:	e7e9      	b.n	800ed92 <_fwalk_reent+0x12>

0800edbe <rshift>:
 800edbe:	6903      	ldr	r3, [r0, #16]
 800edc0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800edc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edc8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800edcc:	f100 0414 	add.w	r4, r0, #20
 800edd0:	dd45      	ble.n	800ee5e <rshift+0xa0>
 800edd2:	f011 011f 	ands.w	r1, r1, #31
 800edd6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800edda:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800edde:	d10c      	bne.n	800edfa <rshift+0x3c>
 800ede0:	f100 0710 	add.w	r7, r0, #16
 800ede4:	4629      	mov	r1, r5
 800ede6:	42b1      	cmp	r1, r6
 800ede8:	d334      	bcc.n	800ee54 <rshift+0x96>
 800edea:	1a9b      	subs	r3, r3, r2
 800edec:	009b      	lsls	r3, r3, #2
 800edee:	1eea      	subs	r2, r5, #3
 800edf0:	4296      	cmp	r6, r2
 800edf2:	bf38      	it	cc
 800edf4:	2300      	movcc	r3, #0
 800edf6:	4423      	add	r3, r4
 800edf8:	e015      	b.n	800ee26 <rshift+0x68>
 800edfa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800edfe:	f1c1 0820 	rsb	r8, r1, #32
 800ee02:	40cf      	lsrs	r7, r1
 800ee04:	f105 0e04 	add.w	lr, r5, #4
 800ee08:	46a1      	mov	r9, r4
 800ee0a:	4576      	cmp	r6, lr
 800ee0c:	46f4      	mov	ip, lr
 800ee0e:	d815      	bhi.n	800ee3c <rshift+0x7e>
 800ee10:	1a9a      	subs	r2, r3, r2
 800ee12:	0092      	lsls	r2, r2, #2
 800ee14:	3a04      	subs	r2, #4
 800ee16:	3501      	adds	r5, #1
 800ee18:	42ae      	cmp	r6, r5
 800ee1a:	bf38      	it	cc
 800ee1c:	2200      	movcc	r2, #0
 800ee1e:	18a3      	adds	r3, r4, r2
 800ee20:	50a7      	str	r7, [r4, r2]
 800ee22:	b107      	cbz	r7, 800ee26 <rshift+0x68>
 800ee24:	3304      	adds	r3, #4
 800ee26:	1b1a      	subs	r2, r3, r4
 800ee28:	42a3      	cmp	r3, r4
 800ee2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ee2e:	bf08      	it	eq
 800ee30:	2300      	moveq	r3, #0
 800ee32:	6102      	str	r2, [r0, #16]
 800ee34:	bf08      	it	eq
 800ee36:	6143      	streq	r3, [r0, #20]
 800ee38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee3c:	f8dc c000 	ldr.w	ip, [ip]
 800ee40:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee44:	ea4c 0707 	orr.w	r7, ip, r7
 800ee48:	f849 7b04 	str.w	r7, [r9], #4
 800ee4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee50:	40cf      	lsrs	r7, r1
 800ee52:	e7da      	b.n	800ee0a <rshift+0x4c>
 800ee54:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee58:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee5c:	e7c3      	b.n	800ede6 <rshift+0x28>
 800ee5e:	4623      	mov	r3, r4
 800ee60:	e7e1      	b.n	800ee26 <rshift+0x68>

0800ee62 <__hexdig_fun>:
 800ee62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ee66:	2b09      	cmp	r3, #9
 800ee68:	d802      	bhi.n	800ee70 <__hexdig_fun+0xe>
 800ee6a:	3820      	subs	r0, #32
 800ee6c:	b2c0      	uxtb	r0, r0
 800ee6e:	4770      	bx	lr
 800ee70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ee74:	2b05      	cmp	r3, #5
 800ee76:	d801      	bhi.n	800ee7c <__hexdig_fun+0x1a>
 800ee78:	3847      	subs	r0, #71	; 0x47
 800ee7a:	e7f7      	b.n	800ee6c <__hexdig_fun+0xa>
 800ee7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ee80:	2b05      	cmp	r3, #5
 800ee82:	d801      	bhi.n	800ee88 <__hexdig_fun+0x26>
 800ee84:	3827      	subs	r0, #39	; 0x27
 800ee86:	e7f1      	b.n	800ee6c <__hexdig_fun+0xa>
 800ee88:	2000      	movs	r0, #0
 800ee8a:	4770      	bx	lr

0800ee8c <__gethex>:
 800ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee90:	ed2d 8b02 	vpush	{d8}
 800ee94:	b089      	sub	sp, #36	; 0x24
 800ee96:	ee08 0a10 	vmov	s16, r0
 800ee9a:	9304      	str	r3, [sp, #16]
 800ee9c:	4bb4      	ldr	r3, [pc, #720]	; (800f170 <__gethex+0x2e4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	9301      	str	r3, [sp, #4]
 800eea2:	4618      	mov	r0, r3
 800eea4:	468b      	mov	fp, r1
 800eea6:	4690      	mov	r8, r2
 800eea8:	f7f1 f9ba 	bl	8000220 <strlen>
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	f8db 2000 	ldr.w	r2, [fp]
 800eeb2:	4403      	add	r3, r0
 800eeb4:	4682      	mov	sl, r0
 800eeb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eeba:	9305      	str	r3, [sp, #20]
 800eebc:	1c93      	adds	r3, r2, #2
 800eebe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eec2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eec6:	32fe      	adds	r2, #254	; 0xfe
 800eec8:	18d1      	adds	r1, r2, r3
 800eeca:	461f      	mov	r7, r3
 800eecc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eed0:	9100      	str	r1, [sp, #0]
 800eed2:	2830      	cmp	r0, #48	; 0x30
 800eed4:	d0f8      	beq.n	800eec8 <__gethex+0x3c>
 800eed6:	f7ff ffc4 	bl	800ee62 <__hexdig_fun>
 800eeda:	4604      	mov	r4, r0
 800eedc:	2800      	cmp	r0, #0
 800eede:	d13a      	bne.n	800ef56 <__gethex+0xca>
 800eee0:	9901      	ldr	r1, [sp, #4]
 800eee2:	4652      	mov	r2, sl
 800eee4:	4638      	mov	r0, r7
 800eee6:	f001 fbc6 	bl	8010676 <strncmp>
 800eeea:	4605      	mov	r5, r0
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d168      	bne.n	800efc2 <__gethex+0x136>
 800eef0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eef4:	eb07 060a 	add.w	r6, r7, sl
 800eef8:	f7ff ffb3 	bl	800ee62 <__hexdig_fun>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d062      	beq.n	800efc6 <__gethex+0x13a>
 800ef00:	4633      	mov	r3, r6
 800ef02:	7818      	ldrb	r0, [r3, #0]
 800ef04:	2830      	cmp	r0, #48	; 0x30
 800ef06:	461f      	mov	r7, r3
 800ef08:	f103 0301 	add.w	r3, r3, #1
 800ef0c:	d0f9      	beq.n	800ef02 <__gethex+0x76>
 800ef0e:	f7ff ffa8 	bl	800ee62 <__hexdig_fun>
 800ef12:	2301      	movs	r3, #1
 800ef14:	fab0 f480 	clz	r4, r0
 800ef18:	0964      	lsrs	r4, r4, #5
 800ef1a:	4635      	mov	r5, r6
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	463a      	mov	r2, r7
 800ef20:	4616      	mov	r6, r2
 800ef22:	3201      	adds	r2, #1
 800ef24:	7830      	ldrb	r0, [r6, #0]
 800ef26:	f7ff ff9c 	bl	800ee62 <__hexdig_fun>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d1f8      	bne.n	800ef20 <__gethex+0x94>
 800ef2e:	9901      	ldr	r1, [sp, #4]
 800ef30:	4652      	mov	r2, sl
 800ef32:	4630      	mov	r0, r6
 800ef34:	f001 fb9f 	bl	8010676 <strncmp>
 800ef38:	b980      	cbnz	r0, 800ef5c <__gethex+0xd0>
 800ef3a:	b94d      	cbnz	r5, 800ef50 <__gethex+0xc4>
 800ef3c:	eb06 050a 	add.w	r5, r6, sl
 800ef40:	462a      	mov	r2, r5
 800ef42:	4616      	mov	r6, r2
 800ef44:	3201      	adds	r2, #1
 800ef46:	7830      	ldrb	r0, [r6, #0]
 800ef48:	f7ff ff8b 	bl	800ee62 <__hexdig_fun>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d1f8      	bne.n	800ef42 <__gethex+0xb6>
 800ef50:	1bad      	subs	r5, r5, r6
 800ef52:	00ad      	lsls	r5, r5, #2
 800ef54:	e004      	b.n	800ef60 <__gethex+0xd4>
 800ef56:	2400      	movs	r4, #0
 800ef58:	4625      	mov	r5, r4
 800ef5a:	e7e0      	b.n	800ef1e <__gethex+0x92>
 800ef5c:	2d00      	cmp	r5, #0
 800ef5e:	d1f7      	bne.n	800ef50 <__gethex+0xc4>
 800ef60:	7833      	ldrb	r3, [r6, #0]
 800ef62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef66:	2b50      	cmp	r3, #80	; 0x50
 800ef68:	d13b      	bne.n	800efe2 <__gethex+0x156>
 800ef6a:	7873      	ldrb	r3, [r6, #1]
 800ef6c:	2b2b      	cmp	r3, #43	; 0x2b
 800ef6e:	d02c      	beq.n	800efca <__gethex+0x13e>
 800ef70:	2b2d      	cmp	r3, #45	; 0x2d
 800ef72:	d02e      	beq.n	800efd2 <__gethex+0x146>
 800ef74:	1c71      	adds	r1, r6, #1
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	7808      	ldrb	r0, [r1, #0]
 800ef7c:	f7ff ff71 	bl	800ee62 <__hexdig_fun>
 800ef80:	1e43      	subs	r3, r0, #1
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b18      	cmp	r3, #24
 800ef86:	d82c      	bhi.n	800efe2 <__gethex+0x156>
 800ef88:	f1a0 0210 	sub.w	r2, r0, #16
 800ef8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef90:	f7ff ff67 	bl	800ee62 <__hexdig_fun>
 800ef94:	1e43      	subs	r3, r0, #1
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b18      	cmp	r3, #24
 800ef9a:	d91d      	bls.n	800efd8 <__gethex+0x14c>
 800ef9c:	f1b9 0f00 	cmp.w	r9, #0
 800efa0:	d000      	beq.n	800efa4 <__gethex+0x118>
 800efa2:	4252      	negs	r2, r2
 800efa4:	4415      	add	r5, r2
 800efa6:	f8cb 1000 	str.w	r1, [fp]
 800efaa:	b1e4      	cbz	r4, 800efe6 <__gethex+0x15a>
 800efac:	9b00      	ldr	r3, [sp, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	bf14      	ite	ne
 800efb2:	2700      	movne	r7, #0
 800efb4:	2706      	moveq	r7, #6
 800efb6:	4638      	mov	r0, r7
 800efb8:	b009      	add	sp, #36	; 0x24
 800efba:	ecbd 8b02 	vpop	{d8}
 800efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc2:	463e      	mov	r6, r7
 800efc4:	4625      	mov	r5, r4
 800efc6:	2401      	movs	r4, #1
 800efc8:	e7ca      	b.n	800ef60 <__gethex+0xd4>
 800efca:	f04f 0900 	mov.w	r9, #0
 800efce:	1cb1      	adds	r1, r6, #2
 800efd0:	e7d3      	b.n	800ef7a <__gethex+0xee>
 800efd2:	f04f 0901 	mov.w	r9, #1
 800efd6:	e7fa      	b.n	800efce <__gethex+0x142>
 800efd8:	230a      	movs	r3, #10
 800efda:	fb03 0202 	mla	r2, r3, r2, r0
 800efde:	3a10      	subs	r2, #16
 800efe0:	e7d4      	b.n	800ef8c <__gethex+0x100>
 800efe2:	4631      	mov	r1, r6
 800efe4:	e7df      	b.n	800efa6 <__gethex+0x11a>
 800efe6:	1bf3      	subs	r3, r6, r7
 800efe8:	3b01      	subs	r3, #1
 800efea:	4621      	mov	r1, r4
 800efec:	2b07      	cmp	r3, #7
 800efee:	dc0b      	bgt.n	800f008 <__gethex+0x17c>
 800eff0:	ee18 0a10 	vmov	r0, s16
 800eff4:	f000 fa74 	bl	800f4e0 <_Balloc>
 800eff8:	4604      	mov	r4, r0
 800effa:	b940      	cbnz	r0, 800f00e <__gethex+0x182>
 800effc:	4b5d      	ldr	r3, [pc, #372]	; (800f174 <__gethex+0x2e8>)
 800effe:	4602      	mov	r2, r0
 800f000:	21de      	movs	r1, #222	; 0xde
 800f002:	485d      	ldr	r0, [pc, #372]	; (800f178 <__gethex+0x2ec>)
 800f004:	f001 fc2c 	bl	8010860 <__assert_func>
 800f008:	3101      	adds	r1, #1
 800f00a:	105b      	asrs	r3, r3, #1
 800f00c:	e7ee      	b.n	800efec <__gethex+0x160>
 800f00e:	f100 0914 	add.w	r9, r0, #20
 800f012:	f04f 0b00 	mov.w	fp, #0
 800f016:	f1ca 0301 	rsb	r3, sl, #1
 800f01a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f01e:	f8cd b000 	str.w	fp, [sp]
 800f022:	9306      	str	r3, [sp, #24]
 800f024:	42b7      	cmp	r7, r6
 800f026:	d340      	bcc.n	800f0aa <__gethex+0x21e>
 800f028:	9802      	ldr	r0, [sp, #8]
 800f02a:	9b00      	ldr	r3, [sp, #0]
 800f02c:	f840 3b04 	str.w	r3, [r0], #4
 800f030:	eba0 0009 	sub.w	r0, r0, r9
 800f034:	1080      	asrs	r0, r0, #2
 800f036:	0146      	lsls	r6, r0, #5
 800f038:	6120      	str	r0, [r4, #16]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f000 fb42 	bl	800f6c4 <__hi0bits>
 800f040:	1a30      	subs	r0, r6, r0
 800f042:	f8d8 6000 	ldr.w	r6, [r8]
 800f046:	42b0      	cmp	r0, r6
 800f048:	dd63      	ble.n	800f112 <__gethex+0x286>
 800f04a:	1b87      	subs	r7, r0, r6
 800f04c:	4639      	mov	r1, r7
 800f04e:	4620      	mov	r0, r4
 800f050:	f000 fee6 	bl	800fe20 <__any_on>
 800f054:	4682      	mov	sl, r0
 800f056:	b1a8      	cbz	r0, 800f084 <__gethex+0x1f8>
 800f058:	1e7b      	subs	r3, r7, #1
 800f05a:	1159      	asrs	r1, r3, #5
 800f05c:	f003 021f 	and.w	r2, r3, #31
 800f060:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f064:	f04f 0a01 	mov.w	sl, #1
 800f068:	fa0a f202 	lsl.w	r2, sl, r2
 800f06c:	420a      	tst	r2, r1
 800f06e:	d009      	beq.n	800f084 <__gethex+0x1f8>
 800f070:	4553      	cmp	r3, sl
 800f072:	dd05      	ble.n	800f080 <__gethex+0x1f4>
 800f074:	1eb9      	subs	r1, r7, #2
 800f076:	4620      	mov	r0, r4
 800f078:	f000 fed2 	bl	800fe20 <__any_on>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d145      	bne.n	800f10c <__gethex+0x280>
 800f080:	f04f 0a02 	mov.w	sl, #2
 800f084:	4639      	mov	r1, r7
 800f086:	4620      	mov	r0, r4
 800f088:	f7ff fe99 	bl	800edbe <rshift>
 800f08c:	443d      	add	r5, r7
 800f08e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f092:	42ab      	cmp	r3, r5
 800f094:	da4c      	bge.n	800f130 <__gethex+0x2a4>
 800f096:	ee18 0a10 	vmov	r0, s16
 800f09a:	4621      	mov	r1, r4
 800f09c:	f000 fa60 	bl	800f560 <_Bfree>
 800f0a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	6013      	str	r3, [r2, #0]
 800f0a6:	27a3      	movs	r7, #163	; 0xa3
 800f0a8:	e785      	b.n	800efb6 <__gethex+0x12a>
 800f0aa:	1e73      	subs	r3, r6, #1
 800f0ac:	9a05      	ldr	r2, [sp, #20]
 800f0ae:	9303      	str	r3, [sp, #12]
 800f0b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d019      	beq.n	800f0ec <__gethex+0x260>
 800f0b8:	f1bb 0f20 	cmp.w	fp, #32
 800f0bc:	d107      	bne.n	800f0ce <__gethex+0x242>
 800f0be:	9b02      	ldr	r3, [sp, #8]
 800f0c0:	9a00      	ldr	r2, [sp, #0]
 800f0c2:	f843 2b04 	str.w	r2, [r3], #4
 800f0c6:	9302      	str	r3, [sp, #8]
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	469b      	mov	fp, r3
 800f0ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f0d2:	f7ff fec6 	bl	800ee62 <__hexdig_fun>
 800f0d6:	9b00      	ldr	r3, [sp, #0]
 800f0d8:	f000 000f 	and.w	r0, r0, #15
 800f0dc:	fa00 f00b 	lsl.w	r0, r0, fp
 800f0e0:	4303      	orrs	r3, r0
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	f10b 0b04 	add.w	fp, fp, #4
 800f0e8:	9b03      	ldr	r3, [sp, #12]
 800f0ea:	e00d      	b.n	800f108 <__gethex+0x27c>
 800f0ec:	9b03      	ldr	r3, [sp, #12]
 800f0ee:	9a06      	ldr	r2, [sp, #24]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	42bb      	cmp	r3, r7
 800f0f4:	d3e0      	bcc.n	800f0b8 <__gethex+0x22c>
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	9901      	ldr	r1, [sp, #4]
 800f0fa:	9307      	str	r3, [sp, #28]
 800f0fc:	4652      	mov	r2, sl
 800f0fe:	f001 faba 	bl	8010676 <strncmp>
 800f102:	9b07      	ldr	r3, [sp, #28]
 800f104:	2800      	cmp	r0, #0
 800f106:	d1d7      	bne.n	800f0b8 <__gethex+0x22c>
 800f108:	461e      	mov	r6, r3
 800f10a:	e78b      	b.n	800f024 <__gethex+0x198>
 800f10c:	f04f 0a03 	mov.w	sl, #3
 800f110:	e7b8      	b.n	800f084 <__gethex+0x1f8>
 800f112:	da0a      	bge.n	800f12a <__gethex+0x29e>
 800f114:	1a37      	subs	r7, r6, r0
 800f116:	4621      	mov	r1, r4
 800f118:	ee18 0a10 	vmov	r0, s16
 800f11c:	463a      	mov	r2, r7
 800f11e:	f000 fc3b 	bl	800f998 <__lshift>
 800f122:	1bed      	subs	r5, r5, r7
 800f124:	4604      	mov	r4, r0
 800f126:	f100 0914 	add.w	r9, r0, #20
 800f12a:	f04f 0a00 	mov.w	sl, #0
 800f12e:	e7ae      	b.n	800f08e <__gethex+0x202>
 800f130:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f134:	42a8      	cmp	r0, r5
 800f136:	dd72      	ble.n	800f21e <__gethex+0x392>
 800f138:	1b45      	subs	r5, r0, r5
 800f13a:	42ae      	cmp	r6, r5
 800f13c:	dc36      	bgt.n	800f1ac <__gethex+0x320>
 800f13e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f142:	2b02      	cmp	r3, #2
 800f144:	d02a      	beq.n	800f19c <__gethex+0x310>
 800f146:	2b03      	cmp	r3, #3
 800f148:	d02c      	beq.n	800f1a4 <__gethex+0x318>
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d11c      	bne.n	800f188 <__gethex+0x2fc>
 800f14e:	42ae      	cmp	r6, r5
 800f150:	d11a      	bne.n	800f188 <__gethex+0x2fc>
 800f152:	2e01      	cmp	r6, #1
 800f154:	d112      	bne.n	800f17c <__gethex+0x2f0>
 800f156:	9a04      	ldr	r2, [sp, #16]
 800f158:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f15c:	6013      	str	r3, [r2, #0]
 800f15e:	2301      	movs	r3, #1
 800f160:	6123      	str	r3, [r4, #16]
 800f162:	f8c9 3000 	str.w	r3, [r9]
 800f166:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f168:	2762      	movs	r7, #98	; 0x62
 800f16a:	601c      	str	r4, [r3, #0]
 800f16c:	e723      	b.n	800efb6 <__gethex+0x12a>
 800f16e:	bf00      	nop
 800f170:	08012e84 	.word	0x08012e84
 800f174:	08012da8 	.word	0x08012da8
 800f178:	08012e1c 	.word	0x08012e1c
 800f17c:	1e71      	subs	r1, r6, #1
 800f17e:	4620      	mov	r0, r4
 800f180:	f000 fe4e 	bl	800fe20 <__any_on>
 800f184:	2800      	cmp	r0, #0
 800f186:	d1e6      	bne.n	800f156 <__gethex+0x2ca>
 800f188:	ee18 0a10 	vmov	r0, s16
 800f18c:	4621      	mov	r1, r4
 800f18e:	f000 f9e7 	bl	800f560 <_Bfree>
 800f192:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f194:	2300      	movs	r3, #0
 800f196:	6013      	str	r3, [r2, #0]
 800f198:	2750      	movs	r7, #80	; 0x50
 800f19a:	e70c      	b.n	800efb6 <__gethex+0x12a>
 800f19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1f2      	bne.n	800f188 <__gethex+0x2fc>
 800f1a2:	e7d8      	b.n	800f156 <__gethex+0x2ca>
 800f1a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1d5      	bne.n	800f156 <__gethex+0x2ca>
 800f1aa:	e7ed      	b.n	800f188 <__gethex+0x2fc>
 800f1ac:	1e6f      	subs	r7, r5, #1
 800f1ae:	f1ba 0f00 	cmp.w	sl, #0
 800f1b2:	d131      	bne.n	800f218 <__gethex+0x38c>
 800f1b4:	b127      	cbz	r7, 800f1c0 <__gethex+0x334>
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f000 fe31 	bl	800fe20 <__any_on>
 800f1be:	4682      	mov	sl, r0
 800f1c0:	117b      	asrs	r3, r7, #5
 800f1c2:	2101      	movs	r1, #1
 800f1c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f1c8:	f007 071f 	and.w	r7, r7, #31
 800f1cc:	fa01 f707 	lsl.w	r7, r1, r7
 800f1d0:	421f      	tst	r7, r3
 800f1d2:	4629      	mov	r1, r5
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	bf18      	it	ne
 800f1d8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f1dc:	1b76      	subs	r6, r6, r5
 800f1de:	f7ff fdee 	bl	800edbe <rshift>
 800f1e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f1e6:	2702      	movs	r7, #2
 800f1e8:	f1ba 0f00 	cmp.w	sl, #0
 800f1ec:	d048      	beq.n	800f280 <__gethex+0x3f4>
 800f1ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d015      	beq.n	800f222 <__gethex+0x396>
 800f1f6:	2b03      	cmp	r3, #3
 800f1f8:	d017      	beq.n	800f22a <__gethex+0x39e>
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d109      	bne.n	800f212 <__gethex+0x386>
 800f1fe:	f01a 0f02 	tst.w	sl, #2
 800f202:	d006      	beq.n	800f212 <__gethex+0x386>
 800f204:	f8d9 0000 	ldr.w	r0, [r9]
 800f208:	ea4a 0a00 	orr.w	sl, sl, r0
 800f20c:	f01a 0f01 	tst.w	sl, #1
 800f210:	d10e      	bne.n	800f230 <__gethex+0x3a4>
 800f212:	f047 0710 	orr.w	r7, r7, #16
 800f216:	e033      	b.n	800f280 <__gethex+0x3f4>
 800f218:	f04f 0a01 	mov.w	sl, #1
 800f21c:	e7d0      	b.n	800f1c0 <__gethex+0x334>
 800f21e:	2701      	movs	r7, #1
 800f220:	e7e2      	b.n	800f1e8 <__gethex+0x35c>
 800f222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f224:	f1c3 0301 	rsb	r3, r3, #1
 800f228:	9315      	str	r3, [sp, #84]	; 0x54
 800f22a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d0f0      	beq.n	800f212 <__gethex+0x386>
 800f230:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f234:	f104 0314 	add.w	r3, r4, #20
 800f238:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f23c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f240:	f04f 0c00 	mov.w	ip, #0
 800f244:	4618      	mov	r0, r3
 800f246:	f853 2b04 	ldr.w	r2, [r3], #4
 800f24a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f24e:	d01c      	beq.n	800f28a <__gethex+0x3fe>
 800f250:	3201      	adds	r2, #1
 800f252:	6002      	str	r2, [r0, #0]
 800f254:	2f02      	cmp	r7, #2
 800f256:	f104 0314 	add.w	r3, r4, #20
 800f25a:	d13f      	bne.n	800f2dc <__gethex+0x450>
 800f25c:	f8d8 2000 	ldr.w	r2, [r8]
 800f260:	3a01      	subs	r2, #1
 800f262:	42b2      	cmp	r2, r6
 800f264:	d10a      	bne.n	800f27c <__gethex+0x3f0>
 800f266:	1171      	asrs	r1, r6, #5
 800f268:	2201      	movs	r2, #1
 800f26a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f26e:	f006 061f 	and.w	r6, r6, #31
 800f272:	fa02 f606 	lsl.w	r6, r2, r6
 800f276:	421e      	tst	r6, r3
 800f278:	bf18      	it	ne
 800f27a:	4617      	movne	r7, r2
 800f27c:	f047 0720 	orr.w	r7, r7, #32
 800f280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f282:	601c      	str	r4, [r3, #0]
 800f284:	9b04      	ldr	r3, [sp, #16]
 800f286:	601d      	str	r5, [r3, #0]
 800f288:	e695      	b.n	800efb6 <__gethex+0x12a>
 800f28a:	4299      	cmp	r1, r3
 800f28c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f290:	d8d8      	bhi.n	800f244 <__gethex+0x3b8>
 800f292:	68a3      	ldr	r3, [r4, #8]
 800f294:	459b      	cmp	fp, r3
 800f296:	db19      	blt.n	800f2cc <__gethex+0x440>
 800f298:	6861      	ldr	r1, [r4, #4]
 800f29a:	ee18 0a10 	vmov	r0, s16
 800f29e:	3101      	adds	r1, #1
 800f2a0:	f000 f91e 	bl	800f4e0 <_Balloc>
 800f2a4:	4681      	mov	r9, r0
 800f2a6:	b918      	cbnz	r0, 800f2b0 <__gethex+0x424>
 800f2a8:	4b1a      	ldr	r3, [pc, #104]	; (800f314 <__gethex+0x488>)
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	2184      	movs	r1, #132	; 0x84
 800f2ae:	e6a8      	b.n	800f002 <__gethex+0x176>
 800f2b0:	6922      	ldr	r2, [r4, #16]
 800f2b2:	3202      	adds	r2, #2
 800f2b4:	f104 010c 	add.w	r1, r4, #12
 800f2b8:	0092      	lsls	r2, r2, #2
 800f2ba:	300c      	adds	r0, #12
 800f2bc:	f7fd f894 	bl	800c3e8 <memcpy>
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	ee18 0a10 	vmov	r0, s16
 800f2c6:	f000 f94b 	bl	800f560 <_Bfree>
 800f2ca:	464c      	mov	r4, r9
 800f2cc:	6923      	ldr	r3, [r4, #16]
 800f2ce:	1c5a      	adds	r2, r3, #1
 800f2d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f2d4:	6122      	str	r2, [r4, #16]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	615a      	str	r2, [r3, #20]
 800f2da:	e7bb      	b.n	800f254 <__gethex+0x3c8>
 800f2dc:	6922      	ldr	r2, [r4, #16]
 800f2de:	455a      	cmp	r2, fp
 800f2e0:	dd0b      	ble.n	800f2fa <__gethex+0x46e>
 800f2e2:	2101      	movs	r1, #1
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f7ff fd6a 	bl	800edbe <rshift>
 800f2ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2ee:	3501      	adds	r5, #1
 800f2f0:	42ab      	cmp	r3, r5
 800f2f2:	f6ff aed0 	blt.w	800f096 <__gethex+0x20a>
 800f2f6:	2701      	movs	r7, #1
 800f2f8:	e7c0      	b.n	800f27c <__gethex+0x3f0>
 800f2fa:	f016 061f 	ands.w	r6, r6, #31
 800f2fe:	d0fa      	beq.n	800f2f6 <__gethex+0x46a>
 800f300:	4453      	add	r3, sl
 800f302:	f1c6 0620 	rsb	r6, r6, #32
 800f306:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f30a:	f000 f9db 	bl	800f6c4 <__hi0bits>
 800f30e:	42b0      	cmp	r0, r6
 800f310:	dbe7      	blt.n	800f2e2 <__gethex+0x456>
 800f312:	e7f0      	b.n	800f2f6 <__gethex+0x46a>
 800f314:	08012da8 	.word	0x08012da8

0800f318 <L_shift>:
 800f318:	f1c2 0208 	rsb	r2, r2, #8
 800f31c:	0092      	lsls	r2, r2, #2
 800f31e:	b570      	push	{r4, r5, r6, lr}
 800f320:	f1c2 0620 	rsb	r6, r2, #32
 800f324:	6843      	ldr	r3, [r0, #4]
 800f326:	6804      	ldr	r4, [r0, #0]
 800f328:	fa03 f506 	lsl.w	r5, r3, r6
 800f32c:	432c      	orrs	r4, r5
 800f32e:	40d3      	lsrs	r3, r2
 800f330:	6004      	str	r4, [r0, #0]
 800f332:	f840 3f04 	str.w	r3, [r0, #4]!
 800f336:	4288      	cmp	r0, r1
 800f338:	d3f4      	bcc.n	800f324 <L_shift+0xc>
 800f33a:	bd70      	pop	{r4, r5, r6, pc}

0800f33c <__match>:
 800f33c:	b530      	push	{r4, r5, lr}
 800f33e:	6803      	ldr	r3, [r0, #0]
 800f340:	3301      	adds	r3, #1
 800f342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f346:	b914      	cbnz	r4, 800f34e <__match+0x12>
 800f348:	6003      	str	r3, [r0, #0]
 800f34a:	2001      	movs	r0, #1
 800f34c:	bd30      	pop	{r4, r5, pc}
 800f34e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f352:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f356:	2d19      	cmp	r5, #25
 800f358:	bf98      	it	ls
 800f35a:	3220      	addls	r2, #32
 800f35c:	42a2      	cmp	r2, r4
 800f35e:	d0f0      	beq.n	800f342 <__match+0x6>
 800f360:	2000      	movs	r0, #0
 800f362:	e7f3      	b.n	800f34c <__match+0x10>

0800f364 <__hexnan>:
 800f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f368:	680b      	ldr	r3, [r1, #0]
 800f36a:	115e      	asrs	r6, r3, #5
 800f36c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f370:	f013 031f 	ands.w	r3, r3, #31
 800f374:	b087      	sub	sp, #28
 800f376:	bf18      	it	ne
 800f378:	3604      	addne	r6, #4
 800f37a:	2500      	movs	r5, #0
 800f37c:	1f37      	subs	r7, r6, #4
 800f37e:	4690      	mov	r8, r2
 800f380:	6802      	ldr	r2, [r0, #0]
 800f382:	9301      	str	r3, [sp, #4]
 800f384:	4682      	mov	sl, r0
 800f386:	f846 5c04 	str.w	r5, [r6, #-4]
 800f38a:	46b9      	mov	r9, r7
 800f38c:	463c      	mov	r4, r7
 800f38e:	9502      	str	r5, [sp, #8]
 800f390:	46ab      	mov	fp, r5
 800f392:	7851      	ldrb	r1, [r2, #1]
 800f394:	1c53      	adds	r3, r2, #1
 800f396:	9303      	str	r3, [sp, #12]
 800f398:	b341      	cbz	r1, 800f3ec <__hexnan+0x88>
 800f39a:	4608      	mov	r0, r1
 800f39c:	9205      	str	r2, [sp, #20]
 800f39e:	9104      	str	r1, [sp, #16]
 800f3a0:	f7ff fd5f 	bl	800ee62 <__hexdig_fun>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d14f      	bne.n	800f448 <__hexnan+0xe4>
 800f3a8:	9904      	ldr	r1, [sp, #16]
 800f3aa:	9a05      	ldr	r2, [sp, #20]
 800f3ac:	2920      	cmp	r1, #32
 800f3ae:	d818      	bhi.n	800f3e2 <__hexnan+0x7e>
 800f3b0:	9b02      	ldr	r3, [sp, #8]
 800f3b2:	459b      	cmp	fp, r3
 800f3b4:	dd13      	ble.n	800f3de <__hexnan+0x7a>
 800f3b6:	454c      	cmp	r4, r9
 800f3b8:	d206      	bcs.n	800f3c8 <__hexnan+0x64>
 800f3ba:	2d07      	cmp	r5, #7
 800f3bc:	dc04      	bgt.n	800f3c8 <__hexnan+0x64>
 800f3be:	462a      	mov	r2, r5
 800f3c0:	4649      	mov	r1, r9
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	f7ff ffa8 	bl	800f318 <L_shift>
 800f3c8:	4544      	cmp	r4, r8
 800f3ca:	d950      	bls.n	800f46e <__hexnan+0x10a>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f1a4 0904 	sub.w	r9, r4, #4
 800f3d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3d6:	f8cd b008 	str.w	fp, [sp, #8]
 800f3da:	464c      	mov	r4, r9
 800f3dc:	461d      	mov	r5, r3
 800f3de:	9a03      	ldr	r2, [sp, #12]
 800f3e0:	e7d7      	b.n	800f392 <__hexnan+0x2e>
 800f3e2:	2929      	cmp	r1, #41	; 0x29
 800f3e4:	d156      	bne.n	800f494 <__hexnan+0x130>
 800f3e6:	3202      	adds	r2, #2
 800f3e8:	f8ca 2000 	str.w	r2, [sl]
 800f3ec:	f1bb 0f00 	cmp.w	fp, #0
 800f3f0:	d050      	beq.n	800f494 <__hexnan+0x130>
 800f3f2:	454c      	cmp	r4, r9
 800f3f4:	d206      	bcs.n	800f404 <__hexnan+0xa0>
 800f3f6:	2d07      	cmp	r5, #7
 800f3f8:	dc04      	bgt.n	800f404 <__hexnan+0xa0>
 800f3fa:	462a      	mov	r2, r5
 800f3fc:	4649      	mov	r1, r9
 800f3fe:	4620      	mov	r0, r4
 800f400:	f7ff ff8a 	bl	800f318 <L_shift>
 800f404:	4544      	cmp	r4, r8
 800f406:	d934      	bls.n	800f472 <__hexnan+0x10e>
 800f408:	f1a8 0204 	sub.w	r2, r8, #4
 800f40c:	4623      	mov	r3, r4
 800f40e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f412:	f842 1f04 	str.w	r1, [r2, #4]!
 800f416:	429f      	cmp	r7, r3
 800f418:	d2f9      	bcs.n	800f40e <__hexnan+0xaa>
 800f41a:	1b3b      	subs	r3, r7, r4
 800f41c:	f023 0303 	bic.w	r3, r3, #3
 800f420:	3304      	adds	r3, #4
 800f422:	3401      	adds	r4, #1
 800f424:	3e03      	subs	r6, #3
 800f426:	42b4      	cmp	r4, r6
 800f428:	bf88      	it	hi
 800f42a:	2304      	movhi	r3, #4
 800f42c:	4443      	add	r3, r8
 800f42e:	2200      	movs	r2, #0
 800f430:	f843 2b04 	str.w	r2, [r3], #4
 800f434:	429f      	cmp	r7, r3
 800f436:	d2fb      	bcs.n	800f430 <__hexnan+0xcc>
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	b91b      	cbnz	r3, 800f444 <__hexnan+0xe0>
 800f43c:	4547      	cmp	r7, r8
 800f43e:	d127      	bne.n	800f490 <__hexnan+0x12c>
 800f440:	2301      	movs	r3, #1
 800f442:	603b      	str	r3, [r7, #0]
 800f444:	2005      	movs	r0, #5
 800f446:	e026      	b.n	800f496 <__hexnan+0x132>
 800f448:	3501      	adds	r5, #1
 800f44a:	2d08      	cmp	r5, #8
 800f44c:	f10b 0b01 	add.w	fp, fp, #1
 800f450:	dd06      	ble.n	800f460 <__hexnan+0xfc>
 800f452:	4544      	cmp	r4, r8
 800f454:	d9c3      	bls.n	800f3de <__hexnan+0x7a>
 800f456:	2300      	movs	r3, #0
 800f458:	f844 3c04 	str.w	r3, [r4, #-4]
 800f45c:	2501      	movs	r5, #1
 800f45e:	3c04      	subs	r4, #4
 800f460:	6822      	ldr	r2, [r4, #0]
 800f462:	f000 000f 	and.w	r0, r0, #15
 800f466:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f46a:	6022      	str	r2, [r4, #0]
 800f46c:	e7b7      	b.n	800f3de <__hexnan+0x7a>
 800f46e:	2508      	movs	r5, #8
 800f470:	e7b5      	b.n	800f3de <__hexnan+0x7a>
 800f472:	9b01      	ldr	r3, [sp, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d0df      	beq.n	800f438 <__hexnan+0xd4>
 800f478:	f04f 32ff 	mov.w	r2, #4294967295
 800f47c:	f1c3 0320 	rsb	r3, r3, #32
 800f480:	fa22 f303 	lsr.w	r3, r2, r3
 800f484:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f488:	401a      	ands	r2, r3
 800f48a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f48e:	e7d3      	b.n	800f438 <__hexnan+0xd4>
 800f490:	3f04      	subs	r7, #4
 800f492:	e7d1      	b.n	800f438 <__hexnan+0xd4>
 800f494:	2004      	movs	r0, #4
 800f496:	b007      	add	sp, #28
 800f498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f49c <_localeconv_r>:
 800f49c:	4800      	ldr	r0, [pc, #0]	; (800f4a0 <_localeconv_r+0x4>)
 800f49e:	4770      	bx	lr
 800f4a0:	20000188 	.word	0x20000188

0800f4a4 <__retarget_lock_init_recursive>:
 800f4a4:	4770      	bx	lr

0800f4a6 <__retarget_lock_acquire_recursive>:
 800f4a6:	4770      	bx	lr

0800f4a8 <__retarget_lock_release_recursive>:
 800f4a8:	4770      	bx	lr
	...

0800f4ac <malloc>:
 800f4ac:	4b02      	ldr	r3, [pc, #8]	; (800f4b8 <malloc+0xc>)
 800f4ae:	4601      	mov	r1, r0
 800f4b0:	6818      	ldr	r0, [r3, #0]
 800f4b2:	f000 bd59 	b.w	800ff68 <_malloc_r>
 800f4b6:	bf00      	nop
 800f4b8:	20000030 	.word	0x20000030

0800f4bc <__ascii_mbtowc>:
 800f4bc:	b082      	sub	sp, #8
 800f4be:	b901      	cbnz	r1, 800f4c2 <__ascii_mbtowc+0x6>
 800f4c0:	a901      	add	r1, sp, #4
 800f4c2:	b142      	cbz	r2, 800f4d6 <__ascii_mbtowc+0x1a>
 800f4c4:	b14b      	cbz	r3, 800f4da <__ascii_mbtowc+0x1e>
 800f4c6:	7813      	ldrb	r3, [r2, #0]
 800f4c8:	600b      	str	r3, [r1, #0]
 800f4ca:	7812      	ldrb	r2, [r2, #0]
 800f4cc:	1e10      	subs	r0, r2, #0
 800f4ce:	bf18      	it	ne
 800f4d0:	2001      	movne	r0, #1
 800f4d2:	b002      	add	sp, #8
 800f4d4:	4770      	bx	lr
 800f4d6:	4610      	mov	r0, r2
 800f4d8:	e7fb      	b.n	800f4d2 <__ascii_mbtowc+0x16>
 800f4da:	f06f 0001 	mvn.w	r0, #1
 800f4de:	e7f8      	b.n	800f4d2 <__ascii_mbtowc+0x16>

0800f4e0 <_Balloc>:
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	460d      	mov	r5, r1
 800f4e8:	b976      	cbnz	r6, 800f508 <_Balloc+0x28>
 800f4ea:	2010      	movs	r0, #16
 800f4ec:	f7ff ffde 	bl	800f4ac <malloc>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	6260      	str	r0, [r4, #36]	; 0x24
 800f4f4:	b920      	cbnz	r0, 800f500 <_Balloc+0x20>
 800f4f6:	4b18      	ldr	r3, [pc, #96]	; (800f558 <_Balloc+0x78>)
 800f4f8:	4818      	ldr	r0, [pc, #96]	; (800f55c <_Balloc+0x7c>)
 800f4fa:	2166      	movs	r1, #102	; 0x66
 800f4fc:	f001 f9b0 	bl	8010860 <__assert_func>
 800f500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f504:	6006      	str	r6, [r0, #0]
 800f506:	60c6      	str	r6, [r0, #12]
 800f508:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f50a:	68f3      	ldr	r3, [r6, #12]
 800f50c:	b183      	cbz	r3, 800f530 <_Balloc+0x50>
 800f50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f516:	b9b8      	cbnz	r0, 800f548 <_Balloc+0x68>
 800f518:	2101      	movs	r1, #1
 800f51a:	fa01 f605 	lsl.w	r6, r1, r5
 800f51e:	1d72      	adds	r2, r6, #5
 800f520:	0092      	lsls	r2, r2, #2
 800f522:	4620      	mov	r0, r4
 800f524:	f000 fc9d 	bl	800fe62 <_calloc_r>
 800f528:	b160      	cbz	r0, 800f544 <_Balloc+0x64>
 800f52a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f52e:	e00e      	b.n	800f54e <_Balloc+0x6e>
 800f530:	2221      	movs	r2, #33	; 0x21
 800f532:	2104      	movs	r1, #4
 800f534:	4620      	mov	r0, r4
 800f536:	f000 fc94 	bl	800fe62 <_calloc_r>
 800f53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f53c:	60f0      	str	r0, [r6, #12]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1e4      	bne.n	800f50e <_Balloc+0x2e>
 800f544:	2000      	movs	r0, #0
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	6802      	ldr	r2, [r0, #0]
 800f54a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f54e:	2300      	movs	r3, #0
 800f550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f554:	e7f7      	b.n	800f546 <_Balloc+0x66>
 800f556:	bf00      	nop
 800f558:	08012d36 	.word	0x08012d36
 800f55c:	08012e98 	.word	0x08012e98

0800f560 <_Bfree>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f564:	4605      	mov	r5, r0
 800f566:	460c      	mov	r4, r1
 800f568:	b976      	cbnz	r6, 800f588 <_Bfree+0x28>
 800f56a:	2010      	movs	r0, #16
 800f56c:	f7ff ff9e 	bl	800f4ac <malloc>
 800f570:	4602      	mov	r2, r0
 800f572:	6268      	str	r0, [r5, #36]	; 0x24
 800f574:	b920      	cbnz	r0, 800f580 <_Bfree+0x20>
 800f576:	4b09      	ldr	r3, [pc, #36]	; (800f59c <_Bfree+0x3c>)
 800f578:	4809      	ldr	r0, [pc, #36]	; (800f5a0 <_Bfree+0x40>)
 800f57a:	218a      	movs	r1, #138	; 0x8a
 800f57c:	f001 f970 	bl	8010860 <__assert_func>
 800f580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f584:	6006      	str	r6, [r0, #0]
 800f586:	60c6      	str	r6, [r0, #12]
 800f588:	b13c      	cbz	r4, 800f59a <_Bfree+0x3a>
 800f58a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f58c:	6862      	ldr	r2, [r4, #4]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f594:	6021      	str	r1, [r4, #0]
 800f596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
 800f59c:	08012d36 	.word	0x08012d36
 800f5a0:	08012e98 	.word	0x08012e98

0800f5a4 <__multadd>:
 800f5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a8:	690d      	ldr	r5, [r1, #16]
 800f5aa:	4607      	mov	r7, r0
 800f5ac:	460c      	mov	r4, r1
 800f5ae:	461e      	mov	r6, r3
 800f5b0:	f101 0c14 	add.w	ip, r1, #20
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	f8dc 3000 	ldr.w	r3, [ip]
 800f5ba:	b299      	uxth	r1, r3
 800f5bc:	fb02 6101 	mla	r1, r2, r1, r6
 800f5c0:	0c1e      	lsrs	r6, r3, #16
 800f5c2:	0c0b      	lsrs	r3, r1, #16
 800f5c4:	fb02 3306 	mla	r3, r2, r6, r3
 800f5c8:	b289      	uxth	r1, r1
 800f5ca:	3001      	adds	r0, #1
 800f5cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5d0:	4285      	cmp	r5, r0
 800f5d2:	f84c 1b04 	str.w	r1, [ip], #4
 800f5d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5da:	dcec      	bgt.n	800f5b6 <__multadd+0x12>
 800f5dc:	b30e      	cbz	r6, 800f622 <__multadd+0x7e>
 800f5de:	68a3      	ldr	r3, [r4, #8]
 800f5e0:	42ab      	cmp	r3, r5
 800f5e2:	dc19      	bgt.n	800f618 <__multadd+0x74>
 800f5e4:	6861      	ldr	r1, [r4, #4]
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	3101      	adds	r1, #1
 800f5ea:	f7ff ff79 	bl	800f4e0 <_Balloc>
 800f5ee:	4680      	mov	r8, r0
 800f5f0:	b928      	cbnz	r0, 800f5fe <__multadd+0x5a>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	4b0c      	ldr	r3, [pc, #48]	; (800f628 <__multadd+0x84>)
 800f5f6:	480d      	ldr	r0, [pc, #52]	; (800f62c <__multadd+0x88>)
 800f5f8:	21b5      	movs	r1, #181	; 0xb5
 800f5fa:	f001 f931 	bl	8010860 <__assert_func>
 800f5fe:	6922      	ldr	r2, [r4, #16]
 800f600:	3202      	adds	r2, #2
 800f602:	f104 010c 	add.w	r1, r4, #12
 800f606:	0092      	lsls	r2, r2, #2
 800f608:	300c      	adds	r0, #12
 800f60a:	f7fc feed 	bl	800c3e8 <memcpy>
 800f60e:	4621      	mov	r1, r4
 800f610:	4638      	mov	r0, r7
 800f612:	f7ff ffa5 	bl	800f560 <_Bfree>
 800f616:	4644      	mov	r4, r8
 800f618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f61c:	3501      	adds	r5, #1
 800f61e:	615e      	str	r6, [r3, #20]
 800f620:	6125      	str	r5, [r4, #16]
 800f622:	4620      	mov	r0, r4
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f628:	08012da8 	.word	0x08012da8
 800f62c:	08012e98 	.word	0x08012e98

0800f630 <__s2b>:
 800f630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f634:	460c      	mov	r4, r1
 800f636:	4615      	mov	r5, r2
 800f638:	461f      	mov	r7, r3
 800f63a:	2209      	movs	r2, #9
 800f63c:	3308      	adds	r3, #8
 800f63e:	4606      	mov	r6, r0
 800f640:	fb93 f3f2 	sdiv	r3, r3, r2
 800f644:	2100      	movs	r1, #0
 800f646:	2201      	movs	r2, #1
 800f648:	429a      	cmp	r2, r3
 800f64a:	db09      	blt.n	800f660 <__s2b+0x30>
 800f64c:	4630      	mov	r0, r6
 800f64e:	f7ff ff47 	bl	800f4e0 <_Balloc>
 800f652:	b940      	cbnz	r0, 800f666 <__s2b+0x36>
 800f654:	4602      	mov	r2, r0
 800f656:	4b19      	ldr	r3, [pc, #100]	; (800f6bc <__s2b+0x8c>)
 800f658:	4819      	ldr	r0, [pc, #100]	; (800f6c0 <__s2b+0x90>)
 800f65a:	21ce      	movs	r1, #206	; 0xce
 800f65c:	f001 f900 	bl	8010860 <__assert_func>
 800f660:	0052      	lsls	r2, r2, #1
 800f662:	3101      	adds	r1, #1
 800f664:	e7f0      	b.n	800f648 <__s2b+0x18>
 800f666:	9b08      	ldr	r3, [sp, #32]
 800f668:	6143      	str	r3, [r0, #20]
 800f66a:	2d09      	cmp	r5, #9
 800f66c:	f04f 0301 	mov.w	r3, #1
 800f670:	6103      	str	r3, [r0, #16]
 800f672:	dd16      	ble.n	800f6a2 <__s2b+0x72>
 800f674:	f104 0909 	add.w	r9, r4, #9
 800f678:	46c8      	mov	r8, r9
 800f67a:	442c      	add	r4, r5
 800f67c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f680:	4601      	mov	r1, r0
 800f682:	3b30      	subs	r3, #48	; 0x30
 800f684:	220a      	movs	r2, #10
 800f686:	4630      	mov	r0, r6
 800f688:	f7ff ff8c 	bl	800f5a4 <__multadd>
 800f68c:	45a0      	cmp	r8, r4
 800f68e:	d1f5      	bne.n	800f67c <__s2b+0x4c>
 800f690:	f1a5 0408 	sub.w	r4, r5, #8
 800f694:	444c      	add	r4, r9
 800f696:	1b2d      	subs	r5, r5, r4
 800f698:	1963      	adds	r3, r4, r5
 800f69a:	42bb      	cmp	r3, r7
 800f69c:	db04      	blt.n	800f6a8 <__s2b+0x78>
 800f69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a2:	340a      	adds	r4, #10
 800f6a4:	2509      	movs	r5, #9
 800f6a6:	e7f6      	b.n	800f696 <__s2b+0x66>
 800f6a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6ac:	4601      	mov	r1, r0
 800f6ae:	3b30      	subs	r3, #48	; 0x30
 800f6b0:	220a      	movs	r2, #10
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f7ff ff76 	bl	800f5a4 <__multadd>
 800f6b8:	e7ee      	b.n	800f698 <__s2b+0x68>
 800f6ba:	bf00      	nop
 800f6bc:	08012da8 	.word	0x08012da8
 800f6c0:	08012e98 	.word	0x08012e98

0800f6c4 <__hi0bits>:
 800f6c4:	0c03      	lsrs	r3, r0, #16
 800f6c6:	041b      	lsls	r3, r3, #16
 800f6c8:	b9d3      	cbnz	r3, 800f700 <__hi0bits+0x3c>
 800f6ca:	0400      	lsls	r0, r0, #16
 800f6cc:	2310      	movs	r3, #16
 800f6ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6d2:	bf04      	itt	eq
 800f6d4:	0200      	lsleq	r0, r0, #8
 800f6d6:	3308      	addeq	r3, #8
 800f6d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f6dc:	bf04      	itt	eq
 800f6de:	0100      	lsleq	r0, r0, #4
 800f6e0:	3304      	addeq	r3, #4
 800f6e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f6e6:	bf04      	itt	eq
 800f6e8:	0080      	lsleq	r0, r0, #2
 800f6ea:	3302      	addeq	r3, #2
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	db05      	blt.n	800f6fc <__hi0bits+0x38>
 800f6f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6f4:	f103 0301 	add.w	r3, r3, #1
 800f6f8:	bf08      	it	eq
 800f6fa:	2320      	moveq	r3, #32
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	4770      	bx	lr
 800f700:	2300      	movs	r3, #0
 800f702:	e7e4      	b.n	800f6ce <__hi0bits+0xa>

0800f704 <__lo0bits>:
 800f704:	6803      	ldr	r3, [r0, #0]
 800f706:	f013 0207 	ands.w	r2, r3, #7
 800f70a:	4601      	mov	r1, r0
 800f70c:	d00b      	beq.n	800f726 <__lo0bits+0x22>
 800f70e:	07da      	lsls	r2, r3, #31
 800f710:	d423      	bmi.n	800f75a <__lo0bits+0x56>
 800f712:	0798      	lsls	r0, r3, #30
 800f714:	bf49      	itett	mi
 800f716:	085b      	lsrmi	r3, r3, #1
 800f718:	089b      	lsrpl	r3, r3, #2
 800f71a:	2001      	movmi	r0, #1
 800f71c:	600b      	strmi	r3, [r1, #0]
 800f71e:	bf5c      	itt	pl
 800f720:	600b      	strpl	r3, [r1, #0]
 800f722:	2002      	movpl	r0, #2
 800f724:	4770      	bx	lr
 800f726:	b298      	uxth	r0, r3
 800f728:	b9a8      	cbnz	r0, 800f756 <__lo0bits+0x52>
 800f72a:	0c1b      	lsrs	r3, r3, #16
 800f72c:	2010      	movs	r0, #16
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	b90a      	cbnz	r2, 800f736 <__lo0bits+0x32>
 800f732:	3008      	adds	r0, #8
 800f734:	0a1b      	lsrs	r3, r3, #8
 800f736:	071a      	lsls	r2, r3, #28
 800f738:	bf04      	itt	eq
 800f73a:	091b      	lsreq	r3, r3, #4
 800f73c:	3004      	addeq	r0, #4
 800f73e:	079a      	lsls	r2, r3, #30
 800f740:	bf04      	itt	eq
 800f742:	089b      	lsreq	r3, r3, #2
 800f744:	3002      	addeq	r0, #2
 800f746:	07da      	lsls	r2, r3, #31
 800f748:	d403      	bmi.n	800f752 <__lo0bits+0x4e>
 800f74a:	085b      	lsrs	r3, r3, #1
 800f74c:	f100 0001 	add.w	r0, r0, #1
 800f750:	d005      	beq.n	800f75e <__lo0bits+0x5a>
 800f752:	600b      	str	r3, [r1, #0]
 800f754:	4770      	bx	lr
 800f756:	4610      	mov	r0, r2
 800f758:	e7e9      	b.n	800f72e <__lo0bits+0x2a>
 800f75a:	2000      	movs	r0, #0
 800f75c:	4770      	bx	lr
 800f75e:	2020      	movs	r0, #32
 800f760:	4770      	bx	lr
	...

0800f764 <__i2b>:
 800f764:	b510      	push	{r4, lr}
 800f766:	460c      	mov	r4, r1
 800f768:	2101      	movs	r1, #1
 800f76a:	f7ff feb9 	bl	800f4e0 <_Balloc>
 800f76e:	4602      	mov	r2, r0
 800f770:	b928      	cbnz	r0, 800f77e <__i2b+0x1a>
 800f772:	4b05      	ldr	r3, [pc, #20]	; (800f788 <__i2b+0x24>)
 800f774:	4805      	ldr	r0, [pc, #20]	; (800f78c <__i2b+0x28>)
 800f776:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f77a:	f001 f871 	bl	8010860 <__assert_func>
 800f77e:	2301      	movs	r3, #1
 800f780:	6144      	str	r4, [r0, #20]
 800f782:	6103      	str	r3, [r0, #16]
 800f784:	bd10      	pop	{r4, pc}
 800f786:	bf00      	nop
 800f788:	08012da8 	.word	0x08012da8
 800f78c:	08012e98 	.word	0x08012e98

0800f790 <__multiply>:
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	4691      	mov	r9, r2
 800f796:	690a      	ldr	r2, [r1, #16]
 800f798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	bfb8      	it	lt
 800f7a0:	460b      	movlt	r3, r1
 800f7a2:	460c      	mov	r4, r1
 800f7a4:	bfbc      	itt	lt
 800f7a6:	464c      	movlt	r4, r9
 800f7a8:	4699      	movlt	r9, r3
 800f7aa:	6927      	ldr	r7, [r4, #16]
 800f7ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7b0:	68a3      	ldr	r3, [r4, #8]
 800f7b2:	6861      	ldr	r1, [r4, #4]
 800f7b4:	eb07 060a 	add.w	r6, r7, sl
 800f7b8:	42b3      	cmp	r3, r6
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	bfb8      	it	lt
 800f7be:	3101      	addlt	r1, #1
 800f7c0:	f7ff fe8e 	bl	800f4e0 <_Balloc>
 800f7c4:	b930      	cbnz	r0, 800f7d4 <__multiply+0x44>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	4b44      	ldr	r3, [pc, #272]	; (800f8dc <__multiply+0x14c>)
 800f7ca:	4845      	ldr	r0, [pc, #276]	; (800f8e0 <__multiply+0x150>)
 800f7cc:	f240 115d 	movw	r1, #349	; 0x15d
 800f7d0:	f001 f846 	bl	8010860 <__assert_func>
 800f7d4:	f100 0514 	add.w	r5, r0, #20
 800f7d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f7dc:	462b      	mov	r3, r5
 800f7de:	2200      	movs	r2, #0
 800f7e0:	4543      	cmp	r3, r8
 800f7e2:	d321      	bcc.n	800f828 <__multiply+0x98>
 800f7e4:	f104 0314 	add.w	r3, r4, #20
 800f7e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f7ec:	f109 0314 	add.w	r3, r9, #20
 800f7f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f7f4:	9202      	str	r2, [sp, #8]
 800f7f6:	1b3a      	subs	r2, r7, r4
 800f7f8:	3a15      	subs	r2, #21
 800f7fa:	f022 0203 	bic.w	r2, r2, #3
 800f7fe:	3204      	adds	r2, #4
 800f800:	f104 0115 	add.w	r1, r4, #21
 800f804:	428f      	cmp	r7, r1
 800f806:	bf38      	it	cc
 800f808:	2204      	movcc	r2, #4
 800f80a:	9201      	str	r2, [sp, #4]
 800f80c:	9a02      	ldr	r2, [sp, #8]
 800f80e:	9303      	str	r3, [sp, #12]
 800f810:	429a      	cmp	r2, r3
 800f812:	d80c      	bhi.n	800f82e <__multiply+0x9e>
 800f814:	2e00      	cmp	r6, #0
 800f816:	dd03      	ble.n	800f820 <__multiply+0x90>
 800f818:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d05a      	beq.n	800f8d6 <__multiply+0x146>
 800f820:	6106      	str	r6, [r0, #16]
 800f822:	b005      	add	sp, #20
 800f824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f828:	f843 2b04 	str.w	r2, [r3], #4
 800f82c:	e7d8      	b.n	800f7e0 <__multiply+0x50>
 800f82e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f832:	f1ba 0f00 	cmp.w	sl, #0
 800f836:	d024      	beq.n	800f882 <__multiply+0xf2>
 800f838:	f104 0e14 	add.w	lr, r4, #20
 800f83c:	46a9      	mov	r9, r5
 800f83e:	f04f 0c00 	mov.w	ip, #0
 800f842:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f846:	f8d9 1000 	ldr.w	r1, [r9]
 800f84a:	fa1f fb82 	uxth.w	fp, r2
 800f84e:	b289      	uxth	r1, r1
 800f850:	fb0a 110b 	mla	r1, sl, fp, r1
 800f854:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f858:	f8d9 2000 	ldr.w	r2, [r9]
 800f85c:	4461      	add	r1, ip
 800f85e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f862:	fb0a c20b 	mla	r2, sl, fp, ip
 800f866:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f86a:	b289      	uxth	r1, r1
 800f86c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f870:	4577      	cmp	r7, lr
 800f872:	f849 1b04 	str.w	r1, [r9], #4
 800f876:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f87a:	d8e2      	bhi.n	800f842 <__multiply+0xb2>
 800f87c:	9a01      	ldr	r2, [sp, #4]
 800f87e:	f845 c002 	str.w	ip, [r5, r2]
 800f882:	9a03      	ldr	r2, [sp, #12]
 800f884:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f888:	3304      	adds	r3, #4
 800f88a:	f1b9 0f00 	cmp.w	r9, #0
 800f88e:	d020      	beq.n	800f8d2 <__multiply+0x142>
 800f890:	6829      	ldr	r1, [r5, #0]
 800f892:	f104 0c14 	add.w	ip, r4, #20
 800f896:	46ae      	mov	lr, r5
 800f898:	f04f 0a00 	mov.w	sl, #0
 800f89c:	f8bc b000 	ldrh.w	fp, [ip]
 800f8a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8a4:	fb09 220b 	mla	r2, r9, fp, r2
 800f8a8:	4492      	add	sl, r2
 800f8aa:	b289      	uxth	r1, r1
 800f8ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f8b0:	f84e 1b04 	str.w	r1, [lr], #4
 800f8b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f8b8:	f8be 1000 	ldrh.w	r1, [lr]
 800f8bc:	0c12      	lsrs	r2, r2, #16
 800f8be:	fb09 1102 	mla	r1, r9, r2, r1
 800f8c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f8c6:	4567      	cmp	r7, ip
 800f8c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8cc:	d8e6      	bhi.n	800f89c <__multiply+0x10c>
 800f8ce:	9a01      	ldr	r2, [sp, #4]
 800f8d0:	50a9      	str	r1, [r5, r2]
 800f8d2:	3504      	adds	r5, #4
 800f8d4:	e79a      	b.n	800f80c <__multiply+0x7c>
 800f8d6:	3e01      	subs	r6, #1
 800f8d8:	e79c      	b.n	800f814 <__multiply+0x84>
 800f8da:	bf00      	nop
 800f8dc:	08012da8 	.word	0x08012da8
 800f8e0:	08012e98 	.word	0x08012e98

0800f8e4 <__pow5mult>:
 800f8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e8:	4615      	mov	r5, r2
 800f8ea:	f012 0203 	ands.w	r2, r2, #3
 800f8ee:	4606      	mov	r6, r0
 800f8f0:	460f      	mov	r7, r1
 800f8f2:	d007      	beq.n	800f904 <__pow5mult+0x20>
 800f8f4:	4c25      	ldr	r4, [pc, #148]	; (800f98c <__pow5mult+0xa8>)
 800f8f6:	3a01      	subs	r2, #1
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8fe:	f7ff fe51 	bl	800f5a4 <__multadd>
 800f902:	4607      	mov	r7, r0
 800f904:	10ad      	asrs	r5, r5, #2
 800f906:	d03d      	beq.n	800f984 <__pow5mult+0xa0>
 800f908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f90a:	b97c      	cbnz	r4, 800f92c <__pow5mult+0x48>
 800f90c:	2010      	movs	r0, #16
 800f90e:	f7ff fdcd 	bl	800f4ac <malloc>
 800f912:	4602      	mov	r2, r0
 800f914:	6270      	str	r0, [r6, #36]	; 0x24
 800f916:	b928      	cbnz	r0, 800f924 <__pow5mult+0x40>
 800f918:	4b1d      	ldr	r3, [pc, #116]	; (800f990 <__pow5mult+0xac>)
 800f91a:	481e      	ldr	r0, [pc, #120]	; (800f994 <__pow5mult+0xb0>)
 800f91c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f920:	f000 ff9e 	bl	8010860 <__assert_func>
 800f924:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f928:	6004      	str	r4, [r0, #0]
 800f92a:	60c4      	str	r4, [r0, #12]
 800f92c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f930:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f934:	b94c      	cbnz	r4, 800f94a <__pow5mult+0x66>
 800f936:	f240 2171 	movw	r1, #625	; 0x271
 800f93a:	4630      	mov	r0, r6
 800f93c:	f7ff ff12 	bl	800f764 <__i2b>
 800f940:	2300      	movs	r3, #0
 800f942:	f8c8 0008 	str.w	r0, [r8, #8]
 800f946:	4604      	mov	r4, r0
 800f948:	6003      	str	r3, [r0, #0]
 800f94a:	f04f 0900 	mov.w	r9, #0
 800f94e:	07eb      	lsls	r3, r5, #31
 800f950:	d50a      	bpl.n	800f968 <__pow5mult+0x84>
 800f952:	4639      	mov	r1, r7
 800f954:	4622      	mov	r2, r4
 800f956:	4630      	mov	r0, r6
 800f958:	f7ff ff1a 	bl	800f790 <__multiply>
 800f95c:	4639      	mov	r1, r7
 800f95e:	4680      	mov	r8, r0
 800f960:	4630      	mov	r0, r6
 800f962:	f7ff fdfd 	bl	800f560 <_Bfree>
 800f966:	4647      	mov	r7, r8
 800f968:	106d      	asrs	r5, r5, #1
 800f96a:	d00b      	beq.n	800f984 <__pow5mult+0xa0>
 800f96c:	6820      	ldr	r0, [r4, #0]
 800f96e:	b938      	cbnz	r0, 800f980 <__pow5mult+0x9c>
 800f970:	4622      	mov	r2, r4
 800f972:	4621      	mov	r1, r4
 800f974:	4630      	mov	r0, r6
 800f976:	f7ff ff0b 	bl	800f790 <__multiply>
 800f97a:	6020      	str	r0, [r4, #0]
 800f97c:	f8c0 9000 	str.w	r9, [r0]
 800f980:	4604      	mov	r4, r0
 800f982:	e7e4      	b.n	800f94e <__pow5mult+0x6a>
 800f984:	4638      	mov	r0, r7
 800f986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f98a:	bf00      	nop
 800f98c:	08012fe8 	.word	0x08012fe8
 800f990:	08012d36 	.word	0x08012d36
 800f994:	08012e98 	.word	0x08012e98

0800f998 <__lshift>:
 800f998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	460c      	mov	r4, r1
 800f99e:	6849      	ldr	r1, [r1, #4]
 800f9a0:	6923      	ldr	r3, [r4, #16]
 800f9a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9a6:	68a3      	ldr	r3, [r4, #8]
 800f9a8:	4607      	mov	r7, r0
 800f9aa:	4691      	mov	r9, r2
 800f9ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9b0:	f108 0601 	add.w	r6, r8, #1
 800f9b4:	42b3      	cmp	r3, r6
 800f9b6:	db0b      	blt.n	800f9d0 <__lshift+0x38>
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f7ff fd91 	bl	800f4e0 <_Balloc>
 800f9be:	4605      	mov	r5, r0
 800f9c0:	b948      	cbnz	r0, 800f9d6 <__lshift+0x3e>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	4b2a      	ldr	r3, [pc, #168]	; (800fa70 <__lshift+0xd8>)
 800f9c6:	482b      	ldr	r0, [pc, #172]	; (800fa74 <__lshift+0xdc>)
 800f9c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f9cc:	f000 ff48 	bl	8010860 <__assert_func>
 800f9d0:	3101      	adds	r1, #1
 800f9d2:	005b      	lsls	r3, r3, #1
 800f9d4:	e7ee      	b.n	800f9b4 <__lshift+0x1c>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f100 0114 	add.w	r1, r0, #20
 800f9dc:	f100 0210 	add.w	r2, r0, #16
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	4553      	cmp	r3, sl
 800f9e4:	db37      	blt.n	800fa56 <__lshift+0xbe>
 800f9e6:	6920      	ldr	r0, [r4, #16]
 800f9e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9ec:	f104 0314 	add.w	r3, r4, #20
 800f9f0:	f019 091f 	ands.w	r9, r9, #31
 800f9f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f9fc:	d02f      	beq.n	800fa5e <__lshift+0xc6>
 800f9fe:	f1c9 0e20 	rsb	lr, r9, #32
 800fa02:	468a      	mov	sl, r1
 800fa04:	f04f 0c00 	mov.w	ip, #0
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	fa02 f209 	lsl.w	r2, r2, r9
 800fa0e:	ea42 020c 	orr.w	r2, r2, ip
 800fa12:	f84a 2b04 	str.w	r2, [sl], #4
 800fa16:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa1a:	4298      	cmp	r0, r3
 800fa1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fa20:	d8f2      	bhi.n	800fa08 <__lshift+0x70>
 800fa22:	1b03      	subs	r3, r0, r4
 800fa24:	3b15      	subs	r3, #21
 800fa26:	f023 0303 	bic.w	r3, r3, #3
 800fa2a:	3304      	adds	r3, #4
 800fa2c:	f104 0215 	add.w	r2, r4, #21
 800fa30:	4290      	cmp	r0, r2
 800fa32:	bf38      	it	cc
 800fa34:	2304      	movcc	r3, #4
 800fa36:	f841 c003 	str.w	ip, [r1, r3]
 800fa3a:	f1bc 0f00 	cmp.w	ip, #0
 800fa3e:	d001      	beq.n	800fa44 <__lshift+0xac>
 800fa40:	f108 0602 	add.w	r6, r8, #2
 800fa44:	3e01      	subs	r6, #1
 800fa46:	4638      	mov	r0, r7
 800fa48:	612e      	str	r6, [r5, #16]
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	f7ff fd88 	bl	800f560 <_Bfree>
 800fa50:	4628      	mov	r0, r5
 800fa52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa56:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	e7c1      	b.n	800f9e2 <__lshift+0x4a>
 800fa5e:	3904      	subs	r1, #4
 800fa60:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa64:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa68:	4298      	cmp	r0, r3
 800fa6a:	d8f9      	bhi.n	800fa60 <__lshift+0xc8>
 800fa6c:	e7ea      	b.n	800fa44 <__lshift+0xac>
 800fa6e:	bf00      	nop
 800fa70:	08012da8 	.word	0x08012da8
 800fa74:	08012e98 	.word	0x08012e98

0800fa78 <__mcmp>:
 800fa78:	b530      	push	{r4, r5, lr}
 800fa7a:	6902      	ldr	r2, [r0, #16]
 800fa7c:	690c      	ldr	r4, [r1, #16]
 800fa7e:	1b12      	subs	r2, r2, r4
 800fa80:	d10e      	bne.n	800faa0 <__mcmp+0x28>
 800fa82:	f100 0314 	add.w	r3, r0, #20
 800fa86:	3114      	adds	r1, #20
 800fa88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa98:	42a5      	cmp	r5, r4
 800fa9a:	d003      	beq.n	800faa4 <__mcmp+0x2c>
 800fa9c:	d305      	bcc.n	800faaa <__mcmp+0x32>
 800fa9e:	2201      	movs	r2, #1
 800faa0:	4610      	mov	r0, r2
 800faa2:	bd30      	pop	{r4, r5, pc}
 800faa4:	4283      	cmp	r3, r0
 800faa6:	d3f3      	bcc.n	800fa90 <__mcmp+0x18>
 800faa8:	e7fa      	b.n	800faa0 <__mcmp+0x28>
 800faaa:	f04f 32ff 	mov.w	r2, #4294967295
 800faae:	e7f7      	b.n	800faa0 <__mcmp+0x28>

0800fab0 <__mdiff>:
 800fab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab4:	460c      	mov	r4, r1
 800fab6:	4606      	mov	r6, r0
 800fab8:	4611      	mov	r1, r2
 800faba:	4620      	mov	r0, r4
 800fabc:	4690      	mov	r8, r2
 800fabe:	f7ff ffdb 	bl	800fa78 <__mcmp>
 800fac2:	1e05      	subs	r5, r0, #0
 800fac4:	d110      	bne.n	800fae8 <__mdiff+0x38>
 800fac6:	4629      	mov	r1, r5
 800fac8:	4630      	mov	r0, r6
 800faca:	f7ff fd09 	bl	800f4e0 <_Balloc>
 800face:	b930      	cbnz	r0, 800fade <__mdiff+0x2e>
 800fad0:	4b3a      	ldr	r3, [pc, #232]	; (800fbbc <__mdiff+0x10c>)
 800fad2:	4602      	mov	r2, r0
 800fad4:	f240 2132 	movw	r1, #562	; 0x232
 800fad8:	4839      	ldr	r0, [pc, #228]	; (800fbc0 <__mdiff+0x110>)
 800fada:	f000 fec1 	bl	8010860 <__assert_func>
 800fade:	2301      	movs	r3, #1
 800fae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae8:	bfa4      	itt	ge
 800faea:	4643      	movge	r3, r8
 800faec:	46a0      	movge	r8, r4
 800faee:	4630      	mov	r0, r6
 800faf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800faf4:	bfa6      	itte	ge
 800faf6:	461c      	movge	r4, r3
 800faf8:	2500      	movge	r5, #0
 800fafa:	2501      	movlt	r5, #1
 800fafc:	f7ff fcf0 	bl	800f4e0 <_Balloc>
 800fb00:	b920      	cbnz	r0, 800fb0c <__mdiff+0x5c>
 800fb02:	4b2e      	ldr	r3, [pc, #184]	; (800fbbc <__mdiff+0x10c>)
 800fb04:	4602      	mov	r2, r0
 800fb06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fb0a:	e7e5      	b.n	800fad8 <__mdiff+0x28>
 800fb0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb10:	6926      	ldr	r6, [r4, #16]
 800fb12:	60c5      	str	r5, [r0, #12]
 800fb14:	f104 0914 	add.w	r9, r4, #20
 800fb18:	f108 0514 	add.w	r5, r8, #20
 800fb1c:	f100 0e14 	add.w	lr, r0, #20
 800fb20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb28:	f108 0210 	add.w	r2, r8, #16
 800fb2c:	46f2      	mov	sl, lr
 800fb2e:	2100      	movs	r1, #0
 800fb30:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb38:	fa1f f883 	uxth.w	r8, r3
 800fb3c:	fa11 f18b 	uxtah	r1, r1, fp
 800fb40:	0c1b      	lsrs	r3, r3, #16
 800fb42:	eba1 0808 	sub.w	r8, r1, r8
 800fb46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb4e:	fa1f f888 	uxth.w	r8, r8
 800fb52:	1419      	asrs	r1, r3, #16
 800fb54:	454e      	cmp	r6, r9
 800fb56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb5a:	f84a 3b04 	str.w	r3, [sl], #4
 800fb5e:	d8e7      	bhi.n	800fb30 <__mdiff+0x80>
 800fb60:	1b33      	subs	r3, r6, r4
 800fb62:	3b15      	subs	r3, #21
 800fb64:	f023 0303 	bic.w	r3, r3, #3
 800fb68:	3304      	adds	r3, #4
 800fb6a:	3415      	adds	r4, #21
 800fb6c:	42a6      	cmp	r6, r4
 800fb6e:	bf38      	it	cc
 800fb70:	2304      	movcc	r3, #4
 800fb72:	441d      	add	r5, r3
 800fb74:	4473      	add	r3, lr
 800fb76:	469e      	mov	lr, r3
 800fb78:	462e      	mov	r6, r5
 800fb7a:	4566      	cmp	r6, ip
 800fb7c:	d30e      	bcc.n	800fb9c <__mdiff+0xec>
 800fb7e:	f10c 0203 	add.w	r2, ip, #3
 800fb82:	1b52      	subs	r2, r2, r5
 800fb84:	f022 0203 	bic.w	r2, r2, #3
 800fb88:	3d03      	subs	r5, #3
 800fb8a:	45ac      	cmp	ip, r5
 800fb8c:	bf38      	it	cc
 800fb8e:	2200      	movcc	r2, #0
 800fb90:	441a      	add	r2, r3
 800fb92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb96:	b17b      	cbz	r3, 800fbb8 <__mdiff+0x108>
 800fb98:	6107      	str	r7, [r0, #16]
 800fb9a:	e7a3      	b.n	800fae4 <__mdiff+0x34>
 800fb9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800fba0:	fa11 f288 	uxtah	r2, r1, r8
 800fba4:	1414      	asrs	r4, r2, #16
 800fba6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fbaa:	b292      	uxth	r2, r2
 800fbac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fbb0:	f84e 2b04 	str.w	r2, [lr], #4
 800fbb4:	1421      	asrs	r1, r4, #16
 800fbb6:	e7e0      	b.n	800fb7a <__mdiff+0xca>
 800fbb8:	3f01      	subs	r7, #1
 800fbba:	e7ea      	b.n	800fb92 <__mdiff+0xe2>
 800fbbc:	08012da8 	.word	0x08012da8
 800fbc0:	08012e98 	.word	0x08012e98

0800fbc4 <__ulp>:
 800fbc4:	b082      	sub	sp, #8
 800fbc6:	ed8d 0b00 	vstr	d0, [sp]
 800fbca:	9b01      	ldr	r3, [sp, #4]
 800fbcc:	4912      	ldr	r1, [pc, #72]	; (800fc18 <__ulp+0x54>)
 800fbce:	4019      	ands	r1, r3
 800fbd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fbd4:	2900      	cmp	r1, #0
 800fbd6:	dd05      	ble.n	800fbe4 <__ulp+0x20>
 800fbd8:	2200      	movs	r2, #0
 800fbda:	460b      	mov	r3, r1
 800fbdc:	ec43 2b10 	vmov	d0, r2, r3
 800fbe0:	b002      	add	sp, #8
 800fbe2:	4770      	bx	lr
 800fbe4:	4249      	negs	r1, r1
 800fbe6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fbea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fbee:	f04f 0200 	mov.w	r2, #0
 800fbf2:	f04f 0300 	mov.w	r3, #0
 800fbf6:	da04      	bge.n	800fc02 <__ulp+0x3e>
 800fbf8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fbfc:	fa41 f300 	asr.w	r3, r1, r0
 800fc00:	e7ec      	b.n	800fbdc <__ulp+0x18>
 800fc02:	f1a0 0114 	sub.w	r1, r0, #20
 800fc06:	291e      	cmp	r1, #30
 800fc08:	bfda      	itte	le
 800fc0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fc0e:	fa20 f101 	lsrle.w	r1, r0, r1
 800fc12:	2101      	movgt	r1, #1
 800fc14:	460a      	mov	r2, r1
 800fc16:	e7e1      	b.n	800fbdc <__ulp+0x18>
 800fc18:	7ff00000 	.word	0x7ff00000

0800fc1c <__b2d>:
 800fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1e:	6905      	ldr	r5, [r0, #16]
 800fc20:	f100 0714 	add.w	r7, r0, #20
 800fc24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fc28:	1f2e      	subs	r6, r5, #4
 800fc2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f7ff fd48 	bl	800f6c4 <__hi0bits>
 800fc34:	f1c0 0320 	rsb	r3, r0, #32
 800fc38:	280a      	cmp	r0, #10
 800fc3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fcb8 <__b2d+0x9c>
 800fc3e:	600b      	str	r3, [r1, #0]
 800fc40:	dc14      	bgt.n	800fc6c <__b2d+0x50>
 800fc42:	f1c0 0e0b 	rsb	lr, r0, #11
 800fc46:	fa24 f10e 	lsr.w	r1, r4, lr
 800fc4a:	42b7      	cmp	r7, r6
 800fc4c:	ea41 030c 	orr.w	r3, r1, ip
 800fc50:	bf34      	ite	cc
 800fc52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc56:	2100      	movcs	r1, #0
 800fc58:	3015      	adds	r0, #21
 800fc5a:	fa04 f000 	lsl.w	r0, r4, r0
 800fc5e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fc62:	ea40 0201 	orr.w	r2, r0, r1
 800fc66:	ec43 2b10 	vmov	d0, r2, r3
 800fc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc6c:	42b7      	cmp	r7, r6
 800fc6e:	bf3a      	itte	cc
 800fc70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc74:	f1a5 0608 	subcc.w	r6, r5, #8
 800fc78:	2100      	movcs	r1, #0
 800fc7a:	380b      	subs	r0, #11
 800fc7c:	d017      	beq.n	800fcae <__b2d+0x92>
 800fc7e:	f1c0 0c20 	rsb	ip, r0, #32
 800fc82:	fa04 f500 	lsl.w	r5, r4, r0
 800fc86:	42be      	cmp	r6, r7
 800fc88:	fa21 f40c 	lsr.w	r4, r1, ip
 800fc8c:	ea45 0504 	orr.w	r5, r5, r4
 800fc90:	bf8c      	ite	hi
 800fc92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fc96:	2400      	movls	r4, #0
 800fc98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fc9c:	fa01 f000 	lsl.w	r0, r1, r0
 800fca0:	fa24 f40c 	lsr.w	r4, r4, ip
 800fca4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fca8:	ea40 0204 	orr.w	r2, r0, r4
 800fcac:	e7db      	b.n	800fc66 <__b2d+0x4a>
 800fcae:	ea44 030c 	orr.w	r3, r4, ip
 800fcb2:	460a      	mov	r2, r1
 800fcb4:	e7d7      	b.n	800fc66 <__b2d+0x4a>
 800fcb6:	bf00      	nop
 800fcb8:	3ff00000 	.word	0x3ff00000

0800fcbc <__d2b>:
 800fcbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcc0:	4689      	mov	r9, r1
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	ec57 6b10 	vmov	r6, r7, d0
 800fcc8:	4690      	mov	r8, r2
 800fcca:	f7ff fc09 	bl	800f4e0 <_Balloc>
 800fcce:	4604      	mov	r4, r0
 800fcd0:	b930      	cbnz	r0, 800fce0 <__d2b+0x24>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	4b25      	ldr	r3, [pc, #148]	; (800fd6c <__d2b+0xb0>)
 800fcd6:	4826      	ldr	r0, [pc, #152]	; (800fd70 <__d2b+0xb4>)
 800fcd8:	f240 310a 	movw	r1, #778	; 0x30a
 800fcdc:	f000 fdc0 	bl	8010860 <__assert_func>
 800fce0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fce4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fce8:	bb35      	cbnz	r5, 800fd38 <__d2b+0x7c>
 800fcea:	2e00      	cmp	r6, #0
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	d028      	beq.n	800fd42 <__d2b+0x86>
 800fcf0:	4668      	mov	r0, sp
 800fcf2:	9600      	str	r6, [sp, #0]
 800fcf4:	f7ff fd06 	bl	800f704 <__lo0bits>
 800fcf8:	9900      	ldr	r1, [sp, #0]
 800fcfa:	b300      	cbz	r0, 800fd3e <__d2b+0x82>
 800fcfc:	9a01      	ldr	r2, [sp, #4]
 800fcfe:	f1c0 0320 	rsb	r3, r0, #32
 800fd02:	fa02 f303 	lsl.w	r3, r2, r3
 800fd06:	430b      	orrs	r3, r1
 800fd08:	40c2      	lsrs	r2, r0
 800fd0a:	6163      	str	r3, [r4, #20]
 800fd0c:	9201      	str	r2, [sp, #4]
 800fd0e:	9b01      	ldr	r3, [sp, #4]
 800fd10:	61a3      	str	r3, [r4, #24]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	bf14      	ite	ne
 800fd16:	2202      	movne	r2, #2
 800fd18:	2201      	moveq	r2, #1
 800fd1a:	6122      	str	r2, [r4, #16]
 800fd1c:	b1d5      	cbz	r5, 800fd54 <__d2b+0x98>
 800fd1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd22:	4405      	add	r5, r0
 800fd24:	f8c9 5000 	str.w	r5, [r9]
 800fd28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd2c:	f8c8 0000 	str.w	r0, [r8]
 800fd30:	4620      	mov	r0, r4
 800fd32:	b003      	add	sp, #12
 800fd34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd3c:	e7d5      	b.n	800fcea <__d2b+0x2e>
 800fd3e:	6161      	str	r1, [r4, #20]
 800fd40:	e7e5      	b.n	800fd0e <__d2b+0x52>
 800fd42:	a801      	add	r0, sp, #4
 800fd44:	f7ff fcde 	bl	800f704 <__lo0bits>
 800fd48:	9b01      	ldr	r3, [sp, #4]
 800fd4a:	6163      	str	r3, [r4, #20]
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	6122      	str	r2, [r4, #16]
 800fd50:	3020      	adds	r0, #32
 800fd52:	e7e3      	b.n	800fd1c <__d2b+0x60>
 800fd54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd5c:	f8c9 0000 	str.w	r0, [r9]
 800fd60:	6918      	ldr	r0, [r3, #16]
 800fd62:	f7ff fcaf 	bl	800f6c4 <__hi0bits>
 800fd66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd6a:	e7df      	b.n	800fd2c <__d2b+0x70>
 800fd6c:	08012da8 	.word	0x08012da8
 800fd70:	08012e98 	.word	0x08012e98

0800fd74 <__ratio>:
 800fd74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd78:	4688      	mov	r8, r1
 800fd7a:	4669      	mov	r1, sp
 800fd7c:	4681      	mov	r9, r0
 800fd7e:	f7ff ff4d 	bl	800fc1c <__b2d>
 800fd82:	a901      	add	r1, sp, #4
 800fd84:	4640      	mov	r0, r8
 800fd86:	ec55 4b10 	vmov	r4, r5, d0
 800fd8a:	f7ff ff47 	bl	800fc1c <__b2d>
 800fd8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd96:	eba3 0c02 	sub.w	ip, r3, r2
 800fd9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd9e:	1a9b      	subs	r3, r3, r2
 800fda0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fda4:	ec51 0b10 	vmov	r0, r1, d0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	bfd6      	itet	le
 800fdac:	460a      	movle	r2, r1
 800fdae:	462a      	movgt	r2, r5
 800fdb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fdb4:	468b      	mov	fp, r1
 800fdb6:	462f      	mov	r7, r5
 800fdb8:	bfd4      	ite	le
 800fdba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fdbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	ee10 2a10 	vmov	r2, s0
 800fdc8:	465b      	mov	r3, fp
 800fdca:	4639      	mov	r1, r7
 800fdcc:	f7f0 fd66 	bl	800089c <__aeabi_ddiv>
 800fdd0:	ec41 0b10 	vmov	d0, r0, r1
 800fdd4:	b003      	add	sp, #12
 800fdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdda <__copybits>:
 800fdda:	3901      	subs	r1, #1
 800fddc:	b570      	push	{r4, r5, r6, lr}
 800fdde:	1149      	asrs	r1, r1, #5
 800fde0:	6914      	ldr	r4, [r2, #16]
 800fde2:	3101      	adds	r1, #1
 800fde4:	f102 0314 	add.w	r3, r2, #20
 800fde8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fdec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fdf0:	1f05      	subs	r5, r0, #4
 800fdf2:	42a3      	cmp	r3, r4
 800fdf4:	d30c      	bcc.n	800fe10 <__copybits+0x36>
 800fdf6:	1aa3      	subs	r3, r4, r2
 800fdf8:	3b11      	subs	r3, #17
 800fdfa:	f023 0303 	bic.w	r3, r3, #3
 800fdfe:	3211      	adds	r2, #17
 800fe00:	42a2      	cmp	r2, r4
 800fe02:	bf88      	it	hi
 800fe04:	2300      	movhi	r3, #0
 800fe06:	4418      	add	r0, r3
 800fe08:	2300      	movs	r3, #0
 800fe0a:	4288      	cmp	r0, r1
 800fe0c:	d305      	bcc.n	800fe1a <__copybits+0x40>
 800fe0e:	bd70      	pop	{r4, r5, r6, pc}
 800fe10:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe14:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe18:	e7eb      	b.n	800fdf2 <__copybits+0x18>
 800fe1a:	f840 3b04 	str.w	r3, [r0], #4
 800fe1e:	e7f4      	b.n	800fe0a <__copybits+0x30>

0800fe20 <__any_on>:
 800fe20:	f100 0214 	add.w	r2, r0, #20
 800fe24:	6900      	ldr	r0, [r0, #16]
 800fe26:	114b      	asrs	r3, r1, #5
 800fe28:	4298      	cmp	r0, r3
 800fe2a:	b510      	push	{r4, lr}
 800fe2c:	db11      	blt.n	800fe52 <__any_on+0x32>
 800fe2e:	dd0a      	ble.n	800fe46 <__any_on+0x26>
 800fe30:	f011 011f 	ands.w	r1, r1, #31
 800fe34:	d007      	beq.n	800fe46 <__any_on+0x26>
 800fe36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe3a:	fa24 f001 	lsr.w	r0, r4, r1
 800fe3e:	fa00 f101 	lsl.w	r1, r0, r1
 800fe42:	428c      	cmp	r4, r1
 800fe44:	d10b      	bne.n	800fe5e <__any_on+0x3e>
 800fe46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d803      	bhi.n	800fe56 <__any_on+0x36>
 800fe4e:	2000      	movs	r0, #0
 800fe50:	bd10      	pop	{r4, pc}
 800fe52:	4603      	mov	r3, r0
 800fe54:	e7f7      	b.n	800fe46 <__any_on+0x26>
 800fe56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe5a:	2900      	cmp	r1, #0
 800fe5c:	d0f5      	beq.n	800fe4a <__any_on+0x2a>
 800fe5e:	2001      	movs	r0, #1
 800fe60:	e7f6      	b.n	800fe50 <__any_on+0x30>

0800fe62 <_calloc_r>:
 800fe62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe64:	fba1 2402 	umull	r2, r4, r1, r2
 800fe68:	b94c      	cbnz	r4, 800fe7e <_calloc_r+0x1c>
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	9201      	str	r2, [sp, #4]
 800fe6e:	f000 f87b 	bl	800ff68 <_malloc_r>
 800fe72:	9a01      	ldr	r2, [sp, #4]
 800fe74:	4605      	mov	r5, r0
 800fe76:	b930      	cbnz	r0, 800fe86 <_calloc_r+0x24>
 800fe78:	4628      	mov	r0, r5
 800fe7a:	b003      	add	sp, #12
 800fe7c:	bd30      	pop	{r4, r5, pc}
 800fe7e:	220c      	movs	r2, #12
 800fe80:	6002      	str	r2, [r0, #0]
 800fe82:	2500      	movs	r5, #0
 800fe84:	e7f8      	b.n	800fe78 <_calloc_r+0x16>
 800fe86:	4621      	mov	r1, r4
 800fe88:	f7fc fabc 	bl	800c404 <memset>
 800fe8c:	e7f4      	b.n	800fe78 <_calloc_r+0x16>
	...

0800fe90 <_free_r>:
 800fe90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe92:	2900      	cmp	r1, #0
 800fe94:	d044      	beq.n	800ff20 <_free_r+0x90>
 800fe96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe9a:	9001      	str	r0, [sp, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	f1a1 0404 	sub.w	r4, r1, #4
 800fea2:	bfb8      	it	lt
 800fea4:	18e4      	addlt	r4, r4, r3
 800fea6:	f000 fe6f 	bl	8010b88 <__malloc_lock>
 800feaa:	4a1e      	ldr	r2, [pc, #120]	; (800ff24 <_free_r+0x94>)
 800feac:	9801      	ldr	r0, [sp, #4]
 800feae:	6813      	ldr	r3, [r2, #0]
 800feb0:	b933      	cbnz	r3, 800fec0 <_free_r+0x30>
 800feb2:	6063      	str	r3, [r4, #4]
 800feb4:	6014      	str	r4, [r2, #0]
 800feb6:	b003      	add	sp, #12
 800feb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800febc:	f000 be6a 	b.w	8010b94 <__malloc_unlock>
 800fec0:	42a3      	cmp	r3, r4
 800fec2:	d908      	bls.n	800fed6 <_free_r+0x46>
 800fec4:	6825      	ldr	r5, [r4, #0]
 800fec6:	1961      	adds	r1, r4, r5
 800fec8:	428b      	cmp	r3, r1
 800feca:	bf01      	itttt	eq
 800fecc:	6819      	ldreq	r1, [r3, #0]
 800fece:	685b      	ldreq	r3, [r3, #4]
 800fed0:	1949      	addeq	r1, r1, r5
 800fed2:	6021      	streq	r1, [r4, #0]
 800fed4:	e7ed      	b.n	800feb2 <_free_r+0x22>
 800fed6:	461a      	mov	r2, r3
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	b10b      	cbz	r3, 800fee0 <_free_r+0x50>
 800fedc:	42a3      	cmp	r3, r4
 800fede:	d9fa      	bls.n	800fed6 <_free_r+0x46>
 800fee0:	6811      	ldr	r1, [r2, #0]
 800fee2:	1855      	adds	r5, r2, r1
 800fee4:	42a5      	cmp	r5, r4
 800fee6:	d10b      	bne.n	800ff00 <_free_r+0x70>
 800fee8:	6824      	ldr	r4, [r4, #0]
 800feea:	4421      	add	r1, r4
 800feec:	1854      	adds	r4, r2, r1
 800feee:	42a3      	cmp	r3, r4
 800fef0:	6011      	str	r1, [r2, #0]
 800fef2:	d1e0      	bne.n	800feb6 <_free_r+0x26>
 800fef4:	681c      	ldr	r4, [r3, #0]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	6053      	str	r3, [r2, #4]
 800fefa:	4421      	add	r1, r4
 800fefc:	6011      	str	r1, [r2, #0]
 800fefe:	e7da      	b.n	800feb6 <_free_r+0x26>
 800ff00:	d902      	bls.n	800ff08 <_free_r+0x78>
 800ff02:	230c      	movs	r3, #12
 800ff04:	6003      	str	r3, [r0, #0]
 800ff06:	e7d6      	b.n	800feb6 <_free_r+0x26>
 800ff08:	6825      	ldr	r5, [r4, #0]
 800ff0a:	1961      	adds	r1, r4, r5
 800ff0c:	428b      	cmp	r3, r1
 800ff0e:	bf04      	itt	eq
 800ff10:	6819      	ldreq	r1, [r3, #0]
 800ff12:	685b      	ldreq	r3, [r3, #4]
 800ff14:	6063      	str	r3, [r4, #4]
 800ff16:	bf04      	itt	eq
 800ff18:	1949      	addeq	r1, r1, r5
 800ff1a:	6021      	streq	r1, [r4, #0]
 800ff1c:	6054      	str	r4, [r2, #4]
 800ff1e:	e7ca      	b.n	800feb6 <_free_r+0x26>
 800ff20:	b003      	add	sp, #12
 800ff22:	bd30      	pop	{r4, r5, pc}
 800ff24:	20000790 	.word	0x20000790

0800ff28 <sbrk_aligned>:
 800ff28:	b570      	push	{r4, r5, r6, lr}
 800ff2a:	4e0e      	ldr	r6, [pc, #56]	; (800ff64 <sbrk_aligned+0x3c>)
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	6831      	ldr	r1, [r6, #0]
 800ff30:	4605      	mov	r5, r0
 800ff32:	b911      	cbnz	r1, 800ff3a <sbrk_aligned+0x12>
 800ff34:	f000 fb4c 	bl	80105d0 <_sbrk_r>
 800ff38:	6030      	str	r0, [r6, #0]
 800ff3a:	4621      	mov	r1, r4
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	f000 fb47 	bl	80105d0 <_sbrk_r>
 800ff42:	1c43      	adds	r3, r0, #1
 800ff44:	d00a      	beq.n	800ff5c <sbrk_aligned+0x34>
 800ff46:	1cc4      	adds	r4, r0, #3
 800ff48:	f024 0403 	bic.w	r4, r4, #3
 800ff4c:	42a0      	cmp	r0, r4
 800ff4e:	d007      	beq.n	800ff60 <sbrk_aligned+0x38>
 800ff50:	1a21      	subs	r1, r4, r0
 800ff52:	4628      	mov	r0, r5
 800ff54:	f000 fb3c 	bl	80105d0 <_sbrk_r>
 800ff58:	3001      	adds	r0, #1
 800ff5a:	d101      	bne.n	800ff60 <sbrk_aligned+0x38>
 800ff5c:	f04f 34ff 	mov.w	r4, #4294967295
 800ff60:	4620      	mov	r0, r4
 800ff62:	bd70      	pop	{r4, r5, r6, pc}
 800ff64:	20000794 	.word	0x20000794

0800ff68 <_malloc_r>:
 800ff68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff6c:	1ccd      	adds	r5, r1, #3
 800ff6e:	f025 0503 	bic.w	r5, r5, #3
 800ff72:	3508      	adds	r5, #8
 800ff74:	2d0c      	cmp	r5, #12
 800ff76:	bf38      	it	cc
 800ff78:	250c      	movcc	r5, #12
 800ff7a:	2d00      	cmp	r5, #0
 800ff7c:	4607      	mov	r7, r0
 800ff7e:	db01      	blt.n	800ff84 <_malloc_r+0x1c>
 800ff80:	42a9      	cmp	r1, r5
 800ff82:	d905      	bls.n	800ff90 <_malloc_r+0x28>
 800ff84:	230c      	movs	r3, #12
 800ff86:	603b      	str	r3, [r7, #0]
 800ff88:	2600      	movs	r6, #0
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff90:	4e2e      	ldr	r6, [pc, #184]	; (801004c <_malloc_r+0xe4>)
 800ff92:	f000 fdf9 	bl	8010b88 <__malloc_lock>
 800ff96:	6833      	ldr	r3, [r6, #0]
 800ff98:	461c      	mov	r4, r3
 800ff9a:	bb34      	cbnz	r4, 800ffea <_malloc_r+0x82>
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	f7ff ffc2 	bl	800ff28 <sbrk_aligned>
 800ffa4:	1c43      	adds	r3, r0, #1
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	d14d      	bne.n	8010046 <_malloc_r+0xde>
 800ffaa:	6834      	ldr	r4, [r6, #0]
 800ffac:	4626      	mov	r6, r4
 800ffae:	2e00      	cmp	r6, #0
 800ffb0:	d140      	bne.n	8010034 <_malloc_r+0xcc>
 800ffb2:	6823      	ldr	r3, [r4, #0]
 800ffb4:	4631      	mov	r1, r6
 800ffb6:	4638      	mov	r0, r7
 800ffb8:	eb04 0803 	add.w	r8, r4, r3
 800ffbc:	f000 fb08 	bl	80105d0 <_sbrk_r>
 800ffc0:	4580      	cmp	r8, r0
 800ffc2:	d13a      	bne.n	801003a <_malloc_r+0xd2>
 800ffc4:	6821      	ldr	r1, [r4, #0]
 800ffc6:	3503      	adds	r5, #3
 800ffc8:	1a6d      	subs	r5, r5, r1
 800ffca:	f025 0503 	bic.w	r5, r5, #3
 800ffce:	3508      	adds	r5, #8
 800ffd0:	2d0c      	cmp	r5, #12
 800ffd2:	bf38      	it	cc
 800ffd4:	250c      	movcc	r5, #12
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	4638      	mov	r0, r7
 800ffda:	f7ff ffa5 	bl	800ff28 <sbrk_aligned>
 800ffde:	3001      	adds	r0, #1
 800ffe0:	d02b      	beq.n	801003a <_malloc_r+0xd2>
 800ffe2:	6823      	ldr	r3, [r4, #0]
 800ffe4:	442b      	add	r3, r5
 800ffe6:	6023      	str	r3, [r4, #0]
 800ffe8:	e00e      	b.n	8010008 <_malloc_r+0xa0>
 800ffea:	6822      	ldr	r2, [r4, #0]
 800ffec:	1b52      	subs	r2, r2, r5
 800ffee:	d41e      	bmi.n	801002e <_malloc_r+0xc6>
 800fff0:	2a0b      	cmp	r2, #11
 800fff2:	d916      	bls.n	8010022 <_malloc_r+0xba>
 800fff4:	1961      	adds	r1, r4, r5
 800fff6:	42a3      	cmp	r3, r4
 800fff8:	6025      	str	r5, [r4, #0]
 800fffa:	bf18      	it	ne
 800fffc:	6059      	strne	r1, [r3, #4]
 800fffe:	6863      	ldr	r3, [r4, #4]
 8010000:	bf08      	it	eq
 8010002:	6031      	streq	r1, [r6, #0]
 8010004:	5162      	str	r2, [r4, r5]
 8010006:	604b      	str	r3, [r1, #4]
 8010008:	4638      	mov	r0, r7
 801000a:	f104 060b 	add.w	r6, r4, #11
 801000e:	f000 fdc1 	bl	8010b94 <__malloc_unlock>
 8010012:	f026 0607 	bic.w	r6, r6, #7
 8010016:	1d23      	adds	r3, r4, #4
 8010018:	1af2      	subs	r2, r6, r3
 801001a:	d0b6      	beq.n	800ff8a <_malloc_r+0x22>
 801001c:	1b9b      	subs	r3, r3, r6
 801001e:	50a3      	str	r3, [r4, r2]
 8010020:	e7b3      	b.n	800ff8a <_malloc_r+0x22>
 8010022:	6862      	ldr	r2, [r4, #4]
 8010024:	42a3      	cmp	r3, r4
 8010026:	bf0c      	ite	eq
 8010028:	6032      	streq	r2, [r6, #0]
 801002a:	605a      	strne	r2, [r3, #4]
 801002c:	e7ec      	b.n	8010008 <_malloc_r+0xa0>
 801002e:	4623      	mov	r3, r4
 8010030:	6864      	ldr	r4, [r4, #4]
 8010032:	e7b2      	b.n	800ff9a <_malloc_r+0x32>
 8010034:	4634      	mov	r4, r6
 8010036:	6876      	ldr	r6, [r6, #4]
 8010038:	e7b9      	b.n	800ffae <_malloc_r+0x46>
 801003a:	230c      	movs	r3, #12
 801003c:	603b      	str	r3, [r7, #0]
 801003e:	4638      	mov	r0, r7
 8010040:	f000 fda8 	bl	8010b94 <__malloc_unlock>
 8010044:	e7a1      	b.n	800ff8a <_malloc_r+0x22>
 8010046:	6025      	str	r5, [r4, #0]
 8010048:	e7de      	b.n	8010008 <_malloc_r+0xa0>
 801004a:	bf00      	nop
 801004c:	20000790 	.word	0x20000790

08010050 <__ssputs_r>:
 8010050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010054:	688e      	ldr	r6, [r1, #8]
 8010056:	429e      	cmp	r6, r3
 8010058:	4682      	mov	sl, r0
 801005a:	460c      	mov	r4, r1
 801005c:	4690      	mov	r8, r2
 801005e:	461f      	mov	r7, r3
 8010060:	d838      	bhi.n	80100d4 <__ssputs_r+0x84>
 8010062:	898a      	ldrh	r2, [r1, #12]
 8010064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010068:	d032      	beq.n	80100d0 <__ssputs_r+0x80>
 801006a:	6825      	ldr	r5, [r4, #0]
 801006c:	6909      	ldr	r1, [r1, #16]
 801006e:	eba5 0901 	sub.w	r9, r5, r1
 8010072:	6965      	ldr	r5, [r4, #20]
 8010074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801007c:	3301      	adds	r3, #1
 801007e:	444b      	add	r3, r9
 8010080:	106d      	asrs	r5, r5, #1
 8010082:	429d      	cmp	r5, r3
 8010084:	bf38      	it	cc
 8010086:	461d      	movcc	r5, r3
 8010088:	0553      	lsls	r3, r2, #21
 801008a:	d531      	bpl.n	80100f0 <__ssputs_r+0xa0>
 801008c:	4629      	mov	r1, r5
 801008e:	f7ff ff6b 	bl	800ff68 <_malloc_r>
 8010092:	4606      	mov	r6, r0
 8010094:	b950      	cbnz	r0, 80100ac <__ssputs_r+0x5c>
 8010096:	230c      	movs	r3, #12
 8010098:	f8ca 3000 	str.w	r3, [sl]
 801009c:	89a3      	ldrh	r3, [r4, #12]
 801009e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100a2:	81a3      	strh	r3, [r4, #12]
 80100a4:	f04f 30ff 	mov.w	r0, #4294967295
 80100a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ac:	6921      	ldr	r1, [r4, #16]
 80100ae:	464a      	mov	r2, r9
 80100b0:	f7fc f99a 	bl	800c3e8 <memcpy>
 80100b4:	89a3      	ldrh	r3, [r4, #12]
 80100b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100be:	81a3      	strh	r3, [r4, #12]
 80100c0:	6126      	str	r6, [r4, #16]
 80100c2:	6165      	str	r5, [r4, #20]
 80100c4:	444e      	add	r6, r9
 80100c6:	eba5 0509 	sub.w	r5, r5, r9
 80100ca:	6026      	str	r6, [r4, #0]
 80100cc:	60a5      	str	r5, [r4, #8]
 80100ce:	463e      	mov	r6, r7
 80100d0:	42be      	cmp	r6, r7
 80100d2:	d900      	bls.n	80100d6 <__ssputs_r+0x86>
 80100d4:	463e      	mov	r6, r7
 80100d6:	6820      	ldr	r0, [r4, #0]
 80100d8:	4632      	mov	r2, r6
 80100da:	4641      	mov	r1, r8
 80100dc:	f000 fd3a 	bl	8010b54 <memmove>
 80100e0:	68a3      	ldr	r3, [r4, #8]
 80100e2:	1b9b      	subs	r3, r3, r6
 80100e4:	60a3      	str	r3, [r4, #8]
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	4433      	add	r3, r6
 80100ea:	6023      	str	r3, [r4, #0]
 80100ec:	2000      	movs	r0, #0
 80100ee:	e7db      	b.n	80100a8 <__ssputs_r+0x58>
 80100f0:	462a      	mov	r2, r5
 80100f2:	f000 fd55 	bl	8010ba0 <_realloc_r>
 80100f6:	4606      	mov	r6, r0
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d1e1      	bne.n	80100c0 <__ssputs_r+0x70>
 80100fc:	6921      	ldr	r1, [r4, #16]
 80100fe:	4650      	mov	r0, sl
 8010100:	f7ff fec6 	bl	800fe90 <_free_r>
 8010104:	e7c7      	b.n	8010096 <__ssputs_r+0x46>
	...

08010108 <_svfiprintf_r>:
 8010108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010c:	4698      	mov	r8, r3
 801010e:	898b      	ldrh	r3, [r1, #12]
 8010110:	061b      	lsls	r3, r3, #24
 8010112:	b09d      	sub	sp, #116	; 0x74
 8010114:	4607      	mov	r7, r0
 8010116:	460d      	mov	r5, r1
 8010118:	4614      	mov	r4, r2
 801011a:	d50e      	bpl.n	801013a <_svfiprintf_r+0x32>
 801011c:	690b      	ldr	r3, [r1, #16]
 801011e:	b963      	cbnz	r3, 801013a <_svfiprintf_r+0x32>
 8010120:	2140      	movs	r1, #64	; 0x40
 8010122:	f7ff ff21 	bl	800ff68 <_malloc_r>
 8010126:	6028      	str	r0, [r5, #0]
 8010128:	6128      	str	r0, [r5, #16]
 801012a:	b920      	cbnz	r0, 8010136 <_svfiprintf_r+0x2e>
 801012c:	230c      	movs	r3, #12
 801012e:	603b      	str	r3, [r7, #0]
 8010130:	f04f 30ff 	mov.w	r0, #4294967295
 8010134:	e0d1      	b.n	80102da <_svfiprintf_r+0x1d2>
 8010136:	2340      	movs	r3, #64	; 0x40
 8010138:	616b      	str	r3, [r5, #20]
 801013a:	2300      	movs	r3, #0
 801013c:	9309      	str	r3, [sp, #36]	; 0x24
 801013e:	2320      	movs	r3, #32
 8010140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010144:	f8cd 800c 	str.w	r8, [sp, #12]
 8010148:	2330      	movs	r3, #48	; 0x30
 801014a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102f4 <_svfiprintf_r+0x1ec>
 801014e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010152:	f04f 0901 	mov.w	r9, #1
 8010156:	4623      	mov	r3, r4
 8010158:	469a      	mov	sl, r3
 801015a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801015e:	b10a      	cbz	r2, 8010164 <_svfiprintf_r+0x5c>
 8010160:	2a25      	cmp	r2, #37	; 0x25
 8010162:	d1f9      	bne.n	8010158 <_svfiprintf_r+0x50>
 8010164:	ebba 0b04 	subs.w	fp, sl, r4
 8010168:	d00b      	beq.n	8010182 <_svfiprintf_r+0x7a>
 801016a:	465b      	mov	r3, fp
 801016c:	4622      	mov	r2, r4
 801016e:	4629      	mov	r1, r5
 8010170:	4638      	mov	r0, r7
 8010172:	f7ff ff6d 	bl	8010050 <__ssputs_r>
 8010176:	3001      	adds	r0, #1
 8010178:	f000 80aa 	beq.w	80102d0 <_svfiprintf_r+0x1c8>
 801017c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801017e:	445a      	add	r2, fp
 8010180:	9209      	str	r2, [sp, #36]	; 0x24
 8010182:	f89a 3000 	ldrb.w	r3, [sl]
 8010186:	2b00      	cmp	r3, #0
 8010188:	f000 80a2 	beq.w	80102d0 <_svfiprintf_r+0x1c8>
 801018c:	2300      	movs	r3, #0
 801018e:	f04f 32ff 	mov.w	r2, #4294967295
 8010192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010196:	f10a 0a01 	add.w	sl, sl, #1
 801019a:	9304      	str	r3, [sp, #16]
 801019c:	9307      	str	r3, [sp, #28]
 801019e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101a2:	931a      	str	r3, [sp, #104]	; 0x68
 80101a4:	4654      	mov	r4, sl
 80101a6:	2205      	movs	r2, #5
 80101a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ac:	4851      	ldr	r0, [pc, #324]	; (80102f4 <_svfiprintf_r+0x1ec>)
 80101ae:	f7f0 f83f 	bl	8000230 <memchr>
 80101b2:	9a04      	ldr	r2, [sp, #16]
 80101b4:	b9d8      	cbnz	r0, 80101ee <_svfiprintf_r+0xe6>
 80101b6:	06d0      	lsls	r0, r2, #27
 80101b8:	bf44      	itt	mi
 80101ba:	2320      	movmi	r3, #32
 80101bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101c0:	0711      	lsls	r1, r2, #28
 80101c2:	bf44      	itt	mi
 80101c4:	232b      	movmi	r3, #43	; 0x2b
 80101c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ca:	f89a 3000 	ldrb.w	r3, [sl]
 80101ce:	2b2a      	cmp	r3, #42	; 0x2a
 80101d0:	d015      	beq.n	80101fe <_svfiprintf_r+0xf6>
 80101d2:	9a07      	ldr	r2, [sp, #28]
 80101d4:	4654      	mov	r4, sl
 80101d6:	2000      	movs	r0, #0
 80101d8:	f04f 0c0a 	mov.w	ip, #10
 80101dc:	4621      	mov	r1, r4
 80101de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e2:	3b30      	subs	r3, #48	; 0x30
 80101e4:	2b09      	cmp	r3, #9
 80101e6:	d94e      	bls.n	8010286 <_svfiprintf_r+0x17e>
 80101e8:	b1b0      	cbz	r0, 8010218 <_svfiprintf_r+0x110>
 80101ea:	9207      	str	r2, [sp, #28]
 80101ec:	e014      	b.n	8010218 <_svfiprintf_r+0x110>
 80101ee:	eba0 0308 	sub.w	r3, r0, r8
 80101f2:	fa09 f303 	lsl.w	r3, r9, r3
 80101f6:	4313      	orrs	r3, r2
 80101f8:	9304      	str	r3, [sp, #16]
 80101fa:	46a2      	mov	sl, r4
 80101fc:	e7d2      	b.n	80101a4 <_svfiprintf_r+0x9c>
 80101fe:	9b03      	ldr	r3, [sp, #12]
 8010200:	1d19      	adds	r1, r3, #4
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	9103      	str	r1, [sp, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	bfbb      	ittet	lt
 801020a:	425b      	neglt	r3, r3
 801020c:	f042 0202 	orrlt.w	r2, r2, #2
 8010210:	9307      	strge	r3, [sp, #28]
 8010212:	9307      	strlt	r3, [sp, #28]
 8010214:	bfb8      	it	lt
 8010216:	9204      	strlt	r2, [sp, #16]
 8010218:	7823      	ldrb	r3, [r4, #0]
 801021a:	2b2e      	cmp	r3, #46	; 0x2e
 801021c:	d10c      	bne.n	8010238 <_svfiprintf_r+0x130>
 801021e:	7863      	ldrb	r3, [r4, #1]
 8010220:	2b2a      	cmp	r3, #42	; 0x2a
 8010222:	d135      	bne.n	8010290 <_svfiprintf_r+0x188>
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	1d1a      	adds	r2, r3, #4
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	9203      	str	r2, [sp, #12]
 801022c:	2b00      	cmp	r3, #0
 801022e:	bfb8      	it	lt
 8010230:	f04f 33ff 	movlt.w	r3, #4294967295
 8010234:	3402      	adds	r4, #2
 8010236:	9305      	str	r3, [sp, #20]
 8010238:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010304 <_svfiprintf_r+0x1fc>
 801023c:	7821      	ldrb	r1, [r4, #0]
 801023e:	2203      	movs	r2, #3
 8010240:	4650      	mov	r0, sl
 8010242:	f7ef fff5 	bl	8000230 <memchr>
 8010246:	b140      	cbz	r0, 801025a <_svfiprintf_r+0x152>
 8010248:	2340      	movs	r3, #64	; 0x40
 801024a:	eba0 000a 	sub.w	r0, r0, sl
 801024e:	fa03 f000 	lsl.w	r0, r3, r0
 8010252:	9b04      	ldr	r3, [sp, #16]
 8010254:	4303      	orrs	r3, r0
 8010256:	3401      	adds	r4, #1
 8010258:	9304      	str	r3, [sp, #16]
 801025a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801025e:	4826      	ldr	r0, [pc, #152]	; (80102f8 <_svfiprintf_r+0x1f0>)
 8010260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010264:	2206      	movs	r2, #6
 8010266:	f7ef ffe3 	bl	8000230 <memchr>
 801026a:	2800      	cmp	r0, #0
 801026c:	d038      	beq.n	80102e0 <_svfiprintf_r+0x1d8>
 801026e:	4b23      	ldr	r3, [pc, #140]	; (80102fc <_svfiprintf_r+0x1f4>)
 8010270:	bb1b      	cbnz	r3, 80102ba <_svfiprintf_r+0x1b2>
 8010272:	9b03      	ldr	r3, [sp, #12]
 8010274:	3307      	adds	r3, #7
 8010276:	f023 0307 	bic.w	r3, r3, #7
 801027a:	3308      	adds	r3, #8
 801027c:	9303      	str	r3, [sp, #12]
 801027e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010280:	4433      	add	r3, r6
 8010282:	9309      	str	r3, [sp, #36]	; 0x24
 8010284:	e767      	b.n	8010156 <_svfiprintf_r+0x4e>
 8010286:	fb0c 3202 	mla	r2, ip, r2, r3
 801028a:	460c      	mov	r4, r1
 801028c:	2001      	movs	r0, #1
 801028e:	e7a5      	b.n	80101dc <_svfiprintf_r+0xd4>
 8010290:	2300      	movs	r3, #0
 8010292:	3401      	adds	r4, #1
 8010294:	9305      	str	r3, [sp, #20]
 8010296:	4619      	mov	r1, r3
 8010298:	f04f 0c0a 	mov.w	ip, #10
 801029c:	4620      	mov	r0, r4
 801029e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102a2:	3a30      	subs	r2, #48	; 0x30
 80102a4:	2a09      	cmp	r2, #9
 80102a6:	d903      	bls.n	80102b0 <_svfiprintf_r+0x1a8>
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d0c5      	beq.n	8010238 <_svfiprintf_r+0x130>
 80102ac:	9105      	str	r1, [sp, #20]
 80102ae:	e7c3      	b.n	8010238 <_svfiprintf_r+0x130>
 80102b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80102b4:	4604      	mov	r4, r0
 80102b6:	2301      	movs	r3, #1
 80102b8:	e7f0      	b.n	801029c <_svfiprintf_r+0x194>
 80102ba:	ab03      	add	r3, sp, #12
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	462a      	mov	r2, r5
 80102c0:	4b0f      	ldr	r3, [pc, #60]	; (8010300 <_svfiprintf_r+0x1f8>)
 80102c2:	a904      	add	r1, sp, #16
 80102c4:	4638      	mov	r0, r7
 80102c6:	f7fc f945 	bl	800c554 <_printf_float>
 80102ca:	1c42      	adds	r2, r0, #1
 80102cc:	4606      	mov	r6, r0
 80102ce:	d1d6      	bne.n	801027e <_svfiprintf_r+0x176>
 80102d0:	89ab      	ldrh	r3, [r5, #12]
 80102d2:	065b      	lsls	r3, r3, #25
 80102d4:	f53f af2c 	bmi.w	8010130 <_svfiprintf_r+0x28>
 80102d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102da:	b01d      	add	sp, #116	; 0x74
 80102dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e0:	ab03      	add	r3, sp, #12
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	462a      	mov	r2, r5
 80102e6:	4b06      	ldr	r3, [pc, #24]	; (8010300 <_svfiprintf_r+0x1f8>)
 80102e8:	a904      	add	r1, sp, #16
 80102ea:	4638      	mov	r0, r7
 80102ec:	f7fc fbd6 	bl	800ca9c <_printf_i>
 80102f0:	e7eb      	b.n	80102ca <_svfiprintf_r+0x1c2>
 80102f2:	bf00      	nop
 80102f4:	08012ff4 	.word	0x08012ff4
 80102f8:	08012ffe 	.word	0x08012ffe
 80102fc:	0800c555 	.word	0x0800c555
 8010300:	08010051 	.word	0x08010051
 8010304:	08012ffa 	.word	0x08012ffa

08010308 <__sfputc_r>:
 8010308:	6893      	ldr	r3, [r2, #8]
 801030a:	3b01      	subs	r3, #1
 801030c:	2b00      	cmp	r3, #0
 801030e:	b410      	push	{r4}
 8010310:	6093      	str	r3, [r2, #8]
 8010312:	da08      	bge.n	8010326 <__sfputc_r+0x1e>
 8010314:	6994      	ldr	r4, [r2, #24]
 8010316:	42a3      	cmp	r3, r4
 8010318:	db01      	blt.n	801031e <__sfputc_r+0x16>
 801031a:	290a      	cmp	r1, #10
 801031c:	d103      	bne.n	8010326 <__sfputc_r+0x1e>
 801031e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010322:	f000 b9bd 	b.w	80106a0 <__swbuf_r>
 8010326:	6813      	ldr	r3, [r2, #0]
 8010328:	1c58      	adds	r0, r3, #1
 801032a:	6010      	str	r0, [r2, #0]
 801032c:	7019      	strb	r1, [r3, #0]
 801032e:	4608      	mov	r0, r1
 8010330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010334:	4770      	bx	lr

08010336 <__sfputs_r>:
 8010336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010338:	4606      	mov	r6, r0
 801033a:	460f      	mov	r7, r1
 801033c:	4614      	mov	r4, r2
 801033e:	18d5      	adds	r5, r2, r3
 8010340:	42ac      	cmp	r4, r5
 8010342:	d101      	bne.n	8010348 <__sfputs_r+0x12>
 8010344:	2000      	movs	r0, #0
 8010346:	e007      	b.n	8010358 <__sfputs_r+0x22>
 8010348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801034c:	463a      	mov	r2, r7
 801034e:	4630      	mov	r0, r6
 8010350:	f7ff ffda 	bl	8010308 <__sfputc_r>
 8010354:	1c43      	adds	r3, r0, #1
 8010356:	d1f3      	bne.n	8010340 <__sfputs_r+0xa>
 8010358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801035c <_vfiprintf_r>:
 801035c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010360:	460d      	mov	r5, r1
 8010362:	b09d      	sub	sp, #116	; 0x74
 8010364:	4614      	mov	r4, r2
 8010366:	4698      	mov	r8, r3
 8010368:	4606      	mov	r6, r0
 801036a:	b118      	cbz	r0, 8010374 <_vfiprintf_r+0x18>
 801036c:	6983      	ldr	r3, [r0, #24]
 801036e:	b90b      	cbnz	r3, 8010374 <_vfiprintf_r+0x18>
 8010370:	f7fe fc88 	bl	800ec84 <__sinit>
 8010374:	4b89      	ldr	r3, [pc, #548]	; (801059c <_vfiprintf_r+0x240>)
 8010376:	429d      	cmp	r5, r3
 8010378:	d11b      	bne.n	80103b2 <_vfiprintf_r+0x56>
 801037a:	6875      	ldr	r5, [r6, #4]
 801037c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801037e:	07d9      	lsls	r1, r3, #31
 8010380:	d405      	bmi.n	801038e <_vfiprintf_r+0x32>
 8010382:	89ab      	ldrh	r3, [r5, #12]
 8010384:	059a      	lsls	r2, r3, #22
 8010386:	d402      	bmi.n	801038e <_vfiprintf_r+0x32>
 8010388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801038a:	f7ff f88c 	bl	800f4a6 <__retarget_lock_acquire_recursive>
 801038e:	89ab      	ldrh	r3, [r5, #12]
 8010390:	071b      	lsls	r3, r3, #28
 8010392:	d501      	bpl.n	8010398 <_vfiprintf_r+0x3c>
 8010394:	692b      	ldr	r3, [r5, #16]
 8010396:	b9eb      	cbnz	r3, 80103d4 <_vfiprintf_r+0x78>
 8010398:	4629      	mov	r1, r5
 801039a:	4630      	mov	r0, r6
 801039c:	f000 f9f2 	bl	8010784 <__swsetup_r>
 80103a0:	b1c0      	cbz	r0, 80103d4 <_vfiprintf_r+0x78>
 80103a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103a4:	07dc      	lsls	r4, r3, #31
 80103a6:	d50e      	bpl.n	80103c6 <_vfiprintf_r+0x6a>
 80103a8:	f04f 30ff 	mov.w	r0, #4294967295
 80103ac:	b01d      	add	sp, #116	; 0x74
 80103ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b2:	4b7b      	ldr	r3, [pc, #492]	; (80105a0 <_vfiprintf_r+0x244>)
 80103b4:	429d      	cmp	r5, r3
 80103b6:	d101      	bne.n	80103bc <_vfiprintf_r+0x60>
 80103b8:	68b5      	ldr	r5, [r6, #8]
 80103ba:	e7df      	b.n	801037c <_vfiprintf_r+0x20>
 80103bc:	4b79      	ldr	r3, [pc, #484]	; (80105a4 <_vfiprintf_r+0x248>)
 80103be:	429d      	cmp	r5, r3
 80103c0:	bf08      	it	eq
 80103c2:	68f5      	ldreq	r5, [r6, #12]
 80103c4:	e7da      	b.n	801037c <_vfiprintf_r+0x20>
 80103c6:	89ab      	ldrh	r3, [r5, #12]
 80103c8:	0598      	lsls	r0, r3, #22
 80103ca:	d4ed      	bmi.n	80103a8 <_vfiprintf_r+0x4c>
 80103cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ce:	f7ff f86b 	bl	800f4a8 <__retarget_lock_release_recursive>
 80103d2:	e7e9      	b.n	80103a8 <_vfiprintf_r+0x4c>
 80103d4:	2300      	movs	r3, #0
 80103d6:	9309      	str	r3, [sp, #36]	; 0x24
 80103d8:	2320      	movs	r3, #32
 80103da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103de:	f8cd 800c 	str.w	r8, [sp, #12]
 80103e2:	2330      	movs	r3, #48	; 0x30
 80103e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80105a8 <_vfiprintf_r+0x24c>
 80103e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103ec:	f04f 0901 	mov.w	r9, #1
 80103f0:	4623      	mov	r3, r4
 80103f2:	469a      	mov	sl, r3
 80103f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103f8:	b10a      	cbz	r2, 80103fe <_vfiprintf_r+0xa2>
 80103fa:	2a25      	cmp	r2, #37	; 0x25
 80103fc:	d1f9      	bne.n	80103f2 <_vfiprintf_r+0x96>
 80103fe:	ebba 0b04 	subs.w	fp, sl, r4
 8010402:	d00b      	beq.n	801041c <_vfiprintf_r+0xc0>
 8010404:	465b      	mov	r3, fp
 8010406:	4622      	mov	r2, r4
 8010408:	4629      	mov	r1, r5
 801040a:	4630      	mov	r0, r6
 801040c:	f7ff ff93 	bl	8010336 <__sfputs_r>
 8010410:	3001      	adds	r0, #1
 8010412:	f000 80aa 	beq.w	801056a <_vfiprintf_r+0x20e>
 8010416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010418:	445a      	add	r2, fp
 801041a:	9209      	str	r2, [sp, #36]	; 0x24
 801041c:	f89a 3000 	ldrb.w	r3, [sl]
 8010420:	2b00      	cmp	r3, #0
 8010422:	f000 80a2 	beq.w	801056a <_vfiprintf_r+0x20e>
 8010426:	2300      	movs	r3, #0
 8010428:	f04f 32ff 	mov.w	r2, #4294967295
 801042c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010430:	f10a 0a01 	add.w	sl, sl, #1
 8010434:	9304      	str	r3, [sp, #16]
 8010436:	9307      	str	r3, [sp, #28]
 8010438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801043c:	931a      	str	r3, [sp, #104]	; 0x68
 801043e:	4654      	mov	r4, sl
 8010440:	2205      	movs	r2, #5
 8010442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010446:	4858      	ldr	r0, [pc, #352]	; (80105a8 <_vfiprintf_r+0x24c>)
 8010448:	f7ef fef2 	bl	8000230 <memchr>
 801044c:	9a04      	ldr	r2, [sp, #16]
 801044e:	b9d8      	cbnz	r0, 8010488 <_vfiprintf_r+0x12c>
 8010450:	06d1      	lsls	r1, r2, #27
 8010452:	bf44      	itt	mi
 8010454:	2320      	movmi	r3, #32
 8010456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801045a:	0713      	lsls	r3, r2, #28
 801045c:	bf44      	itt	mi
 801045e:	232b      	movmi	r3, #43	; 0x2b
 8010460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010464:	f89a 3000 	ldrb.w	r3, [sl]
 8010468:	2b2a      	cmp	r3, #42	; 0x2a
 801046a:	d015      	beq.n	8010498 <_vfiprintf_r+0x13c>
 801046c:	9a07      	ldr	r2, [sp, #28]
 801046e:	4654      	mov	r4, sl
 8010470:	2000      	movs	r0, #0
 8010472:	f04f 0c0a 	mov.w	ip, #10
 8010476:	4621      	mov	r1, r4
 8010478:	f811 3b01 	ldrb.w	r3, [r1], #1
 801047c:	3b30      	subs	r3, #48	; 0x30
 801047e:	2b09      	cmp	r3, #9
 8010480:	d94e      	bls.n	8010520 <_vfiprintf_r+0x1c4>
 8010482:	b1b0      	cbz	r0, 80104b2 <_vfiprintf_r+0x156>
 8010484:	9207      	str	r2, [sp, #28]
 8010486:	e014      	b.n	80104b2 <_vfiprintf_r+0x156>
 8010488:	eba0 0308 	sub.w	r3, r0, r8
 801048c:	fa09 f303 	lsl.w	r3, r9, r3
 8010490:	4313      	orrs	r3, r2
 8010492:	9304      	str	r3, [sp, #16]
 8010494:	46a2      	mov	sl, r4
 8010496:	e7d2      	b.n	801043e <_vfiprintf_r+0xe2>
 8010498:	9b03      	ldr	r3, [sp, #12]
 801049a:	1d19      	adds	r1, r3, #4
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	9103      	str	r1, [sp, #12]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	bfbb      	ittet	lt
 80104a4:	425b      	neglt	r3, r3
 80104a6:	f042 0202 	orrlt.w	r2, r2, #2
 80104aa:	9307      	strge	r3, [sp, #28]
 80104ac:	9307      	strlt	r3, [sp, #28]
 80104ae:	bfb8      	it	lt
 80104b0:	9204      	strlt	r2, [sp, #16]
 80104b2:	7823      	ldrb	r3, [r4, #0]
 80104b4:	2b2e      	cmp	r3, #46	; 0x2e
 80104b6:	d10c      	bne.n	80104d2 <_vfiprintf_r+0x176>
 80104b8:	7863      	ldrb	r3, [r4, #1]
 80104ba:	2b2a      	cmp	r3, #42	; 0x2a
 80104bc:	d135      	bne.n	801052a <_vfiprintf_r+0x1ce>
 80104be:	9b03      	ldr	r3, [sp, #12]
 80104c0:	1d1a      	adds	r2, r3, #4
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	9203      	str	r2, [sp, #12]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	bfb8      	it	lt
 80104ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80104ce:	3402      	adds	r4, #2
 80104d0:	9305      	str	r3, [sp, #20]
 80104d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80105b8 <_vfiprintf_r+0x25c>
 80104d6:	7821      	ldrb	r1, [r4, #0]
 80104d8:	2203      	movs	r2, #3
 80104da:	4650      	mov	r0, sl
 80104dc:	f7ef fea8 	bl	8000230 <memchr>
 80104e0:	b140      	cbz	r0, 80104f4 <_vfiprintf_r+0x198>
 80104e2:	2340      	movs	r3, #64	; 0x40
 80104e4:	eba0 000a 	sub.w	r0, r0, sl
 80104e8:	fa03 f000 	lsl.w	r0, r3, r0
 80104ec:	9b04      	ldr	r3, [sp, #16]
 80104ee:	4303      	orrs	r3, r0
 80104f0:	3401      	adds	r4, #1
 80104f2:	9304      	str	r3, [sp, #16]
 80104f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104f8:	482c      	ldr	r0, [pc, #176]	; (80105ac <_vfiprintf_r+0x250>)
 80104fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104fe:	2206      	movs	r2, #6
 8010500:	f7ef fe96 	bl	8000230 <memchr>
 8010504:	2800      	cmp	r0, #0
 8010506:	d03f      	beq.n	8010588 <_vfiprintf_r+0x22c>
 8010508:	4b29      	ldr	r3, [pc, #164]	; (80105b0 <_vfiprintf_r+0x254>)
 801050a:	bb1b      	cbnz	r3, 8010554 <_vfiprintf_r+0x1f8>
 801050c:	9b03      	ldr	r3, [sp, #12]
 801050e:	3307      	adds	r3, #7
 8010510:	f023 0307 	bic.w	r3, r3, #7
 8010514:	3308      	adds	r3, #8
 8010516:	9303      	str	r3, [sp, #12]
 8010518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801051a:	443b      	add	r3, r7
 801051c:	9309      	str	r3, [sp, #36]	; 0x24
 801051e:	e767      	b.n	80103f0 <_vfiprintf_r+0x94>
 8010520:	fb0c 3202 	mla	r2, ip, r2, r3
 8010524:	460c      	mov	r4, r1
 8010526:	2001      	movs	r0, #1
 8010528:	e7a5      	b.n	8010476 <_vfiprintf_r+0x11a>
 801052a:	2300      	movs	r3, #0
 801052c:	3401      	adds	r4, #1
 801052e:	9305      	str	r3, [sp, #20]
 8010530:	4619      	mov	r1, r3
 8010532:	f04f 0c0a 	mov.w	ip, #10
 8010536:	4620      	mov	r0, r4
 8010538:	f810 2b01 	ldrb.w	r2, [r0], #1
 801053c:	3a30      	subs	r2, #48	; 0x30
 801053e:	2a09      	cmp	r2, #9
 8010540:	d903      	bls.n	801054a <_vfiprintf_r+0x1ee>
 8010542:	2b00      	cmp	r3, #0
 8010544:	d0c5      	beq.n	80104d2 <_vfiprintf_r+0x176>
 8010546:	9105      	str	r1, [sp, #20]
 8010548:	e7c3      	b.n	80104d2 <_vfiprintf_r+0x176>
 801054a:	fb0c 2101 	mla	r1, ip, r1, r2
 801054e:	4604      	mov	r4, r0
 8010550:	2301      	movs	r3, #1
 8010552:	e7f0      	b.n	8010536 <_vfiprintf_r+0x1da>
 8010554:	ab03      	add	r3, sp, #12
 8010556:	9300      	str	r3, [sp, #0]
 8010558:	462a      	mov	r2, r5
 801055a:	4b16      	ldr	r3, [pc, #88]	; (80105b4 <_vfiprintf_r+0x258>)
 801055c:	a904      	add	r1, sp, #16
 801055e:	4630      	mov	r0, r6
 8010560:	f7fb fff8 	bl	800c554 <_printf_float>
 8010564:	4607      	mov	r7, r0
 8010566:	1c78      	adds	r0, r7, #1
 8010568:	d1d6      	bne.n	8010518 <_vfiprintf_r+0x1bc>
 801056a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801056c:	07d9      	lsls	r1, r3, #31
 801056e:	d405      	bmi.n	801057c <_vfiprintf_r+0x220>
 8010570:	89ab      	ldrh	r3, [r5, #12]
 8010572:	059a      	lsls	r2, r3, #22
 8010574:	d402      	bmi.n	801057c <_vfiprintf_r+0x220>
 8010576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010578:	f7fe ff96 	bl	800f4a8 <__retarget_lock_release_recursive>
 801057c:	89ab      	ldrh	r3, [r5, #12]
 801057e:	065b      	lsls	r3, r3, #25
 8010580:	f53f af12 	bmi.w	80103a8 <_vfiprintf_r+0x4c>
 8010584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010586:	e711      	b.n	80103ac <_vfiprintf_r+0x50>
 8010588:	ab03      	add	r3, sp, #12
 801058a:	9300      	str	r3, [sp, #0]
 801058c:	462a      	mov	r2, r5
 801058e:	4b09      	ldr	r3, [pc, #36]	; (80105b4 <_vfiprintf_r+0x258>)
 8010590:	a904      	add	r1, sp, #16
 8010592:	4630      	mov	r0, r6
 8010594:	f7fc fa82 	bl	800ca9c <_printf_i>
 8010598:	e7e4      	b.n	8010564 <_vfiprintf_r+0x208>
 801059a:	bf00      	nop
 801059c:	08012ddc 	.word	0x08012ddc
 80105a0:	08012dfc 	.word	0x08012dfc
 80105a4:	08012dbc 	.word	0x08012dbc
 80105a8:	08012ff4 	.word	0x08012ff4
 80105ac:	08012ffe 	.word	0x08012ffe
 80105b0:	0800c555 	.word	0x0800c555
 80105b4:	08010337 	.word	0x08010337
 80105b8:	08012ffa 	.word	0x08012ffa
 80105bc:	00000000 	.word	0x00000000

080105c0 <nan>:
 80105c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80105c8 <nan+0x8>
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	00000000 	.word	0x00000000
 80105cc:	7ff80000 	.word	0x7ff80000

080105d0 <_sbrk_r>:
 80105d0:	b538      	push	{r3, r4, r5, lr}
 80105d2:	4d06      	ldr	r5, [pc, #24]	; (80105ec <_sbrk_r+0x1c>)
 80105d4:	2300      	movs	r3, #0
 80105d6:	4604      	mov	r4, r0
 80105d8:	4608      	mov	r0, r1
 80105da:	602b      	str	r3, [r5, #0]
 80105dc:	f7f8 fad6 	bl	8008b8c <_sbrk>
 80105e0:	1c43      	adds	r3, r0, #1
 80105e2:	d102      	bne.n	80105ea <_sbrk_r+0x1a>
 80105e4:	682b      	ldr	r3, [r5, #0]
 80105e6:	b103      	cbz	r3, 80105ea <_sbrk_r+0x1a>
 80105e8:	6023      	str	r3, [r4, #0]
 80105ea:	bd38      	pop	{r3, r4, r5, pc}
 80105ec:	20000798 	.word	0x20000798

080105f0 <__sread>:
 80105f0:	b510      	push	{r4, lr}
 80105f2:	460c      	mov	r4, r1
 80105f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105f8:	f000 fb02 	bl	8010c00 <_read_r>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	bfab      	itete	ge
 8010600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010602:	89a3      	ldrhlt	r3, [r4, #12]
 8010604:	181b      	addge	r3, r3, r0
 8010606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801060a:	bfac      	ite	ge
 801060c:	6563      	strge	r3, [r4, #84]	; 0x54
 801060e:	81a3      	strhlt	r3, [r4, #12]
 8010610:	bd10      	pop	{r4, pc}

08010612 <__swrite>:
 8010612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010616:	461f      	mov	r7, r3
 8010618:	898b      	ldrh	r3, [r1, #12]
 801061a:	05db      	lsls	r3, r3, #23
 801061c:	4605      	mov	r5, r0
 801061e:	460c      	mov	r4, r1
 8010620:	4616      	mov	r6, r2
 8010622:	d505      	bpl.n	8010630 <__swrite+0x1e>
 8010624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010628:	2302      	movs	r3, #2
 801062a:	2200      	movs	r2, #0
 801062c:	f000 fa1a 	bl	8010a64 <_lseek_r>
 8010630:	89a3      	ldrh	r3, [r4, #12]
 8010632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801063a:	81a3      	strh	r3, [r4, #12]
 801063c:	4632      	mov	r2, r6
 801063e:	463b      	mov	r3, r7
 8010640:	4628      	mov	r0, r5
 8010642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010646:	f000 b88b 	b.w	8010760 <_write_r>

0801064a <__sseek>:
 801064a:	b510      	push	{r4, lr}
 801064c:	460c      	mov	r4, r1
 801064e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010652:	f000 fa07 	bl	8010a64 <_lseek_r>
 8010656:	1c43      	adds	r3, r0, #1
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	bf15      	itete	ne
 801065c:	6560      	strne	r0, [r4, #84]	; 0x54
 801065e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010666:	81a3      	strheq	r3, [r4, #12]
 8010668:	bf18      	it	ne
 801066a:	81a3      	strhne	r3, [r4, #12]
 801066c:	bd10      	pop	{r4, pc}

0801066e <__sclose>:
 801066e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010672:	f000 b913 	b.w	801089c <_close_r>

08010676 <strncmp>:
 8010676:	b510      	push	{r4, lr}
 8010678:	b17a      	cbz	r2, 801069a <strncmp+0x24>
 801067a:	4603      	mov	r3, r0
 801067c:	3901      	subs	r1, #1
 801067e:	1884      	adds	r4, r0, r2
 8010680:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010684:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010688:	4290      	cmp	r0, r2
 801068a:	d101      	bne.n	8010690 <strncmp+0x1a>
 801068c:	42a3      	cmp	r3, r4
 801068e:	d101      	bne.n	8010694 <strncmp+0x1e>
 8010690:	1a80      	subs	r0, r0, r2
 8010692:	bd10      	pop	{r4, pc}
 8010694:	2800      	cmp	r0, #0
 8010696:	d1f3      	bne.n	8010680 <strncmp+0xa>
 8010698:	e7fa      	b.n	8010690 <strncmp+0x1a>
 801069a:	4610      	mov	r0, r2
 801069c:	e7f9      	b.n	8010692 <strncmp+0x1c>
	...

080106a0 <__swbuf_r>:
 80106a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a2:	460e      	mov	r6, r1
 80106a4:	4614      	mov	r4, r2
 80106a6:	4605      	mov	r5, r0
 80106a8:	b118      	cbz	r0, 80106b2 <__swbuf_r+0x12>
 80106aa:	6983      	ldr	r3, [r0, #24]
 80106ac:	b90b      	cbnz	r3, 80106b2 <__swbuf_r+0x12>
 80106ae:	f7fe fae9 	bl	800ec84 <__sinit>
 80106b2:	4b21      	ldr	r3, [pc, #132]	; (8010738 <__swbuf_r+0x98>)
 80106b4:	429c      	cmp	r4, r3
 80106b6:	d12b      	bne.n	8010710 <__swbuf_r+0x70>
 80106b8:	686c      	ldr	r4, [r5, #4]
 80106ba:	69a3      	ldr	r3, [r4, #24]
 80106bc:	60a3      	str	r3, [r4, #8]
 80106be:	89a3      	ldrh	r3, [r4, #12]
 80106c0:	071a      	lsls	r2, r3, #28
 80106c2:	d52f      	bpl.n	8010724 <__swbuf_r+0x84>
 80106c4:	6923      	ldr	r3, [r4, #16]
 80106c6:	b36b      	cbz	r3, 8010724 <__swbuf_r+0x84>
 80106c8:	6923      	ldr	r3, [r4, #16]
 80106ca:	6820      	ldr	r0, [r4, #0]
 80106cc:	1ac0      	subs	r0, r0, r3
 80106ce:	6963      	ldr	r3, [r4, #20]
 80106d0:	b2f6      	uxtb	r6, r6
 80106d2:	4283      	cmp	r3, r0
 80106d4:	4637      	mov	r7, r6
 80106d6:	dc04      	bgt.n	80106e2 <__swbuf_r+0x42>
 80106d8:	4621      	mov	r1, r4
 80106da:	4628      	mov	r0, r5
 80106dc:	f000 f974 	bl	80109c8 <_fflush_r>
 80106e0:	bb30      	cbnz	r0, 8010730 <__swbuf_r+0x90>
 80106e2:	68a3      	ldr	r3, [r4, #8]
 80106e4:	3b01      	subs	r3, #1
 80106e6:	60a3      	str	r3, [r4, #8]
 80106e8:	6823      	ldr	r3, [r4, #0]
 80106ea:	1c5a      	adds	r2, r3, #1
 80106ec:	6022      	str	r2, [r4, #0]
 80106ee:	701e      	strb	r6, [r3, #0]
 80106f0:	6963      	ldr	r3, [r4, #20]
 80106f2:	3001      	adds	r0, #1
 80106f4:	4283      	cmp	r3, r0
 80106f6:	d004      	beq.n	8010702 <__swbuf_r+0x62>
 80106f8:	89a3      	ldrh	r3, [r4, #12]
 80106fa:	07db      	lsls	r3, r3, #31
 80106fc:	d506      	bpl.n	801070c <__swbuf_r+0x6c>
 80106fe:	2e0a      	cmp	r6, #10
 8010700:	d104      	bne.n	801070c <__swbuf_r+0x6c>
 8010702:	4621      	mov	r1, r4
 8010704:	4628      	mov	r0, r5
 8010706:	f000 f95f 	bl	80109c8 <_fflush_r>
 801070a:	b988      	cbnz	r0, 8010730 <__swbuf_r+0x90>
 801070c:	4638      	mov	r0, r7
 801070e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010710:	4b0a      	ldr	r3, [pc, #40]	; (801073c <__swbuf_r+0x9c>)
 8010712:	429c      	cmp	r4, r3
 8010714:	d101      	bne.n	801071a <__swbuf_r+0x7a>
 8010716:	68ac      	ldr	r4, [r5, #8]
 8010718:	e7cf      	b.n	80106ba <__swbuf_r+0x1a>
 801071a:	4b09      	ldr	r3, [pc, #36]	; (8010740 <__swbuf_r+0xa0>)
 801071c:	429c      	cmp	r4, r3
 801071e:	bf08      	it	eq
 8010720:	68ec      	ldreq	r4, [r5, #12]
 8010722:	e7ca      	b.n	80106ba <__swbuf_r+0x1a>
 8010724:	4621      	mov	r1, r4
 8010726:	4628      	mov	r0, r5
 8010728:	f000 f82c 	bl	8010784 <__swsetup_r>
 801072c:	2800      	cmp	r0, #0
 801072e:	d0cb      	beq.n	80106c8 <__swbuf_r+0x28>
 8010730:	f04f 37ff 	mov.w	r7, #4294967295
 8010734:	e7ea      	b.n	801070c <__swbuf_r+0x6c>
 8010736:	bf00      	nop
 8010738:	08012ddc 	.word	0x08012ddc
 801073c:	08012dfc 	.word	0x08012dfc
 8010740:	08012dbc 	.word	0x08012dbc

08010744 <__ascii_wctomb>:
 8010744:	b149      	cbz	r1, 801075a <__ascii_wctomb+0x16>
 8010746:	2aff      	cmp	r2, #255	; 0xff
 8010748:	bf85      	ittet	hi
 801074a:	238a      	movhi	r3, #138	; 0x8a
 801074c:	6003      	strhi	r3, [r0, #0]
 801074e:	700a      	strbls	r2, [r1, #0]
 8010750:	f04f 30ff 	movhi.w	r0, #4294967295
 8010754:	bf98      	it	ls
 8010756:	2001      	movls	r0, #1
 8010758:	4770      	bx	lr
 801075a:	4608      	mov	r0, r1
 801075c:	4770      	bx	lr
	...

08010760 <_write_r>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	4d07      	ldr	r5, [pc, #28]	; (8010780 <_write_r+0x20>)
 8010764:	4604      	mov	r4, r0
 8010766:	4608      	mov	r0, r1
 8010768:	4611      	mov	r1, r2
 801076a:	2200      	movs	r2, #0
 801076c:	602a      	str	r2, [r5, #0]
 801076e:	461a      	mov	r2, r3
 8010770:	f7f7 f9e0 	bl	8007b34 <_write>
 8010774:	1c43      	adds	r3, r0, #1
 8010776:	d102      	bne.n	801077e <_write_r+0x1e>
 8010778:	682b      	ldr	r3, [r5, #0]
 801077a:	b103      	cbz	r3, 801077e <_write_r+0x1e>
 801077c:	6023      	str	r3, [r4, #0]
 801077e:	bd38      	pop	{r3, r4, r5, pc}
 8010780:	20000798 	.word	0x20000798

08010784 <__swsetup_r>:
 8010784:	4b32      	ldr	r3, [pc, #200]	; (8010850 <__swsetup_r+0xcc>)
 8010786:	b570      	push	{r4, r5, r6, lr}
 8010788:	681d      	ldr	r5, [r3, #0]
 801078a:	4606      	mov	r6, r0
 801078c:	460c      	mov	r4, r1
 801078e:	b125      	cbz	r5, 801079a <__swsetup_r+0x16>
 8010790:	69ab      	ldr	r3, [r5, #24]
 8010792:	b913      	cbnz	r3, 801079a <__swsetup_r+0x16>
 8010794:	4628      	mov	r0, r5
 8010796:	f7fe fa75 	bl	800ec84 <__sinit>
 801079a:	4b2e      	ldr	r3, [pc, #184]	; (8010854 <__swsetup_r+0xd0>)
 801079c:	429c      	cmp	r4, r3
 801079e:	d10f      	bne.n	80107c0 <__swsetup_r+0x3c>
 80107a0:	686c      	ldr	r4, [r5, #4]
 80107a2:	89a3      	ldrh	r3, [r4, #12]
 80107a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107a8:	0719      	lsls	r1, r3, #28
 80107aa:	d42c      	bmi.n	8010806 <__swsetup_r+0x82>
 80107ac:	06dd      	lsls	r5, r3, #27
 80107ae:	d411      	bmi.n	80107d4 <__swsetup_r+0x50>
 80107b0:	2309      	movs	r3, #9
 80107b2:	6033      	str	r3, [r6, #0]
 80107b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107b8:	81a3      	strh	r3, [r4, #12]
 80107ba:	f04f 30ff 	mov.w	r0, #4294967295
 80107be:	e03e      	b.n	801083e <__swsetup_r+0xba>
 80107c0:	4b25      	ldr	r3, [pc, #148]	; (8010858 <__swsetup_r+0xd4>)
 80107c2:	429c      	cmp	r4, r3
 80107c4:	d101      	bne.n	80107ca <__swsetup_r+0x46>
 80107c6:	68ac      	ldr	r4, [r5, #8]
 80107c8:	e7eb      	b.n	80107a2 <__swsetup_r+0x1e>
 80107ca:	4b24      	ldr	r3, [pc, #144]	; (801085c <__swsetup_r+0xd8>)
 80107cc:	429c      	cmp	r4, r3
 80107ce:	bf08      	it	eq
 80107d0:	68ec      	ldreq	r4, [r5, #12]
 80107d2:	e7e6      	b.n	80107a2 <__swsetup_r+0x1e>
 80107d4:	0758      	lsls	r0, r3, #29
 80107d6:	d512      	bpl.n	80107fe <__swsetup_r+0x7a>
 80107d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107da:	b141      	cbz	r1, 80107ee <__swsetup_r+0x6a>
 80107dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107e0:	4299      	cmp	r1, r3
 80107e2:	d002      	beq.n	80107ea <__swsetup_r+0x66>
 80107e4:	4630      	mov	r0, r6
 80107e6:	f7ff fb53 	bl	800fe90 <_free_r>
 80107ea:	2300      	movs	r3, #0
 80107ec:	6363      	str	r3, [r4, #52]	; 0x34
 80107ee:	89a3      	ldrh	r3, [r4, #12]
 80107f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107f4:	81a3      	strh	r3, [r4, #12]
 80107f6:	2300      	movs	r3, #0
 80107f8:	6063      	str	r3, [r4, #4]
 80107fa:	6923      	ldr	r3, [r4, #16]
 80107fc:	6023      	str	r3, [r4, #0]
 80107fe:	89a3      	ldrh	r3, [r4, #12]
 8010800:	f043 0308 	orr.w	r3, r3, #8
 8010804:	81a3      	strh	r3, [r4, #12]
 8010806:	6923      	ldr	r3, [r4, #16]
 8010808:	b94b      	cbnz	r3, 801081e <__swsetup_r+0x9a>
 801080a:	89a3      	ldrh	r3, [r4, #12]
 801080c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010814:	d003      	beq.n	801081e <__swsetup_r+0x9a>
 8010816:	4621      	mov	r1, r4
 8010818:	4630      	mov	r0, r6
 801081a:	f000 f95b 	bl	8010ad4 <__smakebuf_r>
 801081e:	89a0      	ldrh	r0, [r4, #12]
 8010820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010824:	f010 0301 	ands.w	r3, r0, #1
 8010828:	d00a      	beq.n	8010840 <__swsetup_r+0xbc>
 801082a:	2300      	movs	r3, #0
 801082c:	60a3      	str	r3, [r4, #8]
 801082e:	6963      	ldr	r3, [r4, #20]
 8010830:	425b      	negs	r3, r3
 8010832:	61a3      	str	r3, [r4, #24]
 8010834:	6923      	ldr	r3, [r4, #16]
 8010836:	b943      	cbnz	r3, 801084a <__swsetup_r+0xc6>
 8010838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801083c:	d1ba      	bne.n	80107b4 <__swsetup_r+0x30>
 801083e:	bd70      	pop	{r4, r5, r6, pc}
 8010840:	0781      	lsls	r1, r0, #30
 8010842:	bf58      	it	pl
 8010844:	6963      	ldrpl	r3, [r4, #20]
 8010846:	60a3      	str	r3, [r4, #8]
 8010848:	e7f4      	b.n	8010834 <__swsetup_r+0xb0>
 801084a:	2000      	movs	r0, #0
 801084c:	e7f7      	b.n	801083e <__swsetup_r+0xba>
 801084e:	bf00      	nop
 8010850:	20000030 	.word	0x20000030
 8010854:	08012ddc 	.word	0x08012ddc
 8010858:	08012dfc 	.word	0x08012dfc
 801085c:	08012dbc 	.word	0x08012dbc

08010860 <__assert_func>:
 8010860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010862:	4614      	mov	r4, r2
 8010864:	461a      	mov	r2, r3
 8010866:	4b09      	ldr	r3, [pc, #36]	; (801088c <__assert_func+0x2c>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4605      	mov	r5, r0
 801086c:	68d8      	ldr	r0, [r3, #12]
 801086e:	b14c      	cbz	r4, 8010884 <__assert_func+0x24>
 8010870:	4b07      	ldr	r3, [pc, #28]	; (8010890 <__assert_func+0x30>)
 8010872:	9100      	str	r1, [sp, #0]
 8010874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010878:	4906      	ldr	r1, [pc, #24]	; (8010894 <__assert_func+0x34>)
 801087a:	462b      	mov	r3, r5
 801087c:	f000 f8e0 	bl	8010a40 <fiprintf>
 8010880:	f000 f9d0 	bl	8010c24 <abort>
 8010884:	4b04      	ldr	r3, [pc, #16]	; (8010898 <__assert_func+0x38>)
 8010886:	461c      	mov	r4, r3
 8010888:	e7f3      	b.n	8010872 <__assert_func+0x12>
 801088a:	bf00      	nop
 801088c:	20000030 	.word	0x20000030
 8010890:	08013005 	.word	0x08013005
 8010894:	08013012 	.word	0x08013012
 8010898:	08013040 	.word	0x08013040

0801089c <_close_r>:
 801089c:	b538      	push	{r3, r4, r5, lr}
 801089e:	4d06      	ldr	r5, [pc, #24]	; (80108b8 <_close_r+0x1c>)
 80108a0:	2300      	movs	r3, #0
 80108a2:	4604      	mov	r4, r0
 80108a4:	4608      	mov	r0, r1
 80108a6:	602b      	str	r3, [r5, #0]
 80108a8:	f7f8 f93b 	bl	8008b22 <_close>
 80108ac:	1c43      	adds	r3, r0, #1
 80108ae:	d102      	bne.n	80108b6 <_close_r+0x1a>
 80108b0:	682b      	ldr	r3, [r5, #0]
 80108b2:	b103      	cbz	r3, 80108b6 <_close_r+0x1a>
 80108b4:	6023      	str	r3, [r4, #0]
 80108b6:	bd38      	pop	{r3, r4, r5, pc}
 80108b8:	20000798 	.word	0x20000798

080108bc <__sflush_r>:
 80108bc:	898a      	ldrh	r2, [r1, #12]
 80108be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c2:	4605      	mov	r5, r0
 80108c4:	0710      	lsls	r0, r2, #28
 80108c6:	460c      	mov	r4, r1
 80108c8:	d458      	bmi.n	801097c <__sflush_r+0xc0>
 80108ca:	684b      	ldr	r3, [r1, #4]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	dc05      	bgt.n	80108dc <__sflush_r+0x20>
 80108d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	dc02      	bgt.n	80108dc <__sflush_r+0x20>
 80108d6:	2000      	movs	r0, #0
 80108d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108de:	2e00      	cmp	r6, #0
 80108e0:	d0f9      	beq.n	80108d6 <__sflush_r+0x1a>
 80108e2:	2300      	movs	r3, #0
 80108e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108e8:	682f      	ldr	r7, [r5, #0]
 80108ea:	602b      	str	r3, [r5, #0]
 80108ec:	d032      	beq.n	8010954 <__sflush_r+0x98>
 80108ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108f0:	89a3      	ldrh	r3, [r4, #12]
 80108f2:	075a      	lsls	r2, r3, #29
 80108f4:	d505      	bpl.n	8010902 <__sflush_r+0x46>
 80108f6:	6863      	ldr	r3, [r4, #4]
 80108f8:	1ac0      	subs	r0, r0, r3
 80108fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108fc:	b10b      	cbz	r3, 8010902 <__sflush_r+0x46>
 80108fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010900:	1ac0      	subs	r0, r0, r3
 8010902:	2300      	movs	r3, #0
 8010904:	4602      	mov	r2, r0
 8010906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010908:	6a21      	ldr	r1, [r4, #32]
 801090a:	4628      	mov	r0, r5
 801090c:	47b0      	blx	r6
 801090e:	1c43      	adds	r3, r0, #1
 8010910:	89a3      	ldrh	r3, [r4, #12]
 8010912:	d106      	bne.n	8010922 <__sflush_r+0x66>
 8010914:	6829      	ldr	r1, [r5, #0]
 8010916:	291d      	cmp	r1, #29
 8010918:	d82c      	bhi.n	8010974 <__sflush_r+0xb8>
 801091a:	4a2a      	ldr	r2, [pc, #168]	; (80109c4 <__sflush_r+0x108>)
 801091c:	40ca      	lsrs	r2, r1
 801091e:	07d6      	lsls	r6, r2, #31
 8010920:	d528      	bpl.n	8010974 <__sflush_r+0xb8>
 8010922:	2200      	movs	r2, #0
 8010924:	6062      	str	r2, [r4, #4]
 8010926:	04d9      	lsls	r1, r3, #19
 8010928:	6922      	ldr	r2, [r4, #16]
 801092a:	6022      	str	r2, [r4, #0]
 801092c:	d504      	bpl.n	8010938 <__sflush_r+0x7c>
 801092e:	1c42      	adds	r2, r0, #1
 8010930:	d101      	bne.n	8010936 <__sflush_r+0x7a>
 8010932:	682b      	ldr	r3, [r5, #0]
 8010934:	b903      	cbnz	r3, 8010938 <__sflush_r+0x7c>
 8010936:	6560      	str	r0, [r4, #84]	; 0x54
 8010938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801093a:	602f      	str	r7, [r5, #0]
 801093c:	2900      	cmp	r1, #0
 801093e:	d0ca      	beq.n	80108d6 <__sflush_r+0x1a>
 8010940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010944:	4299      	cmp	r1, r3
 8010946:	d002      	beq.n	801094e <__sflush_r+0x92>
 8010948:	4628      	mov	r0, r5
 801094a:	f7ff faa1 	bl	800fe90 <_free_r>
 801094e:	2000      	movs	r0, #0
 8010950:	6360      	str	r0, [r4, #52]	; 0x34
 8010952:	e7c1      	b.n	80108d8 <__sflush_r+0x1c>
 8010954:	6a21      	ldr	r1, [r4, #32]
 8010956:	2301      	movs	r3, #1
 8010958:	4628      	mov	r0, r5
 801095a:	47b0      	blx	r6
 801095c:	1c41      	adds	r1, r0, #1
 801095e:	d1c7      	bne.n	80108f0 <__sflush_r+0x34>
 8010960:	682b      	ldr	r3, [r5, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d0c4      	beq.n	80108f0 <__sflush_r+0x34>
 8010966:	2b1d      	cmp	r3, #29
 8010968:	d001      	beq.n	801096e <__sflush_r+0xb2>
 801096a:	2b16      	cmp	r3, #22
 801096c:	d101      	bne.n	8010972 <__sflush_r+0xb6>
 801096e:	602f      	str	r7, [r5, #0]
 8010970:	e7b1      	b.n	80108d6 <__sflush_r+0x1a>
 8010972:	89a3      	ldrh	r3, [r4, #12]
 8010974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010978:	81a3      	strh	r3, [r4, #12]
 801097a:	e7ad      	b.n	80108d8 <__sflush_r+0x1c>
 801097c:	690f      	ldr	r7, [r1, #16]
 801097e:	2f00      	cmp	r7, #0
 8010980:	d0a9      	beq.n	80108d6 <__sflush_r+0x1a>
 8010982:	0793      	lsls	r3, r2, #30
 8010984:	680e      	ldr	r6, [r1, #0]
 8010986:	bf08      	it	eq
 8010988:	694b      	ldreq	r3, [r1, #20]
 801098a:	600f      	str	r7, [r1, #0]
 801098c:	bf18      	it	ne
 801098e:	2300      	movne	r3, #0
 8010990:	eba6 0807 	sub.w	r8, r6, r7
 8010994:	608b      	str	r3, [r1, #8]
 8010996:	f1b8 0f00 	cmp.w	r8, #0
 801099a:	dd9c      	ble.n	80108d6 <__sflush_r+0x1a>
 801099c:	6a21      	ldr	r1, [r4, #32]
 801099e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109a0:	4643      	mov	r3, r8
 80109a2:	463a      	mov	r2, r7
 80109a4:	4628      	mov	r0, r5
 80109a6:	47b0      	blx	r6
 80109a8:	2800      	cmp	r0, #0
 80109aa:	dc06      	bgt.n	80109ba <__sflush_r+0xfe>
 80109ac:	89a3      	ldrh	r3, [r4, #12]
 80109ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109b2:	81a3      	strh	r3, [r4, #12]
 80109b4:	f04f 30ff 	mov.w	r0, #4294967295
 80109b8:	e78e      	b.n	80108d8 <__sflush_r+0x1c>
 80109ba:	4407      	add	r7, r0
 80109bc:	eba8 0800 	sub.w	r8, r8, r0
 80109c0:	e7e9      	b.n	8010996 <__sflush_r+0xda>
 80109c2:	bf00      	nop
 80109c4:	20400001 	.word	0x20400001

080109c8 <_fflush_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	690b      	ldr	r3, [r1, #16]
 80109cc:	4605      	mov	r5, r0
 80109ce:	460c      	mov	r4, r1
 80109d0:	b913      	cbnz	r3, 80109d8 <_fflush_r+0x10>
 80109d2:	2500      	movs	r5, #0
 80109d4:	4628      	mov	r0, r5
 80109d6:	bd38      	pop	{r3, r4, r5, pc}
 80109d8:	b118      	cbz	r0, 80109e2 <_fflush_r+0x1a>
 80109da:	6983      	ldr	r3, [r0, #24]
 80109dc:	b90b      	cbnz	r3, 80109e2 <_fflush_r+0x1a>
 80109de:	f7fe f951 	bl	800ec84 <__sinit>
 80109e2:	4b14      	ldr	r3, [pc, #80]	; (8010a34 <_fflush_r+0x6c>)
 80109e4:	429c      	cmp	r4, r3
 80109e6:	d11b      	bne.n	8010a20 <_fflush_r+0x58>
 80109e8:	686c      	ldr	r4, [r5, #4]
 80109ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d0ef      	beq.n	80109d2 <_fflush_r+0xa>
 80109f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109f4:	07d0      	lsls	r0, r2, #31
 80109f6:	d404      	bmi.n	8010a02 <_fflush_r+0x3a>
 80109f8:	0599      	lsls	r1, r3, #22
 80109fa:	d402      	bmi.n	8010a02 <_fflush_r+0x3a>
 80109fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109fe:	f7fe fd52 	bl	800f4a6 <__retarget_lock_acquire_recursive>
 8010a02:	4628      	mov	r0, r5
 8010a04:	4621      	mov	r1, r4
 8010a06:	f7ff ff59 	bl	80108bc <__sflush_r>
 8010a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a0c:	07da      	lsls	r2, r3, #31
 8010a0e:	4605      	mov	r5, r0
 8010a10:	d4e0      	bmi.n	80109d4 <_fflush_r+0xc>
 8010a12:	89a3      	ldrh	r3, [r4, #12]
 8010a14:	059b      	lsls	r3, r3, #22
 8010a16:	d4dd      	bmi.n	80109d4 <_fflush_r+0xc>
 8010a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a1a:	f7fe fd45 	bl	800f4a8 <__retarget_lock_release_recursive>
 8010a1e:	e7d9      	b.n	80109d4 <_fflush_r+0xc>
 8010a20:	4b05      	ldr	r3, [pc, #20]	; (8010a38 <_fflush_r+0x70>)
 8010a22:	429c      	cmp	r4, r3
 8010a24:	d101      	bne.n	8010a2a <_fflush_r+0x62>
 8010a26:	68ac      	ldr	r4, [r5, #8]
 8010a28:	e7df      	b.n	80109ea <_fflush_r+0x22>
 8010a2a:	4b04      	ldr	r3, [pc, #16]	; (8010a3c <_fflush_r+0x74>)
 8010a2c:	429c      	cmp	r4, r3
 8010a2e:	bf08      	it	eq
 8010a30:	68ec      	ldreq	r4, [r5, #12]
 8010a32:	e7da      	b.n	80109ea <_fflush_r+0x22>
 8010a34:	08012ddc 	.word	0x08012ddc
 8010a38:	08012dfc 	.word	0x08012dfc
 8010a3c:	08012dbc 	.word	0x08012dbc

08010a40 <fiprintf>:
 8010a40:	b40e      	push	{r1, r2, r3}
 8010a42:	b503      	push	{r0, r1, lr}
 8010a44:	4601      	mov	r1, r0
 8010a46:	ab03      	add	r3, sp, #12
 8010a48:	4805      	ldr	r0, [pc, #20]	; (8010a60 <fiprintf+0x20>)
 8010a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a4e:	6800      	ldr	r0, [r0, #0]
 8010a50:	9301      	str	r3, [sp, #4]
 8010a52:	f7ff fc83 	bl	801035c <_vfiprintf_r>
 8010a56:	b002      	add	sp, #8
 8010a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a5c:	b003      	add	sp, #12
 8010a5e:	4770      	bx	lr
 8010a60:	20000030 	.word	0x20000030

08010a64 <_lseek_r>:
 8010a64:	b538      	push	{r3, r4, r5, lr}
 8010a66:	4d07      	ldr	r5, [pc, #28]	; (8010a84 <_lseek_r+0x20>)
 8010a68:	4604      	mov	r4, r0
 8010a6a:	4608      	mov	r0, r1
 8010a6c:	4611      	mov	r1, r2
 8010a6e:	2200      	movs	r2, #0
 8010a70:	602a      	str	r2, [r5, #0]
 8010a72:	461a      	mov	r2, r3
 8010a74:	f7f8 f87c 	bl	8008b70 <_lseek>
 8010a78:	1c43      	adds	r3, r0, #1
 8010a7a:	d102      	bne.n	8010a82 <_lseek_r+0x1e>
 8010a7c:	682b      	ldr	r3, [r5, #0]
 8010a7e:	b103      	cbz	r3, 8010a82 <_lseek_r+0x1e>
 8010a80:	6023      	str	r3, [r4, #0]
 8010a82:	bd38      	pop	{r3, r4, r5, pc}
 8010a84:	20000798 	.word	0x20000798

08010a88 <__swhatbuf_r>:
 8010a88:	b570      	push	{r4, r5, r6, lr}
 8010a8a:	460e      	mov	r6, r1
 8010a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a90:	2900      	cmp	r1, #0
 8010a92:	b096      	sub	sp, #88	; 0x58
 8010a94:	4614      	mov	r4, r2
 8010a96:	461d      	mov	r5, r3
 8010a98:	da08      	bge.n	8010aac <__swhatbuf_r+0x24>
 8010a9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	602a      	str	r2, [r5, #0]
 8010aa2:	061a      	lsls	r2, r3, #24
 8010aa4:	d410      	bmi.n	8010ac8 <__swhatbuf_r+0x40>
 8010aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aaa:	e00e      	b.n	8010aca <__swhatbuf_r+0x42>
 8010aac:	466a      	mov	r2, sp
 8010aae:	f000 f8c1 	bl	8010c34 <_fstat_r>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	dbf1      	blt.n	8010a9a <__swhatbuf_r+0x12>
 8010ab6:	9a01      	ldr	r2, [sp, #4]
 8010ab8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010abc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ac0:	425a      	negs	r2, r3
 8010ac2:	415a      	adcs	r2, r3
 8010ac4:	602a      	str	r2, [r5, #0]
 8010ac6:	e7ee      	b.n	8010aa6 <__swhatbuf_r+0x1e>
 8010ac8:	2340      	movs	r3, #64	; 0x40
 8010aca:	2000      	movs	r0, #0
 8010acc:	6023      	str	r3, [r4, #0]
 8010ace:	b016      	add	sp, #88	; 0x58
 8010ad0:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ad4 <__smakebuf_r>:
 8010ad4:	898b      	ldrh	r3, [r1, #12]
 8010ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ad8:	079d      	lsls	r5, r3, #30
 8010ada:	4606      	mov	r6, r0
 8010adc:	460c      	mov	r4, r1
 8010ade:	d507      	bpl.n	8010af0 <__smakebuf_r+0x1c>
 8010ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ae4:	6023      	str	r3, [r4, #0]
 8010ae6:	6123      	str	r3, [r4, #16]
 8010ae8:	2301      	movs	r3, #1
 8010aea:	6163      	str	r3, [r4, #20]
 8010aec:	b002      	add	sp, #8
 8010aee:	bd70      	pop	{r4, r5, r6, pc}
 8010af0:	ab01      	add	r3, sp, #4
 8010af2:	466a      	mov	r2, sp
 8010af4:	f7ff ffc8 	bl	8010a88 <__swhatbuf_r>
 8010af8:	9900      	ldr	r1, [sp, #0]
 8010afa:	4605      	mov	r5, r0
 8010afc:	4630      	mov	r0, r6
 8010afe:	f7ff fa33 	bl	800ff68 <_malloc_r>
 8010b02:	b948      	cbnz	r0, 8010b18 <__smakebuf_r+0x44>
 8010b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b08:	059a      	lsls	r2, r3, #22
 8010b0a:	d4ef      	bmi.n	8010aec <__smakebuf_r+0x18>
 8010b0c:	f023 0303 	bic.w	r3, r3, #3
 8010b10:	f043 0302 	orr.w	r3, r3, #2
 8010b14:	81a3      	strh	r3, [r4, #12]
 8010b16:	e7e3      	b.n	8010ae0 <__smakebuf_r+0xc>
 8010b18:	4b0d      	ldr	r3, [pc, #52]	; (8010b50 <__smakebuf_r+0x7c>)
 8010b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b1c:	89a3      	ldrh	r3, [r4, #12]
 8010b1e:	6020      	str	r0, [r4, #0]
 8010b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b24:	81a3      	strh	r3, [r4, #12]
 8010b26:	9b00      	ldr	r3, [sp, #0]
 8010b28:	6163      	str	r3, [r4, #20]
 8010b2a:	9b01      	ldr	r3, [sp, #4]
 8010b2c:	6120      	str	r0, [r4, #16]
 8010b2e:	b15b      	cbz	r3, 8010b48 <__smakebuf_r+0x74>
 8010b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b34:	4630      	mov	r0, r6
 8010b36:	f000 f88f 	bl	8010c58 <_isatty_r>
 8010b3a:	b128      	cbz	r0, 8010b48 <__smakebuf_r+0x74>
 8010b3c:	89a3      	ldrh	r3, [r4, #12]
 8010b3e:	f023 0303 	bic.w	r3, r3, #3
 8010b42:	f043 0301 	orr.w	r3, r3, #1
 8010b46:	81a3      	strh	r3, [r4, #12]
 8010b48:	89a0      	ldrh	r0, [r4, #12]
 8010b4a:	4305      	orrs	r5, r0
 8010b4c:	81a5      	strh	r5, [r4, #12]
 8010b4e:	e7cd      	b.n	8010aec <__smakebuf_r+0x18>
 8010b50:	0800ec1d 	.word	0x0800ec1d

08010b54 <memmove>:
 8010b54:	4288      	cmp	r0, r1
 8010b56:	b510      	push	{r4, lr}
 8010b58:	eb01 0402 	add.w	r4, r1, r2
 8010b5c:	d902      	bls.n	8010b64 <memmove+0x10>
 8010b5e:	4284      	cmp	r4, r0
 8010b60:	4623      	mov	r3, r4
 8010b62:	d807      	bhi.n	8010b74 <memmove+0x20>
 8010b64:	1e43      	subs	r3, r0, #1
 8010b66:	42a1      	cmp	r1, r4
 8010b68:	d008      	beq.n	8010b7c <memmove+0x28>
 8010b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b72:	e7f8      	b.n	8010b66 <memmove+0x12>
 8010b74:	4402      	add	r2, r0
 8010b76:	4601      	mov	r1, r0
 8010b78:	428a      	cmp	r2, r1
 8010b7a:	d100      	bne.n	8010b7e <memmove+0x2a>
 8010b7c:	bd10      	pop	{r4, pc}
 8010b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b86:	e7f7      	b.n	8010b78 <memmove+0x24>

08010b88 <__malloc_lock>:
 8010b88:	4801      	ldr	r0, [pc, #4]	; (8010b90 <__malloc_lock+0x8>)
 8010b8a:	f7fe bc8c 	b.w	800f4a6 <__retarget_lock_acquire_recursive>
 8010b8e:	bf00      	nop
 8010b90:	2000078c 	.word	0x2000078c

08010b94 <__malloc_unlock>:
 8010b94:	4801      	ldr	r0, [pc, #4]	; (8010b9c <__malloc_unlock+0x8>)
 8010b96:	f7fe bc87 	b.w	800f4a8 <__retarget_lock_release_recursive>
 8010b9a:	bf00      	nop
 8010b9c:	2000078c 	.word	0x2000078c

08010ba0 <_realloc_r>:
 8010ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba4:	4680      	mov	r8, r0
 8010ba6:	4614      	mov	r4, r2
 8010ba8:	460e      	mov	r6, r1
 8010baa:	b921      	cbnz	r1, 8010bb6 <_realloc_r+0x16>
 8010bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb0:	4611      	mov	r1, r2
 8010bb2:	f7ff b9d9 	b.w	800ff68 <_malloc_r>
 8010bb6:	b92a      	cbnz	r2, 8010bc4 <_realloc_r+0x24>
 8010bb8:	f7ff f96a 	bl	800fe90 <_free_r>
 8010bbc:	4625      	mov	r5, r4
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc4:	f000 f858 	bl	8010c78 <_malloc_usable_size_r>
 8010bc8:	4284      	cmp	r4, r0
 8010bca:	4607      	mov	r7, r0
 8010bcc:	d802      	bhi.n	8010bd4 <_realloc_r+0x34>
 8010bce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010bd2:	d812      	bhi.n	8010bfa <_realloc_r+0x5a>
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	4640      	mov	r0, r8
 8010bd8:	f7ff f9c6 	bl	800ff68 <_malloc_r>
 8010bdc:	4605      	mov	r5, r0
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d0ed      	beq.n	8010bbe <_realloc_r+0x1e>
 8010be2:	42bc      	cmp	r4, r7
 8010be4:	4622      	mov	r2, r4
 8010be6:	4631      	mov	r1, r6
 8010be8:	bf28      	it	cs
 8010bea:	463a      	movcs	r2, r7
 8010bec:	f7fb fbfc 	bl	800c3e8 <memcpy>
 8010bf0:	4631      	mov	r1, r6
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	f7ff f94c 	bl	800fe90 <_free_r>
 8010bf8:	e7e1      	b.n	8010bbe <_realloc_r+0x1e>
 8010bfa:	4635      	mov	r5, r6
 8010bfc:	e7df      	b.n	8010bbe <_realloc_r+0x1e>
	...

08010c00 <_read_r>:
 8010c00:	b538      	push	{r3, r4, r5, lr}
 8010c02:	4d07      	ldr	r5, [pc, #28]	; (8010c20 <_read_r+0x20>)
 8010c04:	4604      	mov	r4, r0
 8010c06:	4608      	mov	r0, r1
 8010c08:	4611      	mov	r1, r2
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	602a      	str	r2, [r5, #0]
 8010c0e:	461a      	mov	r2, r3
 8010c10:	f7f7 ff6a 	bl	8008ae8 <_read>
 8010c14:	1c43      	adds	r3, r0, #1
 8010c16:	d102      	bne.n	8010c1e <_read_r+0x1e>
 8010c18:	682b      	ldr	r3, [r5, #0]
 8010c1a:	b103      	cbz	r3, 8010c1e <_read_r+0x1e>
 8010c1c:	6023      	str	r3, [r4, #0]
 8010c1e:	bd38      	pop	{r3, r4, r5, pc}
 8010c20:	20000798 	.word	0x20000798

08010c24 <abort>:
 8010c24:	b508      	push	{r3, lr}
 8010c26:	2006      	movs	r0, #6
 8010c28:	f000 f856 	bl	8010cd8 <raise>
 8010c2c:	2001      	movs	r0, #1
 8010c2e:	f7f7 ff51 	bl	8008ad4 <_exit>
	...

08010c34 <_fstat_r>:
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	4d07      	ldr	r5, [pc, #28]	; (8010c54 <_fstat_r+0x20>)
 8010c38:	2300      	movs	r3, #0
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	4608      	mov	r0, r1
 8010c3e:	4611      	mov	r1, r2
 8010c40:	602b      	str	r3, [r5, #0]
 8010c42:	f7f7 ff7a 	bl	8008b3a <_fstat>
 8010c46:	1c43      	adds	r3, r0, #1
 8010c48:	d102      	bne.n	8010c50 <_fstat_r+0x1c>
 8010c4a:	682b      	ldr	r3, [r5, #0]
 8010c4c:	b103      	cbz	r3, 8010c50 <_fstat_r+0x1c>
 8010c4e:	6023      	str	r3, [r4, #0]
 8010c50:	bd38      	pop	{r3, r4, r5, pc}
 8010c52:	bf00      	nop
 8010c54:	20000798 	.word	0x20000798

08010c58 <_isatty_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4d06      	ldr	r5, [pc, #24]	; (8010c74 <_isatty_r+0x1c>)
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	4604      	mov	r4, r0
 8010c60:	4608      	mov	r0, r1
 8010c62:	602b      	str	r3, [r5, #0]
 8010c64:	f7f7 ff79 	bl	8008b5a <_isatty>
 8010c68:	1c43      	adds	r3, r0, #1
 8010c6a:	d102      	bne.n	8010c72 <_isatty_r+0x1a>
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	b103      	cbz	r3, 8010c72 <_isatty_r+0x1a>
 8010c70:	6023      	str	r3, [r4, #0]
 8010c72:	bd38      	pop	{r3, r4, r5, pc}
 8010c74:	20000798 	.word	0x20000798

08010c78 <_malloc_usable_size_r>:
 8010c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c7c:	1f18      	subs	r0, r3, #4
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	bfbc      	itt	lt
 8010c82:	580b      	ldrlt	r3, [r1, r0]
 8010c84:	18c0      	addlt	r0, r0, r3
 8010c86:	4770      	bx	lr

08010c88 <_raise_r>:
 8010c88:	291f      	cmp	r1, #31
 8010c8a:	b538      	push	{r3, r4, r5, lr}
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	460d      	mov	r5, r1
 8010c90:	d904      	bls.n	8010c9c <_raise_r+0x14>
 8010c92:	2316      	movs	r3, #22
 8010c94:	6003      	str	r3, [r0, #0]
 8010c96:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9a:	bd38      	pop	{r3, r4, r5, pc}
 8010c9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c9e:	b112      	cbz	r2, 8010ca6 <_raise_r+0x1e>
 8010ca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ca4:	b94b      	cbnz	r3, 8010cba <_raise_r+0x32>
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	f000 f830 	bl	8010d0c <_getpid_r>
 8010cac:	462a      	mov	r2, r5
 8010cae:	4601      	mov	r1, r0
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cb6:	f000 b817 	b.w	8010ce8 <_kill_r>
 8010cba:	2b01      	cmp	r3, #1
 8010cbc:	d00a      	beq.n	8010cd4 <_raise_r+0x4c>
 8010cbe:	1c59      	adds	r1, r3, #1
 8010cc0:	d103      	bne.n	8010cca <_raise_r+0x42>
 8010cc2:	2316      	movs	r3, #22
 8010cc4:	6003      	str	r3, [r0, #0]
 8010cc6:	2001      	movs	r0, #1
 8010cc8:	e7e7      	b.n	8010c9a <_raise_r+0x12>
 8010cca:	2400      	movs	r4, #0
 8010ccc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	4798      	blx	r3
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	e7e0      	b.n	8010c9a <_raise_r+0x12>

08010cd8 <raise>:
 8010cd8:	4b02      	ldr	r3, [pc, #8]	; (8010ce4 <raise+0xc>)
 8010cda:	4601      	mov	r1, r0
 8010cdc:	6818      	ldr	r0, [r3, #0]
 8010cde:	f7ff bfd3 	b.w	8010c88 <_raise_r>
 8010ce2:	bf00      	nop
 8010ce4:	20000030 	.word	0x20000030

08010ce8 <_kill_r>:
 8010ce8:	b538      	push	{r3, r4, r5, lr}
 8010cea:	4d07      	ldr	r5, [pc, #28]	; (8010d08 <_kill_r+0x20>)
 8010cec:	2300      	movs	r3, #0
 8010cee:	4604      	mov	r4, r0
 8010cf0:	4608      	mov	r0, r1
 8010cf2:	4611      	mov	r1, r2
 8010cf4:	602b      	str	r3, [r5, #0]
 8010cf6:	f7f7 fedd 	bl	8008ab4 <_kill>
 8010cfa:	1c43      	adds	r3, r0, #1
 8010cfc:	d102      	bne.n	8010d04 <_kill_r+0x1c>
 8010cfe:	682b      	ldr	r3, [r5, #0]
 8010d00:	b103      	cbz	r3, 8010d04 <_kill_r+0x1c>
 8010d02:	6023      	str	r3, [r4, #0]
 8010d04:	bd38      	pop	{r3, r4, r5, pc}
 8010d06:	bf00      	nop
 8010d08:	20000798 	.word	0x20000798

08010d0c <_getpid_r>:
 8010d0c:	f7f7 beca 	b.w	8008aa4 <_getpid>

08010d10 <cosf>:
 8010d10:	ee10 3a10 	vmov	r3, s0
 8010d14:	b507      	push	{r0, r1, r2, lr}
 8010d16:	4a1e      	ldr	r2, [pc, #120]	; (8010d90 <cosf+0x80>)
 8010d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	dc06      	bgt.n	8010d2e <cosf+0x1e>
 8010d20:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8010d94 <cosf+0x84>
 8010d24:	b003      	add	sp, #12
 8010d26:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d2a:	f000 bfab 	b.w	8011c84 <__kernel_cosf>
 8010d2e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010d32:	db04      	blt.n	8010d3e <cosf+0x2e>
 8010d34:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010d38:	b003      	add	sp, #12
 8010d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d3e:	4668      	mov	r0, sp
 8010d40:	f000 fe60 	bl	8011a04 <__ieee754_rem_pio2f>
 8010d44:	f000 0003 	and.w	r0, r0, #3
 8010d48:	2801      	cmp	r0, #1
 8010d4a:	d009      	beq.n	8010d60 <cosf+0x50>
 8010d4c:	2802      	cmp	r0, #2
 8010d4e:	d010      	beq.n	8010d72 <cosf+0x62>
 8010d50:	b9b0      	cbnz	r0, 8010d80 <cosf+0x70>
 8010d52:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d56:	ed9d 0a00 	vldr	s0, [sp]
 8010d5a:	f000 ff93 	bl	8011c84 <__kernel_cosf>
 8010d5e:	e7eb      	b.n	8010d38 <cosf+0x28>
 8010d60:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d64:	ed9d 0a00 	vldr	s0, [sp]
 8010d68:	f001 fa62 	bl	8012230 <__kernel_sinf>
 8010d6c:	eeb1 0a40 	vneg.f32	s0, s0
 8010d70:	e7e2      	b.n	8010d38 <cosf+0x28>
 8010d72:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d76:	ed9d 0a00 	vldr	s0, [sp]
 8010d7a:	f000 ff83 	bl	8011c84 <__kernel_cosf>
 8010d7e:	e7f5      	b.n	8010d6c <cosf+0x5c>
 8010d80:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d84:	ed9d 0a00 	vldr	s0, [sp]
 8010d88:	2001      	movs	r0, #1
 8010d8a:	f001 fa51 	bl	8012230 <__kernel_sinf>
 8010d8e:	e7d3      	b.n	8010d38 <cosf+0x28>
 8010d90:	3f490fd8 	.word	0x3f490fd8
 8010d94:	00000000 	.word	0x00000000

08010d98 <sinf>:
 8010d98:	ee10 3a10 	vmov	r3, s0
 8010d9c:	b507      	push	{r0, r1, r2, lr}
 8010d9e:	4a1f      	ldr	r2, [pc, #124]	; (8010e1c <sinf+0x84>)
 8010da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010da4:	4293      	cmp	r3, r2
 8010da6:	dc07      	bgt.n	8010db8 <sinf+0x20>
 8010da8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8010e20 <sinf+0x88>
 8010dac:	2000      	movs	r0, #0
 8010dae:	b003      	add	sp, #12
 8010db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010db4:	f001 ba3c 	b.w	8012230 <__kernel_sinf>
 8010db8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010dbc:	db04      	blt.n	8010dc8 <sinf+0x30>
 8010dbe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010dc2:	b003      	add	sp, #12
 8010dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dc8:	4668      	mov	r0, sp
 8010dca:	f000 fe1b 	bl	8011a04 <__ieee754_rem_pio2f>
 8010dce:	f000 0003 	and.w	r0, r0, #3
 8010dd2:	2801      	cmp	r0, #1
 8010dd4:	d00a      	beq.n	8010dec <sinf+0x54>
 8010dd6:	2802      	cmp	r0, #2
 8010dd8:	d00f      	beq.n	8010dfa <sinf+0x62>
 8010dda:	b9c0      	cbnz	r0, 8010e0e <sinf+0x76>
 8010ddc:	eddd 0a01 	vldr	s1, [sp, #4]
 8010de0:	ed9d 0a00 	vldr	s0, [sp]
 8010de4:	2001      	movs	r0, #1
 8010de6:	f001 fa23 	bl	8012230 <__kernel_sinf>
 8010dea:	e7ea      	b.n	8010dc2 <sinf+0x2a>
 8010dec:	eddd 0a01 	vldr	s1, [sp, #4]
 8010df0:	ed9d 0a00 	vldr	s0, [sp]
 8010df4:	f000 ff46 	bl	8011c84 <__kernel_cosf>
 8010df8:	e7e3      	b.n	8010dc2 <sinf+0x2a>
 8010dfa:	eddd 0a01 	vldr	s1, [sp, #4]
 8010dfe:	ed9d 0a00 	vldr	s0, [sp]
 8010e02:	2001      	movs	r0, #1
 8010e04:	f001 fa14 	bl	8012230 <__kernel_sinf>
 8010e08:	eeb1 0a40 	vneg.f32	s0, s0
 8010e0c:	e7d9      	b.n	8010dc2 <sinf+0x2a>
 8010e0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e12:	ed9d 0a00 	vldr	s0, [sp]
 8010e16:	f000 ff35 	bl	8011c84 <__kernel_cosf>
 8010e1a:	e7f5      	b.n	8010e08 <sinf+0x70>
 8010e1c:	3f490fd8 	.word	0x3f490fd8
 8010e20:	00000000 	.word	0x00000000

08010e24 <tanf>:
 8010e24:	ee10 3a10 	vmov	r3, s0
 8010e28:	b507      	push	{r0, r1, r2, lr}
 8010e2a:	4a12      	ldr	r2, [pc, #72]	; (8010e74 <tanf+0x50>)
 8010e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e30:	4293      	cmp	r3, r2
 8010e32:	dc07      	bgt.n	8010e44 <tanf+0x20>
 8010e34:	eddf 0a10 	vldr	s1, [pc, #64]	; 8010e78 <tanf+0x54>
 8010e38:	2001      	movs	r0, #1
 8010e3a:	b003      	add	sp, #12
 8010e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e40:	f001 ba3e 	b.w	80122c0 <__kernel_tanf>
 8010e44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010e48:	db04      	blt.n	8010e54 <tanf+0x30>
 8010e4a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010e4e:	b003      	add	sp, #12
 8010e50:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e54:	4668      	mov	r0, sp
 8010e56:	f000 fdd5 	bl	8011a04 <__ieee754_rem_pio2f>
 8010e5a:	0040      	lsls	r0, r0, #1
 8010e5c:	f000 0002 	and.w	r0, r0, #2
 8010e60:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e64:	ed9d 0a00 	vldr	s0, [sp]
 8010e68:	f1c0 0001 	rsb	r0, r0, #1
 8010e6c:	f001 fa28 	bl	80122c0 <__kernel_tanf>
 8010e70:	e7ed      	b.n	8010e4e <tanf+0x2a>
 8010e72:	bf00      	nop
 8010e74:	3f490fda 	.word	0x3f490fda
 8010e78:	00000000 	.word	0x00000000

08010e7c <asin>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	ed2d 8b02 	vpush	{d8}
 8010e82:	ec55 4b10 	vmov	r4, r5, d0
 8010e86:	f000 f8a7 	bl	8010fd8 <__ieee754_asin>
 8010e8a:	4622      	mov	r2, r4
 8010e8c:	462b      	mov	r3, r5
 8010e8e:	4620      	mov	r0, r4
 8010e90:	4629      	mov	r1, r5
 8010e92:	eeb0 8a40 	vmov.f32	s16, s0
 8010e96:	eef0 8a60 	vmov.f32	s17, s1
 8010e9a:	f7ef fe6f 	bl	8000b7c <__aeabi_dcmpun>
 8010e9e:	b9a8      	cbnz	r0, 8010ecc <asin+0x50>
 8010ea0:	ec45 4b10 	vmov	d0, r4, r5
 8010ea4:	f001 fc8c 	bl	80127c0 <fabs>
 8010ea8:	4b0c      	ldr	r3, [pc, #48]	; (8010edc <asin+0x60>)
 8010eaa:	ec51 0b10 	vmov	r0, r1, d0
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f7ef fe5a 	bl	8000b68 <__aeabi_dcmpgt>
 8010eb4:	b150      	cbz	r0, 8010ecc <asin+0x50>
 8010eb6:	f7fb fa6d 	bl	800c394 <__errno>
 8010eba:	ecbd 8b02 	vpop	{d8}
 8010ebe:	2321      	movs	r3, #33	; 0x21
 8010ec0:	6003      	str	r3, [r0, #0]
 8010ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ec6:	4806      	ldr	r0, [pc, #24]	; (8010ee0 <asin+0x64>)
 8010ec8:	f7ff bb7a 	b.w	80105c0 <nan>
 8010ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8010ed0:	eef0 0a68 	vmov.f32	s1, s17
 8010ed4:	ecbd 8b02 	vpop	{d8}
 8010ed8:	bd38      	pop	{r3, r4, r5, pc}
 8010eda:	bf00      	nop
 8010edc:	3ff00000 	.word	0x3ff00000
 8010ee0:	08013040 	.word	0x08013040

08010ee4 <atan2>:
 8010ee4:	f000 ba8c 	b.w	8011400 <__ieee754_atan2>

08010ee8 <sqrt>:
 8010ee8:	b538      	push	{r3, r4, r5, lr}
 8010eea:	ed2d 8b02 	vpush	{d8}
 8010eee:	ec55 4b10 	vmov	r4, r5, d0
 8010ef2:	f000 fb4f 	bl	8011594 <__ieee754_sqrt>
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	462b      	mov	r3, r5
 8010efa:	4620      	mov	r0, r4
 8010efc:	4629      	mov	r1, r5
 8010efe:	eeb0 8a40 	vmov.f32	s16, s0
 8010f02:	eef0 8a60 	vmov.f32	s17, s1
 8010f06:	f7ef fe39 	bl	8000b7c <__aeabi_dcmpun>
 8010f0a:	b990      	cbnz	r0, 8010f32 <sqrt+0x4a>
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	2300      	movs	r3, #0
 8010f10:	4620      	mov	r0, r4
 8010f12:	4629      	mov	r1, r5
 8010f14:	f7ef fe0a 	bl	8000b2c <__aeabi_dcmplt>
 8010f18:	b158      	cbz	r0, 8010f32 <sqrt+0x4a>
 8010f1a:	f7fb fa3b 	bl	800c394 <__errno>
 8010f1e:	2321      	movs	r3, #33	; 0x21
 8010f20:	6003      	str	r3, [r0, #0]
 8010f22:	2200      	movs	r2, #0
 8010f24:	2300      	movs	r3, #0
 8010f26:	4610      	mov	r0, r2
 8010f28:	4619      	mov	r1, r3
 8010f2a:	f7ef fcb7 	bl	800089c <__aeabi_ddiv>
 8010f2e:	ec41 0b18 	vmov	d8, r0, r1
 8010f32:	eeb0 0a48 	vmov.f32	s0, s16
 8010f36:	eef0 0a68 	vmov.f32	s1, s17
 8010f3a:	ecbd 8b02 	vpop	{d8}
 8010f3e:	bd38      	pop	{r3, r4, r5, pc}

08010f40 <asinf>:
 8010f40:	b508      	push	{r3, lr}
 8010f42:	ed2d 8b02 	vpush	{d8}
 8010f46:	eeb0 8a40 	vmov.f32	s16, s0
 8010f4a:	f000 fbd5 	bl	80116f8 <__ieee754_asinf>
 8010f4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f56:	eef0 8a40 	vmov.f32	s17, s0
 8010f5a:	d615      	bvs.n	8010f88 <asinf+0x48>
 8010f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8010f60:	f001 fd0c 	bl	801297c <fabsf>
 8010f64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010f68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f70:	dd0a      	ble.n	8010f88 <asinf+0x48>
 8010f72:	f7fb fa0f 	bl	800c394 <__errno>
 8010f76:	ecbd 8b02 	vpop	{d8}
 8010f7a:	2321      	movs	r3, #33	; 0x21
 8010f7c:	6003      	str	r3, [r0, #0]
 8010f7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010f82:	4804      	ldr	r0, [pc, #16]	; (8010f94 <asinf+0x54>)
 8010f84:	f7fc b8d8 	b.w	800d138 <nanf>
 8010f88:	eeb0 0a68 	vmov.f32	s0, s17
 8010f8c:	ecbd 8b02 	vpop	{d8}
 8010f90:	bd08      	pop	{r3, pc}
 8010f92:	bf00      	nop
 8010f94:	08013040 	.word	0x08013040

08010f98 <atan2f>:
 8010f98:	f000 bc94 	b.w	80118c4 <__ieee754_atan2f>

08010f9c <sqrtf>:
 8010f9c:	b508      	push	{r3, lr}
 8010f9e:	ed2d 8b02 	vpush	{d8}
 8010fa2:	eeb0 8a40 	vmov.f32	s16, s0
 8010fa6:	f000 fe69 	bl	8011c7c <__ieee754_sqrtf>
 8010faa:	eeb4 8a48 	vcmp.f32	s16, s16
 8010fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb2:	d60c      	bvs.n	8010fce <sqrtf+0x32>
 8010fb4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010fd4 <sqrtf+0x38>
 8010fb8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc0:	d505      	bpl.n	8010fce <sqrtf+0x32>
 8010fc2:	f7fb f9e7 	bl	800c394 <__errno>
 8010fc6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010fca:	2321      	movs	r3, #33	; 0x21
 8010fcc:	6003      	str	r3, [r0, #0]
 8010fce:	ecbd 8b02 	vpop	{d8}
 8010fd2:	bd08      	pop	{r3, pc}
 8010fd4:	00000000 	.word	0x00000000

08010fd8 <__ieee754_asin>:
 8010fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fdc:	ed2d 8b04 	vpush	{d8-d9}
 8010fe0:	ec55 4b10 	vmov	r4, r5, d0
 8010fe4:	4bcc      	ldr	r3, [pc, #816]	; (8011318 <__ieee754_asin+0x340>)
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010fec:	4598      	cmp	r8, r3
 8010fee:	9501      	str	r5, [sp, #4]
 8010ff0:	dd35      	ble.n	801105e <__ieee754_asin+0x86>
 8010ff2:	ee10 3a10 	vmov	r3, s0
 8010ff6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8010ffa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8010ffe:	ea58 0303 	orrs.w	r3, r8, r3
 8011002:	d117      	bne.n	8011034 <__ieee754_asin+0x5c>
 8011004:	a3aa      	add	r3, pc, #680	; (adr r3, 80112b0 <__ieee754_asin+0x2d8>)
 8011006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100a:	ee10 0a10 	vmov	r0, s0
 801100e:	4629      	mov	r1, r5
 8011010:	f7ef fb1a 	bl	8000648 <__aeabi_dmul>
 8011014:	a3a8      	add	r3, pc, #672	; (adr r3, 80112b8 <__ieee754_asin+0x2e0>)
 8011016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101a:	4606      	mov	r6, r0
 801101c:	460f      	mov	r7, r1
 801101e:	4620      	mov	r0, r4
 8011020:	4629      	mov	r1, r5
 8011022:	f7ef fb11 	bl	8000648 <__aeabi_dmul>
 8011026:	4602      	mov	r2, r0
 8011028:	460b      	mov	r3, r1
 801102a:	4630      	mov	r0, r6
 801102c:	4639      	mov	r1, r7
 801102e:	f7ef f955 	bl	80002dc <__adddf3>
 8011032:	e00b      	b.n	801104c <__ieee754_asin+0x74>
 8011034:	ee10 2a10 	vmov	r2, s0
 8011038:	462b      	mov	r3, r5
 801103a:	ee10 0a10 	vmov	r0, s0
 801103e:	4629      	mov	r1, r5
 8011040:	f7ef f94a 	bl	80002d8 <__aeabi_dsub>
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	f7ef fc28 	bl	800089c <__aeabi_ddiv>
 801104c:	4604      	mov	r4, r0
 801104e:	460d      	mov	r5, r1
 8011050:	ec45 4b10 	vmov	d0, r4, r5
 8011054:	b003      	add	sp, #12
 8011056:	ecbd 8b04 	vpop	{d8-d9}
 801105a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105e:	4baf      	ldr	r3, [pc, #700]	; (801131c <__ieee754_asin+0x344>)
 8011060:	4598      	cmp	r8, r3
 8011062:	dc11      	bgt.n	8011088 <__ieee754_asin+0xb0>
 8011064:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011068:	f280 80ae 	bge.w	80111c8 <__ieee754_asin+0x1f0>
 801106c:	a394      	add	r3, pc, #592	; (adr r3, 80112c0 <__ieee754_asin+0x2e8>)
 801106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011072:	ee10 0a10 	vmov	r0, s0
 8011076:	4629      	mov	r1, r5
 8011078:	f7ef f930 	bl	80002dc <__adddf3>
 801107c:	4ba8      	ldr	r3, [pc, #672]	; (8011320 <__ieee754_asin+0x348>)
 801107e:	2200      	movs	r2, #0
 8011080:	f7ef fd72 	bl	8000b68 <__aeabi_dcmpgt>
 8011084:	2800      	cmp	r0, #0
 8011086:	d1e3      	bne.n	8011050 <__ieee754_asin+0x78>
 8011088:	ec45 4b10 	vmov	d0, r4, r5
 801108c:	f001 fb98 	bl	80127c0 <fabs>
 8011090:	49a3      	ldr	r1, [pc, #652]	; (8011320 <__ieee754_asin+0x348>)
 8011092:	ec53 2b10 	vmov	r2, r3, d0
 8011096:	2000      	movs	r0, #0
 8011098:	f7ef f91e 	bl	80002d8 <__aeabi_dsub>
 801109c:	4ba1      	ldr	r3, [pc, #644]	; (8011324 <__ieee754_asin+0x34c>)
 801109e:	2200      	movs	r2, #0
 80110a0:	f7ef fad2 	bl	8000648 <__aeabi_dmul>
 80110a4:	a388      	add	r3, pc, #544	; (adr r3, 80112c8 <__ieee754_asin+0x2f0>)
 80110a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110aa:	4604      	mov	r4, r0
 80110ac:	460d      	mov	r5, r1
 80110ae:	f7ef facb 	bl	8000648 <__aeabi_dmul>
 80110b2:	a387      	add	r3, pc, #540	; (adr r3, 80112d0 <__ieee754_asin+0x2f8>)
 80110b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b8:	f7ef f910 	bl	80002dc <__adddf3>
 80110bc:	4622      	mov	r2, r4
 80110be:	462b      	mov	r3, r5
 80110c0:	f7ef fac2 	bl	8000648 <__aeabi_dmul>
 80110c4:	a384      	add	r3, pc, #528	; (adr r3, 80112d8 <__ieee754_asin+0x300>)
 80110c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ca:	f7ef f905 	bl	80002d8 <__aeabi_dsub>
 80110ce:	4622      	mov	r2, r4
 80110d0:	462b      	mov	r3, r5
 80110d2:	f7ef fab9 	bl	8000648 <__aeabi_dmul>
 80110d6:	a382      	add	r3, pc, #520	; (adr r3, 80112e0 <__ieee754_asin+0x308>)
 80110d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110dc:	f7ef f8fe 	bl	80002dc <__adddf3>
 80110e0:	4622      	mov	r2, r4
 80110e2:	462b      	mov	r3, r5
 80110e4:	f7ef fab0 	bl	8000648 <__aeabi_dmul>
 80110e8:	a37f      	add	r3, pc, #508	; (adr r3, 80112e8 <__ieee754_asin+0x310>)
 80110ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ee:	f7ef f8f3 	bl	80002d8 <__aeabi_dsub>
 80110f2:	4622      	mov	r2, r4
 80110f4:	462b      	mov	r3, r5
 80110f6:	f7ef faa7 	bl	8000648 <__aeabi_dmul>
 80110fa:	a37d      	add	r3, pc, #500	; (adr r3, 80112f0 <__ieee754_asin+0x318>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	f7ef f8ec 	bl	80002dc <__adddf3>
 8011104:	4622      	mov	r2, r4
 8011106:	462b      	mov	r3, r5
 8011108:	f7ef fa9e 	bl	8000648 <__aeabi_dmul>
 801110c:	a37a      	add	r3, pc, #488	; (adr r3, 80112f8 <__ieee754_asin+0x320>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	ec41 0b18 	vmov	d8, r0, r1
 8011116:	4620      	mov	r0, r4
 8011118:	4629      	mov	r1, r5
 801111a:	f7ef fa95 	bl	8000648 <__aeabi_dmul>
 801111e:	a378      	add	r3, pc, #480	; (adr r3, 8011300 <__ieee754_asin+0x328>)
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	f7ef f8d8 	bl	80002d8 <__aeabi_dsub>
 8011128:	4622      	mov	r2, r4
 801112a:	462b      	mov	r3, r5
 801112c:	f7ef fa8c 	bl	8000648 <__aeabi_dmul>
 8011130:	a375      	add	r3, pc, #468	; (adr r3, 8011308 <__ieee754_asin+0x330>)
 8011132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011136:	f7ef f8d1 	bl	80002dc <__adddf3>
 801113a:	4622      	mov	r2, r4
 801113c:	462b      	mov	r3, r5
 801113e:	f7ef fa83 	bl	8000648 <__aeabi_dmul>
 8011142:	a373      	add	r3, pc, #460	; (adr r3, 8011310 <__ieee754_asin+0x338>)
 8011144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011148:	f7ef f8c6 	bl	80002d8 <__aeabi_dsub>
 801114c:	4622      	mov	r2, r4
 801114e:	462b      	mov	r3, r5
 8011150:	f7ef fa7a 	bl	8000648 <__aeabi_dmul>
 8011154:	4b72      	ldr	r3, [pc, #456]	; (8011320 <__ieee754_asin+0x348>)
 8011156:	2200      	movs	r2, #0
 8011158:	f7ef f8c0 	bl	80002dc <__adddf3>
 801115c:	ec45 4b10 	vmov	d0, r4, r5
 8011160:	4606      	mov	r6, r0
 8011162:	460f      	mov	r7, r1
 8011164:	f000 fa16 	bl	8011594 <__ieee754_sqrt>
 8011168:	4b6f      	ldr	r3, [pc, #444]	; (8011328 <__ieee754_asin+0x350>)
 801116a:	4598      	cmp	r8, r3
 801116c:	ec5b ab10 	vmov	sl, fp, d0
 8011170:	f340 80dc 	ble.w	801132c <__ieee754_asin+0x354>
 8011174:	4632      	mov	r2, r6
 8011176:	463b      	mov	r3, r7
 8011178:	ec51 0b18 	vmov	r0, r1, d8
 801117c:	f7ef fb8e 	bl	800089c <__aeabi_ddiv>
 8011180:	4652      	mov	r2, sl
 8011182:	465b      	mov	r3, fp
 8011184:	f7ef fa60 	bl	8000648 <__aeabi_dmul>
 8011188:	4652      	mov	r2, sl
 801118a:	465b      	mov	r3, fp
 801118c:	f7ef f8a6 	bl	80002dc <__adddf3>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	f7ef f8a2 	bl	80002dc <__adddf3>
 8011198:	a347      	add	r3, pc, #284	; (adr r3, 80112b8 <__ieee754_asin+0x2e0>)
 801119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119e:	f7ef f89b 	bl	80002d8 <__aeabi_dsub>
 80111a2:	4602      	mov	r2, r0
 80111a4:	460b      	mov	r3, r1
 80111a6:	a142      	add	r1, pc, #264	; (adr r1, 80112b0 <__ieee754_asin+0x2d8>)
 80111a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ac:	f7ef f894 	bl	80002d8 <__aeabi_dsub>
 80111b0:	9b01      	ldr	r3, [sp, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	bfdc      	itt	le
 80111b6:	4602      	movle	r2, r0
 80111b8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80111bc:	4604      	mov	r4, r0
 80111be:	460d      	mov	r5, r1
 80111c0:	bfdc      	itt	le
 80111c2:	4614      	movle	r4, r2
 80111c4:	461d      	movle	r5, r3
 80111c6:	e743      	b.n	8011050 <__ieee754_asin+0x78>
 80111c8:	ee10 2a10 	vmov	r2, s0
 80111cc:	ee10 0a10 	vmov	r0, s0
 80111d0:	462b      	mov	r3, r5
 80111d2:	4629      	mov	r1, r5
 80111d4:	f7ef fa38 	bl	8000648 <__aeabi_dmul>
 80111d8:	a33b      	add	r3, pc, #236	; (adr r3, 80112c8 <__ieee754_asin+0x2f0>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	4606      	mov	r6, r0
 80111e0:	460f      	mov	r7, r1
 80111e2:	f7ef fa31 	bl	8000648 <__aeabi_dmul>
 80111e6:	a33a      	add	r3, pc, #232	; (adr r3, 80112d0 <__ieee754_asin+0x2f8>)
 80111e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ec:	f7ef f876 	bl	80002dc <__adddf3>
 80111f0:	4632      	mov	r2, r6
 80111f2:	463b      	mov	r3, r7
 80111f4:	f7ef fa28 	bl	8000648 <__aeabi_dmul>
 80111f8:	a337      	add	r3, pc, #220	; (adr r3, 80112d8 <__ieee754_asin+0x300>)
 80111fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fe:	f7ef f86b 	bl	80002d8 <__aeabi_dsub>
 8011202:	4632      	mov	r2, r6
 8011204:	463b      	mov	r3, r7
 8011206:	f7ef fa1f 	bl	8000648 <__aeabi_dmul>
 801120a:	a335      	add	r3, pc, #212	; (adr r3, 80112e0 <__ieee754_asin+0x308>)
 801120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011210:	f7ef f864 	bl	80002dc <__adddf3>
 8011214:	4632      	mov	r2, r6
 8011216:	463b      	mov	r3, r7
 8011218:	f7ef fa16 	bl	8000648 <__aeabi_dmul>
 801121c:	a332      	add	r3, pc, #200	; (adr r3, 80112e8 <__ieee754_asin+0x310>)
 801121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011222:	f7ef f859 	bl	80002d8 <__aeabi_dsub>
 8011226:	4632      	mov	r2, r6
 8011228:	463b      	mov	r3, r7
 801122a:	f7ef fa0d 	bl	8000648 <__aeabi_dmul>
 801122e:	a330      	add	r3, pc, #192	; (adr r3, 80112f0 <__ieee754_asin+0x318>)
 8011230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011234:	f7ef f852 	bl	80002dc <__adddf3>
 8011238:	4632      	mov	r2, r6
 801123a:	463b      	mov	r3, r7
 801123c:	f7ef fa04 	bl	8000648 <__aeabi_dmul>
 8011240:	a32d      	add	r3, pc, #180	; (adr r3, 80112f8 <__ieee754_asin+0x320>)
 8011242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011246:	4680      	mov	r8, r0
 8011248:	4689      	mov	r9, r1
 801124a:	4630      	mov	r0, r6
 801124c:	4639      	mov	r1, r7
 801124e:	f7ef f9fb 	bl	8000648 <__aeabi_dmul>
 8011252:	a32b      	add	r3, pc, #172	; (adr r3, 8011300 <__ieee754_asin+0x328>)
 8011254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011258:	f7ef f83e 	bl	80002d8 <__aeabi_dsub>
 801125c:	4632      	mov	r2, r6
 801125e:	463b      	mov	r3, r7
 8011260:	f7ef f9f2 	bl	8000648 <__aeabi_dmul>
 8011264:	a328      	add	r3, pc, #160	; (adr r3, 8011308 <__ieee754_asin+0x330>)
 8011266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126a:	f7ef f837 	bl	80002dc <__adddf3>
 801126e:	4632      	mov	r2, r6
 8011270:	463b      	mov	r3, r7
 8011272:	f7ef f9e9 	bl	8000648 <__aeabi_dmul>
 8011276:	a326      	add	r3, pc, #152	; (adr r3, 8011310 <__ieee754_asin+0x338>)
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	f7ef f82c 	bl	80002d8 <__aeabi_dsub>
 8011280:	4632      	mov	r2, r6
 8011282:	463b      	mov	r3, r7
 8011284:	f7ef f9e0 	bl	8000648 <__aeabi_dmul>
 8011288:	4b25      	ldr	r3, [pc, #148]	; (8011320 <__ieee754_asin+0x348>)
 801128a:	2200      	movs	r2, #0
 801128c:	f7ef f826 	bl	80002dc <__adddf3>
 8011290:	4602      	mov	r2, r0
 8011292:	460b      	mov	r3, r1
 8011294:	4640      	mov	r0, r8
 8011296:	4649      	mov	r1, r9
 8011298:	f7ef fb00 	bl	800089c <__aeabi_ddiv>
 801129c:	4622      	mov	r2, r4
 801129e:	462b      	mov	r3, r5
 80112a0:	f7ef f9d2 	bl	8000648 <__aeabi_dmul>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	4620      	mov	r0, r4
 80112aa:	4629      	mov	r1, r5
 80112ac:	e6bf      	b.n	801102e <__ieee754_asin+0x56>
 80112ae:	bf00      	nop
 80112b0:	54442d18 	.word	0x54442d18
 80112b4:	3ff921fb 	.word	0x3ff921fb
 80112b8:	33145c07 	.word	0x33145c07
 80112bc:	3c91a626 	.word	0x3c91a626
 80112c0:	8800759c 	.word	0x8800759c
 80112c4:	7e37e43c 	.word	0x7e37e43c
 80112c8:	0dfdf709 	.word	0x0dfdf709
 80112cc:	3f023de1 	.word	0x3f023de1
 80112d0:	7501b288 	.word	0x7501b288
 80112d4:	3f49efe0 	.word	0x3f49efe0
 80112d8:	b5688f3b 	.word	0xb5688f3b
 80112dc:	3fa48228 	.word	0x3fa48228
 80112e0:	0e884455 	.word	0x0e884455
 80112e4:	3fc9c155 	.word	0x3fc9c155
 80112e8:	03eb6f7d 	.word	0x03eb6f7d
 80112ec:	3fd4d612 	.word	0x3fd4d612
 80112f0:	55555555 	.word	0x55555555
 80112f4:	3fc55555 	.word	0x3fc55555
 80112f8:	b12e9282 	.word	0xb12e9282
 80112fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8011300:	1b8d0159 	.word	0x1b8d0159
 8011304:	3fe6066c 	.word	0x3fe6066c
 8011308:	9c598ac8 	.word	0x9c598ac8
 801130c:	40002ae5 	.word	0x40002ae5
 8011310:	1c8a2d4b 	.word	0x1c8a2d4b
 8011314:	40033a27 	.word	0x40033a27
 8011318:	3fefffff 	.word	0x3fefffff
 801131c:	3fdfffff 	.word	0x3fdfffff
 8011320:	3ff00000 	.word	0x3ff00000
 8011324:	3fe00000 	.word	0x3fe00000
 8011328:	3fef3332 	.word	0x3fef3332
 801132c:	ee10 2a10 	vmov	r2, s0
 8011330:	ee10 0a10 	vmov	r0, s0
 8011334:	465b      	mov	r3, fp
 8011336:	4659      	mov	r1, fp
 8011338:	f7ee ffd0 	bl	80002dc <__adddf3>
 801133c:	4632      	mov	r2, r6
 801133e:	463b      	mov	r3, r7
 8011340:	ec41 0b19 	vmov	d9, r0, r1
 8011344:	ec51 0b18 	vmov	r0, r1, d8
 8011348:	f7ef faa8 	bl	800089c <__aeabi_ddiv>
 801134c:	4602      	mov	r2, r0
 801134e:	460b      	mov	r3, r1
 8011350:	ec51 0b19 	vmov	r0, r1, d9
 8011354:	f7ef f978 	bl	8000648 <__aeabi_dmul>
 8011358:	f04f 0800 	mov.w	r8, #0
 801135c:	4606      	mov	r6, r0
 801135e:	460f      	mov	r7, r1
 8011360:	4642      	mov	r2, r8
 8011362:	465b      	mov	r3, fp
 8011364:	4640      	mov	r0, r8
 8011366:	4659      	mov	r1, fp
 8011368:	f7ef f96e 	bl	8000648 <__aeabi_dmul>
 801136c:	4602      	mov	r2, r0
 801136e:	460b      	mov	r3, r1
 8011370:	4620      	mov	r0, r4
 8011372:	4629      	mov	r1, r5
 8011374:	f7ee ffb0 	bl	80002d8 <__aeabi_dsub>
 8011378:	4642      	mov	r2, r8
 801137a:	4604      	mov	r4, r0
 801137c:	460d      	mov	r5, r1
 801137e:	465b      	mov	r3, fp
 8011380:	4650      	mov	r0, sl
 8011382:	4659      	mov	r1, fp
 8011384:	f7ee ffaa 	bl	80002dc <__adddf3>
 8011388:	4602      	mov	r2, r0
 801138a:	460b      	mov	r3, r1
 801138c:	4620      	mov	r0, r4
 801138e:	4629      	mov	r1, r5
 8011390:	f7ef fa84 	bl	800089c <__aeabi_ddiv>
 8011394:	4602      	mov	r2, r0
 8011396:	460b      	mov	r3, r1
 8011398:	f7ee ffa0 	bl	80002dc <__adddf3>
 801139c:	4602      	mov	r2, r0
 801139e:	460b      	mov	r3, r1
 80113a0:	a113      	add	r1, pc, #76	; (adr r1, 80113f0 <__ieee754_asin+0x418>)
 80113a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113a6:	f7ee ff97 	bl	80002d8 <__aeabi_dsub>
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	4630      	mov	r0, r6
 80113b0:	4639      	mov	r1, r7
 80113b2:	f7ee ff91 	bl	80002d8 <__aeabi_dsub>
 80113b6:	4642      	mov	r2, r8
 80113b8:	4604      	mov	r4, r0
 80113ba:	460d      	mov	r5, r1
 80113bc:	465b      	mov	r3, fp
 80113be:	4640      	mov	r0, r8
 80113c0:	4659      	mov	r1, fp
 80113c2:	f7ee ff8b 	bl	80002dc <__adddf3>
 80113c6:	4602      	mov	r2, r0
 80113c8:	460b      	mov	r3, r1
 80113ca:	a10b      	add	r1, pc, #44	; (adr r1, 80113f8 <__ieee754_asin+0x420>)
 80113cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113d0:	f7ee ff82 	bl	80002d8 <__aeabi_dsub>
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	4620      	mov	r0, r4
 80113da:	4629      	mov	r1, r5
 80113dc:	f7ee ff7c 	bl	80002d8 <__aeabi_dsub>
 80113e0:	4602      	mov	r2, r0
 80113e2:	460b      	mov	r3, r1
 80113e4:	a104      	add	r1, pc, #16	; (adr r1, 80113f8 <__ieee754_asin+0x420>)
 80113e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113ea:	e6df      	b.n	80111ac <__ieee754_asin+0x1d4>
 80113ec:	f3af 8000 	nop.w
 80113f0:	33145c07 	.word	0x33145c07
 80113f4:	3c91a626 	.word	0x3c91a626
 80113f8:	54442d18 	.word	0x54442d18
 80113fc:	3fe921fb 	.word	0x3fe921fb

08011400 <__ieee754_atan2>:
 8011400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011404:	ec57 6b11 	vmov	r6, r7, d1
 8011408:	4273      	negs	r3, r6
 801140a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011590 <__ieee754_atan2+0x190>
 801140e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011412:	4333      	orrs	r3, r6
 8011414:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011418:	4573      	cmp	r3, lr
 801141a:	ec51 0b10 	vmov	r0, r1, d0
 801141e:	ee11 8a10 	vmov	r8, s2
 8011422:	d80a      	bhi.n	801143a <__ieee754_atan2+0x3a>
 8011424:	4244      	negs	r4, r0
 8011426:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801142a:	4304      	orrs	r4, r0
 801142c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011430:	4574      	cmp	r4, lr
 8011432:	ee10 9a10 	vmov	r9, s0
 8011436:	468c      	mov	ip, r1
 8011438:	d907      	bls.n	801144a <__ieee754_atan2+0x4a>
 801143a:	4632      	mov	r2, r6
 801143c:	463b      	mov	r3, r7
 801143e:	f7ee ff4d 	bl	80002dc <__adddf3>
 8011442:	ec41 0b10 	vmov	d0, r0, r1
 8011446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801144a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801144e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011452:	4334      	orrs	r4, r6
 8011454:	d103      	bne.n	801145e <__ieee754_atan2+0x5e>
 8011456:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801145a:	f001 b811 	b.w	8012480 <atan>
 801145e:	17bc      	asrs	r4, r7, #30
 8011460:	f004 0402 	and.w	r4, r4, #2
 8011464:	ea53 0909 	orrs.w	r9, r3, r9
 8011468:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801146c:	d107      	bne.n	801147e <__ieee754_atan2+0x7e>
 801146e:	2c02      	cmp	r4, #2
 8011470:	d060      	beq.n	8011534 <__ieee754_atan2+0x134>
 8011472:	2c03      	cmp	r4, #3
 8011474:	d1e5      	bne.n	8011442 <__ieee754_atan2+0x42>
 8011476:	a142      	add	r1, pc, #264	; (adr r1, 8011580 <__ieee754_atan2+0x180>)
 8011478:	e9d1 0100 	ldrd	r0, r1, [r1]
 801147c:	e7e1      	b.n	8011442 <__ieee754_atan2+0x42>
 801147e:	ea52 0808 	orrs.w	r8, r2, r8
 8011482:	d106      	bne.n	8011492 <__ieee754_atan2+0x92>
 8011484:	f1bc 0f00 	cmp.w	ip, #0
 8011488:	da5f      	bge.n	801154a <__ieee754_atan2+0x14a>
 801148a:	a13f      	add	r1, pc, #252	; (adr r1, 8011588 <__ieee754_atan2+0x188>)
 801148c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011490:	e7d7      	b.n	8011442 <__ieee754_atan2+0x42>
 8011492:	4572      	cmp	r2, lr
 8011494:	d10f      	bne.n	80114b6 <__ieee754_atan2+0xb6>
 8011496:	4293      	cmp	r3, r2
 8011498:	f104 34ff 	add.w	r4, r4, #4294967295
 801149c:	d107      	bne.n	80114ae <__ieee754_atan2+0xae>
 801149e:	2c02      	cmp	r4, #2
 80114a0:	d84c      	bhi.n	801153c <__ieee754_atan2+0x13c>
 80114a2:	4b35      	ldr	r3, [pc, #212]	; (8011578 <__ieee754_atan2+0x178>)
 80114a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80114a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80114ac:	e7c9      	b.n	8011442 <__ieee754_atan2+0x42>
 80114ae:	2c02      	cmp	r4, #2
 80114b0:	d848      	bhi.n	8011544 <__ieee754_atan2+0x144>
 80114b2:	4b32      	ldr	r3, [pc, #200]	; (801157c <__ieee754_atan2+0x17c>)
 80114b4:	e7f6      	b.n	80114a4 <__ieee754_atan2+0xa4>
 80114b6:	4573      	cmp	r3, lr
 80114b8:	d0e4      	beq.n	8011484 <__ieee754_atan2+0x84>
 80114ba:	1a9b      	subs	r3, r3, r2
 80114bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80114c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80114c4:	da1e      	bge.n	8011504 <__ieee754_atan2+0x104>
 80114c6:	2f00      	cmp	r7, #0
 80114c8:	da01      	bge.n	80114ce <__ieee754_atan2+0xce>
 80114ca:	323c      	adds	r2, #60	; 0x3c
 80114cc:	db1e      	blt.n	801150c <__ieee754_atan2+0x10c>
 80114ce:	4632      	mov	r2, r6
 80114d0:	463b      	mov	r3, r7
 80114d2:	f7ef f9e3 	bl	800089c <__aeabi_ddiv>
 80114d6:	ec41 0b10 	vmov	d0, r0, r1
 80114da:	f001 f971 	bl	80127c0 <fabs>
 80114de:	f000 ffcf 	bl	8012480 <atan>
 80114e2:	ec51 0b10 	vmov	r0, r1, d0
 80114e6:	2c01      	cmp	r4, #1
 80114e8:	d013      	beq.n	8011512 <__ieee754_atan2+0x112>
 80114ea:	2c02      	cmp	r4, #2
 80114ec:	d015      	beq.n	801151a <__ieee754_atan2+0x11a>
 80114ee:	2c00      	cmp	r4, #0
 80114f0:	d0a7      	beq.n	8011442 <__ieee754_atan2+0x42>
 80114f2:	a319      	add	r3, pc, #100	; (adr r3, 8011558 <__ieee754_atan2+0x158>)
 80114f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f8:	f7ee feee 	bl	80002d8 <__aeabi_dsub>
 80114fc:	a318      	add	r3, pc, #96	; (adr r3, 8011560 <__ieee754_atan2+0x160>)
 80114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011502:	e014      	b.n	801152e <__ieee754_atan2+0x12e>
 8011504:	a118      	add	r1, pc, #96	; (adr r1, 8011568 <__ieee754_atan2+0x168>)
 8011506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801150a:	e7ec      	b.n	80114e6 <__ieee754_atan2+0xe6>
 801150c:	2000      	movs	r0, #0
 801150e:	2100      	movs	r1, #0
 8011510:	e7e9      	b.n	80114e6 <__ieee754_atan2+0xe6>
 8011512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011516:	4619      	mov	r1, r3
 8011518:	e793      	b.n	8011442 <__ieee754_atan2+0x42>
 801151a:	a30f      	add	r3, pc, #60	; (adr r3, 8011558 <__ieee754_atan2+0x158>)
 801151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011520:	f7ee feda 	bl	80002d8 <__aeabi_dsub>
 8011524:	4602      	mov	r2, r0
 8011526:	460b      	mov	r3, r1
 8011528:	a10d      	add	r1, pc, #52	; (adr r1, 8011560 <__ieee754_atan2+0x160>)
 801152a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801152e:	f7ee fed3 	bl	80002d8 <__aeabi_dsub>
 8011532:	e786      	b.n	8011442 <__ieee754_atan2+0x42>
 8011534:	a10a      	add	r1, pc, #40	; (adr r1, 8011560 <__ieee754_atan2+0x160>)
 8011536:	e9d1 0100 	ldrd	r0, r1, [r1]
 801153a:	e782      	b.n	8011442 <__ieee754_atan2+0x42>
 801153c:	a10c      	add	r1, pc, #48	; (adr r1, 8011570 <__ieee754_atan2+0x170>)
 801153e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011542:	e77e      	b.n	8011442 <__ieee754_atan2+0x42>
 8011544:	2000      	movs	r0, #0
 8011546:	2100      	movs	r1, #0
 8011548:	e77b      	b.n	8011442 <__ieee754_atan2+0x42>
 801154a:	a107      	add	r1, pc, #28	; (adr r1, 8011568 <__ieee754_atan2+0x168>)
 801154c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011550:	e777      	b.n	8011442 <__ieee754_atan2+0x42>
 8011552:	bf00      	nop
 8011554:	f3af 8000 	nop.w
 8011558:	33145c07 	.word	0x33145c07
 801155c:	3ca1a626 	.word	0x3ca1a626
 8011560:	54442d18 	.word	0x54442d18
 8011564:	400921fb 	.word	0x400921fb
 8011568:	54442d18 	.word	0x54442d18
 801156c:	3ff921fb 	.word	0x3ff921fb
 8011570:	54442d18 	.word	0x54442d18
 8011574:	3fe921fb 	.word	0x3fe921fb
 8011578:	08013048 	.word	0x08013048
 801157c:	08013060 	.word	0x08013060
 8011580:	54442d18 	.word	0x54442d18
 8011584:	c00921fb 	.word	0xc00921fb
 8011588:	54442d18 	.word	0x54442d18
 801158c:	bff921fb 	.word	0xbff921fb
 8011590:	7ff00000 	.word	0x7ff00000

08011594 <__ieee754_sqrt>:
 8011594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011598:	ec55 4b10 	vmov	r4, r5, d0
 801159c:	4e55      	ldr	r6, [pc, #340]	; (80116f4 <__ieee754_sqrt+0x160>)
 801159e:	43ae      	bics	r6, r5
 80115a0:	ee10 0a10 	vmov	r0, s0
 80115a4:	ee10 3a10 	vmov	r3, s0
 80115a8:	462a      	mov	r2, r5
 80115aa:	4629      	mov	r1, r5
 80115ac:	d110      	bne.n	80115d0 <__ieee754_sqrt+0x3c>
 80115ae:	ee10 2a10 	vmov	r2, s0
 80115b2:	462b      	mov	r3, r5
 80115b4:	f7ef f848 	bl	8000648 <__aeabi_dmul>
 80115b8:	4602      	mov	r2, r0
 80115ba:	460b      	mov	r3, r1
 80115bc:	4620      	mov	r0, r4
 80115be:	4629      	mov	r1, r5
 80115c0:	f7ee fe8c 	bl	80002dc <__adddf3>
 80115c4:	4604      	mov	r4, r0
 80115c6:	460d      	mov	r5, r1
 80115c8:	ec45 4b10 	vmov	d0, r4, r5
 80115cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d0:	2d00      	cmp	r5, #0
 80115d2:	dc10      	bgt.n	80115f6 <__ieee754_sqrt+0x62>
 80115d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80115d8:	4330      	orrs	r0, r6
 80115da:	d0f5      	beq.n	80115c8 <__ieee754_sqrt+0x34>
 80115dc:	b15d      	cbz	r5, 80115f6 <__ieee754_sqrt+0x62>
 80115de:	ee10 2a10 	vmov	r2, s0
 80115e2:	462b      	mov	r3, r5
 80115e4:	ee10 0a10 	vmov	r0, s0
 80115e8:	f7ee fe76 	bl	80002d8 <__aeabi_dsub>
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	f7ef f954 	bl	800089c <__aeabi_ddiv>
 80115f4:	e7e6      	b.n	80115c4 <__ieee754_sqrt+0x30>
 80115f6:	1512      	asrs	r2, r2, #20
 80115f8:	d074      	beq.n	80116e4 <__ieee754_sqrt+0x150>
 80115fa:	07d4      	lsls	r4, r2, #31
 80115fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011600:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8011604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011608:	bf5e      	ittt	pl
 801160a:	0fda      	lsrpl	r2, r3, #31
 801160c:	005b      	lslpl	r3, r3, #1
 801160e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011612:	2400      	movs	r4, #0
 8011614:	0fda      	lsrs	r2, r3, #31
 8011616:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801161a:	107f      	asrs	r7, r7, #1
 801161c:	005b      	lsls	r3, r3, #1
 801161e:	2516      	movs	r5, #22
 8011620:	4620      	mov	r0, r4
 8011622:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011626:	1886      	adds	r6, r0, r2
 8011628:	428e      	cmp	r6, r1
 801162a:	bfde      	ittt	le
 801162c:	1b89      	suble	r1, r1, r6
 801162e:	18b0      	addle	r0, r6, r2
 8011630:	18a4      	addle	r4, r4, r2
 8011632:	0049      	lsls	r1, r1, #1
 8011634:	3d01      	subs	r5, #1
 8011636:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801163a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801163e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011642:	d1f0      	bne.n	8011626 <__ieee754_sqrt+0x92>
 8011644:	462a      	mov	r2, r5
 8011646:	f04f 0e20 	mov.w	lr, #32
 801164a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801164e:	4281      	cmp	r1, r0
 8011650:	eb06 0c05 	add.w	ip, r6, r5
 8011654:	dc02      	bgt.n	801165c <__ieee754_sqrt+0xc8>
 8011656:	d113      	bne.n	8011680 <__ieee754_sqrt+0xec>
 8011658:	459c      	cmp	ip, r3
 801165a:	d811      	bhi.n	8011680 <__ieee754_sqrt+0xec>
 801165c:	f1bc 0f00 	cmp.w	ip, #0
 8011660:	eb0c 0506 	add.w	r5, ip, r6
 8011664:	da43      	bge.n	80116ee <__ieee754_sqrt+0x15a>
 8011666:	2d00      	cmp	r5, #0
 8011668:	db41      	blt.n	80116ee <__ieee754_sqrt+0x15a>
 801166a:	f100 0801 	add.w	r8, r0, #1
 801166e:	1a09      	subs	r1, r1, r0
 8011670:	459c      	cmp	ip, r3
 8011672:	bf88      	it	hi
 8011674:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011678:	eba3 030c 	sub.w	r3, r3, ip
 801167c:	4432      	add	r2, r6
 801167e:	4640      	mov	r0, r8
 8011680:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011684:	f1be 0e01 	subs.w	lr, lr, #1
 8011688:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801168c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011690:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011694:	d1db      	bne.n	801164e <__ieee754_sqrt+0xba>
 8011696:	430b      	orrs	r3, r1
 8011698:	d006      	beq.n	80116a8 <__ieee754_sqrt+0x114>
 801169a:	1c50      	adds	r0, r2, #1
 801169c:	bf13      	iteet	ne
 801169e:	3201      	addne	r2, #1
 80116a0:	3401      	addeq	r4, #1
 80116a2:	4672      	moveq	r2, lr
 80116a4:	f022 0201 	bicne.w	r2, r2, #1
 80116a8:	1063      	asrs	r3, r4, #1
 80116aa:	0852      	lsrs	r2, r2, #1
 80116ac:	07e1      	lsls	r1, r4, #31
 80116ae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80116b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80116b6:	bf48      	it	mi
 80116b8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80116bc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80116c0:	4614      	mov	r4, r2
 80116c2:	e781      	b.n	80115c8 <__ieee754_sqrt+0x34>
 80116c4:	0ad9      	lsrs	r1, r3, #11
 80116c6:	3815      	subs	r0, #21
 80116c8:	055b      	lsls	r3, r3, #21
 80116ca:	2900      	cmp	r1, #0
 80116cc:	d0fa      	beq.n	80116c4 <__ieee754_sqrt+0x130>
 80116ce:	02cd      	lsls	r5, r1, #11
 80116d0:	d50a      	bpl.n	80116e8 <__ieee754_sqrt+0x154>
 80116d2:	f1c2 0420 	rsb	r4, r2, #32
 80116d6:	fa23 f404 	lsr.w	r4, r3, r4
 80116da:	1e55      	subs	r5, r2, #1
 80116dc:	4093      	lsls	r3, r2
 80116de:	4321      	orrs	r1, r4
 80116e0:	1b42      	subs	r2, r0, r5
 80116e2:	e78a      	b.n	80115fa <__ieee754_sqrt+0x66>
 80116e4:	4610      	mov	r0, r2
 80116e6:	e7f0      	b.n	80116ca <__ieee754_sqrt+0x136>
 80116e8:	0049      	lsls	r1, r1, #1
 80116ea:	3201      	adds	r2, #1
 80116ec:	e7ef      	b.n	80116ce <__ieee754_sqrt+0x13a>
 80116ee:	4680      	mov	r8, r0
 80116f0:	e7bd      	b.n	801166e <__ieee754_sqrt+0xda>
 80116f2:	bf00      	nop
 80116f4:	7ff00000 	.word	0x7ff00000

080116f8 <__ieee754_asinf>:
 80116f8:	b538      	push	{r3, r4, r5, lr}
 80116fa:	ee10 5a10 	vmov	r5, s0
 80116fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011702:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011706:	ed2d 8b04 	vpush	{d8-d9}
 801170a:	d10c      	bne.n	8011726 <__ieee754_asinf+0x2e>
 801170c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8011884 <__ieee754_asinf+0x18c>
 8011710:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8011888 <__ieee754_asinf+0x190>
 8011714:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011718:	eee0 7a07 	vfma.f32	s15, s0, s14
 801171c:	eeb0 0a67 	vmov.f32	s0, s15
 8011720:	ecbd 8b04 	vpop	{d8-d9}
 8011724:	bd38      	pop	{r3, r4, r5, pc}
 8011726:	dd04      	ble.n	8011732 <__ieee754_asinf+0x3a>
 8011728:	ee70 7a40 	vsub.f32	s15, s0, s0
 801172c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011730:	e7f6      	b.n	8011720 <__ieee754_asinf+0x28>
 8011732:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8011736:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801173a:	da0b      	bge.n	8011754 <__ieee754_asinf+0x5c>
 801173c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8011740:	da52      	bge.n	80117e8 <__ieee754_asinf+0xf0>
 8011742:	eddf 7a52 	vldr	s15, [pc, #328]	; 801188c <__ieee754_asinf+0x194>
 8011746:	ee70 7a27 	vadd.f32	s15, s0, s15
 801174a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011752:	dce5      	bgt.n	8011720 <__ieee754_asinf+0x28>
 8011754:	f001 f912 	bl	801297c <fabsf>
 8011758:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801175c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8011760:	ee20 8a08 	vmul.f32	s16, s0, s16
 8011764:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8011890 <__ieee754_asinf+0x198>
 8011768:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8011894 <__ieee754_asinf+0x19c>
 801176c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8011898 <__ieee754_asinf+0x1a0>
 8011770:	eea8 7a27 	vfma.f32	s14, s16, s15
 8011774:	eddf 7a49 	vldr	s15, [pc, #292]	; 801189c <__ieee754_asinf+0x1a4>
 8011778:	eee7 7a08 	vfma.f32	s15, s14, s16
 801177c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80118a0 <__ieee754_asinf+0x1a8>
 8011780:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011784:	eddf 7a47 	vldr	s15, [pc, #284]	; 80118a4 <__ieee754_asinf+0x1ac>
 8011788:	eee7 7a08 	vfma.f32	s15, s14, s16
 801178c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80118a8 <__ieee754_asinf+0x1b0>
 8011790:	eea7 9a88 	vfma.f32	s18, s15, s16
 8011794:	eddf 7a45 	vldr	s15, [pc, #276]	; 80118ac <__ieee754_asinf+0x1b4>
 8011798:	eee8 7a07 	vfma.f32	s15, s16, s14
 801179c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80118b0 <__ieee754_asinf+0x1b8>
 80117a0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80117a4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80118b4 <__ieee754_asinf+0x1bc>
 80117a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80117ac:	eeb0 0a48 	vmov.f32	s0, s16
 80117b0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80117b4:	f000 fa62 	bl	8011c7c <__ieee754_sqrtf>
 80117b8:	4b3f      	ldr	r3, [pc, #252]	; (80118b8 <__ieee754_asinf+0x1c0>)
 80117ba:	ee29 9a08 	vmul.f32	s18, s18, s16
 80117be:	429c      	cmp	r4, r3
 80117c0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80117c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80117c8:	dd3d      	ble.n	8011846 <__ieee754_asinf+0x14e>
 80117ca:	eea0 0a06 	vfma.f32	s0, s0, s12
 80117ce:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80118bc <__ieee754_asinf+0x1c4>
 80117d2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80117d6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8011888 <__ieee754_asinf+0x190>
 80117da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80117de:	2d00      	cmp	r5, #0
 80117e0:	bfd8      	it	le
 80117e2:	eeb1 0a40 	vnegle.f32	s0, s0
 80117e6:	e79b      	b.n	8011720 <__ieee754_asinf+0x28>
 80117e8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80117ec:	eddf 6a28 	vldr	s13, [pc, #160]	; 8011890 <__ieee754_asinf+0x198>
 80117f0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8011894 <__ieee754_asinf+0x19c>
 80117f4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80118a8 <__ieee754_asinf+0x1b0>
 80117f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80117fc:	eddf 6a27 	vldr	s13, [pc, #156]	; 801189c <__ieee754_asinf+0x1a4>
 8011800:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011804:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80118a0 <__ieee754_asinf+0x1a8>
 8011808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801180c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80118a4 <__ieee754_asinf+0x1ac>
 8011810:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011814:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8011898 <__ieee754_asinf+0x1a0>
 8011818:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801181c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80118ac <__ieee754_asinf+0x1b4>
 8011820:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011824:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80118b0 <__ieee754_asinf+0x1b8>
 8011828:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801182c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80118b4 <__ieee754_asinf+0x1bc>
 8011830:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011838:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801183c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011840:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011844:	e76c      	b.n	8011720 <__ieee754_asinf+0x28>
 8011846:	ee10 3a10 	vmov	r3, s0
 801184a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801184e:	f023 030f 	bic.w	r3, r3, #15
 8011852:	ee07 3a10 	vmov	s14, r3
 8011856:	eea7 8a47 	vfms.f32	s16, s14, s14
 801185a:	ee70 7a07 	vadd.f32	s15, s0, s14
 801185e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011862:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8011866:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011884 <__ieee754_asinf+0x18c>
 801186a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801186e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8011872:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80118c0 <__ieee754_asinf+0x1c8>
 8011876:	eeb0 6a40 	vmov.f32	s12, s0
 801187a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801187e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011882:	e7aa      	b.n	80117da <__ieee754_asinf+0xe2>
 8011884:	b33bbd2e 	.word	0xb33bbd2e
 8011888:	3fc90fdb 	.word	0x3fc90fdb
 801188c:	7149f2ca 	.word	0x7149f2ca
 8011890:	3811ef08 	.word	0x3811ef08
 8011894:	3a4f7f04 	.word	0x3a4f7f04
 8011898:	3e2aaaab 	.word	0x3e2aaaab
 801189c:	bd241146 	.word	0xbd241146
 80118a0:	3e4e0aa8 	.word	0x3e4e0aa8
 80118a4:	bea6b090 	.word	0xbea6b090
 80118a8:	3d9dc62e 	.word	0x3d9dc62e
 80118ac:	bf303361 	.word	0xbf303361
 80118b0:	4001572d 	.word	0x4001572d
 80118b4:	c019d139 	.word	0xc019d139
 80118b8:	3f799999 	.word	0x3f799999
 80118bc:	333bbd2e 	.word	0x333bbd2e
 80118c0:	3f490fdb 	.word	0x3f490fdb

080118c4 <__ieee754_atan2f>:
 80118c4:	ee10 2a90 	vmov	r2, s1
 80118c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80118cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80118d0:	b510      	push	{r4, lr}
 80118d2:	eef0 7a40 	vmov.f32	s15, s0
 80118d6:	dc06      	bgt.n	80118e6 <__ieee754_atan2f+0x22>
 80118d8:	ee10 0a10 	vmov	r0, s0
 80118dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80118e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80118e4:	dd04      	ble.n	80118f0 <__ieee754_atan2f+0x2c>
 80118e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80118ea:	eeb0 0a67 	vmov.f32	s0, s15
 80118ee:	bd10      	pop	{r4, pc}
 80118f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80118f4:	d103      	bne.n	80118fe <__ieee754_atan2f+0x3a>
 80118f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118fa:	f000 bf6b 	b.w	80127d4 <atanf>
 80118fe:	1794      	asrs	r4, r2, #30
 8011900:	f004 0402 	and.w	r4, r4, #2
 8011904:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011908:	b943      	cbnz	r3, 801191c <__ieee754_atan2f+0x58>
 801190a:	2c02      	cmp	r4, #2
 801190c:	d05e      	beq.n	80119cc <__ieee754_atan2f+0x108>
 801190e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80119e0 <__ieee754_atan2f+0x11c>
 8011912:	2c03      	cmp	r4, #3
 8011914:	bf08      	it	eq
 8011916:	eef0 7a47 	vmoveq.f32	s15, s14
 801191a:	e7e6      	b.n	80118ea <__ieee754_atan2f+0x26>
 801191c:	b941      	cbnz	r1, 8011930 <__ieee754_atan2f+0x6c>
 801191e:	eddf 7a31 	vldr	s15, [pc, #196]	; 80119e4 <__ieee754_atan2f+0x120>
 8011922:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80119e8 <__ieee754_atan2f+0x124>
 8011926:	2800      	cmp	r0, #0
 8011928:	bfb8      	it	lt
 801192a:	eef0 7a40 	vmovlt.f32	s15, s0
 801192e:	e7dc      	b.n	80118ea <__ieee754_atan2f+0x26>
 8011930:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011934:	d110      	bne.n	8011958 <__ieee754_atan2f+0x94>
 8011936:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801193a:	f104 34ff 	add.w	r4, r4, #4294967295
 801193e:	d107      	bne.n	8011950 <__ieee754_atan2f+0x8c>
 8011940:	2c02      	cmp	r4, #2
 8011942:	d846      	bhi.n	80119d2 <__ieee754_atan2f+0x10e>
 8011944:	4b29      	ldr	r3, [pc, #164]	; (80119ec <__ieee754_atan2f+0x128>)
 8011946:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801194a:	edd4 7a00 	vldr	s15, [r4]
 801194e:	e7cc      	b.n	80118ea <__ieee754_atan2f+0x26>
 8011950:	2c02      	cmp	r4, #2
 8011952:	d841      	bhi.n	80119d8 <__ieee754_atan2f+0x114>
 8011954:	4b26      	ldr	r3, [pc, #152]	; (80119f0 <__ieee754_atan2f+0x12c>)
 8011956:	e7f6      	b.n	8011946 <__ieee754_atan2f+0x82>
 8011958:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801195c:	d0df      	beq.n	801191e <__ieee754_atan2f+0x5a>
 801195e:	1a5b      	subs	r3, r3, r1
 8011960:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8011964:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011968:	da1a      	bge.n	80119a0 <__ieee754_atan2f+0xdc>
 801196a:	2a00      	cmp	r2, #0
 801196c:	da01      	bge.n	8011972 <__ieee754_atan2f+0xae>
 801196e:	313c      	adds	r1, #60	; 0x3c
 8011970:	db19      	blt.n	80119a6 <__ieee754_atan2f+0xe2>
 8011972:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011976:	f001 f801 	bl	801297c <fabsf>
 801197a:	f000 ff2b 	bl	80127d4 <atanf>
 801197e:	eef0 7a40 	vmov.f32	s15, s0
 8011982:	2c01      	cmp	r4, #1
 8011984:	d012      	beq.n	80119ac <__ieee754_atan2f+0xe8>
 8011986:	2c02      	cmp	r4, #2
 8011988:	d017      	beq.n	80119ba <__ieee754_atan2f+0xf6>
 801198a:	2c00      	cmp	r4, #0
 801198c:	d0ad      	beq.n	80118ea <__ieee754_atan2f+0x26>
 801198e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80119f4 <__ieee754_atan2f+0x130>
 8011992:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011996:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80119f8 <__ieee754_atan2f+0x134>
 801199a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801199e:	e7a4      	b.n	80118ea <__ieee754_atan2f+0x26>
 80119a0:	eddf 7a10 	vldr	s15, [pc, #64]	; 80119e4 <__ieee754_atan2f+0x120>
 80119a4:	e7ed      	b.n	8011982 <__ieee754_atan2f+0xbe>
 80119a6:	eddf 7a15 	vldr	s15, [pc, #84]	; 80119fc <__ieee754_atan2f+0x138>
 80119aa:	e7ea      	b.n	8011982 <__ieee754_atan2f+0xbe>
 80119ac:	ee17 3a90 	vmov	r3, s15
 80119b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80119b4:	ee07 3a90 	vmov	s15, r3
 80119b8:	e797      	b.n	80118ea <__ieee754_atan2f+0x26>
 80119ba:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80119f4 <__ieee754_atan2f+0x130>
 80119be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80119c2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80119f8 <__ieee754_atan2f+0x134>
 80119c6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80119ca:	e78e      	b.n	80118ea <__ieee754_atan2f+0x26>
 80119cc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80119f8 <__ieee754_atan2f+0x134>
 80119d0:	e78b      	b.n	80118ea <__ieee754_atan2f+0x26>
 80119d2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011a00 <__ieee754_atan2f+0x13c>
 80119d6:	e788      	b.n	80118ea <__ieee754_atan2f+0x26>
 80119d8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80119fc <__ieee754_atan2f+0x138>
 80119dc:	e785      	b.n	80118ea <__ieee754_atan2f+0x26>
 80119de:	bf00      	nop
 80119e0:	c0490fdb 	.word	0xc0490fdb
 80119e4:	3fc90fdb 	.word	0x3fc90fdb
 80119e8:	bfc90fdb 	.word	0xbfc90fdb
 80119ec:	08013078 	.word	0x08013078
 80119f0:	08013084 	.word	0x08013084
 80119f4:	33bbbd2e 	.word	0x33bbbd2e
 80119f8:	40490fdb 	.word	0x40490fdb
 80119fc:	00000000 	.word	0x00000000
 8011a00:	3f490fdb 	.word	0x3f490fdb

08011a04 <__ieee754_rem_pio2f>:
 8011a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a06:	ee10 6a10 	vmov	r6, s0
 8011a0a:	4b8e      	ldr	r3, [pc, #568]	; (8011c44 <__ieee754_rem_pio2f+0x240>)
 8011a0c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8011a10:	429d      	cmp	r5, r3
 8011a12:	b087      	sub	sp, #28
 8011a14:	eef0 7a40 	vmov.f32	s15, s0
 8011a18:	4604      	mov	r4, r0
 8011a1a:	dc05      	bgt.n	8011a28 <__ieee754_rem_pio2f+0x24>
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	ed80 0a00 	vstr	s0, [r0]
 8011a22:	6043      	str	r3, [r0, #4]
 8011a24:	2000      	movs	r0, #0
 8011a26:	e01a      	b.n	8011a5e <__ieee754_rem_pio2f+0x5a>
 8011a28:	4b87      	ldr	r3, [pc, #540]	; (8011c48 <__ieee754_rem_pio2f+0x244>)
 8011a2a:	429d      	cmp	r5, r3
 8011a2c:	dc46      	bgt.n	8011abc <__ieee754_rem_pio2f+0xb8>
 8011a2e:	2e00      	cmp	r6, #0
 8011a30:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8011c4c <__ieee754_rem_pio2f+0x248>
 8011a34:	4b86      	ldr	r3, [pc, #536]	; (8011c50 <__ieee754_rem_pio2f+0x24c>)
 8011a36:	f025 050f 	bic.w	r5, r5, #15
 8011a3a:	dd1f      	ble.n	8011a7c <__ieee754_rem_pio2f+0x78>
 8011a3c:	429d      	cmp	r5, r3
 8011a3e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a42:	d00e      	beq.n	8011a62 <__ieee754_rem_pio2f+0x5e>
 8011a44:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8011c54 <__ieee754_rem_pio2f+0x250>
 8011a48:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011a4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a50:	ed80 0a00 	vstr	s0, [r0]
 8011a54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a58:	2001      	movs	r0, #1
 8011a5a:	edc4 7a01 	vstr	s15, [r4, #4]
 8011a5e:	b007      	add	sp, #28
 8011a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a62:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8011c58 <__ieee754_rem_pio2f+0x254>
 8011a66:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8011c5c <__ieee754_rem_pio2f+0x258>
 8011a6a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a6e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011a72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011a76:	edc0 6a00 	vstr	s13, [r0]
 8011a7a:	e7eb      	b.n	8011a54 <__ieee754_rem_pio2f+0x50>
 8011a7c:	429d      	cmp	r5, r3
 8011a7e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011a82:	d00e      	beq.n	8011aa2 <__ieee754_rem_pio2f+0x9e>
 8011a84:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8011c54 <__ieee754_rem_pio2f+0x250>
 8011a88:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011a8c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a90:	ed80 0a00 	vstr	s0, [r0]
 8011a94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a98:	f04f 30ff 	mov.w	r0, #4294967295
 8011a9c:	edc4 7a01 	vstr	s15, [r4, #4]
 8011aa0:	e7dd      	b.n	8011a5e <__ieee754_rem_pio2f+0x5a>
 8011aa2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8011c58 <__ieee754_rem_pio2f+0x254>
 8011aa6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8011c5c <__ieee754_rem_pio2f+0x258>
 8011aaa:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011aae:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011ab2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011ab6:	edc0 6a00 	vstr	s13, [r0]
 8011aba:	e7eb      	b.n	8011a94 <__ieee754_rem_pio2f+0x90>
 8011abc:	4b68      	ldr	r3, [pc, #416]	; (8011c60 <__ieee754_rem_pio2f+0x25c>)
 8011abe:	429d      	cmp	r5, r3
 8011ac0:	dc72      	bgt.n	8011ba8 <__ieee754_rem_pio2f+0x1a4>
 8011ac2:	f000 ff5b 	bl	801297c <fabsf>
 8011ac6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8011c64 <__ieee754_rem_pio2f+0x260>
 8011aca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011ace:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011ada:	ee17 0a90 	vmov	r0, s15
 8011ade:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8011c4c <__ieee754_rem_pio2f+0x248>
 8011ae2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011ae6:	281f      	cmp	r0, #31
 8011ae8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8011c54 <__ieee754_rem_pio2f+0x250>
 8011aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011af0:	eeb1 6a47 	vneg.f32	s12, s14
 8011af4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011af8:	ee16 2a90 	vmov	r2, s13
 8011afc:	dc1c      	bgt.n	8011b38 <__ieee754_rem_pio2f+0x134>
 8011afe:	495a      	ldr	r1, [pc, #360]	; (8011c68 <__ieee754_rem_pio2f+0x264>)
 8011b00:	1e47      	subs	r7, r0, #1
 8011b02:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8011b06:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8011b0a:	428b      	cmp	r3, r1
 8011b0c:	d014      	beq.n	8011b38 <__ieee754_rem_pio2f+0x134>
 8011b0e:	6022      	str	r2, [r4, #0]
 8011b10:	ed94 7a00 	vldr	s14, [r4]
 8011b14:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011b18:	2e00      	cmp	r6, #0
 8011b1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011b1e:	ed84 0a01 	vstr	s0, [r4, #4]
 8011b22:	da9c      	bge.n	8011a5e <__ieee754_rem_pio2f+0x5a>
 8011b24:	eeb1 7a47 	vneg.f32	s14, s14
 8011b28:	eeb1 0a40 	vneg.f32	s0, s0
 8011b2c:	ed84 7a00 	vstr	s14, [r4]
 8011b30:	ed84 0a01 	vstr	s0, [r4, #4]
 8011b34:	4240      	negs	r0, r0
 8011b36:	e792      	b.n	8011a5e <__ieee754_rem_pio2f+0x5a>
 8011b38:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011b3c:	15eb      	asrs	r3, r5, #23
 8011b3e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8011b42:	2d08      	cmp	r5, #8
 8011b44:	dde3      	ble.n	8011b0e <__ieee754_rem_pio2f+0x10a>
 8011b46:	eddf 7a44 	vldr	s15, [pc, #272]	; 8011c58 <__ieee754_rem_pio2f+0x254>
 8011b4a:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011c5c <__ieee754_rem_pio2f+0x258>
 8011b4e:	eef0 6a40 	vmov.f32	s13, s0
 8011b52:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011b56:	ee30 0a66 	vsub.f32	s0, s0, s13
 8011b5a:	eea6 0a27 	vfma.f32	s0, s12, s15
 8011b5e:	eef0 7a40 	vmov.f32	s15, s0
 8011b62:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011b66:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011b6a:	ee15 2a90 	vmov	r2, s11
 8011b6e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011b72:	1a5b      	subs	r3, r3, r1
 8011b74:	2b19      	cmp	r3, #25
 8011b76:	dc04      	bgt.n	8011b82 <__ieee754_rem_pio2f+0x17e>
 8011b78:	edc4 5a00 	vstr	s11, [r4]
 8011b7c:	eeb0 0a66 	vmov.f32	s0, s13
 8011b80:	e7c6      	b.n	8011b10 <__ieee754_rem_pio2f+0x10c>
 8011b82:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8011c6c <__ieee754_rem_pio2f+0x268>
 8011b86:	eeb0 0a66 	vmov.f32	s0, s13
 8011b8a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011b8e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011b92:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011c70 <__ieee754_rem_pio2f+0x26c>
 8011b96:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011b9a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011b9e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011ba2:	ed84 7a00 	vstr	s14, [r4]
 8011ba6:	e7b3      	b.n	8011b10 <__ieee754_rem_pio2f+0x10c>
 8011ba8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011bac:	db06      	blt.n	8011bbc <__ieee754_rem_pio2f+0x1b8>
 8011bae:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011bb2:	edc0 7a01 	vstr	s15, [r0, #4]
 8011bb6:	edc0 7a00 	vstr	s15, [r0]
 8011bba:	e733      	b.n	8011a24 <__ieee754_rem_pio2f+0x20>
 8011bbc:	15ea      	asrs	r2, r5, #23
 8011bbe:	3a86      	subs	r2, #134	; 0x86
 8011bc0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011bc4:	ee07 3a90 	vmov	s15, r3
 8011bc8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011bcc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011c74 <__ieee754_rem_pio2f+0x270>
 8011bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011bd8:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011bdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011be0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011be8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011bec:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011bf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011bf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bfc:	edcd 7a05 	vstr	s15, [sp, #20]
 8011c00:	d11e      	bne.n	8011c40 <__ieee754_rem_pio2f+0x23c>
 8011c02:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0a:	bf14      	ite	ne
 8011c0c:	2302      	movne	r3, #2
 8011c0e:	2301      	moveq	r3, #1
 8011c10:	4919      	ldr	r1, [pc, #100]	; (8011c78 <__ieee754_rem_pio2f+0x274>)
 8011c12:	9101      	str	r1, [sp, #4]
 8011c14:	2102      	movs	r1, #2
 8011c16:	9100      	str	r1, [sp, #0]
 8011c18:	a803      	add	r0, sp, #12
 8011c1a:	4621      	mov	r1, r4
 8011c1c:	f000 f892 	bl	8011d44 <__kernel_rem_pio2f>
 8011c20:	2e00      	cmp	r6, #0
 8011c22:	f6bf af1c 	bge.w	8011a5e <__ieee754_rem_pio2f+0x5a>
 8011c26:	edd4 7a00 	vldr	s15, [r4]
 8011c2a:	eef1 7a67 	vneg.f32	s15, s15
 8011c2e:	edc4 7a00 	vstr	s15, [r4]
 8011c32:	edd4 7a01 	vldr	s15, [r4, #4]
 8011c36:	eef1 7a67 	vneg.f32	s15, s15
 8011c3a:	edc4 7a01 	vstr	s15, [r4, #4]
 8011c3e:	e779      	b.n	8011b34 <__ieee754_rem_pio2f+0x130>
 8011c40:	2303      	movs	r3, #3
 8011c42:	e7e5      	b.n	8011c10 <__ieee754_rem_pio2f+0x20c>
 8011c44:	3f490fd8 	.word	0x3f490fd8
 8011c48:	4016cbe3 	.word	0x4016cbe3
 8011c4c:	3fc90f80 	.word	0x3fc90f80
 8011c50:	3fc90fd0 	.word	0x3fc90fd0
 8011c54:	37354443 	.word	0x37354443
 8011c58:	37354400 	.word	0x37354400
 8011c5c:	2e85a308 	.word	0x2e85a308
 8011c60:	43490f80 	.word	0x43490f80
 8011c64:	3f22f984 	.word	0x3f22f984
 8011c68:	08013090 	.word	0x08013090
 8011c6c:	2e85a300 	.word	0x2e85a300
 8011c70:	248d3132 	.word	0x248d3132
 8011c74:	43800000 	.word	0x43800000
 8011c78:	08013110 	.word	0x08013110

08011c7c <__ieee754_sqrtf>:
 8011c7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011c80:	4770      	bx	lr
	...

08011c84 <__kernel_cosf>:
 8011c84:	ee10 3a10 	vmov	r3, s0
 8011c88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c8c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011c90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011c94:	da05      	bge.n	8011ca2 <__kernel_cosf+0x1e>
 8011c96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011c9a:	ee17 2a90 	vmov	r2, s15
 8011c9e:	2a00      	cmp	r2, #0
 8011ca0:	d03d      	beq.n	8011d1e <__kernel_cosf+0x9a>
 8011ca2:	ee60 5a00 	vmul.f32	s11, s0, s0
 8011ca6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011d24 <__kernel_cosf+0xa0>
 8011caa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011d28 <__kernel_cosf+0xa4>
 8011cae:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8011d2c <__kernel_cosf+0xa8>
 8011cb2:	4a1f      	ldr	r2, [pc, #124]	; (8011d30 <__kernel_cosf+0xac>)
 8011cb4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011d34 <__kernel_cosf+0xb0>
 8011cbe:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011cc2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8011d38 <__kernel_cosf+0xb4>
 8011cc6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8011cca:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8011d3c <__kernel_cosf+0xb8>
 8011cce:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011cd2:	eeb0 7a66 	vmov.f32	s14, s13
 8011cd6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8011cda:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011cde:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8011ce2:	ee67 6a25 	vmul.f32	s13, s14, s11
 8011ce6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8011cea:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011cee:	dc04      	bgt.n	8011cfa <__kernel_cosf+0x76>
 8011cf0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011cf4:	ee36 0a47 	vsub.f32	s0, s12, s14
 8011cf8:	4770      	bx	lr
 8011cfa:	4a11      	ldr	r2, [pc, #68]	; (8011d40 <__kernel_cosf+0xbc>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	bfda      	itte	le
 8011d00:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8011d04:	ee06 3a90 	vmovle	s13, r3
 8011d08:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8011d0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d10:	ee36 0a66 	vsub.f32	s0, s12, s13
 8011d14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d18:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d1c:	4770      	bx	lr
 8011d1e:	eeb0 0a46 	vmov.f32	s0, s12
 8011d22:	4770      	bx	lr
 8011d24:	ad47d74e 	.word	0xad47d74e
 8011d28:	310f74f6 	.word	0x310f74f6
 8011d2c:	3d2aaaab 	.word	0x3d2aaaab
 8011d30:	3e999999 	.word	0x3e999999
 8011d34:	b493f27c 	.word	0xb493f27c
 8011d38:	37d00d01 	.word	0x37d00d01
 8011d3c:	bab60b61 	.word	0xbab60b61
 8011d40:	3f480000 	.word	0x3f480000

08011d44 <__kernel_rem_pio2f>:
 8011d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d48:	ed2d 8b04 	vpush	{d8-d9}
 8011d4c:	b0d9      	sub	sp, #356	; 0x164
 8011d4e:	4688      	mov	r8, r1
 8011d50:	9002      	str	r0, [sp, #8]
 8011d52:	49bb      	ldr	r1, [pc, #748]	; (8012040 <__kernel_rem_pio2f+0x2fc>)
 8011d54:	9866      	ldr	r0, [sp, #408]	; 0x198
 8011d56:	9301      	str	r3, [sp, #4]
 8011d58:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8011d5c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8011d60:	1e59      	subs	r1, r3, #1
 8011d62:	1d13      	adds	r3, r2, #4
 8011d64:	db27      	blt.n	8011db6 <__kernel_rem_pio2f+0x72>
 8011d66:	f1b2 0b03 	subs.w	fp, r2, #3
 8011d6a:	bf48      	it	mi
 8011d6c:	f102 0b04 	addmi.w	fp, r2, #4
 8011d70:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8011d74:	1c45      	adds	r5, r0, #1
 8011d76:	00ec      	lsls	r4, r5, #3
 8011d78:	1a47      	subs	r7, r0, r1
 8011d7a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8012050 <__kernel_rem_pio2f+0x30c>
 8011d7e:	9403      	str	r4, [sp, #12]
 8011d80:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8011d84:	eb0a 0c01 	add.w	ip, sl, r1
 8011d88:	ae1c      	add	r6, sp, #112	; 0x70
 8011d8a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8011d8e:	2400      	movs	r4, #0
 8011d90:	4564      	cmp	r4, ip
 8011d92:	dd12      	ble.n	8011dba <__kernel_rem_pio2f+0x76>
 8011d94:	9b01      	ldr	r3, [sp, #4]
 8011d96:	ac1c      	add	r4, sp, #112	; 0x70
 8011d98:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8011d9c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8011da0:	f04f 0c00 	mov.w	ip, #0
 8011da4:	45d4      	cmp	ip, sl
 8011da6:	dc27      	bgt.n	8011df8 <__kernel_rem_pio2f+0xb4>
 8011da8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8011dac:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8012050 <__kernel_rem_pio2f+0x30c>
 8011db0:	4627      	mov	r7, r4
 8011db2:	2600      	movs	r6, #0
 8011db4:	e016      	b.n	8011de4 <__kernel_rem_pio2f+0xa0>
 8011db6:	2000      	movs	r0, #0
 8011db8:	e7dc      	b.n	8011d74 <__kernel_rem_pio2f+0x30>
 8011dba:	42e7      	cmn	r7, r4
 8011dbc:	bf5d      	ittte	pl
 8011dbe:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8011dc2:	ee07 3a90 	vmovpl	s15, r3
 8011dc6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011dca:	eef0 7a47 	vmovmi.f32	s15, s14
 8011dce:	ece6 7a01 	vstmia	r6!, {s15}
 8011dd2:	3401      	adds	r4, #1
 8011dd4:	e7dc      	b.n	8011d90 <__kernel_rem_pio2f+0x4c>
 8011dd6:	ecf9 6a01 	vldmia	r9!, {s13}
 8011dda:	ed97 7a00 	vldr	s14, [r7]
 8011dde:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011de2:	3601      	adds	r6, #1
 8011de4:	428e      	cmp	r6, r1
 8011de6:	f1a7 0704 	sub.w	r7, r7, #4
 8011dea:	ddf4      	ble.n	8011dd6 <__kernel_rem_pio2f+0x92>
 8011dec:	eceb 7a01 	vstmia	fp!, {s15}
 8011df0:	f10c 0c01 	add.w	ip, ip, #1
 8011df4:	3404      	adds	r4, #4
 8011df6:	e7d5      	b.n	8011da4 <__kernel_rem_pio2f+0x60>
 8011df8:	ab08      	add	r3, sp, #32
 8011dfa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8011dfe:	eddf 8a93 	vldr	s17, [pc, #588]	; 801204c <__kernel_rem_pio2f+0x308>
 8011e02:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8012048 <__kernel_rem_pio2f+0x304>
 8011e06:	9304      	str	r3, [sp, #16]
 8011e08:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8011e0c:	4656      	mov	r6, sl
 8011e0e:	00b3      	lsls	r3, r6, #2
 8011e10:	9305      	str	r3, [sp, #20]
 8011e12:	ab58      	add	r3, sp, #352	; 0x160
 8011e14:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8011e18:	ac08      	add	r4, sp, #32
 8011e1a:	ab44      	add	r3, sp, #272	; 0x110
 8011e1c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8011e20:	46a4      	mov	ip, r4
 8011e22:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8011e26:	4637      	mov	r7, r6
 8011e28:	2f00      	cmp	r7, #0
 8011e2a:	f1a0 0004 	sub.w	r0, r0, #4
 8011e2e:	dc4f      	bgt.n	8011ed0 <__kernel_rem_pio2f+0x18c>
 8011e30:	4628      	mov	r0, r5
 8011e32:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8011e36:	f000 fdeb 	bl	8012a10 <scalbnf>
 8011e3a:	eeb0 8a40 	vmov.f32	s16, s0
 8011e3e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8011e42:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011e46:	f000 fda1 	bl	801298c <floorf>
 8011e4a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8011e4e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011e52:	2d00      	cmp	r5, #0
 8011e54:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8011e58:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011e5c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8011e60:	ee17 9a90 	vmov	r9, s15
 8011e64:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011e68:	dd44      	ble.n	8011ef4 <__kernel_rem_pio2f+0x1b0>
 8011e6a:	f106 3cff 	add.w	ip, r6, #4294967295
 8011e6e:	ab08      	add	r3, sp, #32
 8011e70:	f1c5 0e08 	rsb	lr, r5, #8
 8011e74:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8011e78:	fa47 f00e 	asr.w	r0, r7, lr
 8011e7c:	4481      	add	r9, r0
 8011e7e:	fa00 f00e 	lsl.w	r0, r0, lr
 8011e82:	1a3f      	subs	r7, r7, r0
 8011e84:	f1c5 0007 	rsb	r0, r5, #7
 8011e88:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8011e8c:	4107      	asrs	r7, r0
 8011e8e:	2f00      	cmp	r7, #0
 8011e90:	dd3f      	ble.n	8011f12 <__kernel_rem_pio2f+0x1ce>
 8011e92:	f04f 0e00 	mov.w	lr, #0
 8011e96:	f109 0901 	add.w	r9, r9, #1
 8011e9a:	4673      	mov	r3, lr
 8011e9c:	4576      	cmp	r6, lr
 8011e9e:	dc6b      	bgt.n	8011f78 <__kernel_rem_pio2f+0x234>
 8011ea0:	2d00      	cmp	r5, #0
 8011ea2:	dd04      	ble.n	8011eae <__kernel_rem_pio2f+0x16a>
 8011ea4:	2d01      	cmp	r5, #1
 8011ea6:	d078      	beq.n	8011f9a <__kernel_rem_pio2f+0x256>
 8011ea8:	2d02      	cmp	r5, #2
 8011eaa:	f000 8081 	beq.w	8011fb0 <__kernel_rem_pio2f+0x26c>
 8011eae:	2f02      	cmp	r7, #2
 8011eb0:	d12f      	bne.n	8011f12 <__kernel_rem_pio2f+0x1ce>
 8011eb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011eb6:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011eba:	b353      	cbz	r3, 8011f12 <__kernel_rem_pio2f+0x1ce>
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8011ec2:	f000 fda5 	bl	8012a10 <scalbnf>
 8011ec6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8011eca:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011ece:	e020      	b.n	8011f12 <__kernel_rem_pio2f+0x1ce>
 8011ed0:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011ed4:	3f01      	subs	r7, #1
 8011ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ede:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011ee2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011ee6:	ecac 0a01 	vstmia	ip!, {s0}
 8011eea:	ed90 0a00 	vldr	s0, [r0]
 8011eee:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011ef2:	e799      	b.n	8011e28 <__kernel_rem_pio2f+0xe4>
 8011ef4:	d105      	bne.n	8011f02 <__kernel_rem_pio2f+0x1be>
 8011ef6:	1e70      	subs	r0, r6, #1
 8011ef8:	ab08      	add	r3, sp, #32
 8011efa:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8011efe:	11ff      	asrs	r7, r7, #7
 8011f00:	e7c5      	b.n	8011e8e <__kernel_rem_pio2f+0x14a>
 8011f02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011f06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f0e:	da31      	bge.n	8011f74 <__kernel_rem_pio2f+0x230>
 8011f10:	2700      	movs	r7, #0
 8011f12:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1a:	f040 809b 	bne.w	8012054 <__kernel_rem_pio2f+0x310>
 8011f1e:	1e74      	subs	r4, r6, #1
 8011f20:	46a4      	mov	ip, r4
 8011f22:	2000      	movs	r0, #0
 8011f24:	45d4      	cmp	ip, sl
 8011f26:	da4a      	bge.n	8011fbe <__kernel_rem_pio2f+0x27a>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d07a      	beq.n	8012022 <__kernel_rem_pio2f+0x2de>
 8011f2c:	ab08      	add	r3, sp, #32
 8011f2e:	3d08      	subs	r5, #8
 8011f30:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	f000 8081 	beq.w	801203c <__kernel_rem_pio2f+0x2f8>
 8011f3a:	4628      	mov	r0, r5
 8011f3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011f40:	00a5      	lsls	r5, r4, #2
 8011f42:	f000 fd65 	bl	8012a10 <scalbnf>
 8011f46:	aa44      	add	r2, sp, #272	; 0x110
 8011f48:	1d2b      	adds	r3, r5, #4
 8011f4a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801204c <__kernel_rem_pio2f+0x308>
 8011f4e:	18d1      	adds	r1, r2, r3
 8011f50:	4622      	mov	r2, r4
 8011f52:	2a00      	cmp	r2, #0
 8011f54:	f280 80ae 	bge.w	80120b4 <__kernel_rem_pio2f+0x370>
 8011f58:	4622      	mov	r2, r4
 8011f5a:	2a00      	cmp	r2, #0
 8011f5c:	f2c0 80cc 	blt.w	80120f8 <__kernel_rem_pio2f+0x3b4>
 8011f60:	a944      	add	r1, sp, #272	; 0x110
 8011f62:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8011f66:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8012044 <__kernel_rem_pio2f+0x300>
 8011f6a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8012050 <__kernel_rem_pio2f+0x30c>
 8011f6e:	2000      	movs	r0, #0
 8011f70:	1aa1      	subs	r1, r4, r2
 8011f72:	e0b6      	b.n	80120e2 <__kernel_rem_pio2f+0x39e>
 8011f74:	2702      	movs	r7, #2
 8011f76:	e78c      	b.n	8011e92 <__kernel_rem_pio2f+0x14e>
 8011f78:	6820      	ldr	r0, [r4, #0]
 8011f7a:	b94b      	cbnz	r3, 8011f90 <__kernel_rem_pio2f+0x24c>
 8011f7c:	b118      	cbz	r0, 8011f86 <__kernel_rem_pio2f+0x242>
 8011f7e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8011f82:	6020      	str	r0, [r4, #0]
 8011f84:	2001      	movs	r0, #1
 8011f86:	f10e 0e01 	add.w	lr, lr, #1
 8011f8a:	3404      	adds	r4, #4
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	e785      	b.n	8011e9c <__kernel_rem_pio2f+0x158>
 8011f90:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8011f94:	6020      	str	r0, [r4, #0]
 8011f96:	4618      	mov	r0, r3
 8011f98:	e7f5      	b.n	8011f86 <__kernel_rem_pio2f+0x242>
 8011f9a:	1e74      	subs	r4, r6, #1
 8011f9c:	a808      	add	r0, sp, #32
 8011f9e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011fa2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011fa6:	f10d 0c20 	add.w	ip, sp, #32
 8011faa:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8011fae:	e77e      	b.n	8011eae <__kernel_rem_pio2f+0x16a>
 8011fb0:	1e74      	subs	r4, r6, #1
 8011fb2:	a808      	add	r0, sp, #32
 8011fb4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011fb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8011fbc:	e7f3      	b.n	8011fa6 <__kernel_rem_pio2f+0x262>
 8011fbe:	ab08      	add	r3, sp, #32
 8011fc0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8011fc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011fc8:	4318      	orrs	r0, r3
 8011fca:	e7ab      	b.n	8011f24 <__kernel_rem_pio2f+0x1e0>
 8011fcc:	f10c 0c01 	add.w	ip, ip, #1
 8011fd0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8011fd4:	2c00      	cmp	r4, #0
 8011fd6:	d0f9      	beq.n	8011fcc <__kernel_rem_pio2f+0x288>
 8011fd8:	9b05      	ldr	r3, [sp, #20]
 8011fda:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8011fde:	eb0d 0003 	add.w	r0, sp, r3
 8011fe2:	9b01      	ldr	r3, [sp, #4]
 8011fe4:	18f4      	adds	r4, r6, r3
 8011fe6:	ab1c      	add	r3, sp, #112	; 0x70
 8011fe8:	1c77      	adds	r7, r6, #1
 8011fea:	384c      	subs	r0, #76	; 0x4c
 8011fec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011ff0:	4466      	add	r6, ip
 8011ff2:	42be      	cmp	r6, r7
 8011ff4:	f6ff af0b 	blt.w	8011e0e <__kernel_rem_pio2f+0xca>
 8011ff8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8011ffc:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012000:	ee07 3a90 	vmov	s15, r3
 8012004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012008:	f04f 0c00 	mov.w	ip, #0
 801200c:	ece4 7a01 	vstmia	r4!, {s15}
 8012010:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012050 <__kernel_rem_pio2f+0x30c>
 8012014:	46a1      	mov	r9, r4
 8012016:	458c      	cmp	ip, r1
 8012018:	dd07      	ble.n	801202a <__kernel_rem_pio2f+0x2e6>
 801201a:	ece0 7a01 	vstmia	r0!, {s15}
 801201e:	3701      	adds	r7, #1
 8012020:	e7e7      	b.n	8011ff2 <__kernel_rem_pio2f+0x2ae>
 8012022:	9804      	ldr	r0, [sp, #16]
 8012024:	f04f 0c01 	mov.w	ip, #1
 8012028:	e7d2      	b.n	8011fd0 <__kernel_rem_pio2f+0x28c>
 801202a:	ecfe 6a01 	vldmia	lr!, {s13}
 801202e:	ed39 7a01 	vldmdb	r9!, {s14}
 8012032:	f10c 0c01 	add.w	ip, ip, #1
 8012036:	eee6 7a87 	vfma.f32	s15, s13, s14
 801203a:	e7ec      	b.n	8012016 <__kernel_rem_pio2f+0x2d2>
 801203c:	3c01      	subs	r4, #1
 801203e:	e775      	b.n	8011f2c <__kernel_rem_pio2f+0x1e8>
 8012040:	08013454 	.word	0x08013454
 8012044:	08013428 	.word	0x08013428
 8012048:	43800000 	.word	0x43800000
 801204c:	3b800000 	.word	0x3b800000
 8012050:	00000000 	.word	0x00000000
 8012054:	9b03      	ldr	r3, [sp, #12]
 8012056:	eeb0 0a48 	vmov.f32	s0, s16
 801205a:	1a98      	subs	r0, r3, r2
 801205c:	f000 fcd8 	bl	8012a10 <scalbnf>
 8012060:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8012048 <__kernel_rem_pio2f+0x304>
 8012064:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206c:	db19      	blt.n	80120a2 <__kernel_rem_pio2f+0x35e>
 801206e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801204c <__kernel_rem_pio2f+0x308>
 8012072:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012076:	aa08      	add	r2, sp, #32
 8012078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801207c:	1c74      	adds	r4, r6, #1
 801207e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012082:	3508      	adds	r5, #8
 8012084:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801208c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012090:	ee10 3a10 	vmov	r3, s0
 8012094:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012098:	ee17 3a90 	vmov	r3, s15
 801209c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80120a0:	e74b      	b.n	8011f3a <__kernel_rem_pio2f+0x1f6>
 80120a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80120a6:	aa08      	add	r2, sp, #32
 80120a8:	ee10 3a10 	vmov	r3, s0
 80120ac:	4634      	mov	r4, r6
 80120ae:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80120b2:	e742      	b.n	8011f3a <__kernel_rem_pio2f+0x1f6>
 80120b4:	a808      	add	r0, sp, #32
 80120b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80120ba:	9001      	str	r0, [sp, #4]
 80120bc:	ee07 0a90 	vmov	s15, r0
 80120c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120c4:	3a01      	subs	r2, #1
 80120c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80120ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 80120ce:	ed61 7a01 	vstmdb	r1!, {s15}
 80120d2:	e73e      	b.n	8011f52 <__kernel_rem_pio2f+0x20e>
 80120d4:	ecfc 6a01 	vldmia	ip!, {s13}
 80120d8:	ecb6 7a01 	vldmia	r6!, {s14}
 80120dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80120e0:	3001      	adds	r0, #1
 80120e2:	4550      	cmp	r0, sl
 80120e4:	dc01      	bgt.n	80120ea <__kernel_rem_pio2f+0x3a6>
 80120e6:	4288      	cmp	r0, r1
 80120e8:	ddf4      	ble.n	80120d4 <__kernel_rem_pio2f+0x390>
 80120ea:	a858      	add	r0, sp, #352	; 0x160
 80120ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80120f0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80120f4:	3a01      	subs	r2, #1
 80120f6:	e730      	b.n	8011f5a <__kernel_rem_pio2f+0x216>
 80120f8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80120fa:	2a02      	cmp	r2, #2
 80120fc:	dc09      	bgt.n	8012112 <__kernel_rem_pio2f+0x3ce>
 80120fe:	2a00      	cmp	r2, #0
 8012100:	dc2a      	bgt.n	8012158 <__kernel_rem_pio2f+0x414>
 8012102:	d043      	beq.n	801218c <__kernel_rem_pio2f+0x448>
 8012104:	f009 0007 	and.w	r0, r9, #7
 8012108:	b059      	add	sp, #356	; 0x164
 801210a:	ecbd 8b04 	vpop	{d8-d9}
 801210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012112:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8012114:	2b03      	cmp	r3, #3
 8012116:	d1f5      	bne.n	8012104 <__kernel_rem_pio2f+0x3c0>
 8012118:	ab30      	add	r3, sp, #192	; 0xc0
 801211a:	442b      	add	r3, r5
 801211c:	461a      	mov	r2, r3
 801211e:	4619      	mov	r1, r3
 8012120:	4620      	mov	r0, r4
 8012122:	2800      	cmp	r0, #0
 8012124:	f1a1 0104 	sub.w	r1, r1, #4
 8012128:	dc51      	bgt.n	80121ce <__kernel_rem_pio2f+0x48a>
 801212a:	4621      	mov	r1, r4
 801212c:	2901      	cmp	r1, #1
 801212e:	f1a2 0204 	sub.w	r2, r2, #4
 8012132:	dc5c      	bgt.n	80121ee <__kernel_rem_pio2f+0x4aa>
 8012134:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8012050 <__kernel_rem_pio2f+0x30c>
 8012138:	3304      	adds	r3, #4
 801213a:	2c01      	cmp	r4, #1
 801213c:	dc67      	bgt.n	801220e <__kernel_rem_pio2f+0x4ca>
 801213e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012142:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012146:	2f00      	cmp	r7, #0
 8012148:	d167      	bne.n	801221a <__kernel_rem_pio2f+0x4d6>
 801214a:	edc8 6a00 	vstr	s13, [r8]
 801214e:	ed88 7a01 	vstr	s14, [r8, #4]
 8012152:	edc8 7a02 	vstr	s15, [r8, #8]
 8012156:	e7d5      	b.n	8012104 <__kernel_rem_pio2f+0x3c0>
 8012158:	aa30      	add	r2, sp, #192	; 0xc0
 801215a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8012050 <__kernel_rem_pio2f+0x30c>
 801215e:	4413      	add	r3, r2
 8012160:	4622      	mov	r2, r4
 8012162:	2a00      	cmp	r2, #0
 8012164:	da24      	bge.n	80121b0 <__kernel_rem_pio2f+0x46c>
 8012166:	b34f      	cbz	r7, 80121bc <__kernel_rem_pio2f+0x478>
 8012168:	eef1 7a47 	vneg.f32	s15, s14
 801216c:	edc8 7a00 	vstr	s15, [r8]
 8012170:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8012174:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012178:	aa31      	add	r2, sp, #196	; 0xc4
 801217a:	2301      	movs	r3, #1
 801217c:	429c      	cmp	r4, r3
 801217e:	da20      	bge.n	80121c2 <__kernel_rem_pio2f+0x47e>
 8012180:	b10f      	cbz	r7, 8012186 <__kernel_rem_pio2f+0x442>
 8012182:	eef1 7a67 	vneg.f32	s15, s15
 8012186:	edc8 7a01 	vstr	s15, [r8, #4]
 801218a:	e7bb      	b.n	8012104 <__kernel_rem_pio2f+0x3c0>
 801218c:	aa30      	add	r2, sp, #192	; 0xc0
 801218e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8012050 <__kernel_rem_pio2f+0x30c>
 8012192:	4413      	add	r3, r2
 8012194:	2c00      	cmp	r4, #0
 8012196:	da05      	bge.n	80121a4 <__kernel_rem_pio2f+0x460>
 8012198:	b10f      	cbz	r7, 801219e <__kernel_rem_pio2f+0x45a>
 801219a:	eef1 7a67 	vneg.f32	s15, s15
 801219e:	edc8 7a00 	vstr	s15, [r8]
 80121a2:	e7af      	b.n	8012104 <__kernel_rem_pio2f+0x3c0>
 80121a4:	ed33 7a01 	vldmdb	r3!, {s14}
 80121a8:	3c01      	subs	r4, #1
 80121aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121ae:	e7f1      	b.n	8012194 <__kernel_rem_pio2f+0x450>
 80121b0:	ed73 7a01 	vldmdb	r3!, {s15}
 80121b4:	3a01      	subs	r2, #1
 80121b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121ba:	e7d2      	b.n	8012162 <__kernel_rem_pio2f+0x41e>
 80121bc:	eef0 7a47 	vmov.f32	s15, s14
 80121c0:	e7d4      	b.n	801216c <__kernel_rem_pio2f+0x428>
 80121c2:	ecb2 7a01 	vldmia	r2!, {s14}
 80121c6:	3301      	adds	r3, #1
 80121c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121cc:	e7d6      	b.n	801217c <__kernel_rem_pio2f+0x438>
 80121ce:	edd1 7a00 	vldr	s15, [r1]
 80121d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80121d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80121da:	3801      	subs	r0, #1
 80121dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121e0:	ed81 7a00 	vstr	s14, [r1]
 80121e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121e8:	edc1 7a01 	vstr	s15, [r1, #4]
 80121ec:	e799      	b.n	8012122 <__kernel_rem_pio2f+0x3de>
 80121ee:	edd2 7a00 	vldr	s15, [r2]
 80121f2:	edd2 6a01 	vldr	s13, [r2, #4]
 80121f6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80121fa:	3901      	subs	r1, #1
 80121fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012200:	ed82 7a00 	vstr	s14, [r2]
 8012204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012208:	edc2 7a01 	vstr	s15, [r2, #4]
 801220c:	e78e      	b.n	801212c <__kernel_rem_pio2f+0x3e8>
 801220e:	ed33 7a01 	vldmdb	r3!, {s14}
 8012212:	3c01      	subs	r4, #1
 8012214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012218:	e78f      	b.n	801213a <__kernel_rem_pio2f+0x3f6>
 801221a:	eef1 6a66 	vneg.f32	s13, s13
 801221e:	eeb1 7a47 	vneg.f32	s14, s14
 8012222:	edc8 6a00 	vstr	s13, [r8]
 8012226:	ed88 7a01 	vstr	s14, [r8, #4]
 801222a:	eef1 7a67 	vneg.f32	s15, s15
 801222e:	e790      	b.n	8012152 <__kernel_rem_pio2f+0x40e>

08012230 <__kernel_sinf>:
 8012230:	ee10 3a10 	vmov	r3, s0
 8012234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012238:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801223c:	da04      	bge.n	8012248 <__kernel_sinf+0x18>
 801223e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012242:	ee17 3a90 	vmov	r3, s15
 8012246:	b35b      	cbz	r3, 80122a0 <__kernel_sinf+0x70>
 8012248:	ee20 7a00 	vmul.f32	s14, s0, s0
 801224c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80122a4 <__kernel_sinf+0x74>
 8012250:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80122a8 <__kernel_sinf+0x78>
 8012254:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012258:	eddf 7a14 	vldr	s15, [pc, #80]	; 80122ac <__kernel_sinf+0x7c>
 801225c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012260:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80122b0 <__kernel_sinf+0x80>
 8012264:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012268:	eddf 7a12 	vldr	s15, [pc, #72]	; 80122b4 <__kernel_sinf+0x84>
 801226c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012270:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012274:	b930      	cbnz	r0, 8012284 <__kernel_sinf+0x54>
 8012276:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80122b8 <__kernel_sinf+0x88>
 801227a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801227e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012282:	4770      	bx	lr
 8012284:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012288:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801228c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012290:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012294:	eddf 7a09 	vldr	s15, [pc, #36]	; 80122bc <__kernel_sinf+0x8c>
 8012298:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801229c:	ee30 0a60 	vsub.f32	s0, s0, s1
 80122a0:	4770      	bx	lr
 80122a2:	bf00      	nop
 80122a4:	2f2ec9d3 	.word	0x2f2ec9d3
 80122a8:	b2d72f34 	.word	0xb2d72f34
 80122ac:	3638ef1b 	.word	0x3638ef1b
 80122b0:	b9500d01 	.word	0xb9500d01
 80122b4:	3c088889 	.word	0x3c088889
 80122b8:	be2aaaab 	.word	0xbe2aaaab
 80122bc:	3e2aaaab 	.word	0x3e2aaaab

080122c0 <__kernel_tanf>:
 80122c0:	b508      	push	{r3, lr}
 80122c2:	ee10 3a10 	vmov	r3, s0
 80122c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80122ca:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80122ce:	eef0 7a40 	vmov.f32	s15, s0
 80122d2:	da17      	bge.n	8012304 <__kernel_tanf+0x44>
 80122d4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80122d8:	ee17 1a10 	vmov	r1, s14
 80122dc:	bb41      	cbnz	r1, 8012330 <__kernel_tanf+0x70>
 80122de:	1c43      	adds	r3, r0, #1
 80122e0:	4313      	orrs	r3, r2
 80122e2:	d108      	bne.n	80122f6 <__kernel_tanf+0x36>
 80122e4:	f000 fb4a 	bl	801297c <fabsf>
 80122e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80122f0:	eeb0 0a67 	vmov.f32	s0, s15
 80122f4:	bd08      	pop	{r3, pc}
 80122f6:	2801      	cmp	r0, #1
 80122f8:	d0fa      	beq.n	80122f0 <__kernel_tanf+0x30>
 80122fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80122fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012302:	e7f5      	b.n	80122f0 <__kernel_tanf+0x30>
 8012304:	494c      	ldr	r1, [pc, #304]	; (8012438 <__kernel_tanf+0x178>)
 8012306:	428a      	cmp	r2, r1
 8012308:	db12      	blt.n	8012330 <__kernel_tanf+0x70>
 801230a:	2b00      	cmp	r3, #0
 801230c:	bfb8      	it	lt
 801230e:	eef1 7a40 	vneglt.f32	s15, s0
 8012312:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801243c <__kernel_tanf+0x17c>
 8012316:	ee70 7a67 	vsub.f32	s15, s0, s15
 801231a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8012440 <__kernel_tanf+0x180>
 801231e:	bfb8      	it	lt
 8012320:	eef1 0a60 	vneglt.f32	s1, s1
 8012324:	ee70 0a60 	vsub.f32	s1, s0, s1
 8012328:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801232c:	eddf 0a45 	vldr	s1, [pc, #276]	; 8012444 <__kernel_tanf+0x184>
 8012330:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012448 <__kernel_tanf+0x188>
 8012334:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801244c <__kernel_tanf+0x18c>
 8012338:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8012450 <__kernel_tanf+0x190>
 801233c:	493e      	ldr	r1, [pc, #248]	; (8012438 <__kernel_tanf+0x178>)
 801233e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012342:	428a      	cmp	r2, r1
 8012344:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012348:	eea7 6a25 	vfma.f32	s12, s14, s11
 801234c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8012454 <__kernel_tanf+0x194>
 8012350:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012354:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8012458 <__kernel_tanf+0x198>
 8012358:	eea5 6a87 	vfma.f32	s12, s11, s14
 801235c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801245c <__kernel_tanf+0x19c>
 8012360:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012364:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8012460 <__kernel_tanf+0x1a0>
 8012368:	eea5 6a87 	vfma.f32	s12, s11, s14
 801236c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8012464 <__kernel_tanf+0x1a4>
 8012370:	eee7 5a05 	vfma.f32	s11, s14, s10
 8012374:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8012468 <__kernel_tanf+0x1a8>
 8012378:	eea5 5a87 	vfma.f32	s10, s11, s14
 801237c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801246c <__kernel_tanf+0x1ac>
 8012380:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012384:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8012470 <__kernel_tanf+0x1b0>
 8012388:	eea5 5a87 	vfma.f32	s10, s11, s14
 801238c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012474 <__kernel_tanf+0x1b4>
 8012390:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012394:	eeb0 7a46 	vmov.f32	s14, s12
 8012398:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801239c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80123a0:	eeb0 6a60 	vmov.f32	s12, s1
 80123a4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80123a8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012478 <__kernel_tanf+0x1b8>
 80123ac:	eee6 0a26 	vfma.f32	s1, s12, s13
 80123b0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80123b4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80123b8:	db1d      	blt.n	80123f6 <__kernel_tanf+0x136>
 80123ba:	ee06 0a90 	vmov	s13, r0
 80123be:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80123c2:	ee27 6a07 	vmul.f32	s12, s14, s14
 80123c6:	ee37 7a00 	vadd.f32	s14, s14, s0
 80123ca:	179b      	asrs	r3, r3, #30
 80123cc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80123d0:	f003 0302 	and.w	r3, r3, #2
 80123d4:	f1c3 0301 	rsb	r3, r3, #1
 80123d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80123dc:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80123e0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80123e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80123e8:	ee07 3a90 	vmov	s15, r3
 80123ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123f0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80123f4:	e77c      	b.n	80122f0 <__kernel_tanf+0x30>
 80123f6:	2801      	cmp	r0, #1
 80123f8:	d01b      	beq.n	8012432 <__kernel_tanf+0x172>
 80123fa:	4b20      	ldr	r3, [pc, #128]	; (801247c <__kernel_tanf+0x1bc>)
 80123fc:	ee17 2a10 	vmov	r2, s14
 8012400:	401a      	ands	r2, r3
 8012402:	ee06 2a10 	vmov	s12, r2
 8012406:	ee76 7a67 	vsub.f32	s15, s12, s15
 801240a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801240e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012412:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801241a:	ee16 2a90 	vmov	r2, s13
 801241e:	4013      	ands	r3, r2
 8012420:	ee07 3a90 	vmov	s15, r3
 8012424:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012428:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801242c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012430:	e75e      	b.n	80122f0 <__kernel_tanf+0x30>
 8012432:	eef0 7a47 	vmov.f32	s15, s14
 8012436:	e75b      	b.n	80122f0 <__kernel_tanf+0x30>
 8012438:	3f2ca140 	.word	0x3f2ca140
 801243c:	3f490fda 	.word	0x3f490fda
 8012440:	33222168 	.word	0x33222168
 8012444:	00000000 	.word	0x00000000
 8012448:	b79bae5f 	.word	0xb79bae5f
 801244c:	38a3f445 	.word	0x38a3f445
 8012450:	37d95384 	.word	0x37d95384
 8012454:	3a1a26c8 	.word	0x3a1a26c8
 8012458:	3b6b6916 	.word	0x3b6b6916
 801245c:	3cb327a4 	.word	0x3cb327a4
 8012460:	3e088889 	.word	0x3e088889
 8012464:	3895c07a 	.word	0x3895c07a
 8012468:	398137b9 	.word	0x398137b9
 801246c:	3abede48 	.word	0x3abede48
 8012470:	3c11371f 	.word	0x3c11371f
 8012474:	3d5d0dd1 	.word	0x3d5d0dd1
 8012478:	3eaaaaab 	.word	0x3eaaaaab
 801247c:	fffff000 	.word	0xfffff000

08012480 <atan>:
 8012480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012484:	ec55 4b10 	vmov	r4, r5, d0
 8012488:	4bc3      	ldr	r3, [pc, #780]	; (8012798 <atan+0x318>)
 801248a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801248e:	429e      	cmp	r6, r3
 8012490:	46ab      	mov	fp, r5
 8012492:	dd18      	ble.n	80124c6 <atan+0x46>
 8012494:	4bc1      	ldr	r3, [pc, #772]	; (801279c <atan+0x31c>)
 8012496:	429e      	cmp	r6, r3
 8012498:	dc01      	bgt.n	801249e <atan+0x1e>
 801249a:	d109      	bne.n	80124b0 <atan+0x30>
 801249c:	b144      	cbz	r4, 80124b0 <atan+0x30>
 801249e:	4622      	mov	r2, r4
 80124a0:	462b      	mov	r3, r5
 80124a2:	4620      	mov	r0, r4
 80124a4:	4629      	mov	r1, r5
 80124a6:	f7ed ff19 	bl	80002dc <__adddf3>
 80124aa:	4604      	mov	r4, r0
 80124ac:	460d      	mov	r5, r1
 80124ae:	e006      	b.n	80124be <atan+0x3e>
 80124b0:	f1bb 0f00 	cmp.w	fp, #0
 80124b4:	f300 8131 	bgt.w	801271a <atan+0x29a>
 80124b8:	a59b      	add	r5, pc, #620	; (adr r5, 8012728 <atan+0x2a8>)
 80124ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80124be:	ec45 4b10 	vmov	d0, r4, r5
 80124c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c6:	4bb6      	ldr	r3, [pc, #728]	; (80127a0 <atan+0x320>)
 80124c8:	429e      	cmp	r6, r3
 80124ca:	dc14      	bgt.n	80124f6 <atan+0x76>
 80124cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80124d0:	429e      	cmp	r6, r3
 80124d2:	dc0d      	bgt.n	80124f0 <atan+0x70>
 80124d4:	a396      	add	r3, pc, #600	; (adr r3, 8012730 <atan+0x2b0>)
 80124d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124da:	ee10 0a10 	vmov	r0, s0
 80124de:	4629      	mov	r1, r5
 80124e0:	f7ed fefc 	bl	80002dc <__adddf3>
 80124e4:	4baf      	ldr	r3, [pc, #700]	; (80127a4 <atan+0x324>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	f7ee fb3e 	bl	8000b68 <__aeabi_dcmpgt>
 80124ec:	2800      	cmp	r0, #0
 80124ee:	d1e6      	bne.n	80124be <atan+0x3e>
 80124f0:	f04f 3aff 	mov.w	sl, #4294967295
 80124f4:	e02b      	b.n	801254e <atan+0xce>
 80124f6:	f000 f963 	bl	80127c0 <fabs>
 80124fa:	4bab      	ldr	r3, [pc, #684]	; (80127a8 <atan+0x328>)
 80124fc:	429e      	cmp	r6, r3
 80124fe:	ec55 4b10 	vmov	r4, r5, d0
 8012502:	f300 80bf 	bgt.w	8012684 <atan+0x204>
 8012506:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801250a:	429e      	cmp	r6, r3
 801250c:	f300 80a0 	bgt.w	8012650 <atan+0x1d0>
 8012510:	ee10 2a10 	vmov	r2, s0
 8012514:	ee10 0a10 	vmov	r0, s0
 8012518:	462b      	mov	r3, r5
 801251a:	4629      	mov	r1, r5
 801251c:	f7ed fede 	bl	80002dc <__adddf3>
 8012520:	4ba0      	ldr	r3, [pc, #640]	; (80127a4 <atan+0x324>)
 8012522:	2200      	movs	r2, #0
 8012524:	f7ed fed8 	bl	80002d8 <__aeabi_dsub>
 8012528:	2200      	movs	r2, #0
 801252a:	4606      	mov	r6, r0
 801252c:	460f      	mov	r7, r1
 801252e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012532:	4620      	mov	r0, r4
 8012534:	4629      	mov	r1, r5
 8012536:	f7ed fed1 	bl	80002dc <__adddf3>
 801253a:	4602      	mov	r2, r0
 801253c:	460b      	mov	r3, r1
 801253e:	4630      	mov	r0, r6
 8012540:	4639      	mov	r1, r7
 8012542:	f7ee f9ab 	bl	800089c <__aeabi_ddiv>
 8012546:	f04f 0a00 	mov.w	sl, #0
 801254a:	4604      	mov	r4, r0
 801254c:	460d      	mov	r5, r1
 801254e:	4622      	mov	r2, r4
 8012550:	462b      	mov	r3, r5
 8012552:	4620      	mov	r0, r4
 8012554:	4629      	mov	r1, r5
 8012556:	f7ee f877 	bl	8000648 <__aeabi_dmul>
 801255a:	4602      	mov	r2, r0
 801255c:	460b      	mov	r3, r1
 801255e:	4680      	mov	r8, r0
 8012560:	4689      	mov	r9, r1
 8012562:	f7ee f871 	bl	8000648 <__aeabi_dmul>
 8012566:	a374      	add	r3, pc, #464	; (adr r3, 8012738 <atan+0x2b8>)
 8012568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256c:	4606      	mov	r6, r0
 801256e:	460f      	mov	r7, r1
 8012570:	f7ee f86a 	bl	8000648 <__aeabi_dmul>
 8012574:	a372      	add	r3, pc, #456	; (adr r3, 8012740 <atan+0x2c0>)
 8012576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257a:	f7ed feaf 	bl	80002dc <__adddf3>
 801257e:	4632      	mov	r2, r6
 8012580:	463b      	mov	r3, r7
 8012582:	f7ee f861 	bl	8000648 <__aeabi_dmul>
 8012586:	a370      	add	r3, pc, #448	; (adr r3, 8012748 <atan+0x2c8>)
 8012588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258c:	f7ed fea6 	bl	80002dc <__adddf3>
 8012590:	4632      	mov	r2, r6
 8012592:	463b      	mov	r3, r7
 8012594:	f7ee f858 	bl	8000648 <__aeabi_dmul>
 8012598:	a36d      	add	r3, pc, #436	; (adr r3, 8012750 <atan+0x2d0>)
 801259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259e:	f7ed fe9d 	bl	80002dc <__adddf3>
 80125a2:	4632      	mov	r2, r6
 80125a4:	463b      	mov	r3, r7
 80125a6:	f7ee f84f 	bl	8000648 <__aeabi_dmul>
 80125aa:	a36b      	add	r3, pc, #428	; (adr r3, 8012758 <atan+0x2d8>)
 80125ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b0:	f7ed fe94 	bl	80002dc <__adddf3>
 80125b4:	4632      	mov	r2, r6
 80125b6:	463b      	mov	r3, r7
 80125b8:	f7ee f846 	bl	8000648 <__aeabi_dmul>
 80125bc:	a368      	add	r3, pc, #416	; (adr r3, 8012760 <atan+0x2e0>)
 80125be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c2:	f7ed fe8b 	bl	80002dc <__adddf3>
 80125c6:	4642      	mov	r2, r8
 80125c8:	464b      	mov	r3, r9
 80125ca:	f7ee f83d 	bl	8000648 <__aeabi_dmul>
 80125ce:	a366      	add	r3, pc, #408	; (adr r3, 8012768 <atan+0x2e8>)
 80125d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d4:	4680      	mov	r8, r0
 80125d6:	4689      	mov	r9, r1
 80125d8:	4630      	mov	r0, r6
 80125da:	4639      	mov	r1, r7
 80125dc:	f7ee f834 	bl	8000648 <__aeabi_dmul>
 80125e0:	a363      	add	r3, pc, #396	; (adr r3, 8012770 <atan+0x2f0>)
 80125e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e6:	f7ed fe77 	bl	80002d8 <__aeabi_dsub>
 80125ea:	4632      	mov	r2, r6
 80125ec:	463b      	mov	r3, r7
 80125ee:	f7ee f82b 	bl	8000648 <__aeabi_dmul>
 80125f2:	a361      	add	r3, pc, #388	; (adr r3, 8012778 <atan+0x2f8>)
 80125f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f8:	f7ed fe6e 	bl	80002d8 <__aeabi_dsub>
 80125fc:	4632      	mov	r2, r6
 80125fe:	463b      	mov	r3, r7
 8012600:	f7ee f822 	bl	8000648 <__aeabi_dmul>
 8012604:	a35e      	add	r3, pc, #376	; (adr r3, 8012780 <atan+0x300>)
 8012606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260a:	f7ed fe65 	bl	80002d8 <__aeabi_dsub>
 801260e:	4632      	mov	r2, r6
 8012610:	463b      	mov	r3, r7
 8012612:	f7ee f819 	bl	8000648 <__aeabi_dmul>
 8012616:	a35c      	add	r3, pc, #368	; (adr r3, 8012788 <atan+0x308>)
 8012618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261c:	f7ed fe5c 	bl	80002d8 <__aeabi_dsub>
 8012620:	4632      	mov	r2, r6
 8012622:	463b      	mov	r3, r7
 8012624:	f7ee f810 	bl	8000648 <__aeabi_dmul>
 8012628:	4602      	mov	r2, r0
 801262a:	460b      	mov	r3, r1
 801262c:	4640      	mov	r0, r8
 801262e:	4649      	mov	r1, r9
 8012630:	f7ed fe54 	bl	80002dc <__adddf3>
 8012634:	4622      	mov	r2, r4
 8012636:	462b      	mov	r3, r5
 8012638:	f7ee f806 	bl	8000648 <__aeabi_dmul>
 801263c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012640:	4602      	mov	r2, r0
 8012642:	460b      	mov	r3, r1
 8012644:	d14b      	bne.n	80126de <atan+0x25e>
 8012646:	4620      	mov	r0, r4
 8012648:	4629      	mov	r1, r5
 801264a:	f7ed fe45 	bl	80002d8 <__aeabi_dsub>
 801264e:	e72c      	b.n	80124aa <atan+0x2a>
 8012650:	ee10 0a10 	vmov	r0, s0
 8012654:	4b53      	ldr	r3, [pc, #332]	; (80127a4 <atan+0x324>)
 8012656:	2200      	movs	r2, #0
 8012658:	4629      	mov	r1, r5
 801265a:	f7ed fe3d 	bl	80002d8 <__aeabi_dsub>
 801265e:	4b51      	ldr	r3, [pc, #324]	; (80127a4 <atan+0x324>)
 8012660:	4606      	mov	r6, r0
 8012662:	460f      	mov	r7, r1
 8012664:	2200      	movs	r2, #0
 8012666:	4620      	mov	r0, r4
 8012668:	4629      	mov	r1, r5
 801266a:	f7ed fe37 	bl	80002dc <__adddf3>
 801266e:	4602      	mov	r2, r0
 8012670:	460b      	mov	r3, r1
 8012672:	4630      	mov	r0, r6
 8012674:	4639      	mov	r1, r7
 8012676:	f7ee f911 	bl	800089c <__aeabi_ddiv>
 801267a:	f04f 0a01 	mov.w	sl, #1
 801267e:	4604      	mov	r4, r0
 8012680:	460d      	mov	r5, r1
 8012682:	e764      	b.n	801254e <atan+0xce>
 8012684:	4b49      	ldr	r3, [pc, #292]	; (80127ac <atan+0x32c>)
 8012686:	429e      	cmp	r6, r3
 8012688:	da1d      	bge.n	80126c6 <atan+0x246>
 801268a:	ee10 0a10 	vmov	r0, s0
 801268e:	4b48      	ldr	r3, [pc, #288]	; (80127b0 <atan+0x330>)
 8012690:	2200      	movs	r2, #0
 8012692:	4629      	mov	r1, r5
 8012694:	f7ed fe20 	bl	80002d8 <__aeabi_dsub>
 8012698:	4b45      	ldr	r3, [pc, #276]	; (80127b0 <atan+0x330>)
 801269a:	4606      	mov	r6, r0
 801269c:	460f      	mov	r7, r1
 801269e:	2200      	movs	r2, #0
 80126a0:	4620      	mov	r0, r4
 80126a2:	4629      	mov	r1, r5
 80126a4:	f7ed ffd0 	bl	8000648 <__aeabi_dmul>
 80126a8:	4b3e      	ldr	r3, [pc, #248]	; (80127a4 <atan+0x324>)
 80126aa:	2200      	movs	r2, #0
 80126ac:	f7ed fe16 	bl	80002dc <__adddf3>
 80126b0:	4602      	mov	r2, r0
 80126b2:	460b      	mov	r3, r1
 80126b4:	4630      	mov	r0, r6
 80126b6:	4639      	mov	r1, r7
 80126b8:	f7ee f8f0 	bl	800089c <__aeabi_ddiv>
 80126bc:	f04f 0a02 	mov.w	sl, #2
 80126c0:	4604      	mov	r4, r0
 80126c2:	460d      	mov	r5, r1
 80126c4:	e743      	b.n	801254e <atan+0xce>
 80126c6:	462b      	mov	r3, r5
 80126c8:	ee10 2a10 	vmov	r2, s0
 80126cc:	4939      	ldr	r1, [pc, #228]	; (80127b4 <atan+0x334>)
 80126ce:	2000      	movs	r0, #0
 80126d0:	f7ee f8e4 	bl	800089c <__aeabi_ddiv>
 80126d4:	f04f 0a03 	mov.w	sl, #3
 80126d8:	4604      	mov	r4, r0
 80126da:	460d      	mov	r5, r1
 80126dc:	e737      	b.n	801254e <atan+0xce>
 80126de:	4b36      	ldr	r3, [pc, #216]	; (80127b8 <atan+0x338>)
 80126e0:	4e36      	ldr	r6, [pc, #216]	; (80127bc <atan+0x33c>)
 80126e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80126e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80126ea:	e9da 2300 	ldrd	r2, r3, [sl]
 80126ee:	f7ed fdf3 	bl	80002d8 <__aeabi_dsub>
 80126f2:	4622      	mov	r2, r4
 80126f4:	462b      	mov	r3, r5
 80126f6:	f7ed fdef 	bl	80002d8 <__aeabi_dsub>
 80126fa:	4602      	mov	r2, r0
 80126fc:	460b      	mov	r3, r1
 80126fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012702:	f7ed fde9 	bl	80002d8 <__aeabi_dsub>
 8012706:	f1bb 0f00 	cmp.w	fp, #0
 801270a:	4604      	mov	r4, r0
 801270c:	460d      	mov	r5, r1
 801270e:	f6bf aed6 	bge.w	80124be <atan+0x3e>
 8012712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012716:	461d      	mov	r5, r3
 8012718:	e6d1      	b.n	80124be <atan+0x3e>
 801271a:	a51d      	add	r5, pc, #116	; (adr r5, 8012790 <atan+0x310>)
 801271c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012720:	e6cd      	b.n	80124be <atan+0x3e>
 8012722:	bf00      	nop
 8012724:	f3af 8000 	nop.w
 8012728:	54442d18 	.word	0x54442d18
 801272c:	bff921fb 	.word	0xbff921fb
 8012730:	8800759c 	.word	0x8800759c
 8012734:	7e37e43c 	.word	0x7e37e43c
 8012738:	e322da11 	.word	0xe322da11
 801273c:	3f90ad3a 	.word	0x3f90ad3a
 8012740:	24760deb 	.word	0x24760deb
 8012744:	3fa97b4b 	.word	0x3fa97b4b
 8012748:	a0d03d51 	.word	0xa0d03d51
 801274c:	3fb10d66 	.word	0x3fb10d66
 8012750:	c54c206e 	.word	0xc54c206e
 8012754:	3fb745cd 	.word	0x3fb745cd
 8012758:	920083ff 	.word	0x920083ff
 801275c:	3fc24924 	.word	0x3fc24924
 8012760:	5555550d 	.word	0x5555550d
 8012764:	3fd55555 	.word	0x3fd55555
 8012768:	2c6a6c2f 	.word	0x2c6a6c2f
 801276c:	bfa2b444 	.word	0xbfa2b444
 8012770:	52defd9a 	.word	0x52defd9a
 8012774:	3fadde2d 	.word	0x3fadde2d
 8012778:	af749a6d 	.word	0xaf749a6d
 801277c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012780:	fe231671 	.word	0xfe231671
 8012784:	3fbc71c6 	.word	0x3fbc71c6
 8012788:	9998ebc4 	.word	0x9998ebc4
 801278c:	3fc99999 	.word	0x3fc99999
 8012790:	54442d18 	.word	0x54442d18
 8012794:	3ff921fb 	.word	0x3ff921fb
 8012798:	440fffff 	.word	0x440fffff
 801279c:	7ff00000 	.word	0x7ff00000
 80127a0:	3fdbffff 	.word	0x3fdbffff
 80127a4:	3ff00000 	.word	0x3ff00000
 80127a8:	3ff2ffff 	.word	0x3ff2ffff
 80127ac:	40038000 	.word	0x40038000
 80127b0:	3ff80000 	.word	0x3ff80000
 80127b4:	bff00000 	.word	0xbff00000
 80127b8:	08013480 	.word	0x08013480
 80127bc:	08013460 	.word	0x08013460

080127c0 <fabs>:
 80127c0:	ec51 0b10 	vmov	r0, r1, d0
 80127c4:	ee10 2a10 	vmov	r2, s0
 80127c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80127cc:	ec43 2b10 	vmov	d0, r2, r3
 80127d0:	4770      	bx	lr
	...

080127d4 <atanf>:
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	ee10 5a10 	vmov	r5, s0
 80127da:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80127de:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80127e2:	eef0 7a40 	vmov.f32	s15, s0
 80127e6:	db10      	blt.n	801280a <atanf+0x36>
 80127e8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80127ec:	dd04      	ble.n	80127f8 <atanf+0x24>
 80127ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 80127f2:	eeb0 0a67 	vmov.f32	s0, s15
 80127f6:	bd38      	pop	{r3, r4, r5, pc}
 80127f8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012930 <atanf+0x15c>
 80127fc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012934 <atanf+0x160>
 8012800:	2d00      	cmp	r5, #0
 8012802:	bfd8      	it	le
 8012804:	eef0 7a40 	vmovle.f32	s15, s0
 8012808:	e7f3      	b.n	80127f2 <atanf+0x1e>
 801280a:	4b4b      	ldr	r3, [pc, #300]	; (8012938 <atanf+0x164>)
 801280c:	429c      	cmp	r4, r3
 801280e:	dc10      	bgt.n	8012832 <atanf+0x5e>
 8012810:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012814:	da0a      	bge.n	801282c <atanf+0x58>
 8012816:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801293c <atanf+0x168>
 801281a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801281e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012822:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282a:	dce2      	bgt.n	80127f2 <atanf+0x1e>
 801282c:	f04f 33ff 	mov.w	r3, #4294967295
 8012830:	e013      	b.n	801285a <atanf+0x86>
 8012832:	f000 f8a3 	bl	801297c <fabsf>
 8012836:	4b42      	ldr	r3, [pc, #264]	; (8012940 <atanf+0x16c>)
 8012838:	429c      	cmp	r4, r3
 801283a:	dc4f      	bgt.n	80128dc <atanf+0x108>
 801283c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012840:	429c      	cmp	r4, r3
 8012842:	dc41      	bgt.n	80128c8 <atanf+0xf4>
 8012844:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012848:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801284c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012850:	2300      	movs	r3, #0
 8012852:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012856:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801285a:	1c5a      	adds	r2, r3, #1
 801285c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012860:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012944 <atanf+0x170>
 8012864:	eddf 5a38 	vldr	s11, [pc, #224]	; 8012948 <atanf+0x174>
 8012868:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801294c <atanf+0x178>
 801286c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012870:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012874:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8012950 <atanf+0x17c>
 8012878:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801287c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8012954 <atanf+0x180>
 8012880:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012884:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012958 <atanf+0x184>
 8012888:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801288c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801295c <atanf+0x188>
 8012890:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012894:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8012960 <atanf+0x18c>
 8012898:	eea6 5a87 	vfma.f32	s10, s13, s14
 801289c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8012964 <atanf+0x190>
 80128a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80128a4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8012968 <atanf+0x194>
 80128a8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80128ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801296c <atanf+0x198>
 80128b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80128b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80128b8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80128bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80128c0:	d121      	bne.n	8012906 <atanf+0x132>
 80128c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128c6:	e794      	b.n	80127f2 <atanf+0x1e>
 80128c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80128cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80128d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80128d4:	2301      	movs	r3, #1
 80128d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80128da:	e7be      	b.n	801285a <atanf+0x86>
 80128dc:	4b24      	ldr	r3, [pc, #144]	; (8012970 <atanf+0x19c>)
 80128de:	429c      	cmp	r4, r3
 80128e0:	dc0b      	bgt.n	80128fa <atanf+0x126>
 80128e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80128e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80128ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80128ee:	2302      	movs	r3, #2
 80128f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80128f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80128f8:	e7af      	b.n	801285a <atanf+0x86>
 80128fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80128fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012902:	2303      	movs	r3, #3
 8012904:	e7a9      	b.n	801285a <atanf+0x86>
 8012906:	4a1b      	ldr	r2, [pc, #108]	; (8012974 <atanf+0x1a0>)
 8012908:	491b      	ldr	r1, [pc, #108]	; (8012978 <atanf+0x1a4>)
 801290a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801290e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012912:	ed93 0a00 	vldr	s0, [r3]
 8012916:	ee37 7a40 	vsub.f32	s14, s14, s0
 801291a:	ed92 0a00 	vldr	s0, [r2]
 801291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012922:	2d00      	cmp	r5, #0
 8012924:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012928:	bfb8      	it	lt
 801292a:	eef1 7a67 	vneglt.f32	s15, s15
 801292e:	e760      	b.n	80127f2 <atanf+0x1e>
 8012930:	3fc90fdb 	.word	0x3fc90fdb
 8012934:	bfc90fdb 	.word	0xbfc90fdb
 8012938:	3edfffff 	.word	0x3edfffff
 801293c:	7149f2ca 	.word	0x7149f2ca
 8012940:	3f97ffff 	.word	0x3f97ffff
 8012944:	3c8569d7 	.word	0x3c8569d7
 8012948:	3d4bda59 	.word	0x3d4bda59
 801294c:	bd6ef16b 	.word	0xbd6ef16b
 8012950:	3d886b35 	.word	0x3d886b35
 8012954:	3dba2e6e 	.word	0x3dba2e6e
 8012958:	3e124925 	.word	0x3e124925
 801295c:	3eaaaaab 	.word	0x3eaaaaab
 8012960:	bd15a221 	.word	0xbd15a221
 8012964:	bd9d8795 	.word	0xbd9d8795
 8012968:	bde38e38 	.word	0xbde38e38
 801296c:	be4ccccd 	.word	0xbe4ccccd
 8012970:	401bffff 	.word	0x401bffff
 8012974:	080134a0 	.word	0x080134a0
 8012978:	080134b0 	.word	0x080134b0

0801297c <fabsf>:
 801297c:	ee10 3a10 	vmov	r3, s0
 8012980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012984:	ee00 3a10 	vmov	s0, r3
 8012988:	4770      	bx	lr
	...

0801298c <floorf>:
 801298c:	ee10 3a10 	vmov	r3, s0
 8012990:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012994:	3a7f      	subs	r2, #127	; 0x7f
 8012996:	2a16      	cmp	r2, #22
 8012998:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801299c:	dc2a      	bgt.n	80129f4 <floorf+0x68>
 801299e:	2a00      	cmp	r2, #0
 80129a0:	da11      	bge.n	80129c6 <floorf+0x3a>
 80129a2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012a04 <floorf+0x78>
 80129a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80129aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80129ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b2:	dd05      	ble.n	80129c0 <floorf+0x34>
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	da23      	bge.n	8012a00 <floorf+0x74>
 80129b8:	4a13      	ldr	r2, [pc, #76]	; (8012a08 <floorf+0x7c>)
 80129ba:	2900      	cmp	r1, #0
 80129bc:	bf18      	it	ne
 80129be:	4613      	movne	r3, r2
 80129c0:	ee00 3a10 	vmov	s0, r3
 80129c4:	4770      	bx	lr
 80129c6:	4911      	ldr	r1, [pc, #68]	; (8012a0c <floorf+0x80>)
 80129c8:	4111      	asrs	r1, r2
 80129ca:	420b      	tst	r3, r1
 80129cc:	d0fa      	beq.n	80129c4 <floorf+0x38>
 80129ce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012a04 <floorf+0x78>
 80129d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80129d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80129da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129de:	ddef      	ble.n	80129c0 <floorf+0x34>
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	bfbe      	ittt	lt
 80129e4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80129e8:	fa40 f202 	asrlt.w	r2, r0, r2
 80129ec:	189b      	addlt	r3, r3, r2
 80129ee:	ea23 0301 	bic.w	r3, r3, r1
 80129f2:	e7e5      	b.n	80129c0 <floorf+0x34>
 80129f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80129f8:	d3e4      	bcc.n	80129c4 <floorf+0x38>
 80129fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80129fe:	4770      	bx	lr
 8012a00:	2300      	movs	r3, #0
 8012a02:	e7dd      	b.n	80129c0 <floorf+0x34>
 8012a04:	7149f2ca 	.word	0x7149f2ca
 8012a08:	bf800000 	.word	0xbf800000
 8012a0c:	007fffff 	.word	0x007fffff

08012a10 <scalbnf>:
 8012a10:	ee10 3a10 	vmov	r3, s0
 8012a14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012a18:	d025      	beq.n	8012a66 <scalbnf+0x56>
 8012a1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012a1e:	d302      	bcc.n	8012a26 <scalbnf+0x16>
 8012a20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012a24:	4770      	bx	lr
 8012a26:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012a2a:	d122      	bne.n	8012a72 <scalbnf+0x62>
 8012a2c:	4b2a      	ldr	r3, [pc, #168]	; (8012ad8 <scalbnf+0xc8>)
 8012a2e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012adc <scalbnf+0xcc>
 8012a32:	4298      	cmp	r0, r3
 8012a34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012a38:	db16      	blt.n	8012a68 <scalbnf+0x58>
 8012a3a:	ee10 3a10 	vmov	r3, s0
 8012a3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012a42:	3a19      	subs	r2, #25
 8012a44:	4402      	add	r2, r0
 8012a46:	2afe      	cmp	r2, #254	; 0xfe
 8012a48:	dd15      	ble.n	8012a76 <scalbnf+0x66>
 8012a4a:	ee10 3a10 	vmov	r3, s0
 8012a4e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012ae0 <scalbnf+0xd0>
 8012a52:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012ae4 <scalbnf+0xd4>
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	eeb0 7a67 	vmov.f32	s14, s15
 8012a5c:	bfb8      	it	lt
 8012a5e:	eef0 7a66 	vmovlt.f32	s15, s13
 8012a62:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012a66:	4770      	bx	lr
 8012a68:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012ae8 <scalbnf+0xd8>
 8012a6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012a70:	4770      	bx	lr
 8012a72:	0dd2      	lsrs	r2, r2, #23
 8012a74:	e7e6      	b.n	8012a44 <scalbnf+0x34>
 8012a76:	2a00      	cmp	r2, #0
 8012a78:	dd06      	ble.n	8012a88 <scalbnf+0x78>
 8012a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012a7e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012a82:	ee00 3a10 	vmov	s0, r3
 8012a86:	4770      	bx	lr
 8012a88:	f112 0f16 	cmn.w	r2, #22
 8012a8c:	da1a      	bge.n	8012ac4 <scalbnf+0xb4>
 8012a8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012a92:	4298      	cmp	r0, r3
 8012a94:	ee10 3a10 	vmov	r3, s0
 8012a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a9c:	dd0a      	ble.n	8012ab4 <scalbnf+0xa4>
 8012a9e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012ae0 <scalbnf+0xd0>
 8012aa2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012ae4 <scalbnf+0xd4>
 8012aa6:	eef0 7a40 	vmov.f32	s15, s0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	bf18      	it	ne
 8012aae:	eeb0 0a47 	vmovne.f32	s0, s14
 8012ab2:	e7db      	b.n	8012a6c <scalbnf+0x5c>
 8012ab4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012ae8 <scalbnf+0xd8>
 8012ab8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012aec <scalbnf+0xdc>
 8012abc:	eef0 7a40 	vmov.f32	s15, s0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	e7f3      	b.n	8012aac <scalbnf+0x9c>
 8012ac4:	3219      	adds	r2, #25
 8012ac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012aca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012ace:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012af0 <scalbnf+0xe0>
 8012ad2:	ee07 3a10 	vmov	s14, r3
 8012ad6:	e7c4      	b.n	8012a62 <scalbnf+0x52>
 8012ad8:	ffff3cb0 	.word	0xffff3cb0
 8012adc:	4c000000 	.word	0x4c000000
 8012ae0:	7149f2ca 	.word	0x7149f2ca
 8012ae4:	f149f2ca 	.word	0xf149f2ca
 8012ae8:	0da24260 	.word	0x0da24260
 8012aec:	8da24260 	.word	0x8da24260
 8012af0:	33000000 	.word	0x33000000

08012af4 <_init>:
 8012af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012af6:	bf00      	nop
 8012af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012afa:	bc08      	pop	{r3}
 8012afc:	469e      	mov	lr, r3
 8012afe:	4770      	bx	lr

08012b00 <_fini>:
 8012b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b02:	bf00      	nop
 8012b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b06:	bc08      	pop	{r3}
 8012b08:	469e      	mov	lr, r3
 8012b0a:	4770      	bx	lr
